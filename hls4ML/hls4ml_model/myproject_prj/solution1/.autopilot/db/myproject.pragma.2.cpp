# 1 "/home/nitish/Documents/hls4ML/hls4ml_model/myproject_prj/solution1/.autopilot/db/myproject.pragma.1.cpp"
# 1 "/home/nitish/Documents/hls4ML/hls4ml_model/myproject_prj/solution1/.autopilot/db/myproject.pragma.1.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 155 "<built-in>" 3
# 1 "<command line>" 1






# 1 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 157 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 8 "<command line>" 2
# 1 "<built-in>" 2
# 1 "/home/nitish/Documents/hls4ML/hls4ml_model/myproject_prj/solution1/.autopilot/db/myproject.pragma.1.cpp" 2
# 1 "firmware/myproject.cpp"
# 1 "firmware/myproject.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 155 "<built-in>" 3
# 1 "<command line>" 1






# 1 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 157 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 8 "<command line>" 2
# 1 "<built-in>" 2
# 1 "firmware/myproject.cpp" 2
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 1 3
# 37 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3
# 37 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 1 3
# 153 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 393 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 1 3
# 40 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 464 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 465 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 559 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 560 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 561 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 2 3
# 394 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 2 3


# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/cpu_defines.h" 1 3
# 397 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 2 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 1 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 1 3
# 37 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 3
# 37 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 1 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3


# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 1 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    class allocator;







  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;

  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;

  typedef basic_string<wchar_t> wstring;





  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;

  typedef basic_string<char16_t> u16string;
  typedef basic_string<char32_t> u32string;





}
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 1 3
# 40 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
# 40 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 119 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 31 "/usr/include/wchar.h" 2 3 4




# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 31 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 3 4
typedef __typeof__(((int*)0)-((int*)0)) ptrdiff_t;



typedef __typeof__(sizeof(int)) size_t;
# 55 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 3 4
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 36 "/usr/include/wchar.h" 2 3 4


# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 1 3 4
# 30 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 48 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 39 "/usr/include/wchar.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 41 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 2 3 4

typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 44 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 47 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 50 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) noexcept (true);


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) noexcept (true);



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) noexcept (true);

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) noexcept (true);




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) noexcept (true);



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) noexcept (true);







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) noexcept (true);




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) noexcept (true);


extern wchar_t *wcsdup (const wchar_t *__s) noexcept (true)
  __attribute__ ((__malloc__)) ;
# 165 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     noexcept (true) __attribute__ ((__pure__));
# 175 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     noexcept (true) __attribute__ ((__pure__));





extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     noexcept (true) __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     noexcept (true) __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     noexcept (true) __attribute__ ((__pure__));
# 202 "/usr/include/wchar.h" 3 4
extern wchar_t *wcspbrk (const wchar_t *__wcs, const wchar_t *__accept)
     noexcept (true) __attribute__ ((__pure__));
# 213 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsstr (const wchar_t *__haystack, const wchar_t *__needle)
     noexcept (true) __attribute__ ((__pure__));



extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) noexcept (true);


extern size_t wcslen (const wchar_t *__s) noexcept (true) __attribute__ ((__pure__));
# 234 "/usr/include/wchar.h" 3 4
extern wchar_t *wcswcs (const wchar_t *__haystack, const wchar_t *__needle)
     noexcept (true) __attribute__ ((__pure__));





extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     noexcept (true) __attribute__ ((__pure__));
# 254 "/usr/include/wchar.h" 3 4
extern wchar_t *wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)
     noexcept (true) __attribute__ ((__pure__));



extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) noexcept (true);



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     noexcept (true);


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) noexcept (true);




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     noexcept (true);





extern wint_t btowc (int __c) noexcept (true);



extern int wctob (wint_t __c) noexcept (true);



extern int mbsinit (const mbstate_t *__ps) noexcept (true) __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) noexcept (true);


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) noexcept (true);


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) noexcept (true);
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) noexcept (true);
# 338 "/usr/include/wchar.h" 3 4
extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) noexcept (true);



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) noexcept (true);





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) noexcept (true);



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) noexcept (true);






extern int wcwidth (wchar_t __c) noexcept (true);



extern int wcswidth (const wchar_t *__s, size_t __n) noexcept (true);





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) noexcept (true);



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);
# 397 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) noexcept (true);



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) noexcept (true);
# 412 "/usr/include/wchar.h" 3 4
extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);
# 429 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) noexcept (true);



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     noexcept (true);




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     noexcept (true);



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) noexcept (true);





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     noexcept (true);



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) noexcept (true);






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) noexcept (true);

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) noexcept (true);

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) noexcept (true);

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     noexcept (true);

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     noexcept (true);

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     noexcept (true);

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);
# 512 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) noexcept (true);



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) noexcept (true);
# 530 "/usr/include/wchar.h" 3 4
extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);
# 552 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) noexcept (true);



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     noexcept (true);
# 581 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) noexcept (true)
  __attribute__ ((__malloc__)) ;





extern int fwide (__FILE *__fp, int __mode) noexcept (true);






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     noexcept (true) ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     noexcept (true) ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     noexcept (true) ;
# 657 "/usr/include/wchar.h" 3 4
extern int fwscanf (__FILE *__restrict __stream, const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_fwscanf")


                                                          ;
extern int wscanf (const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_wscanf")

                                                          ;
extern int swscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, ...) noexcept (true) __asm__ ("" "__isoc99_swscanf")


                                                          ;
# 688 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     noexcept (true) ;







extern int vfwscanf (__FILE *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfwscanf")


                                                          ;
extern int vwscanf (const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vwscanf")

                                                          ;
extern int vswscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) noexcept (true) __asm__ ("" "__isoc99_vswscanf")


                                                          ;
# 744 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 799 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 825 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 835 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) noexcept (true);




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) noexcept (true);
# 875 "/usr/include/wchar.h" 3 4
}
# 46 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 2 3
# 63 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 136 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }



}







namespace __gnu_cxx
{





  using ::wcstold;
# 258 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
 using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 278 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 42 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 2 3
# 69 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
 typedef long streamoff;
# 99 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
 typedef ptrdiff_t streamsize;
# 112 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
 template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 134 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
 fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 42 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 75 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3
 class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 1 3
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
 class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 117 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
 bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{
# 142 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
 void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop





# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 1 3
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)




# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_defines.h" 1 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 2 3





extern "C++" {

namespace std
{




  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() throw();


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {




    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) throw();

      void _M_addref() throw();
      void _M_release() throw();

      void *_M_get() const throw() __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() throw();
      friend void std::rethrow_exception(exception_ptr);

    public:
      exception_ptr() throw();

      exception_ptr(const exception_ptr&) throw();


      exception_ptr(nullptr_t) throw()
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) throw()
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }







      exception_ptr&
      operator=(const exception_ptr&) throw();


      exception_ptr&
      operator=(exception_ptr&& __o) throw()
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() throw();

      void
      swap(exception_ptr&) throw();
# 132 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 3
 explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&) throw()
      __attribute__ ((__pure__));

      const class type_info*
      __cxa_exception_type() const throw() __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&) throw()
    __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&) throw()
    __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

  }



  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) throw()
    {
      if (true)
 {



 }
      if (false)
 {
   return current_exception();
 }
    }




  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) throw()
    { return std::copy_exception<_Ex>(__ex); }


}

}

#pragma GCC visibility pop
# 154 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/nested_exception.h" 1 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/nested_exception.h" 3
#pragma GCC visibility push(default)
# 45 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() throw() : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) = default;

    nested_exception& operator=(const nested_exception&) = default;

    virtual ~nested_exception();

    void
    rethrow_nested() const __attribute__ ((__noreturn__))
    { rethrow_exception(_M_ptr); }

    exception_ptr
    nested_ptr() const
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };

  template<typename _Ex>
    struct __get_nested_helper
    {
      static const nested_exception*
      _S_get(const _Ex& __ex)
      { return dynamic_cast<const nested_exception*>(&__ex); }
    };

  template<typename _Ex>
    struct __get_nested_helper<_Ex*>
    {
      static const nested_exception*
      _S_get(const _Ex* __ex)
      { return dynamic_cast<const nested_exception*>(__ex); }
    };

  template<typename _Ex>
    inline const nested_exception*
    __get_nested_exception(const _Ex& __ex)
    { return __get_nested_helper<_Ex>::_S_get(__ex); }

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, const nested_exception* = 0)
    __attribute__ ((__noreturn__));

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, ...) __attribute__ ((__noreturn__));




  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, const nested_exception*)
    { throw __ex; }

  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, ...)
    { throw _Nested_exception<_Ex>(static_cast<_Ex&&>(__ex)); }

  template<typename _Ex>
    void
    throw_with_nested(_Ex __ex) __attribute__ ((__noreturn__));



  template<typename _Ex>
    inline void
    throw_with_nested(_Ex __ex)
    {
      if (__get_nested_exception(__ex))
        throw __ex;
      __throw_with_nested(static_cast<_Ex&&>(__ex), &__ex);
    }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    {
      if (const nested_exception* __nested = __get_nested_exception(__ex))
        __nested->rethrow_nested();
    }


  inline void
  rethrow_if_nested(const nested_exception& __ex)
  { __ex.rethrow_nested(); }


}

}



#pragma GCC visibility pop
# 155 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 2 3
# 40 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 1 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 1 3
# 61 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functexcept.h" 1 3
# 43 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functexcept.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 62 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 1 3
# 36 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
# 36 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
# 68 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<typename _Iterator>
    class move_iterator;

  template<typename _Iterator>
    struct __is_move_iterator< move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



}
# 63 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 1 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 64 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 1 3
# 32 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
# 32 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 53 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
 template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 98 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
 template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 65 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 1 3
# 60 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 1 3
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 1 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 3
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r)
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


}




# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 1 3
# 32 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
# 32 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3







namespace std __attribute__ ((__visibility__ ("default")))
{






  struct __sfinae_types
  {
    typedef char __one;
    typedef struct { char __arr[2]; } __two;
  };
# 70 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
 template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() { return value; }
    };


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };
  template<> struct __is_void_helper<void> : public integral_constant<bool, true> { };




  template<typename _Tp>
    struct is_void
    : public integral_constant<bool, (__is_void_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };
  template<> struct __is_integral_helper<bool> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<char> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<signed char> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned char> : public integral_constant<bool, true> { };

  template<> struct __is_integral_helper<wchar_t> : public integral_constant<bool, true> { };

  template<> struct __is_integral_helper<char16_t> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<char32_t> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<short> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned short> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<int> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned int> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<long> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned long> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<long long> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned long long> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct is_integral
    : public integral_constant<bool, (__is_integral_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };
  template<> struct __is_floating_point_helper<float> : public integral_constant<bool, true> { };
  template<> struct __is_floating_point_helper<double> : public integral_constant<bool, true> { };
  template<> struct __is_floating_point_helper<long double> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct is_floating_point
    : public integral_constant<bool, (__is_floating_point_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };
  template<typename _Tp> struct __is_pointer_helper<_Tp*> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct is_pointer
    : public integral_constant<bool, (__is_pointer_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };


  template<typename _Tp>
    struct is_reference;


  template<typename _Tp>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };
  template<typename _Tp, typename _Cp> struct __is_member_object_pointer_helper<_Tp _Cp::*> : public integral_constant<bool, !is_function<_Tp>::value> { };



  template<typename _Tp>
    struct is_member_object_pointer
    : public integral_constant<bool, (__is_member_object_pointer_helper<
          typename remove_cv<_Tp>::type>::value)>
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };
  template<typename _Tp, typename _Cp> struct __is_member_function_pointer_helper<_Tp _Cp::*> : public integral_constant<bool, is_function<_Tp>::value> { };



  template<typename _Tp>
    struct is_member_function_pointer
    : public integral_constant<bool, (__is_member_function_pointer_helper<
          typename remove_cv<_Tp>::type>::value)>
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...)>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......)>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile>
    : public true_type { };

  template<typename>
    struct __is_nullptr_t_helper
    : public false_type { };
  template<> struct __is_nullptr_t_helper<std::nullptr_t> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public integral_constant<bool, (__is_nullptr_t_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };




  template<typename _Tp>
    struct is_arithmetic
    : public integral_constant<bool, (is_integral<_Tp>::value
          || is_floating_point<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_fundamental
    : public integral_constant<bool, (is_arithmetic<_Tp>::value
          || is_void<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_object
    : public integral_constant<bool, !(is_function<_Tp>::value
           || is_reference<_Tp>::value
           || is_void<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public integral_constant<bool, (is_arithmetic<_Tp>::value
          || is_enum<_Tp>::value
          || is_pointer<_Tp>::value
          || is_member_pointer<_Tp>::value
          || __is_nullptr_t<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };


  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };
  template<typename _Tp, typename _Cp> struct __is_member_pointer_helper<_Tp _Cp::*> : public integral_constant<bool, true> { };

  template<typename _Tp>
  struct is_member_pointer
    : public integral_constant<bool, (__is_member_pointer_helper<
          typename remove_cv<_Tp>::type>::value)>
    { };



  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };


  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };


  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };


  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint = 0>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };




  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };




  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };




  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };

  template<typename>
    struct remove_reference;


  template<typename _Tp>
    struct add_pointer
    { typedef typename remove_reference<_Tp>::type* type; };




  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };




  template<typename _Tp>
    struct is_reference
    : public integral_constant<bool, (is_lvalue_reference<_Tp>::value
          || is_rvalue_reference<_Tp>::value)>
    { };




  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp,
    bool = !is_reference<_Tp>::value && !is_void<_Tp>::value,
    bool = is_rvalue_reference<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true, false>
    { typedef _Tp& type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, false, true>
    { typedef typename remove_reference<_Tp>::type& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp,
    bool = !is_reference<_Tp>::value && !is_void<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp,
    bool = is_integral<_Tp>::value,
    bool = is_floating_point<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, false, true>
    : public true_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true, false>
    : public integral_constant<bool, static_cast<bool>(_Tp(-1) < _Tp(0))>
    { };


  template<typename _Tp>
    struct is_signed
    : public integral_constant<bool, __is_signed_helper<_Tp>::value>
    { };


  template<typename _Tp>
    struct is_unsigned
    : public integral_constant<bool, (is_arithmetic<_Tp>::value
          && !is_signed<_Tp>::value)>
    { };




  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };

  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename _Tp, typename... _Args>
    class __is_constructible_helper
    : public __sfinae_types
    {
      template<typename _Tp1, typename... _Args1>
        static decltype(_Tp1(declval<_Args1>()...), __one()) __test(int);

      template<typename, typename...>
        static __two __test(...);

    public:
      static const bool __value = sizeof(__test<_Tp, _Args...>(0)) == 1;
    };

  template<typename _Tp, typename _Arg>
    class __is_constructible_helper<_Tp, _Arg>
    : public __sfinae_types
    {
      template<typename _Tp1, typename _Arg1>
        static decltype(static_cast<_Tp1>(declval<_Arg1>()), __one())
 __test(int);

      template<typename, typename>
        static __two __test(...);

    public:
      static const bool __value = sizeof(__test<_Tp, _Arg>(0)) == 1;
    };




  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public integral_constant<bool,
          __is_constructible_helper<_Tp,
        _Args...>::__value>
    { };

  template<bool, typename _Tp, typename... _Args>
    struct __is_nt_constructible_helper
    { static const bool __value = false; };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_helper<true, _Tp, _Args...>
    { static const bool __value = noexcept(_Tp(declval<_Args>()...)); };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_helper<true, _Tp, _Arg>
    {
      static const bool __value = noexcept(static_cast<_Tp>(declval<_Arg>()));
    };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public integral_constant<bool,
   __is_nt_constructible_helper<is_constructible<_Tp, _Args...>::value,
           _Tp, _Args...>::__value>
    { };


  template<typename _Tp>
    struct has_trivial_default_constructor
    : public integral_constant<bool, __has_trivial_constructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_copy_constructor
    : public integral_constant<bool, __has_trivial_copy(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_copy_assign
    : public integral_constant<bool, __has_trivial_assign(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_destructor
    : public integral_constant<bool, __has_trivial_destructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_nothrow_default_constructor
    : public integral_constant<bool, __has_nothrow_constructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_nothrow_copy_constructor
    : public integral_constant<bool, __has_nothrow_copy(_Tp)>
    { };


  template<typename _Tp>
    struct has_nothrow_copy_assign
    : public integral_constant<bool, __has_nothrow_assign(_Tp)>
    { };




  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
    bool = (is_void<_From>::value || is_function<_To>::value
     || is_array<_To>::value)>
    struct __is_convertible_helper
    { static const bool __value = is_void<_To>::value; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    : public __sfinae_types
    {
      template<typename _To1>
        static void __test_aux(_To1);

      template<typename _From1, typename _To1>
        static decltype(__test_aux<_To1>(std::declval<_From1>()), __one())
 __test(int);

      template<typename, typename>
        static __two __test(...);

    public:
      static const bool __value = sizeof(__test<_From, _To>(0)) == 1;
    };




  template<typename _From, typename _To>
    struct is_convertible
    : public integral_constant<bool,
          __is_convertible_helper<_From, _To>::__value>
    { };


  template<typename _From, typename _To>
    struct is_explicitly_convertible
    : public is_constructible<_To, _From>
    { };

  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 819 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
 template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };





  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };





  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };




  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<const reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };



  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };



  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };



  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      typedef conditional<__b2, unsigned int, unsigned long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };



  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {

      typedef signed char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(signed short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(signed int);
      typedef conditional<__b2, signed int, signed long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, signed short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;


  template<typename... _Tp>
    struct common_type;

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    { typedef decltype(true ? declval<_Tp>() : declval<_Up>()) type; };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    {
      typedef typename
        common_type<typename common_type<_Tp, _Up>::type, _Vp...>::type type;
    };


  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }


  template<typename _Signature>
    class result_of;

  template<typename _MemPtr, typename _Arg>
    struct _Result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct _Result_of_memobj<_Res _Class::*, _Arg>
    {
    private:
      typedef _Res _Class::* _Func;

      template<typename _Tp>
 static _Tp _S_get(const _Class&);
      template<typename _Tp>
 static decltype(*std::declval<_Tp>()) _S_get(...);

    public:
      typedef
        decltype(_S_get<_Arg>(std::declval<_Arg>()).*std::declval<_Func>())
        __type;
    };

  template<typename _MemPtr, typename _Arg, typename... _ArgTypes>
    struct _Result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct _Result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
    private:
      typedef _Res _Class::* _Func;

      template<typename _Tp>
 static _Tp _S_get(const _Class&);
      template<typename _Tp>
 static decltype(*std::declval<_Tp>()) _S_get(...);

    public:
      typedef
        decltype((_S_get<_Arg>(std::declval<_Arg>()).*std::declval<_Func>())
            (std::declval<_Args>()...) )
        __type;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct _Result_of_impl;

  template<typename _Functor, typename... _ArgTypes>
    struct _Result_of_impl<false, false, _Functor, _ArgTypes...>
    {
      typedef
        decltype( std::declval<_Functor>()(std::declval<_ArgTypes>()...) )
        __type;
    };

  template<typename _MemPtr, typename _Arg>
    struct _Result_of_impl<true, false, _MemPtr, _Arg>
    : _Result_of_memobj<typename remove_reference<_MemPtr>::type, _Arg>
    {
      typedef typename _Result_of_memobj<
 typename remove_reference<_MemPtr>::type, _Arg>::__type
 __type;
    };

  template<typename _MemPtr, typename _Arg, typename... _ArgTypes>
    struct _Result_of_impl<false, true, _MemPtr, _Arg, _ArgTypes...>
    : _Result_of_memfun<typename remove_reference<_MemPtr>::type, _Arg,
                        _ArgTypes...>
    {
      typedef typename _Result_of_memfun<
 typename remove_reference<_MemPtr>::type, _Arg, _ArgTypes...>::__type
 __type;
    };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : _Result_of_impl<is_member_object_pointer<
                        typename remove_reference<_Functor>::type >::value,
                      is_member_function_pointer<
   typename remove_reference<_Functor>::type >::value,
        _Functor, _ArgTypes...>
    {
      typedef typename _Result_of_impl<
 is_member_object_pointer<
   typename remove_reference<_Functor>::type >::value,
        is_member_function_pointer<
   typename remove_reference<_Functor>::type >::value,
        _Functor, _ArgTypes...>::__type
 type;
    };
# 1266 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
}
# 54 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    inline _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t)
    { return static_cast<_Tp&&>(__t); }

  template<typename _Tp>
    inline _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t)
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }







  template<typename _Tp>
    inline typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
# 94 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
 template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r)
    { return std::__addressof(__r); }


}
# 109 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 120 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
 template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {



      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }



  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }


}
# 61 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{




  struct piecewise_construct_t { };


  constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();


  template<typename...>
    class tuple;

  template<int...>
    struct _Index_tuple;



  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      constexpr pair()
      : first(), second() { }


      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


      template<class _U1, class _U2>
 constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }


      constexpr pair(const pair&) = default;





      template<class _U1, class = typename
        std::enable_if<std::is_convertible<_U1, _T1>::value>::type>
 pair(_U1&& __x, const _T2& __y)
 : first(std::forward<_U1>(__x)), second(__y) { }

      template<class _U2, class = typename
        std::enable_if<std::is_convertible<_U2, _T2>::value>::type>
 pair(const _T1& __x, _U2&& __y)
 : first(__x), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
        std::enable_if<std::is_convertible<_U1, _T1>::value
         && std::is_convertible<_U2, _T2>::value>::type>
 pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2>
 pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<class... _Args1, class... _Args2>
 pair(piecewise_construct_t,
      tuple<_Args1...> __first, tuple<_Args2...> __second)
 : first(__cons<first_type>(std::move(__first))),
   second(__cons<second_type>(std::move(__second))) { }

      pair&
      operator=(const pair& __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(pair&& __p)
      {
 first = std::move(__p.first);
 second = std::move(__p.second);
 return *this;
      }

      template<class _U1, class _U2>
 pair&
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<class _U1, class _U2>
 pair&
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::move(__p.first);
   second = std::move(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename _Tp, typename... _Args>
 static _Tp
 __cons(tuple<_Args...>&&);

      template<typename _Tp, typename... _Args, int... _Indexes>
 static _Tp
 __do_cons(tuple<_Args...>&&, const _Index_tuple<_Indexes...>&);

    };


  template<class _T1, class _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<class _T1, class _T2>
    inline void
    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    { __x.swap(__y); }
# 259 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
 template<class _T1, class _T2>
    inline pair<typename __decay_and_strip<_T1>::__type,
  typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 277 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
}
# 66 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 1 3
# 63 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
# 63 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
 struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
 template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 142 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
template<typename _Tp> class __has_iterator_category_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::iterator_category>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_iterator_category : integral_constant<bool, __has_iterator_category_helper <typename remove_cv<_Tp>::type>::value> { };

  template<typename _Iterator,
    bool = __has_iterator_category<_Iterator>::value>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator, true>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 174 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
 template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }





  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };


}
# 67 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 1 3
# 63 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
# 63 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }
# 110 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
 template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      __i += __n;
    }
# 168 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
 template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _ForwardIterator>
    inline _ForwardIterator
    next(_ForwardIterator __x, typename
  iterator_traits<_ForwardIterator>::difference_type __n = 1)
    {
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {
      std::advance(__x, -__n);
      return __x;
    }




}
# 68 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 1 3
# 68 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 96 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }






      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 283 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>


    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())





    { return __y.base() - __x.base(); }
# 395 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 429 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 471 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 486 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 519 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 561 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 580 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 631 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 675 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 699 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 797 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}



namespace std __attribute__ ((__visibility__ ("default")))
{
# 923 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
 template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;
      typedef value_type&& reference;

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>
 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
      { return std::move(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline auto
    operator-(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(const _Iterator& __i)
    { return move_iterator<_Iterator>(__i); }




}
# 69 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/debug/debug.h" 1 3
# 47 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 71 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{





  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = std::move(*__a);
          *__a = std::move(*__b);
          *__b = std::move(__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 116 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;
# 135 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);
    }
# 157 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 185 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 208 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 231 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 252 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 442 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 475 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 611 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 647 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      __builtin_memset(__first, static_cast<unsigned char>(__tmp),
         __last - __first);
    }
# 713 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 773 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)
       * (__last1 - __first1));
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = (__is_integer<_ValueType1>::__value
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }


  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 typedef typename iterator_traits<_II1>::iterator_category _Category1;
 typedef typename iterator_traits<_II2>::iterator_category _Category2;
 typedef std::__lc_rai<_Category1, _Category2> __rai_type;

 __last1 = __rai_type::__newlast1(__first1, __last1,
      __first2, __last2);
 for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
      ++__first1, ++__first2)
   {
     if (*__first1 < *__first2)
       return true;
     if (*__first2 < *__first1)
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp(__first1, __first2,
      std::min(__len1, __len2));
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }
# 934 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;




                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }



  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 0; __n >>= 1)
 ++__k;
      return __k - 1;
    }

  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }
# 1008 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1040 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1071 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {

      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;




                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1105 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _II1, typename _II2, typename _Compare>
    bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;




                                                       ;
                                                       ;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1145 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1182 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }


}
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 43 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 58 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
 template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 83 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
 template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{
# 227 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
 template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}






# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 1 3
# 32 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
# 32 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
# 49 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 1 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 3
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 2 3
# 50 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 2 3
# 62 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 378 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 1 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3


# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 1 3
# 40 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3
# 40 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) noexcept (true);


extern struct lconv *localeconv (void) noexcept (true);
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) noexcept (true);
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) noexcept (true);



extern void freelocale (locale_t __dataset) noexcept (true);






extern locale_t uselocale (locale_t __dataset) noexcept (true);







}
# 44 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 2 3








namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3
 __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 42 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 2 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     noexcept (true) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     noexcept (true) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     noexcept (true) __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) noexcept (true);
extern int isalpha (int) noexcept (true);
extern int iscntrl (int) noexcept (true);
extern int isdigit (int) noexcept (true);
extern int islower (int) noexcept (true);
extern int isgraph (int) noexcept (true);
extern int isprint (int) noexcept (true);
extern int ispunct (int) noexcept (true);
extern int isspace (int) noexcept (true);
extern int isupper (int) noexcept (true);
extern int isxdigit (int) noexcept (true);



extern int tolower (int __c) noexcept (true);


extern int toupper (int __c) noexcept (true);




extern int isblank (int) noexcept (true);




extern int isctype (int __c, int __mask) noexcept (true);






extern int isascii (int __c) noexcept (true);



extern int toascii (int __c) noexcept (true);



extern int _toupper (int) noexcept (true);
extern int _tolower (int) noexcept (true);
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) noexcept (true);
extern int isalpha_l (int, locale_t) noexcept (true);
extern int iscntrl_l (int, locale_t) noexcept (true);
extern int isdigit_l (int, locale_t) noexcept (true);
extern int islower_l (int, locale_t) noexcept (true);
extern int isgraph_l (int, locale_t) noexcept (true);
extern int isprint_l (int, locale_t) noexcept (true);
extern int ispunct_l (int, locale_t) noexcept (true);
extern int isspace_l (int, locale_t) noexcept (true);
extern int isupper_l (int, locale_t) noexcept (true);
extern int isxdigit_l (int, locale_t) noexcept (true);

extern int isblank_l (int, locale_t) noexcept (true);



extern int __tolower_l (int __c, locale_t __l) noexcept (true);
extern int tolower_l (int __c, locale_t __l) noexcept (true);


extern int __toupper_l (int __c, locale_t __l) noexcept (true);
extern int toupper_l (int __c, locale_t __l) noexcept (true);
# 327 "/usr/include/ctype.h" 3 4
}
# 44 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 2 3
# 63 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 44 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 56 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3
 class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;


}
# 42 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 1 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 1 3
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 1 3
# 30 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 170 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 32 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 33 "/usr/include/sched.h" 2 3 4





typedef __pid_t pid_t;






# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) noexcept (true);


extern int unshare (int __flags) noexcept (true);


extern int sched_getcpu (void) noexcept (true);


extern int getcpu (unsigned int *, unsigned int *) noexcept (true);


extern int setns (int __fd, int __nstype) noexcept (true);


}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     noexcept (true);
extern cpu_set_t *__sched_cpualloc (size_t __count) noexcept (true) ;
extern void __sched_cpufree (cpu_set_t *__set) noexcept (true);

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     noexcept (true);


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) noexcept (true);


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) noexcept (true);


extern int sched_getscheduler (__pid_t __pid) noexcept (true);


extern int sched_yield (void) noexcept (true);


extern int sched_get_priority_max (int __algorithm) noexcept (true);


extern int sched_get_priority_min (int __algorithm) noexcept (true);



extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) noexcept (true);
# 130 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) noexcept (true);


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) noexcept (true);


}
# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 23 "/usr/include/x86_64-linux-gnu/bits/timex.h" 2 3 4



struct timex
{
# 58 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
 unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;

};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) noexcept (true);
# 90 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
}
# 34 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 38 "/usr/include/time.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 47 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 48 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) noexcept (true);



extern time_t time (time_t *__timer) noexcept (true);


extern double difftime (time_t __time1, time_t __time0)
     noexcept (true) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) noexcept (true);
# 100 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) noexcept (true);




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     noexcept (true);






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) noexcept (true);



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) noexcept (true);






extern struct tm *gmtime (const time_t *__timer) noexcept (true);



extern struct tm *localtime (const time_t *__timer) noexcept (true);
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) noexcept (true);



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) noexcept (true);
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) noexcept (true);



extern char *ctime (const time_t *__timer) noexcept (true);
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) noexcept (true);



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) noexcept (true);
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) noexcept (true);



extern int daylight;
extern long int timezone;
# 249 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) noexcept (true);

extern time_t timelocal (struct tm *__tp) noexcept (true);
# 262 "/usr/include/time.h" 3 4
extern int dysize (int __year) noexcept (true) __attribute__ ((__const__));
# 272 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) noexcept (true);


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) noexcept (true);


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     noexcept (true);
# 311 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 326 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) noexcept (true);




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) noexcept (true);


extern int timer_delete (timer_t __timerid) noexcept (true);



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) noexcept (true);


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     noexcept (true);
# 364 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) noexcept (true);






extern int timespec_get (struct timespec *__ts, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 387 "/usr/include/time.h" 3 4
extern int timespec_getres (struct timespec *__ts, int __base)
     noexcept (true);
# 413 "/usr/include/time.h" 3 4
extern int getdate_err;
# 422 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 436 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 24 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 27 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 31 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 3 4
struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };
# 32 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 3 4
extern "C" {
extern long int __sysconf (int __name) noexcept (true);
}
# 34 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 104 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 124 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 159 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 197 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) noexcept (true);
# 233 "/usr/include/pthread.h" 3 4
extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
# 243 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,
                                 clockid_t __clockid,
     const struct timespec *__abstime);
# 269 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) noexcept (true);



extern pthread_t pthread_self (void) noexcept (true) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  noexcept (true) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_setsigmask_np (pthread_attr_t *__attr,
           const __sigset_t *sigmask);




extern int pthread_attr_getsigmask_np (const pthread_attr_t *__attr,
           __sigset_t *sigmask);







extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     noexcept (true) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     noexcept (true);




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) noexcept (true);


extern int pthread_setconcurrency (int __level) noexcept (true);



extern int pthread_yield (void) noexcept (true);

extern int pthread_yield (void) noexcept (true) __asm__ ("" "sched_yield")
  __attribute__ ((__deprecated__ ("pthread_yield is deprecated, use sched_yield instead")));
# 489 "/usr/include/pthread.h" 3 4
extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 509 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 521 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




struct __cancel_jmp_buf_tag
{
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

typedef struct
{
  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 557 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 697 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
                            ;
# 709 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
                         ;
# 732 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
                            ;
# 745 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
                         ;



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
                             __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;
# 773 "/usr/include/pthread.h" 3 4
extern int __sigsetjmp (struct __jmp_buf_tag __env[1],
   int __savemask) noexcept (true);






extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 817 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,
        clockid_t __clockid,
        const struct timespec *__restrict
        __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 835 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_consistent_np (pthread_mutex_t *) noexcept (true) __asm__ ("" "pthread_mutex_consistent") __attribute__ ((__nonnull__ (1)))

  __attribute__ ((__deprecated__ ("pthread_mutex_consistent_np is deprecated, use pthread_mutex_consistent")));
# 874 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_getrobust_np (pthread_mutexattr_t *, int *) noexcept (true) __asm__ ("" "pthread_mutexattr_getrobust") __attribute__ ((__nonnull__ (1)))


  __attribute__ ((__deprecated__ ("pthread_mutexattr_getrobust_np is deprecated, use pthread_mutexattr_getrobust")));







extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *, int) noexcept (true) __asm__ ("" "pthread_mutexattr_setrobust") __attribute__ ((__nonnull__ (1)))


  __attribute__ ((__deprecated__ ("pthread_mutexattr_setrobust_np is deprecated, use pthread_mutexattr_setrobust")));
# 967 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 1004 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 1023 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 1051 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 1071 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) noexcept (true) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1171 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __clockid_t __clock_id,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 4)));
# 1194 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1230 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1297 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) noexcept (true);


extern void *pthread_getspecific (pthread_key_t __key) noexcept (true);


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer)
  noexcept (true) ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     noexcept (true) __attribute__ ((__nonnull__ (2)));
# 1332 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) noexcept (true);
# 1346 "/usr/include/pthread.h" 3 4
}
# 42 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 2 3
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 220 "/usr/include/unistd.h" 3 4
typedef __ssize_t ssize_t;







# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4





typedef __gid_t gid_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __useconds_t useconds_t;
# 274 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int execveat (int __fd, const char *__path, char *const __argv[],
                     char *const __envp[], int __flags)
    noexcept (true) __attribute__ ((__nonnull__ (2, 3)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (2))) ;
# 339 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) noexcept (true);
# 350 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     noexcept (true);






extern int close (int __fd);




extern void closefrom (int __lowfd) noexcept (true);







extern ssize_t read (int __fd, void *__buf, size_t __nbytes)
                                                  ;





extern ssize_t write (int __fd, const void *__buf, size_t __n)
                                         ;
# 389 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset)
                                                  ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset)
                                         ;
# 422 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset)
                                                  ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset)
                                         ;







extern int pipe (int __pipedes[2]) noexcept (true) ;




extern int pipe2 (int __pipedes[2], int __flags) noexcept (true) ;
# 452 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) noexcept (true);
# 464 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     noexcept (true);






extern int usleep (__useconds_t __useconds);
# 489 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) noexcept (true) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) noexcept (true) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) noexcept (true) ;
# 531 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) noexcept (true) ;





extern char *get_current_dir_name (void) noexcept (true);







extern char *getwd (char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__))
                                       ;




extern int dup (int __fd) noexcept (true) ;


extern int dup2 (int __fd, int __fd2) noexcept (true);




extern int dup3 (int __fd, int __fd2, int __flags) noexcept (true);



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     noexcept (true) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) noexcept (true) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));







# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT,


    _SC_MINSIGSTKSZ,


    _SC_SIGSTKSZ

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 631 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) noexcept (true);


extern long int sysconf (int __name) noexcept (true);



extern size_t confstr (int __name, char *__buf, size_t __len) noexcept (true)
                                                  ;




extern __pid_t getpid (void) noexcept (true);


extern __pid_t getppid (void) noexcept (true);


extern __pid_t getpgrp (void) noexcept (true);


extern __pid_t __getpgid (__pid_t __pid) noexcept (true);

extern __pid_t getpgid (__pid_t __pid) noexcept (true);






extern int setpgid (__pid_t __pid, __pid_t __pgid) noexcept (true);
# 682 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) noexcept (true);






extern __pid_t setsid (void) noexcept (true);



extern __pid_t getsid (__pid_t __pid) noexcept (true);



extern __uid_t getuid (void) noexcept (true);


extern __uid_t geteuid (void) noexcept (true);


extern __gid_t getgid (void) noexcept (true);


extern __gid_t getegid (void) noexcept (true);




extern int getgroups (int __size, __gid_t __list[]) noexcept (true)
                                                  ;


extern int group_member (__gid_t __gid) noexcept (true);






extern int setuid (__uid_t __uid) noexcept (true) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) noexcept (true) ;




extern int seteuid (__uid_t __uid) noexcept (true) ;






extern int setgid (__gid_t __gid) noexcept (true) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) noexcept (true) ;




extern int setegid (__gid_t __gid) noexcept (true) ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     noexcept (true);



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     noexcept (true);



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     noexcept (true) ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     noexcept (true) ;






extern __pid_t fork (void) noexcept (true);







extern __pid_t vfork (void) noexcept (true);






extern __pid_t _Fork (void) noexcept (true);





extern char *ttyname (int __fd) noexcept (true);



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2)))
                                                   ;



extern int isatty (int __fd) noexcept (true);




extern int ttyslot (void) noexcept (true);




extern int link (const char *__from, const char *__to)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     noexcept (true) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)))
                                                   ;





extern int symlinkat (const char *__from, int __tofd,
        const char *__to) noexcept (true) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3)))
                                                   ;



extern int unlink (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) noexcept (true);


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) noexcept (true);






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)))
                                                  ;




extern int setlogin (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));
# 904 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       noexcept (true) __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 904 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) noexcept (true) __attribute__ ((__nonnull__ (1)))
                                                  ;






extern int sethostname (const char *__name, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) noexcept (true) ;





extern int getdomainname (char *__name, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1)))
                                                   ;
extern int setdomainname (const char *__name, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern int vhangup (void) noexcept (true);


extern int revoke (const char *__file) noexcept (true) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) noexcept (true);



extern char *getusershell (void) noexcept (true);
extern void endusershell (void) noexcept (true);
extern void setusershell (void) noexcept (true);





extern int daemon (int __nochdir, int __noclose) noexcept (true) ;






extern int chroot (const char *__path) noexcept (true) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) noexcept (true);






extern long int gethostid (void);


extern void sync (void) noexcept (true);





extern int getpagesize (void) noexcept (true) __attribute__ ((__const__));




extern int getdtablesize (void) noexcept (true);
# 1026 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 1038 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 1049 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) noexcept (true) ;
# 1059 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) noexcept (true) ;
# 1070 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) noexcept (true) ;





extern void *sbrk (intptr_t __delta) noexcept (true);
# 1091 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) noexcept (true);
# 1114 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1124 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1142 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1159 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) noexcept (true) __attribute__ ((__nonnull__ (1, 2)))

                                          ;
# 1198 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length)
                                          ;
# 1208 "/usr/include/unistd.h" 3 4
extern int close_range (unsigned int __fd, unsigned int __max_fd,
   int __flags) noexcept (true);
# 1218 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) noexcept (true);





# 1 "/usr/include/linux/close_range.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 2 3 4
# 1219 "/usr/include/unistd.h" 2 3 4

}
# 43 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 2 3

typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 118 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));


static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));


static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));


static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 239 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw_pthread_cancel;






  return __gthread_active_ptr != 0;
}
# 657 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}



static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}



static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 800 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}



static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}



static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait_recursive (__gthread_cond_t *__cond,
        __gthread_recursive_mutex_t *__mutex,
        const __gthread_time_t *__abs_timeout)
{
  return __gthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 171 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 2 3







#pragma GCC visibility pop
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/atomic_word.h" 1 3
# 32 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 36 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __sync_fetch_and_add(__mem, __val); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __sync_fetch_and_add(__mem, __val); }
# 63 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 3
 static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 2 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 1 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3


# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 1 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 3




# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 1 3
# 48 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 1 3
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 1 3
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 1 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3




#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 92 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 2 3



namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 53 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 3
 template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }



      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }


      template<typename... _Args>
        void
        construct(pointer __p, _Args&&... __args)
 { ::new((void *)__p) _Tp(std::forward<_Args>(__args)...); }


      void
      destroy(pointer __p) { __p->~_Tp(); }
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 2 3
# 49 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 65 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
 template<typename _Tp>
    class allocator;


  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };
    };
# 91 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
 template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }




  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };
# 191 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
 template<typename _Tp,
    bool = __has_trivial_copy(typename _Tp::value_type)>
    struct __shrink_to_fit
    { static void _S_do_it(_Tp&) { } };

  template<typename _Tp>
    struct __shrink_to_fit<_Tp, true>
    {
      static void
      _S_do_it(_Tp& __v)
      {
 if (true)
   { _Tp(__v).swap(__v); }
 if (false) { }
      }
    };



  struct allocator_arg_t { };

  constexpr allocator_arg_t allocator_arg = allocator_arg_t();

template<typename _Tp> class __has_allocator_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::allocator_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_allocator_type : integral_constant<bool, __has_allocator_type_helper <typename remove_cv<_Tp>::type>::value> { };

  template<typename _Tp, typename _Alloc,
    bool = __has_allocator_type<_Tp>::value>
    struct __uses_allocator_helper
    : public false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc, true>
    : public integral_constant<bool, is_convertible<_Alloc,
         typename _Tp::allocator_type>::value>
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : public integral_constant<bool,
          __uses_allocator_helper<_Tp, _Alloc>::value>
    { };




}
# 43 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3


# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 1 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 3


# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 1 3
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 3
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 36 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   if (true)
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   if (false)
     {
       __out._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 46 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3



# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 1 3
# 60 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 101 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
 template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 140 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
 template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 204 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
 template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 268 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
 template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };
# 351 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
 template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 422 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
 template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st : public unary_function<_Pair,
           typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd : public unary_function<_Pair,
           typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 541 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
 template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}




# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 1 3
# 60 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 99 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 3
 template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}
# 732 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 2 3
# 50 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3


# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 1 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{







  template<class _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<class _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<class _Tp, size_t _Nm>
    inline _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<class _Tp, size_t _Nm>
    inline _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }


}
# 53 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 1 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3



# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 1 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 3



#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() { return _M_len; }


      constexpr const_iterator
      begin() { return _M_array; }


      constexpr const_iterator
      end() { return begin() + size(); }
  };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils)
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils)
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 43 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 105 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 142 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 167 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {

                                                                  ;
       if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
        -1) <= 0)
  {
                                                              ;
    _M_destroy(__a);
  }
     }
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      basic_string()

      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }







      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 477 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 501 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string(basic_string&& __str)
      : _M_dataplus(__str._M_dataplus)
      {

 __str._M_data(_S_empty_rep()._M_refdata());



      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
# 525 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 558 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 573 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      operator=(basic_string&& __str)
      {

 this->swap(__str);
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }







      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 733 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 void
      resize(size_type __n, _CharT __c);
# 746 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit()
      {
 if (true)
   { reserve(0); }
 if (false)
   { }
      }






      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 787 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }





      bool
      empty() const
      { return this->size() == 0; }
# 816 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 const_reference
      operator[] (size_type __pos) const
      {
                                       ;
 return _M_data()[__pos];
      }
# 833 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 reference
      operator[](size_type __pos)
      {

                                       ;

                                         ;
 _M_leak();
 return _M_data()[__pos];
      }
# 854 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }






      reference
      front()
      { return operator[](0); }





      const_reference
      front() const
      { return operator[](0); }





      reference
      back()
      { return operator[](this->size() - 1); }





      const_reference
      back() const
      { return operator[](this->size() - 1); }
# 907 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }







      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }







      basic_string&
      append(const basic_string& __str);
# 978 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 return this->append(__s, traits_type::length(__s));
      }
# 1010 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      append(size_type __n, _CharT __c);







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1032 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 1068 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      assign(basic_string&& __str)
      {
 this->swap(__str);
 return *this;
      }
# 1088 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 1104 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      assign(const _CharT* __s, size_type __n);
# 1116 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return this->assign(__s, traits_type::length(__s));
      }
# 1132 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1144 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1172 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1187 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1199 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
                                                                 ;
 this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
      }
# 1218 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1240 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1263 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1281 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1304 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1321 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 iterator
      insert(iterator __p, _CharT __c)
      {
                                                                 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1345 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1361 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 iterator
      erase(iterator __position)
      {

                               ;
 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1381 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 iterator
      erase(iterator __first, iterator __last);
# 1400 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1422 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1446 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1465 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1488 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1506 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1524 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {

                          ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1545 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1566 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {

                          ;
 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1588 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                            ;
                                             ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1658 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string& replace(iterator __i1, iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.end()); }


    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct_aux_2(static_cast<size_type>(__beg),
        __end, __a); }

      static _CharT*
      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
      { return _S_construct(__req, __c, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1744 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1754 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 void
      swap(basic_string& __s);
# 1764 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1796 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1809 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }
# 1823 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1840 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find(_CharT __c, size_type __pos = 0) const;
# 1853 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1868 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1881 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1898 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      rfind(_CharT __c, size_type __pos = npos) const;
# 1911 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1926 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1939 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 1958 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 1972 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 1987 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2000 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2019 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 2033 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2048 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2062 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2079 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;
# 2092 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2108 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2121 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2138 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;
# 2153 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2171 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2201 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2225 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2243 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 int
      compare(const _CharT* __s) const;
# 2266 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2291 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
# 2303 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 2424 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2470 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2507 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2544 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2581 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2618 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2655 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2672 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2690 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2713 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2731 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return getline(__is, __str, __is.widen('\n')); }

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}






# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 1 3
# 32 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 3
# 32 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 3




# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 65 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) noexcept (true) ;



extern double atof (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) noexcept (true) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 159 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 233 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 251 "/usr/include/stdlib.h" 3 4
extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 275 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 317 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 338 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 386 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) noexcept (true) ;


extern long int a64l (const char *__s)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;






# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;
# 69 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __mode_t mode_t;




typedef __nlink_t nlink_t;
# 103 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 138 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __suseconds_t suseconds_t;







# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;







typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{



  return ((__uint16_t) ((((__bsx) >> 8) & 0xff) | (((__bsx) & 0xff) << 8)));

}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{



  return ((((__bsx) & 0xff000000u) >> 24) | (((__bsx) & 0x00ff0000u) >> 8) | (((__bsx) & 0x0000ff00u) << 8) | (((__bsx) & 0x000000ffu) << 24));

}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{



  return ((((__bsx) & 0xff00000000000000ull) >> 56) | (((__bsx) & 0x00ff000000000000ull) >> 40) | (((__bsx) & 0x0000ff0000000000ull) >> 24) | (((__bsx) & 0x000000ff00000000ull) >> 8) | (((__bsx) & 0x00000000ff000000ull) << 8) | (((__bsx) & 0x0000000000ff0000ull) << 24) | (((__bsx) & 0x000000000000ff00ull) << 40) | (((__bsx) & 0x00000000000000ffull) << 56));

}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4






typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
# 230 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
}
# 396 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) noexcept (true);


extern void srandom (unsigned int __seed) noexcept (true);





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) noexcept (true) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) noexcept (true);

extern void srand (unsigned int __seed) noexcept (true);



extern int rand_r (unsigned int *__seed) noexcept (true);







extern double drand48 (void) noexcept (true);
extern double erand48 (unsigned short int __xsubi[3]) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) noexcept (true);
extern long int nrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) noexcept (true);
extern long int jrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) noexcept (true);
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) noexcept (true) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
                                         ;

extern void *calloc (size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__)) ;


extern void free (void *__ptr) noexcept (true);







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__))

                       ;


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) ;





# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) noexcept (true);





}
# 575 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
                                         ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__malloc__))
                                         ;



extern void abort (void) noexcept (true) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     noexcept (true) __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 617 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void _Exit (int __status) noexcept (true) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) noexcept (true);
# 682 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1)));
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 705 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 727 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 738 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 749 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 759 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 769 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 781 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 791 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__malloc__))
                              ;
# 808 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) noexcept (true) ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) noexcept (true) __attribute__ ((__const__)) ;
extern long int labs (long int __x) noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     noexcept (true) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
# 880 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) noexcept (true);


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) noexcept (true);


extern int wctomb (char *__s, wchar_t __wchar) noexcept (true);



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) noexcept (true)
                                      ;

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     noexcept (true)

                                    ;






extern int rpmatch (const char *__response) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 967 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) noexcept (true);



extern int unlockpt (int __fd) noexcept (true);




extern char *ptsname (int __fd) noexcept (true) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2))) ;


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1023 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1024 "/usr/include/stdlib.h" 2 3 4
# 1035 "/usr/include/stdlib.h" 3 4
}
# 66 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 2 3
# 97 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;
  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;
  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;


  inline long
  abs(long __i) { return labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }


}
# 157 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;


  inline long long
  abs(long long __x) { return __x >= 0 ? __x : -__x; }


  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 192 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
 using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;
  using ::__gnu_cxx::abs;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



namespace std
{


  using std::lldiv_t;


  using std::llabs;
  using std::lldiv;


  using std::atoll;
  using std::strtoll;
  using std::strtoull;

  using std::strtof;
  using std::strtold;


  using std::abs;

  using std::div;

}
# 37 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3


# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {





# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 3 4
typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 84 "/usr/include/stdio.h" 3 4
typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4
# 143 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) noexcept (true);

extern int rename (const char *__old, const char *__new) noexcept (true);



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) noexcept (true);
# 170 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) noexcept (true);






extern int fclose (FILE *__stream);
# 188 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) ;
# 200 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void)
   __attribute__ ((__malloc__)) ;



extern char *tmpnam (char[20]) noexcept (true) ;




extern char *tmpnam_r (char __s[20]) noexcept (true) ;
# 222 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   noexcept (true) __attribute__ ((__malloc__)) ;






extern int fflush (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 249 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 258 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 283 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes)
  __attribute__ ((__malloc__)) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) noexcept (true)
  __attribute__ ((__malloc__)) ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) noexcept (true)
  __attribute__ ((__malloc__)) ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  noexcept (true) __attribute__ ((__malloc__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) noexcept (true)
  __attribute__ ((__malloc__)) ;





extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) noexcept (true)
  __attribute__ ((__malloc__)) ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) noexcept (true);



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) noexcept (true);




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) noexcept (true);


extern void setlinebuf (FILE *__stream) noexcept (true);







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) noexcept (true);





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) noexcept (true);



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) noexcept (true);
# 434 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf") ;


extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf") ;

extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) noexcept (true) __asm__ ("" "__isoc99_sscanf");
# 459 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__scanf__, 2, 0)));





extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) noexcept (true) __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 513 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 538 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 549 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 565 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
                                                         ;
# 605 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));
# 615 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream)
                                                  ;
# 632 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 691 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 702 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 736 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 760 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 779 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) noexcept (true);

extern int feof (FILE *__stream) noexcept (true) ;

extern int ferror (FILE *__stream) noexcept (true) ;



extern void clearerr_unlocked (FILE *__stream) noexcept (true);
extern int feof_unlocked (FILE *__stream) noexcept (true) ;
extern int ferror_unlocked (FILE *__stream) noexcept (true) ;







extern void perror (const char *__s);




extern int fileno (FILE *__stream) noexcept (true) ;




extern int fileno_unlocked (FILE *__stream) noexcept (true) ;
# 823 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream);





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) ;






extern char *ctermid (char *__s) noexcept (true)
                                     ;





extern char *cuserid (char *__s)
                                     ;




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) noexcept (true);



extern int ftrylockfile (FILE *__stream) noexcept (true) ;


extern void funlockfile (FILE *__stream) noexcept (true);
# 885 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 902 "/usr/include/stdio.h" 3 4
}
# 44 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 2 3
# 91 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;
  using ::gets;
  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;
  using ::tmpnam;
  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 147 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
namespace __gnu_cxx
{
# 165 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
 using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 3

# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) noexcept (true) __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;



# 1 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4



}
# 43 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 2 3
# 40 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;
      (*__errno_location ()) = 0;
      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
        || (std::__are_same<_Ret, int>::__value
     && (__tmp < __numeric_traits<int>::__min
         || __tmp > __numeric_traits<int>::__max)))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 2756 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }




  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }


  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }


  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }



}







# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 1 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/hash_bytes.h" 1 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/hash_bytes.h" 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 48 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3
 template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type;
      typedef _Arg argument_type;
    };


  template<typename _Tp>
    struct hash : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const;
    };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const
      { return reinterpret_cast<size_t>(__p); }
    };
# 80 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3
 template<> inline size_t hash<bool>::operator()(bool __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<char>::operator()(char __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<signed char>::operator()(signed char __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned char>::operator()(unsigned char __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<wchar_t>::operator()(wchar_t __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<char16_t>::operator()(char16_t __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<char32_t>::operator()(char32_t __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<short>::operator()(short __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<int>::operator()(int __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<long>::operator()(long __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<long long>::operator()(long long __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned short>::operator()(unsigned short __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned int>::operator()(unsigned int __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned long>::operator()(unsigned long __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned long long>::operator()(unsigned long long __val) const { return static_cast<size_t>(__val); };



  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };

  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    inline size_t
    hash<float>::operator()(float __val) const
    {

      return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
    }


  template<>
    inline size_t
    hash<double>::operator()(double __val) const
    {

      return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
    }


  template<>
    __attribute__ ((__pure__)) size_t
    hash<long double>::operator()(long double __val) const;




}
# 2974 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };





  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };



}
# 54 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 1 3
# 42 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3
# 42 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 if (true)
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   __throw_logic_error(("basic_string::_S_construct null not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 if (true)
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {

      if (__n == 0 && __a == _Alloc())
 return _S_empty_rep()._M_refdata();


      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(initializer_list<_CharT> __l, const _Alloc& __a)
    : _M_dataplus(_S_construct(__l.begin(), __l.end(), __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
                                             ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
                                             ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
                                              ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {

                           ;




       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
                                               ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {

      if (_M_rep() == &_S_empty_rep())
 return;

      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 578 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3
 const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   if (true)
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 55 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 42 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 63 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 99 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 118 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 locale() throw();
# 127 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 locale(const locale& __other) throw();
# 137 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 explicit
    locale(const char* __s);
# 152 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 locale(const locale& __base, const char* __s, category __cat);
# 165 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 locale(const locale& __base, const locale& __add, category __cat);
# 177 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 191 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 const locale&
    operator=(const locale& __other) throw();
# 206 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 225 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 253 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 269 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 static locale
    global(const locale&);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 304 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 338 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 369 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 436 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 582 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw();
# 599 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc);
# 616 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 643 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 657 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 674 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 693 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 707 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 736 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 752 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 765 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
 virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };


}



# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 1 3
# 37 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 3
# 37 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      if (true)
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      if (false)
 {
   _M_impl->_M_remove_reference();
                          ;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      if (true)
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      if (false)
 {
   __tmp->_M_remove_reference();
                          ;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }


  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }

  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      if (true)
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      if (false)
 {
   delete [] __c;
                          ;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 823 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 2 3
# 43 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 200 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 256 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 331 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 362 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 394 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 420 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 437 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 typedef void (*event_callback) (event, ios_base&, int);
# 449 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

                                                             ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
                                                                ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 562 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 578 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 595 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 621 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 672 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 static bool
    sync_with_stdio(bool __sync = true);
# 684 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 locale
    imbue(const locale& __loc) throw();
# 695 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 locale
    getloc() const
    { return _M_ios_locale; }
# 706 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 725 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 static int
    xalloc() throw();
# 741 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 762 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 779 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
 virtual ~ios_base();

  protected:
    ios_base() throw ();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }


}
# 43 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 1 3
# 37 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
# 37 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3








namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 115 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:
# 181 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 205 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 locale
      pubimbue(const locale &__loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 222 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 locale
      getloc() const
      { return _M_buf_locale; }
# 235 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 __streambuf_type*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }

      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }

      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }

      int
      pubsync() { return this->sync(); }
# 262 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 276 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 294 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 316 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 335 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 350 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 375 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 402 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 428 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 442 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 460 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 476 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 void
      gbump(int __n) { _M_in_cur += __n; }
# 487 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 507 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 523 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 void
      pbump(int __n) { _M_out_cur += __n; }
# 533 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 554 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 virtual void
      imbue(const locale&)
      { }
# 569 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 580 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 592 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 605 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 virtual int
      sync() { return 0; }
# 627 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 virtual streamsize
      showmanyc() { return 0; }
# 643 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 665 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 virtual int_type
      underflow()
      { return traits_type::eof(); }
# 678 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 702 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 virtual int_type
      pbackfail(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 720 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 746 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 virtual int_type
      overflow(int_type = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 761 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
 void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }

    private:


      basic_streambuf(const __streambuf_type& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      __streambuf_type&
      operator=(const __streambuf_type&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);



}



# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 1 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 808 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 2 3
# 44 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 1 3
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3



# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 1 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 51 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 38 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
typedef unsigned long int wctype_t;
# 56 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {







extern int iswalnum (wint_t __wc) noexcept (true);





extern int iswalpha (wint_t __wc) noexcept (true);


extern int iswcntrl (wint_t __wc) noexcept (true);



extern int iswdigit (wint_t __wc) noexcept (true);



extern int iswgraph (wint_t __wc) noexcept (true);




extern int iswlower (wint_t __wc) noexcept (true);


extern int iswprint (wint_t __wc) noexcept (true);




extern int iswpunct (wint_t __wc) noexcept (true);




extern int iswspace (wint_t __wc) noexcept (true);




extern int iswupper (wint_t __wc) noexcept (true);




extern int iswxdigit (wint_t __wc) noexcept (true);





extern int iswblank (wint_t __wc) noexcept (true);
# 155 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
extern wctype_t wctype (const char *__property) noexcept (true);



extern int iswctype (wint_t __wc, wctype_t __desc) noexcept (true);






extern wint_t towlower (wint_t __wc) noexcept (true);


extern wint_t towupper (wint_t __wc) noexcept (true);

}
# 39 "/usr/include/wctype.h" 2 3 4





extern "C" {



typedef const __int32_t *wctrans_t;



extern wctrans_t wctrans (const char *__property) noexcept (true);


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) noexcept (true);







extern int iswalnum_l (wint_t __wc, locale_t __locale) noexcept (true);





extern int iswalpha_l (wint_t __wc, locale_t __locale) noexcept (true);


extern int iswcntrl_l (wint_t __wc, locale_t __locale) noexcept (true);



extern int iswdigit_l (wint_t __wc, locale_t __locale) noexcept (true);



extern int iswgraph_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswlower_l (wint_t __wc, locale_t __locale) noexcept (true);


extern int iswprint_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswpunct_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswspace_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswupper_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswxdigit_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswblank_l (wint_t __wc, locale_t __locale) noexcept (true);



extern wctype_t wctype_l (const char *__property, locale_t __locale)
     noexcept (true);



extern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)
     noexcept (true);






extern wint_t towlower_l (wint_t __wc, locale_t __locale) noexcept (true);


extern wint_t towupper_l (wint_t __wc, locale_t __locale) noexcept (true);



extern wctrans_t wctrans_l (const char *__property, locale_t __locale)
     noexcept (true);


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      locale_t __locale) noexcept (true);



}
# 52 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 2 3
# 81 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}







namespace std
{

  using std::iswblank;

}
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 42 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_base.h" 1 3
# 37 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;
  };


}
# 43 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3






# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 1 3
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 50 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3
 template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT&>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      constexpr istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw ()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw ()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }




}
# 50 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 65 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 143 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 161 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 178 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 194 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 210 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 224 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 239 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 253 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 268 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 285 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 304 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 323 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 345 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char *__to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 370 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 389 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 408 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 427 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 445 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char_type
      do_toupper(char_type) const = 0;
# 462 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 478 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char_type
      do_tolower(char_type) const = 0;
# 495 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 514 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char_type
      do_widen(char) const = 0;
# 535 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char*
      do_widen(const char* __lo, const char* __hi,
        char_type* __dest) const = 0;
# 557 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char
      do_narrow(char_type, char __dfault) const = 0;
# 581 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const = 0;
    };
# 604 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 673 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 710 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 723 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 736 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 inline bool
      is(mask __m, char __c) const;
# 751 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 765 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 779 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 794 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 811 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 827 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 844 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 864 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 891 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 922 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 955 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char *__to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1004 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char_type
      do_toupper(char_type) const;
# 1021 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1037 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char_type
      do_tolower(char_type) const;
# 1054 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1074 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1097 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }
# 1123 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char
      do_narrow(char_type __c, char) const
      { return __c; }
# 1149 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char, char* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1174 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1207 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 explicit
      ctype(size_t __refs = 0);
# 1218 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1242 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual bool
      do_is(mask __m, char_type __c) const;
# 1261 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1279 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1297 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1314 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char_type
      do_toupper(char_type) const;
# 1331 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1347 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char_type
      do_tolower(char_type) const;
# 1364 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1384 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char_type
      do_widen(char) const;
# 1406 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
# 1429 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char
      do_narrow(char_type, char __dfault) const;
# 1455 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };



}




# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_inline.h" 1 3
# 37 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1512 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
        _S_ominus,
        _S_oplus,
        _S_ox,
        _S_oX,
        _S_odigits,
        _S_odigits_end = _S_odigits + 16,
        _S_oudigits = _S_odigits_end,
        _S_oudigits_end = _S_oudigits + 16,
        _S_oe = _S_odigits + 14,
        _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
        { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1640 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1678 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1692 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1706 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1719 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1750 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 string
      grouping() const
      { return this->do_grouping(); }
# 1763 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 string_type
      truename() const
      { return this->do_truename(); }
# 1776 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1793 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1805 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1818 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1831 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1844 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };
# 1914 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1935 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1961 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1997 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2056 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2098 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
        iter_type
        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2169 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      void*&) const;
# 2234 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2252 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2273 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2291 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2333 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __f, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2396 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2421 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __f, __fill, __v); }

    protected:
      template<typename _ValueT>
        iter_type
        _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
        iter_type
        _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2469 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, double __v) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;
# 2527 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
 template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}



# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 1 3
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     if (true)
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     if (false)
       {
  delete __tmp;
                         ;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      if (true)
 {
   _M_grouping_size = __np.grouping().size();
   __grouping = new char[_M_grouping_size];
   __np.grouping().copy(__grouping, _M_grouping_size);
   _M_grouping = __grouping;
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(_M_grouping[0]) > 0
        && (_M_grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   _M_truename_size = __np.truename().size();
   __truename = new _CharT[_M_truename_size];
   __np.truename().copy(__truename, _M_truename_size);
   _M_truename = __truename;

   _M_falsename_size = __np.falsename().size();
   __falsename = new _CharT[_M_falsename_size];
   __np.falsename().copy(__falsename, _M_falsename_size);
   _M_falsename = __falsename;

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);
 }
      if (false)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
                          ;
 }
    }
# 137 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
 __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 731 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
 template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 967 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
 template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1028 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1153 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
 template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1190 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
 template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2608 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 62 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 127 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 iostate
      rdstate() const
      { return _M_streambuf_state; }
# 138 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
                          ;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 191 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 212 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 iostate
      exceptions() const
      { return _M_exception; }
# 247 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 285 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 297 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 337 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 351 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 380 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 400 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 locale
      imbue(const locale& __loc);
# 420 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 439 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
 char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };


}



# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 1 3
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3
 _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 473 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 2 3
# 45 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 40 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 82 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 108 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }


      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 250 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 __ostream_type&
      operator<<(__streambuf_type* __sb);
# 283 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 __ostream_type&
      put(char_type __c);


      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 311 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 __ostream_type&
      write(const char_type* __s, streamsize __n);
# 324 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 __ostream_type&
      flush();
# 335 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 pos_type
      tellp();
# 346 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 __ostream_type&
      seekp(pos_type);
# 358 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
        __ostream_type&
        _M_insert(_ValueT __v);
    };
# 377 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 396 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 406 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 425 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 explicit

      operator bool() const
      { return _M_ok; }
    };
# 448 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 490 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 540 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }







  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 578 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
 template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)
    { return (__os << __x); }



}



# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 1 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   if (true)
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   if (true)
     { _M_write(__s, __n); }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      if (true)
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   if (true)
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   if (false)
     {
       __out._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 588 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 2 3
# 40 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 1 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:
# 91 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 120 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 239 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      operator>>(__streambuf_type* __sb);
# 249 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 streamsize
      gcount() const
      { return _M_gcount; }
# 281 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 int_type
      get();
# 295 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      get(char_type& __c);
# 322 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 333 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 356 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 366 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 395 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 406 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 430 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      ignore();

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore(streamsize __n, int_type __delim);
# 447 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 int_type
      peek();
# 465 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      read(char_type* __s, streamsize __n);
# 484 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 streamsize
      readsome(char_type* __s, streamsize __n);
# 501 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      putback(char_type __c);
# 517 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      unget();
# 535 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 int
      sync();
# 550 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 pos_type
      tellg();
# 565 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      seekg(pos_type);
# 581 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
        __istream_type&
        _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 636 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 672 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 683 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 explicit

      operator bool() const
      { return _M_ok; }
    };
# 702 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 744 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 772 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 833 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 849 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
 template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>&& __is, _Tp& __x)
    { return (__is >> __x); }



}



# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 1 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   if (true)
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::failbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          if (true)
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 514 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3
 bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 859 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 2 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 60 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3
 extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 2 "firmware/myproject.cpp" 2

# 1 "firmware/myproject.h" 1



# 1 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_fixed.h" 1
# 57 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_fixed.h"
# 1 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int.h" 1
# 63 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int.h"
# 1 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h" 1
# 56 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
# 1 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/hls_half.h" 1
# 32 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/hls_half.h"
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3




# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4






extern "C" {







# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4
# 152 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 153 "/usr/include/math.h" 2 3 4
# 163 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 204 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 205 "/usr/include/math.h" 2 3 4
# 247 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 248 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 312 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbit (double __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinf (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finite (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnan (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) noexcept (true);


extern int __issignaling (double __value) noexcept (true)
     __attribute__ ((__const__));
# 313 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double acos (double __x) noexcept (true); extern double __acos (double __x) noexcept (true);

extern double asin (double __x) noexcept (true); extern double __asin (double __x) noexcept (true);

extern double atan (double __x) noexcept (true); extern double __atan (double __x) noexcept (true);

extern double atan2 (double __y, double __x) noexcept (true); extern double __atan2 (double __y, double __x) noexcept (true);


extern double cos (double __x) noexcept (true); extern double __cos (double __x) noexcept (true);

extern double sin (double __x) noexcept (true); extern double __sin (double __x) noexcept (true);

extern double tan (double __x) noexcept (true); extern double __tan (double __x) noexcept (true);




extern double cosh (double __x) noexcept (true); extern double __cosh (double __x) noexcept (true);

extern double sinh (double __x) noexcept (true); extern double __sinh (double __x) noexcept (true);

extern double tanh (double __x) noexcept (true); extern double __tanh (double __x) noexcept (true);



extern void sincos (double __x, double *__sinx, double *__cosx) noexcept (true); extern void __sincos (double __x, double *__sinx, double *__cosx) noexcept (true);





extern double acosh (double __x) noexcept (true); extern double __acosh (double __x) noexcept (true);

extern double asinh (double __x) noexcept (true); extern double __asinh (double __x) noexcept (true);

extern double atanh (double __x) noexcept (true); extern double __atanh (double __x) noexcept (true);





extern double exp (double __x) noexcept (true); extern double __exp (double __x) noexcept (true);


extern double frexp (double __x, int *__exponent) noexcept (true); extern double __frexp (double __x, int *__exponent) noexcept (true);


extern double ldexp (double __x, int __exponent) noexcept (true); extern double __ldexp (double __x, int __exponent) noexcept (true);


extern double log (double __x) noexcept (true); extern double __log (double __x) noexcept (true);


extern double log10 (double __x) noexcept (true); extern double __log10 (double __x) noexcept (true);


extern double modf (double __x, double *__iptr) noexcept (true); extern double __modf (double __x, double *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern double exp10 (double __x) noexcept (true); extern double __exp10 (double __x) noexcept (true);




extern double expm1 (double __x) noexcept (true); extern double __expm1 (double __x) noexcept (true);


extern double log1p (double __x) noexcept (true); extern double __log1p (double __x) noexcept (true);


extern double logb (double __x) noexcept (true); extern double __logb (double __x) noexcept (true);




extern double exp2 (double __x) noexcept (true); extern double __exp2 (double __x) noexcept (true);


extern double log2 (double __x) noexcept (true); extern double __log2 (double __x) noexcept (true);






extern double pow (double __x, double __y) noexcept (true); extern double __pow (double __x, double __y) noexcept (true);


extern double sqrt (double __x) noexcept (true); extern double __sqrt (double __x) noexcept (true);



extern double hypot (double __x, double __y) noexcept (true); extern double __hypot (double __x, double __y) noexcept (true);




extern double cbrt (double __x) noexcept (true); extern double __cbrt (double __x) noexcept (true);






extern double ceil (double __x) noexcept (true) __attribute__ ((__const__)); extern double __ceil (double __x) noexcept (true) __attribute__ ((__const__));


extern double fabs (double __x) noexcept (true) __attribute__ ((__const__)); extern double __fabs (double __x) noexcept (true) __attribute__ ((__const__));


extern double floor (double __x) noexcept (true) __attribute__ ((__const__)); extern double __floor (double __x) noexcept (true) __attribute__ ((__const__));


extern double fmod (double __x, double __y) noexcept (true); extern double __fmod (double __x, double __y) noexcept (true);
# 183 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int finite (double __value) noexcept (true)
  __attribute__ ((__const__));


extern double drem (double __x, double __y) noexcept (true); extern double __drem (double __x, double __y) noexcept (true);



extern double significand (double __x) noexcept (true); extern double __significand (double __x) noexcept (true);






extern double copysign (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern double nan (const char *__tagb) noexcept (true); extern double __nan (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double j0 (double) noexcept (true); extern double __j0 (double) noexcept (true);
extern double j1 (double) noexcept (true); extern double __j1 (double) noexcept (true);
extern double jn (int, double) noexcept (true); extern double __jn (int, double) noexcept (true);
extern double y0 (double) noexcept (true); extern double __y0 (double) noexcept (true);
extern double y1 (double) noexcept (true); extern double __y1 (double) noexcept (true);
extern double yn (int, double) noexcept (true); extern double __yn (int, double) noexcept (true);





extern double erf (double) noexcept (true); extern double __erf (double) noexcept (true);
extern double erfc (double) noexcept (true); extern double __erfc (double) noexcept (true);
extern double lgamma (double) noexcept (true); extern double __lgamma (double) noexcept (true);




extern double tgamma (double) noexcept (true); extern double __tgamma (double) noexcept (true);





extern double gamma (double) noexcept (true); extern double __gamma (double) noexcept (true);







extern double lgamma_r (double, int *__signgamp) noexcept (true); extern double __lgamma_r (double, int *__signgamp) noexcept (true);






extern double rint (double __x) noexcept (true); extern double __rint (double __x) noexcept (true);


extern double nextafter (double __x, double __y) noexcept (true); extern double __nextafter (double __x, double __y) noexcept (true);

extern double nexttoward (double __x, long double __y) noexcept (true); extern double __nexttoward (double __x, long double __y) noexcept (true);




extern double nextdown (double __x) noexcept (true); extern double __nextdown (double __x) noexcept (true);

extern double nextup (double __x) noexcept (true); extern double __nextup (double __x) noexcept (true);



extern double remainder (double __x, double __y) noexcept (true); extern double __remainder (double __x, double __y) noexcept (true);



extern double scalbn (double __x, int __n) noexcept (true); extern double __scalbn (double __x, int __n) noexcept (true);



extern int ilogb (double __x) noexcept (true); extern int __ilogb (double __x) noexcept (true);




extern long int llogb (double __x) noexcept (true); extern long int __llogb (double __x) noexcept (true);




extern double scalbln (double __x, long int __n) noexcept (true); extern double __scalbln (double __x, long int __n) noexcept (true);



extern double nearbyint (double __x) noexcept (true); extern double __nearbyint (double __x) noexcept (true);



extern double round (double __x) noexcept (true) __attribute__ ((__const__)); extern double __round (double __x) noexcept (true) __attribute__ ((__const__));



extern double trunc (double __x) noexcept (true) __attribute__ ((__const__)); extern double __trunc (double __x) noexcept (true) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) noexcept (true); extern double __remquo (double __x, double __y, int *__quo) noexcept (true);






extern long int lrint (double __x) noexcept (true); extern long int __lrint (double __x) noexcept (true);
__extension__
extern long long int llrint (double __x) noexcept (true); extern long long int __llrint (double __x) noexcept (true);



extern long int lround (double __x) noexcept (true); extern long int __lround (double __x) noexcept (true);
__extension__
extern long long int llround (double __x) noexcept (true); extern long long int __llround (double __x) noexcept (true);



extern double fdim (double __x, double __y) noexcept (true); extern double __fdim (double __x, double __y) noexcept (true);



extern double fmax (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmin (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) noexcept (true) __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) noexcept (true); extern double __fma (double __x, double __y, double __z) noexcept (true);




extern double roundeven (double __x) noexcept (true) __attribute__ ((__const__)); extern double __roundeven (double __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalize (double *__cx, const double *__x) noexcept (true);






extern double fmaxmag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminmag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern double fmaximum (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fmaximum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__)); extern double __fminimum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern int totalorder (const double *__x, const double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermag (const double *__x, const double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern double getpayload (const double *__x) noexcept (true); extern double __getpayload (const double *__x) noexcept (true);


extern int setpayload (double *__x, double __payload) noexcept (true);


extern int setpayloadsig (double *__x, double __payload) noexcept (true);







extern double scalb (double __x, double __n) noexcept (true); extern double __scalb (double __x, double __n) noexcept (true);
# 314 "/usr/include/math.h" 2 3 4
# 329 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbitf (float __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinff (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finitef (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnanf (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) noexcept (true);


extern int __issignalingf (float __value) noexcept (true)
     __attribute__ ((__const__));
# 330 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float acosf (float __x) noexcept (true); extern float __acosf (float __x) noexcept (true);

extern float asinf (float __x) noexcept (true); extern float __asinf (float __x) noexcept (true);

extern float atanf (float __x) noexcept (true); extern float __atanf (float __x) noexcept (true);

extern float atan2f (float __y, float __x) noexcept (true); extern float __atan2f (float __y, float __x) noexcept (true);


extern float cosf (float __x) noexcept (true); extern float __cosf (float __x) noexcept (true);

extern float sinf (float __x) noexcept (true); extern float __sinf (float __x) noexcept (true);

extern float tanf (float __x) noexcept (true); extern float __tanf (float __x) noexcept (true);




extern float coshf (float __x) noexcept (true); extern float __coshf (float __x) noexcept (true);

extern float sinhf (float __x) noexcept (true); extern float __sinhf (float __x) noexcept (true);

extern float tanhf (float __x) noexcept (true); extern float __tanhf (float __x) noexcept (true);



extern void sincosf (float __x, float *__sinx, float *__cosx) noexcept (true); extern void __sincosf (float __x, float *__sinx, float *__cosx) noexcept (true);





extern float acoshf (float __x) noexcept (true); extern float __acoshf (float __x) noexcept (true);

extern float asinhf (float __x) noexcept (true); extern float __asinhf (float __x) noexcept (true);

extern float atanhf (float __x) noexcept (true); extern float __atanhf (float __x) noexcept (true);





extern float expf (float __x) noexcept (true); extern float __expf (float __x) noexcept (true);


extern float frexpf (float __x, int *__exponent) noexcept (true); extern float __frexpf (float __x, int *__exponent) noexcept (true);


extern float ldexpf (float __x, int __exponent) noexcept (true); extern float __ldexpf (float __x, int __exponent) noexcept (true);


extern float logf (float __x) noexcept (true); extern float __logf (float __x) noexcept (true);


extern float log10f (float __x) noexcept (true); extern float __log10f (float __x) noexcept (true);


extern float modff (float __x, float *__iptr) noexcept (true); extern float __modff (float __x, float *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern float exp10f (float __x) noexcept (true); extern float __exp10f (float __x) noexcept (true);




extern float expm1f (float __x) noexcept (true); extern float __expm1f (float __x) noexcept (true);


extern float log1pf (float __x) noexcept (true); extern float __log1pf (float __x) noexcept (true);


extern float logbf (float __x) noexcept (true); extern float __logbf (float __x) noexcept (true);




extern float exp2f (float __x) noexcept (true); extern float __exp2f (float __x) noexcept (true);


extern float log2f (float __x) noexcept (true); extern float __log2f (float __x) noexcept (true);






extern float powf (float __x, float __y) noexcept (true); extern float __powf (float __x, float __y) noexcept (true);


extern float sqrtf (float __x) noexcept (true); extern float __sqrtf (float __x) noexcept (true);



extern float hypotf (float __x, float __y) noexcept (true); extern float __hypotf (float __x, float __y) noexcept (true);




extern float cbrtf (float __x) noexcept (true); extern float __cbrtf (float __x) noexcept (true);






extern float ceilf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __ceilf (float __x) noexcept (true) __attribute__ ((__const__));


extern float fabsf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __fabsf (float __x) noexcept (true) __attribute__ ((__const__));


extern float floorf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __floorf (float __x) noexcept (true) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) noexcept (true); extern float __fmodf (float __x, float __y) noexcept (true);
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) noexcept (true)
  __attribute__ ((__const__));




extern int finitef (float __value) noexcept (true)
  __attribute__ ((__const__));


extern float dremf (float __x, float __y) noexcept (true); extern float __dremf (float __x, float __y) noexcept (true);



extern float significandf (float __x) noexcept (true); extern float __significandf (float __x) noexcept (true);






extern float copysignf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern float nanf (const char *__tagb) noexcept (true); extern float __nanf (const char *__tagb) noexcept (true);
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) noexcept (true)
  __attribute__ ((__const__));





extern float j0f (float) noexcept (true); extern float __j0f (float) noexcept (true);
extern float j1f (float) noexcept (true); extern float __j1f (float) noexcept (true);
extern float jnf (int, float) noexcept (true); extern float __jnf (int, float) noexcept (true);
extern float y0f (float) noexcept (true); extern float __y0f (float) noexcept (true);
extern float y1f (float) noexcept (true); extern float __y1f (float) noexcept (true);
extern float ynf (int, float) noexcept (true); extern float __ynf (int, float) noexcept (true);





extern float erff (float) noexcept (true); extern float __erff (float) noexcept (true);
extern float erfcf (float) noexcept (true); extern float __erfcf (float) noexcept (true);
extern float lgammaf (float) noexcept (true); extern float __lgammaf (float) noexcept (true);




extern float tgammaf (float) noexcept (true); extern float __tgammaf (float) noexcept (true);





extern float gammaf (float) noexcept (true); extern float __gammaf (float) noexcept (true);







extern float lgammaf_r (float, int *__signgamp) noexcept (true); extern float __lgammaf_r (float, int *__signgamp) noexcept (true);






extern float rintf (float __x) noexcept (true); extern float __rintf (float __x) noexcept (true);


extern float nextafterf (float __x, float __y) noexcept (true); extern float __nextafterf (float __x, float __y) noexcept (true);

extern float nexttowardf (float __x, long double __y) noexcept (true); extern float __nexttowardf (float __x, long double __y) noexcept (true);




extern float nextdownf (float __x) noexcept (true); extern float __nextdownf (float __x) noexcept (true);

extern float nextupf (float __x) noexcept (true); extern float __nextupf (float __x) noexcept (true);



extern float remainderf (float __x, float __y) noexcept (true); extern float __remainderf (float __x, float __y) noexcept (true);



extern float scalbnf (float __x, int __n) noexcept (true); extern float __scalbnf (float __x, int __n) noexcept (true);



extern int ilogbf (float __x) noexcept (true); extern int __ilogbf (float __x) noexcept (true);




extern long int llogbf (float __x) noexcept (true); extern long int __llogbf (float __x) noexcept (true);




extern float scalblnf (float __x, long int __n) noexcept (true); extern float __scalblnf (float __x, long int __n) noexcept (true);



extern float nearbyintf (float __x) noexcept (true); extern float __nearbyintf (float __x) noexcept (true);



extern float roundf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __roundf (float __x) noexcept (true) __attribute__ ((__const__));



extern float truncf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __truncf (float __x) noexcept (true) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) noexcept (true); extern float __remquof (float __x, float __y, int *__quo) noexcept (true);






extern long int lrintf (float __x) noexcept (true); extern long int __lrintf (float __x) noexcept (true);
__extension__
extern long long int llrintf (float __x) noexcept (true); extern long long int __llrintf (float __x) noexcept (true);



extern long int lroundf (float __x) noexcept (true); extern long int __lroundf (float __x) noexcept (true);
__extension__
extern long long int llroundf (float __x) noexcept (true); extern long long int __llroundf (float __x) noexcept (true);



extern float fdimf (float __x, float __y) noexcept (true); extern float __fdimf (float __x, float __y) noexcept (true);



extern float fmaxf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) noexcept (true) __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) noexcept (true); extern float __fmaf (float __x, float __y, float __z) noexcept (true);




extern float roundevenf (float __x) noexcept (true) __attribute__ ((__const__)); extern float __roundevenf (float __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef (float *__cx, const float *__x) noexcept (true);






extern float fmaxmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern float fmaximumf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximumf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimumf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimumf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fmaximum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__)); extern float __fminimum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf (const float *__x, const float *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf (const float *__x, const float *__y) noexcept (true)

     __attribute__ ((__pure__));


extern float getpayloadf (const float *__x) noexcept (true); extern float __getpayloadf (const float *__x) noexcept (true);


extern int setpayloadf (float *__x, float __payload) noexcept (true);


extern int setpayloadsigf (float *__x, float __payload) noexcept (true);







extern float scalbf (float __x, float __n) noexcept (true); extern float __scalbf (float __x, float __n) noexcept (true);
# 331 "/usr/include/math.h" 2 3 4
# 398 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbitl (long double __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinfl (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finitel (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnanl (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) noexcept (true);


extern int __issignalingl (long double __value) noexcept (true)
     __attribute__ ((__const__));
# 399 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) noexcept (true); extern long double __acosl (long double __x) noexcept (true);

extern long double asinl (long double __x) noexcept (true); extern long double __asinl (long double __x) noexcept (true);

extern long double atanl (long double __x) noexcept (true); extern long double __atanl (long double __x) noexcept (true);

extern long double atan2l (long double __y, long double __x) noexcept (true); extern long double __atan2l (long double __y, long double __x) noexcept (true);


extern long double cosl (long double __x) noexcept (true); extern long double __cosl (long double __x) noexcept (true);

extern long double sinl (long double __x) noexcept (true); extern long double __sinl (long double __x) noexcept (true);

extern long double tanl (long double __x) noexcept (true); extern long double __tanl (long double __x) noexcept (true);




extern long double coshl (long double __x) noexcept (true); extern long double __coshl (long double __x) noexcept (true);

extern long double sinhl (long double __x) noexcept (true); extern long double __sinhl (long double __x) noexcept (true);

extern long double tanhl (long double __x) noexcept (true); extern long double __tanhl (long double __x) noexcept (true);



extern void sincosl (long double __x, long double *__sinx, long double *__cosx) noexcept (true); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) noexcept (true);





extern long double acoshl (long double __x) noexcept (true); extern long double __acoshl (long double __x) noexcept (true);

extern long double asinhl (long double __x) noexcept (true); extern long double __asinhl (long double __x) noexcept (true);

extern long double atanhl (long double __x) noexcept (true); extern long double __atanhl (long double __x) noexcept (true);





extern long double expl (long double __x) noexcept (true); extern long double __expl (long double __x) noexcept (true);


extern long double frexpl (long double __x, int *__exponent) noexcept (true); extern long double __frexpl (long double __x, int *__exponent) noexcept (true);


extern long double ldexpl (long double __x, int __exponent) noexcept (true); extern long double __ldexpl (long double __x, int __exponent) noexcept (true);


extern long double logl (long double __x) noexcept (true); extern long double __logl (long double __x) noexcept (true);


extern long double log10l (long double __x) noexcept (true); extern long double __log10l (long double __x) noexcept (true);


extern long double modfl (long double __x, long double *__iptr) noexcept (true); extern long double __modfl (long double __x, long double *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern long double exp10l (long double __x) noexcept (true); extern long double __exp10l (long double __x) noexcept (true);




extern long double expm1l (long double __x) noexcept (true); extern long double __expm1l (long double __x) noexcept (true);


extern long double log1pl (long double __x) noexcept (true); extern long double __log1pl (long double __x) noexcept (true);


extern long double logbl (long double __x) noexcept (true); extern long double __logbl (long double __x) noexcept (true);




extern long double exp2l (long double __x) noexcept (true); extern long double __exp2l (long double __x) noexcept (true);


extern long double log2l (long double __x) noexcept (true); extern long double __log2l (long double __x) noexcept (true);






extern long double powl (long double __x, long double __y) noexcept (true); extern long double __powl (long double __x, long double __y) noexcept (true);


extern long double sqrtl (long double __x) noexcept (true); extern long double __sqrtl (long double __x) noexcept (true);



extern long double hypotl (long double __x, long double __y) noexcept (true); extern long double __hypotl (long double __x, long double __y) noexcept (true);




extern long double cbrtl (long double __x) noexcept (true); extern long double __cbrtl (long double __x) noexcept (true);






extern long double ceill (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __ceill (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double fabsl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __fabsl (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double floorl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __floorl (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) noexcept (true); extern long double __fmodl (long double __x, long double __y) noexcept (true);
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) noexcept (true)
  __attribute__ ((__const__));




extern int finitel (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) noexcept (true); extern long double __dreml (long double __x, long double __y) noexcept (true);



extern long double significandl (long double __x) noexcept (true); extern long double __significandl (long double __x) noexcept (true);






extern long double copysignl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern long double nanl (const char *__tagb) noexcept (true); extern long double __nanl (const char *__tagb) noexcept (true);
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) noexcept (true)
  __attribute__ ((__const__));





extern long double j0l (long double) noexcept (true); extern long double __j0l (long double) noexcept (true);
extern long double j1l (long double) noexcept (true); extern long double __j1l (long double) noexcept (true);
extern long double jnl (int, long double) noexcept (true); extern long double __jnl (int, long double) noexcept (true);
extern long double y0l (long double) noexcept (true); extern long double __y0l (long double) noexcept (true);
extern long double y1l (long double) noexcept (true); extern long double __y1l (long double) noexcept (true);
extern long double ynl (int, long double) noexcept (true); extern long double __ynl (int, long double) noexcept (true);





extern long double erfl (long double) noexcept (true); extern long double __erfl (long double) noexcept (true);
extern long double erfcl (long double) noexcept (true); extern long double __erfcl (long double) noexcept (true);
extern long double lgammal (long double) noexcept (true); extern long double __lgammal (long double) noexcept (true);




extern long double tgammal (long double) noexcept (true); extern long double __tgammal (long double) noexcept (true);





extern long double gammal (long double) noexcept (true); extern long double __gammal (long double) noexcept (true);







extern long double lgammal_r (long double, int *__signgamp) noexcept (true); extern long double __lgammal_r (long double, int *__signgamp) noexcept (true);






extern long double rintl (long double __x) noexcept (true); extern long double __rintl (long double __x) noexcept (true);


extern long double nextafterl (long double __x, long double __y) noexcept (true); extern long double __nextafterl (long double __x, long double __y) noexcept (true);

extern long double nexttowardl (long double __x, long double __y) noexcept (true); extern long double __nexttowardl (long double __x, long double __y) noexcept (true);




extern long double nextdownl (long double __x) noexcept (true); extern long double __nextdownl (long double __x) noexcept (true);

extern long double nextupl (long double __x) noexcept (true); extern long double __nextupl (long double __x) noexcept (true);



extern long double remainderl (long double __x, long double __y) noexcept (true); extern long double __remainderl (long double __x, long double __y) noexcept (true);



extern long double scalbnl (long double __x, int __n) noexcept (true); extern long double __scalbnl (long double __x, int __n) noexcept (true);



extern int ilogbl (long double __x) noexcept (true); extern int __ilogbl (long double __x) noexcept (true);




extern long int llogbl (long double __x) noexcept (true); extern long int __llogbl (long double __x) noexcept (true);




extern long double scalblnl (long double __x, long int __n) noexcept (true); extern long double __scalblnl (long double __x, long int __n) noexcept (true);



extern long double nearbyintl (long double __x) noexcept (true); extern long double __nearbyintl (long double __x) noexcept (true);



extern long double roundl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __roundl (long double __x) noexcept (true) __attribute__ ((__const__));



extern long double truncl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __truncl (long double __x) noexcept (true) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) noexcept (true); extern long double __remquol (long double __x, long double __y, int *__quo) noexcept (true);






extern long int lrintl (long double __x) noexcept (true); extern long int __lrintl (long double __x) noexcept (true);
__extension__
extern long long int llrintl (long double __x) noexcept (true); extern long long int __llrintl (long double __x) noexcept (true);



extern long int lroundl (long double __x) noexcept (true); extern long int __lroundl (long double __x) noexcept (true);
__extension__
extern long long int llroundl (long double __x) noexcept (true); extern long long int __llroundl (long double __x) noexcept (true);



extern long double fdiml (long double __x, long double __y) noexcept (true); extern long double __fdiml (long double __x, long double __y) noexcept (true);



extern long double fmaxl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) noexcept (true); extern long double __fmal (long double __x, long double __y, long double __z) noexcept (true);




extern long double roundevenl (long double __x) noexcept (true) __attribute__ ((__const__)); extern long double __roundevenl (long double __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizel (long double *__cx, const long double *__x) noexcept (true);






extern long double fmaxmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern long double fmaximuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fmaximum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__)); extern long double __fminimum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderl (const long double *__x, const long double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagl (const long double *__x, const long double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern long double getpayloadl (const long double *__x) noexcept (true); extern long double __getpayloadl (const long double *__x) noexcept (true);


extern int setpayloadl (long double *__x, long double __payload) noexcept (true);


extern int setpayloadsigl (long double *__x, long double __payload) noexcept (true);







extern long double scalbl (long double __x, long double __n) noexcept (true); extern long double __scalbl (long double __x, long double __n) noexcept (true);
# 400 "/usr/include/math.h" 2 3 4
# 450 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 acosf32 (_Float32 __x) noexcept (true); extern _Float32 __acosf32 (_Float32 __x) noexcept (true);

extern _Float32 asinf32 (_Float32 __x) noexcept (true); extern _Float32 __asinf32 (_Float32 __x) noexcept (true);

extern _Float32 atanf32 (_Float32 __x) noexcept (true); extern _Float32 __atanf32 (_Float32 __x) noexcept (true);

extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) noexcept (true); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) noexcept (true);


extern _Float32 cosf32 (_Float32 __x) noexcept (true); extern _Float32 __cosf32 (_Float32 __x) noexcept (true);

extern _Float32 sinf32 (_Float32 __x) noexcept (true); extern _Float32 __sinf32 (_Float32 __x) noexcept (true);

extern _Float32 tanf32 (_Float32 __x) noexcept (true); extern _Float32 __tanf32 (_Float32 __x) noexcept (true);




extern _Float32 coshf32 (_Float32 __x) noexcept (true); extern _Float32 __coshf32 (_Float32 __x) noexcept (true);

extern _Float32 sinhf32 (_Float32 __x) noexcept (true); extern _Float32 __sinhf32 (_Float32 __x) noexcept (true);

extern _Float32 tanhf32 (_Float32 __x) noexcept (true); extern _Float32 __tanhf32 (_Float32 __x) noexcept (true);



extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) noexcept (true); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) noexcept (true);





extern _Float32 acoshf32 (_Float32 __x) noexcept (true); extern _Float32 __acoshf32 (_Float32 __x) noexcept (true);

extern _Float32 asinhf32 (_Float32 __x) noexcept (true); extern _Float32 __asinhf32 (_Float32 __x) noexcept (true);

extern _Float32 atanhf32 (_Float32 __x) noexcept (true); extern _Float32 __atanhf32 (_Float32 __x) noexcept (true);





extern _Float32 expf32 (_Float32 __x) noexcept (true); extern _Float32 __expf32 (_Float32 __x) noexcept (true);


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) noexcept (true); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) noexcept (true);


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) noexcept (true); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) noexcept (true);


extern _Float32 logf32 (_Float32 __x) noexcept (true); extern _Float32 __logf32 (_Float32 __x) noexcept (true);


extern _Float32 log10f32 (_Float32 __x) noexcept (true); extern _Float32 __log10f32 (_Float32 __x) noexcept (true);


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) noexcept (true); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern _Float32 exp10f32 (_Float32 __x) noexcept (true); extern _Float32 __exp10f32 (_Float32 __x) noexcept (true);




extern _Float32 expm1f32 (_Float32 __x) noexcept (true); extern _Float32 __expm1f32 (_Float32 __x) noexcept (true);


extern _Float32 log1pf32 (_Float32 __x) noexcept (true); extern _Float32 __log1pf32 (_Float32 __x) noexcept (true);


extern _Float32 logbf32 (_Float32 __x) noexcept (true); extern _Float32 __logbf32 (_Float32 __x) noexcept (true);




extern _Float32 exp2f32 (_Float32 __x) noexcept (true); extern _Float32 __exp2f32 (_Float32 __x) noexcept (true);


extern _Float32 log2f32 (_Float32 __x) noexcept (true); extern _Float32 __log2f32 (_Float32 __x) noexcept (true);






extern _Float32 powf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) noexcept (true);


extern _Float32 sqrtf32 (_Float32 __x) noexcept (true); extern _Float32 __sqrtf32 (_Float32 __x) noexcept (true);



extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) noexcept (true);




extern _Float32 cbrtf32 (_Float32 __x) noexcept (true); extern _Float32 __cbrtf32 (_Float32 __x) noexcept (true);






extern _Float32 ceilf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) noexcept (true); extern _Float32 __nanf32 (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) noexcept (true); extern _Float32 __j0f32 (_Float32) noexcept (true);
extern _Float32 j1f32 (_Float32) noexcept (true); extern _Float32 __j1f32 (_Float32) noexcept (true);
extern _Float32 jnf32 (int, _Float32) noexcept (true); extern _Float32 __jnf32 (int, _Float32) noexcept (true);
extern _Float32 y0f32 (_Float32) noexcept (true); extern _Float32 __y0f32 (_Float32) noexcept (true);
extern _Float32 y1f32 (_Float32) noexcept (true); extern _Float32 __y1f32 (_Float32) noexcept (true);
extern _Float32 ynf32 (int, _Float32) noexcept (true); extern _Float32 __ynf32 (int, _Float32) noexcept (true);





extern _Float32 erff32 (_Float32) noexcept (true); extern _Float32 __erff32 (_Float32) noexcept (true);
extern _Float32 erfcf32 (_Float32) noexcept (true); extern _Float32 __erfcf32 (_Float32) noexcept (true);
extern _Float32 lgammaf32 (_Float32) noexcept (true); extern _Float32 __lgammaf32 (_Float32) noexcept (true);




extern _Float32 tgammaf32 (_Float32) noexcept (true); extern _Float32 __tgammaf32 (_Float32) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) noexcept (true); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) noexcept (true);






extern _Float32 rintf32 (_Float32 __x) noexcept (true); extern _Float32 __rintf32 (_Float32 __x) noexcept (true);


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) noexcept (true);






extern _Float32 nextdownf32 (_Float32 __x) noexcept (true); extern _Float32 __nextdownf32 (_Float32 __x) noexcept (true);

extern _Float32 nextupf32 (_Float32 __x) noexcept (true); extern _Float32 __nextupf32 (_Float32 __x) noexcept (true);



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) noexcept (true);



extern _Float32 scalbnf32 (_Float32 __x, int __n) noexcept (true); extern _Float32 __scalbnf32 (_Float32 __x, int __n) noexcept (true);



extern int ilogbf32 (_Float32 __x) noexcept (true); extern int __ilogbf32 (_Float32 __x) noexcept (true);




extern long int llogbf32 (_Float32 __x) noexcept (true); extern long int __llogbf32 (_Float32 __x) noexcept (true);




extern _Float32 scalblnf32 (_Float32 __x, long int __n) noexcept (true); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) noexcept (true);



extern _Float32 nearbyintf32 (_Float32 __x) noexcept (true); extern _Float32 __nearbyintf32 (_Float32 __x) noexcept (true);



extern _Float32 roundf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) noexcept (true); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) noexcept (true);






extern long int lrintf32 (_Float32 __x) noexcept (true); extern long int __lrintf32 (_Float32 __x) noexcept (true);
__extension__
extern long long int llrintf32 (_Float32 __x) noexcept (true); extern long long int __llrintf32 (_Float32 __x) noexcept (true);



extern long int lroundf32 (_Float32 __x) noexcept (true); extern long int __lroundf32 (_Float32 __x) noexcept (true);
__extension__
extern long long int llroundf32 (_Float32 __x) noexcept (true); extern long long int __llroundf32 (_Float32 __x) noexcept (true);



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) noexcept (true);



extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));



extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) noexcept (true); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) noexcept (true);




extern _Float32 roundevenf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) noexcept (true);






extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern _Float32 fmaximumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fmaximum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__)); extern _Float32 __fminimum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf32 (const _Float32 *__x, const _Float32 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf32 (const _Float32 *__x, const _Float32 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float32 getpayloadf32 (const _Float32 *__x) noexcept (true); extern _Float32 __getpayloadf32 (const _Float32 *__x) noexcept (true);


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) noexcept (true);


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) noexcept (true);
# 451 "/usr/include/math.h" 2 3 4
# 467 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 acosf64 (_Float64 __x) noexcept (true); extern _Float64 __acosf64 (_Float64 __x) noexcept (true);

extern _Float64 asinf64 (_Float64 __x) noexcept (true); extern _Float64 __asinf64 (_Float64 __x) noexcept (true);

extern _Float64 atanf64 (_Float64 __x) noexcept (true); extern _Float64 __atanf64 (_Float64 __x) noexcept (true);

extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) noexcept (true); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) noexcept (true);


extern _Float64 cosf64 (_Float64 __x) noexcept (true); extern _Float64 __cosf64 (_Float64 __x) noexcept (true);

extern _Float64 sinf64 (_Float64 __x) noexcept (true); extern _Float64 __sinf64 (_Float64 __x) noexcept (true);

extern _Float64 tanf64 (_Float64 __x) noexcept (true); extern _Float64 __tanf64 (_Float64 __x) noexcept (true);




extern _Float64 coshf64 (_Float64 __x) noexcept (true); extern _Float64 __coshf64 (_Float64 __x) noexcept (true);

extern _Float64 sinhf64 (_Float64 __x) noexcept (true); extern _Float64 __sinhf64 (_Float64 __x) noexcept (true);

extern _Float64 tanhf64 (_Float64 __x) noexcept (true); extern _Float64 __tanhf64 (_Float64 __x) noexcept (true);



extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) noexcept (true); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) noexcept (true);





extern _Float64 acoshf64 (_Float64 __x) noexcept (true); extern _Float64 __acoshf64 (_Float64 __x) noexcept (true);

extern _Float64 asinhf64 (_Float64 __x) noexcept (true); extern _Float64 __asinhf64 (_Float64 __x) noexcept (true);

extern _Float64 atanhf64 (_Float64 __x) noexcept (true); extern _Float64 __atanhf64 (_Float64 __x) noexcept (true);





extern _Float64 expf64 (_Float64 __x) noexcept (true); extern _Float64 __expf64 (_Float64 __x) noexcept (true);


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) noexcept (true); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) noexcept (true);


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) noexcept (true); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) noexcept (true);


extern _Float64 logf64 (_Float64 __x) noexcept (true); extern _Float64 __logf64 (_Float64 __x) noexcept (true);


extern _Float64 log10f64 (_Float64 __x) noexcept (true); extern _Float64 __log10f64 (_Float64 __x) noexcept (true);


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) noexcept (true); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern _Float64 exp10f64 (_Float64 __x) noexcept (true); extern _Float64 __exp10f64 (_Float64 __x) noexcept (true);




extern _Float64 expm1f64 (_Float64 __x) noexcept (true); extern _Float64 __expm1f64 (_Float64 __x) noexcept (true);


extern _Float64 log1pf64 (_Float64 __x) noexcept (true); extern _Float64 __log1pf64 (_Float64 __x) noexcept (true);


extern _Float64 logbf64 (_Float64 __x) noexcept (true); extern _Float64 __logbf64 (_Float64 __x) noexcept (true);




extern _Float64 exp2f64 (_Float64 __x) noexcept (true); extern _Float64 __exp2f64 (_Float64 __x) noexcept (true);


extern _Float64 log2f64 (_Float64 __x) noexcept (true); extern _Float64 __log2f64 (_Float64 __x) noexcept (true);






extern _Float64 powf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float64 sqrtf64 (_Float64 __x) noexcept (true); extern _Float64 __sqrtf64 (_Float64 __x) noexcept (true);



extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) noexcept (true);




extern _Float64 cbrtf64 (_Float64 __x) noexcept (true); extern _Float64 __cbrtf64 (_Float64 __x) noexcept (true);






extern _Float64 ceilf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) noexcept (true); extern _Float64 __nanf64 (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) noexcept (true); extern _Float64 __j0f64 (_Float64) noexcept (true);
extern _Float64 j1f64 (_Float64) noexcept (true); extern _Float64 __j1f64 (_Float64) noexcept (true);
extern _Float64 jnf64 (int, _Float64) noexcept (true); extern _Float64 __jnf64 (int, _Float64) noexcept (true);
extern _Float64 y0f64 (_Float64) noexcept (true); extern _Float64 __y0f64 (_Float64) noexcept (true);
extern _Float64 y1f64 (_Float64) noexcept (true); extern _Float64 __y1f64 (_Float64) noexcept (true);
extern _Float64 ynf64 (int, _Float64) noexcept (true); extern _Float64 __ynf64 (int, _Float64) noexcept (true);





extern _Float64 erff64 (_Float64) noexcept (true); extern _Float64 __erff64 (_Float64) noexcept (true);
extern _Float64 erfcf64 (_Float64) noexcept (true); extern _Float64 __erfcf64 (_Float64) noexcept (true);
extern _Float64 lgammaf64 (_Float64) noexcept (true); extern _Float64 __lgammaf64 (_Float64) noexcept (true);




extern _Float64 tgammaf64 (_Float64) noexcept (true); extern _Float64 __tgammaf64 (_Float64) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) noexcept (true); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) noexcept (true);






extern _Float64 rintf64 (_Float64 __x) noexcept (true); extern _Float64 __rintf64 (_Float64 __x) noexcept (true);


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) noexcept (true);






extern _Float64 nextdownf64 (_Float64 __x) noexcept (true); extern _Float64 __nextdownf64 (_Float64 __x) noexcept (true);

extern _Float64 nextupf64 (_Float64 __x) noexcept (true); extern _Float64 __nextupf64 (_Float64 __x) noexcept (true);



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) noexcept (true);



extern _Float64 scalbnf64 (_Float64 __x, int __n) noexcept (true); extern _Float64 __scalbnf64 (_Float64 __x, int __n) noexcept (true);



extern int ilogbf64 (_Float64 __x) noexcept (true); extern int __ilogbf64 (_Float64 __x) noexcept (true);




extern long int llogbf64 (_Float64 __x) noexcept (true); extern long int __llogbf64 (_Float64 __x) noexcept (true);




extern _Float64 scalblnf64 (_Float64 __x, long int __n) noexcept (true); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) noexcept (true);



extern _Float64 nearbyintf64 (_Float64 __x) noexcept (true); extern _Float64 __nearbyintf64 (_Float64 __x) noexcept (true);



extern _Float64 roundf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) noexcept (true); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) noexcept (true);






extern long int lrintf64 (_Float64 __x) noexcept (true); extern long int __lrintf64 (_Float64 __x) noexcept (true);
__extension__
extern long long int llrintf64 (_Float64 __x) noexcept (true); extern long long int __llrintf64 (_Float64 __x) noexcept (true);



extern long int lroundf64 (_Float64 __x) noexcept (true); extern long int __lroundf64 (_Float64 __x) noexcept (true);
__extension__
extern long long int llroundf64 (_Float64 __x) noexcept (true); extern long long int __llroundf64 (_Float64 __x) noexcept (true);



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) noexcept (true);



extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));



extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);




extern _Float64 roundevenf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) noexcept (true);






extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern _Float64 fmaximumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fmaximum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__)); extern _Float64 __fminimum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf64 (const _Float64 *__x, const _Float64 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf64 (const _Float64 *__x, const _Float64 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float64 getpayloadf64 (const _Float64 *__x) noexcept (true); extern _Float64 __getpayloadf64 (const _Float64 *__x) noexcept (true);


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) noexcept (true);


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) noexcept (true);
# 468 "/usr/include/math.h" 2 3 4
# 501 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x acosf32x (_Float32x __x) noexcept (true); extern _Float32x __acosf32x (_Float32x __x) noexcept (true);

extern _Float32x asinf32x (_Float32x __x) noexcept (true); extern _Float32x __asinf32x (_Float32x __x) noexcept (true);

extern _Float32x atanf32x (_Float32x __x) noexcept (true); extern _Float32x __atanf32x (_Float32x __x) noexcept (true);

extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) noexcept (true); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) noexcept (true);


extern _Float32x cosf32x (_Float32x __x) noexcept (true); extern _Float32x __cosf32x (_Float32x __x) noexcept (true);

extern _Float32x sinf32x (_Float32x __x) noexcept (true); extern _Float32x __sinf32x (_Float32x __x) noexcept (true);

extern _Float32x tanf32x (_Float32x __x) noexcept (true); extern _Float32x __tanf32x (_Float32x __x) noexcept (true);




extern _Float32x coshf32x (_Float32x __x) noexcept (true); extern _Float32x __coshf32x (_Float32x __x) noexcept (true);

extern _Float32x sinhf32x (_Float32x __x) noexcept (true); extern _Float32x __sinhf32x (_Float32x __x) noexcept (true);

extern _Float32x tanhf32x (_Float32x __x) noexcept (true); extern _Float32x __tanhf32x (_Float32x __x) noexcept (true);



extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) noexcept (true); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) noexcept (true);





extern _Float32x acoshf32x (_Float32x __x) noexcept (true); extern _Float32x __acoshf32x (_Float32x __x) noexcept (true);

extern _Float32x asinhf32x (_Float32x __x) noexcept (true); extern _Float32x __asinhf32x (_Float32x __x) noexcept (true);

extern _Float32x atanhf32x (_Float32x __x) noexcept (true); extern _Float32x __atanhf32x (_Float32x __x) noexcept (true);





extern _Float32x expf32x (_Float32x __x) noexcept (true); extern _Float32x __expf32x (_Float32x __x) noexcept (true);


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) noexcept (true); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) noexcept (true);


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) noexcept (true); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) noexcept (true);


extern _Float32x logf32x (_Float32x __x) noexcept (true); extern _Float32x __logf32x (_Float32x __x) noexcept (true);


extern _Float32x log10f32x (_Float32x __x) noexcept (true); extern _Float32x __log10f32x (_Float32x __x) noexcept (true);


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) noexcept (true); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern _Float32x exp10f32x (_Float32x __x) noexcept (true); extern _Float32x __exp10f32x (_Float32x __x) noexcept (true);




extern _Float32x expm1f32x (_Float32x __x) noexcept (true); extern _Float32x __expm1f32x (_Float32x __x) noexcept (true);


extern _Float32x log1pf32x (_Float32x __x) noexcept (true); extern _Float32x __log1pf32x (_Float32x __x) noexcept (true);


extern _Float32x logbf32x (_Float32x __x) noexcept (true); extern _Float32x __logbf32x (_Float32x __x) noexcept (true);




extern _Float32x exp2f32x (_Float32x __x) noexcept (true); extern _Float32x __exp2f32x (_Float32x __x) noexcept (true);


extern _Float32x log2f32x (_Float32x __x) noexcept (true); extern _Float32x __log2f32x (_Float32x __x) noexcept (true);






extern _Float32x powf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32x sqrtf32x (_Float32x __x) noexcept (true); extern _Float32x __sqrtf32x (_Float32x __x) noexcept (true);



extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) noexcept (true);




extern _Float32x cbrtf32x (_Float32x __x) noexcept (true); extern _Float32x __cbrtf32x (_Float32x __x) noexcept (true);






extern _Float32x ceilf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) noexcept (true); extern _Float32x __nanf32x (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) noexcept (true); extern _Float32x __j0f32x (_Float32x) noexcept (true);
extern _Float32x j1f32x (_Float32x) noexcept (true); extern _Float32x __j1f32x (_Float32x) noexcept (true);
extern _Float32x jnf32x (int, _Float32x) noexcept (true); extern _Float32x __jnf32x (int, _Float32x) noexcept (true);
extern _Float32x y0f32x (_Float32x) noexcept (true); extern _Float32x __y0f32x (_Float32x) noexcept (true);
extern _Float32x y1f32x (_Float32x) noexcept (true); extern _Float32x __y1f32x (_Float32x) noexcept (true);
extern _Float32x ynf32x (int, _Float32x) noexcept (true); extern _Float32x __ynf32x (int, _Float32x) noexcept (true);





extern _Float32x erff32x (_Float32x) noexcept (true); extern _Float32x __erff32x (_Float32x) noexcept (true);
extern _Float32x erfcf32x (_Float32x) noexcept (true); extern _Float32x __erfcf32x (_Float32x) noexcept (true);
extern _Float32x lgammaf32x (_Float32x) noexcept (true); extern _Float32x __lgammaf32x (_Float32x) noexcept (true);




extern _Float32x tgammaf32x (_Float32x) noexcept (true); extern _Float32x __tgammaf32x (_Float32x) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) noexcept (true); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) noexcept (true);






extern _Float32x rintf32x (_Float32x __x) noexcept (true); extern _Float32x __rintf32x (_Float32x __x) noexcept (true);


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) noexcept (true);






extern _Float32x nextdownf32x (_Float32x __x) noexcept (true); extern _Float32x __nextdownf32x (_Float32x __x) noexcept (true);

extern _Float32x nextupf32x (_Float32x __x) noexcept (true); extern _Float32x __nextupf32x (_Float32x __x) noexcept (true);



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) noexcept (true);



extern _Float32x scalbnf32x (_Float32x __x, int __n) noexcept (true); extern _Float32x __scalbnf32x (_Float32x __x, int __n) noexcept (true);



extern int ilogbf32x (_Float32x __x) noexcept (true); extern int __ilogbf32x (_Float32x __x) noexcept (true);




extern long int llogbf32x (_Float32x __x) noexcept (true); extern long int __llogbf32x (_Float32x __x) noexcept (true);




extern _Float32x scalblnf32x (_Float32x __x, long int __n) noexcept (true); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) noexcept (true);



extern _Float32x nearbyintf32x (_Float32x __x) noexcept (true); extern _Float32x __nearbyintf32x (_Float32x __x) noexcept (true);



extern _Float32x roundf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) noexcept (true); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) noexcept (true);






extern long int lrintf32x (_Float32x __x) noexcept (true); extern long int __lrintf32x (_Float32x __x) noexcept (true);
__extension__
extern long long int llrintf32x (_Float32x __x) noexcept (true); extern long long int __llrintf32x (_Float32x __x) noexcept (true);



extern long int lroundf32x (_Float32x __x) noexcept (true); extern long int __lroundf32x (_Float32x __x) noexcept (true);
__extension__
extern long long int llroundf32x (_Float32x __x) noexcept (true); extern long long int __llroundf32x (_Float32x __x) noexcept (true);



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) noexcept (true);



extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));



extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true);




extern _Float32x roundevenf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) noexcept (true);






extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern _Float32x fmaximumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fmaximum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__)); extern _Float32x __fminimum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf32x (const _Float32x *__x, const _Float32x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf32x (const _Float32x *__x, const _Float32x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float32x getpayloadf32x (const _Float32x *__x) noexcept (true); extern _Float32x __getpayloadf32x (const _Float32x *__x) noexcept (true);


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) noexcept (true);


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) noexcept (true);
# 502 "/usr/include/math.h" 2 3 4
# 518 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x acosf64x (_Float64x __x) noexcept (true); extern _Float64x __acosf64x (_Float64x __x) noexcept (true);

extern _Float64x asinf64x (_Float64x __x) noexcept (true); extern _Float64x __asinf64x (_Float64x __x) noexcept (true);

extern _Float64x atanf64x (_Float64x __x) noexcept (true); extern _Float64x __atanf64x (_Float64x __x) noexcept (true);

extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) noexcept (true); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) noexcept (true);


extern _Float64x cosf64x (_Float64x __x) noexcept (true); extern _Float64x __cosf64x (_Float64x __x) noexcept (true);

extern _Float64x sinf64x (_Float64x __x) noexcept (true); extern _Float64x __sinf64x (_Float64x __x) noexcept (true);

extern _Float64x tanf64x (_Float64x __x) noexcept (true); extern _Float64x __tanf64x (_Float64x __x) noexcept (true);




extern _Float64x coshf64x (_Float64x __x) noexcept (true); extern _Float64x __coshf64x (_Float64x __x) noexcept (true);

extern _Float64x sinhf64x (_Float64x __x) noexcept (true); extern _Float64x __sinhf64x (_Float64x __x) noexcept (true);

extern _Float64x tanhf64x (_Float64x __x) noexcept (true); extern _Float64x __tanhf64x (_Float64x __x) noexcept (true);



extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) noexcept (true); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) noexcept (true);





extern _Float64x acoshf64x (_Float64x __x) noexcept (true); extern _Float64x __acoshf64x (_Float64x __x) noexcept (true);

extern _Float64x asinhf64x (_Float64x __x) noexcept (true); extern _Float64x __asinhf64x (_Float64x __x) noexcept (true);

extern _Float64x atanhf64x (_Float64x __x) noexcept (true); extern _Float64x __atanhf64x (_Float64x __x) noexcept (true);





extern _Float64x expf64x (_Float64x __x) noexcept (true); extern _Float64x __expf64x (_Float64x __x) noexcept (true);


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) noexcept (true); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) noexcept (true);


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) noexcept (true); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) noexcept (true);


extern _Float64x logf64x (_Float64x __x) noexcept (true); extern _Float64x __logf64x (_Float64x __x) noexcept (true);


extern _Float64x log10f64x (_Float64x __x) noexcept (true); extern _Float64x __log10f64x (_Float64x __x) noexcept (true);


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) noexcept (true); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern _Float64x exp10f64x (_Float64x __x) noexcept (true); extern _Float64x __exp10f64x (_Float64x __x) noexcept (true);




extern _Float64x expm1f64x (_Float64x __x) noexcept (true); extern _Float64x __expm1f64x (_Float64x __x) noexcept (true);


extern _Float64x log1pf64x (_Float64x __x) noexcept (true); extern _Float64x __log1pf64x (_Float64x __x) noexcept (true);


extern _Float64x logbf64x (_Float64x __x) noexcept (true); extern _Float64x __logbf64x (_Float64x __x) noexcept (true);




extern _Float64x exp2f64x (_Float64x __x) noexcept (true); extern _Float64x __exp2f64x (_Float64x __x) noexcept (true);


extern _Float64x log2f64x (_Float64x __x) noexcept (true); extern _Float64x __log2f64x (_Float64x __x) noexcept (true);






extern _Float64x powf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64x sqrtf64x (_Float64x __x) noexcept (true); extern _Float64x __sqrtf64x (_Float64x __x) noexcept (true);



extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) noexcept (true);




extern _Float64x cbrtf64x (_Float64x __x) noexcept (true); extern _Float64x __cbrtf64x (_Float64x __x) noexcept (true);






extern _Float64x ceilf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) noexcept (true); extern _Float64x __nanf64x (const char *__tagb) noexcept (true);
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) noexcept (true); extern _Float64x __j0f64x (_Float64x) noexcept (true);
extern _Float64x j1f64x (_Float64x) noexcept (true); extern _Float64x __j1f64x (_Float64x) noexcept (true);
extern _Float64x jnf64x (int, _Float64x) noexcept (true); extern _Float64x __jnf64x (int, _Float64x) noexcept (true);
extern _Float64x y0f64x (_Float64x) noexcept (true); extern _Float64x __y0f64x (_Float64x) noexcept (true);
extern _Float64x y1f64x (_Float64x) noexcept (true); extern _Float64x __y1f64x (_Float64x) noexcept (true);
extern _Float64x ynf64x (int, _Float64x) noexcept (true); extern _Float64x __ynf64x (int, _Float64x) noexcept (true);





extern _Float64x erff64x (_Float64x) noexcept (true); extern _Float64x __erff64x (_Float64x) noexcept (true);
extern _Float64x erfcf64x (_Float64x) noexcept (true); extern _Float64x __erfcf64x (_Float64x) noexcept (true);
extern _Float64x lgammaf64x (_Float64x) noexcept (true); extern _Float64x __lgammaf64x (_Float64x) noexcept (true);




extern _Float64x tgammaf64x (_Float64x) noexcept (true); extern _Float64x __tgammaf64x (_Float64x) noexcept (true);
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) noexcept (true); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) noexcept (true);






extern _Float64x rintf64x (_Float64x __x) noexcept (true); extern _Float64x __rintf64x (_Float64x __x) noexcept (true);


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) noexcept (true);






extern _Float64x nextdownf64x (_Float64x __x) noexcept (true); extern _Float64x __nextdownf64x (_Float64x __x) noexcept (true);

extern _Float64x nextupf64x (_Float64x __x) noexcept (true); extern _Float64x __nextupf64x (_Float64x __x) noexcept (true);



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) noexcept (true);



extern _Float64x scalbnf64x (_Float64x __x, int __n) noexcept (true); extern _Float64x __scalbnf64x (_Float64x __x, int __n) noexcept (true);



extern int ilogbf64x (_Float64x __x) noexcept (true); extern int __ilogbf64x (_Float64x __x) noexcept (true);




extern long int llogbf64x (_Float64x __x) noexcept (true); extern long int __llogbf64x (_Float64x __x) noexcept (true);




extern _Float64x scalblnf64x (_Float64x __x, long int __n) noexcept (true); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) noexcept (true);



extern _Float64x nearbyintf64x (_Float64x __x) noexcept (true); extern _Float64x __nearbyintf64x (_Float64x __x) noexcept (true);



extern _Float64x roundf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) noexcept (true); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) noexcept (true);






extern long int lrintf64x (_Float64x __x) noexcept (true); extern long int __lrintf64x (_Float64x __x) noexcept (true);
__extension__
extern long long int llrintf64x (_Float64x __x) noexcept (true); extern long long int __llrintf64x (_Float64x __x) noexcept (true);



extern long int lroundf64x (_Float64x __x) noexcept (true); extern long int __lroundf64x (_Float64x __x) noexcept (true);
__extension__
extern long long int llroundf64x (_Float64x __x) noexcept (true); extern long long int __llroundf64x (_Float64x __x) noexcept (true);



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) noexcept (true);



extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));



extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);




extern _Float64x roundevenf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);




extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);





extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);





extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true);



extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) noexcept (true);






extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern _Float64x fmaximumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fmaximum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__)); extern _Float64x __fminimum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf64x (const _Float64x *__x, const _Float64x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf64x (const _Float64x *__x, const _Float64x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float64x getpayloadf64x (const _Float64x *__x) noexcept (true); extern _Float64x __getpayloadf64x (const _Float64x *__x) noexcept (true);


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) noexcept (true);


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) noexcept (true);
# 519 "/usr/include/math.h" 2 3 4
# 566 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float fadd (double __x, double __y) noexcept (true);


extern float fdiv (double __x, double __y) noexcept (true);


extern float ffma (double __x, double __y, double __z) noexcept (true);


extern float fmul (double __x, double __y) noexcept (true);


extern float fsqrt (double __x) noexcept (true);


extern float fsub (double __x, double __y) noexcept (true);
# 567 "/usr/include/math.h" 2 3 4
# 587 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float faddl (long double __x, long double __y) noexcept (true);


extern float fdivl (long double __x, long double __y) noexcept (true);


extern float ffmal (long double __x, long double __y, long double __z) noexcept (true);


extern float fmull (long double __x, long double __y) noexcept (true);


extern float fsqrtl (long double __x) noexcept (true);


extern float fsubl (long double __x, long double __y) noexcept (true);
# 588 "/usr/include/math.h" 2 3 4
# 616 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern double daddl (long double __x, long double __y) noexcept (true);


extern double ddivl (long double __x, long double __y) noexcept (true);


extern double dfmal (long double __x, long double __y, long double __z) noexcept (true);


extern double dmull (long double __x, long double __y) noexcept (true);


extern double dsqrtl (long double __x) noexcept (true);


extern double dsubl (long double __x, long double __y) noexcept (true);
# 617 "/usr/include/math.h" 2 3 4
# 697 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32divf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true);


extern _Float32 f32mulf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32sqrtf32x (_Float32x __x) noexcept (true);


extern _Float32 f32subf32x (_Float32x __x, _Float32x __y) noexcept (true);
# 698 "/usr/include/math.h" 2 3 4
# 707 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32divf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);


extern _Float32 f32mulf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32sqrtf64 (_Float64 __x) noexcept (true);


extern _Float32 f32subf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 708 "/usr/include/math.h" 2 3 4
# 717 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32divf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float32 f32mulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32sqrtf64x (_Float64x __x) noexcept (true);


extern _Float32 f32subf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 718 "/usr/include/math.h" 2 3 4
# 747 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xdivf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xfmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);


extern _Float32x f32xmulf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xsqrtf64 (_Float64 __x) noexcept (true);


extern _Float32x f32xsubf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 748 "/usr/include/math.h" 2 3 4
# 757 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xdivf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xfmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float32x f32xmulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xsqrtf64x (_Float64x __x) noexcept (true);


extern _Float32x f32xsubf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 758 "/usr/include/math.h" 2 3 4
# 787 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64divf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float64 f64mulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64sqrtf64x (_Float64x __x) noexcept (true);


extern _Float64 f64subf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 788 "/usr/include/math.h" 2 3 4
# 854 "/usr/include/math.h" 3 4
extern int signgam;
# 934 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 1054 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     noexcept (true) __attribute__ ((__const__));
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }



}
# 1055 "/usr/include/math.h" 2 3 4
# 1066 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}





}
# 1097 "/usr/include/math.h" 3 4
extern "C++" {
# 1128 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 1363 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (long double __x, long double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};
# 1406 "/usr/include/math.h" 3 4
template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 46 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 2 3
# 76 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;

  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;

  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;

  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;

  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }

  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;

  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;

  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;

  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;

  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;

  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;

  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;

  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }

  using ::frexp;

  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;

  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
  ldexp(_Tp __x, int __exp)
  { return __builtin_ldexp(__x, __exp); }

  using ::log;

  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;

  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;

  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }

  using ::pow;

  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 371 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
 template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;

  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;

  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;

  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;

  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;

  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 480 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  inline int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  inline int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  inline int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }

  inline bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  inline bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  inline bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isfinite(_Tp __x)
    { return true; }

  inline bool
  isinf(float __x)
  { return __builtin_isinf(__x); }

  inline bool
  isinf(double __x)
  { return __builtin_isinf(__x); }

  inline bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isinf(_Tp __x)
    { return false; }

  inline bool
  isnan(float __x)
  { return __builtin_isnan(__x); }

  inline bool
  isnan(double __x)
  { return __builtin_isnan(__x); }

  inline bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isnan(_Tp __x)
    { return false; }

  inline bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  inline bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  inline bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }

  inline bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  inline bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  inline bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }

  inline bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  inline bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  inline bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }

  inline bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  inline bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  inline bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }

  inline bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  inline bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  inline bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }

  inline bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  inline bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  inline bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }

  inline bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  inline bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  inline bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }

  inline bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  inline bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  inline bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 842 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
}
# 957 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;

  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;

  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;


  inline float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  inline long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    acosh(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return acosh(__type(__x));
    }

  inline float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  inline long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    asinh(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return asinh(__type(__x));
    }

  inline float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  inline long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    atanh(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return atanh(__type(__x));
    }

  inline float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  inline long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    cbrt(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return cbrt(__type(__x));
    }

  inline float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  inline long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }

  inline float
  erf(float __x)
  { return __builtin_erff(__x); }

  inline long double
  erf(long double __x)
  { return __builtin_erfl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    erf(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return erf(__type(__x));
    }

  inline float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  inline long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    erfc(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return erfc(__type(__x));
    }

  inline float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  inline long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    exp2(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return exp2(__type(__x));
    }

  inline float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  inline long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    expm1(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return expm1(__type(__x));
    }

  inline float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  inline long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }

  inline float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  inline long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }

  template<typename _Tp, typename _Up, typename _Vp>
    inline typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }

  inline float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  inline long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }

  inline float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  inline long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }

  inline float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  inline long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }

  inline int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  inline int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }

  template<typename _Tp>
    inline int
    ilogb(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return ilogb(__type(__x));
    }

  inline float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  inline long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    lgamma(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return lgamma(__type(__x));
    }

  inline long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  inline long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }

  template<typename _Tp>
    inline long long
    llrint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return llrint(__type(__x));
    }

  inline long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  inline long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }

  template<typename _Tp>
    inline long long
    llround(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return llround(__type(__x));
    }

  inline float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  inline long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    log1p(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return log1p(__type(__x));
    }


  inline float
  log2(float __x)
  { return __builtin_log2f(__x); }

  inline long double
  log2(long double __x)
  { return __builtin_log2l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    log2(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return log2(__type(__x));
    }

  inline float
  logb(float __x)
  { return __builtin_logbf(__x); }

  inline long double
  logb(long double __x)
  { return __builtin_logbl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    logb(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return logb(__type(__x));
    }

  inline long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  inline long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }

  template<typename _Tp>
    inline long
    lrint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return lrint(__type(__x));
    }

  inline long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  inline long
  lround(long double __x)
  { return __builtin_lroundl(__x); }

  template<typename _Tp>
    inline long
    lround(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return lround(__type(__x));
    }

  inline float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  inline long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    nearbyint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return nearbyint(__type(__x));
    }

  inline float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  inline long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }

  inline float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  inline long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    nexttoward(_Tp __x, long double __y)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return nexttoward(__type(__x), __y);
    }

  inline float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  inline long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }

  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }

  inline float
  rint(float __x)
  { return __builtin_rintf(__x); }

  inline long double
  rint(long double __x)
  { return __builtin_rintl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    rint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return rint(__type(__x));
    }

  inline float
  round(float __x)
  { return __builtin_roundf(__x); }

  inline long double
  round(long double __x)
  { return __builtin_roundl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    round(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return round(__type(__x));
    }

  inline float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  inline long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    scalbln(_Tp __x, long __ex)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return scalbln(__type(__x), __ex);
    }

  inline float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  inline long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    scalbn(_Tp __x, int __ex)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return scalbn(__type(__x), __ex);
    }

  inline float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  inline long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    tgamma(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return tgamma(__type(__x));
    }

  inline float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  inline long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    trunc(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return trunc(__type(__x));
    }


}
# 33 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/hls_half.h" 2
using std::fpclassify;
using std::isfinite;







using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;




typedef __fp16 half;
# 3282 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/hls_half.h"
extern half half_nan(const char *tagp);





extern half half_atan(half t);
extern half half_atan2(half y, half x);
extern half half_copysign(half x, half y);

extern half half_fabs(half x);

extern half half_abs(half x);
extern half half_fma(half x, half y, half z);
extern half half_mad(half x, half y, half z);
extern half half_frexp (half x, int* exp);
extern half half_ldexp (half x, int exp);
extern half half_fmax(half x, half y);

extern half half_fmin(half x, half y);

extern half half_asin(half t_in);
extern half half_acos(half t_in);
extern half half_sin(half t_in);
extern half half_cos(half t_in);
extern void half_sincos(half x, half *sin, half *cos);
extern half half_sinh(half t_in);
extern half half_cosh(half t_in);
extern half half_sinpi(half t_in);
extern half half_cospi(half t_in);
extern half half_recip(half x);
extern half half_sqrt(half x);
extern half half_rsqrt(half x);
extern half half_cbrt(half x);
extern half half_hypot(half x, half y);
extern half half_log(half x);
extern half half_log10(half x);
extern half half_log2(half x);
extern half half_logb(half x);
extern half half_log1p(half x);
extern int half_ilogb(half x);
extern half half_exp(half x);
extern half half_exp10(half x);
extern half half_exp2(half x);
extern half half_expm1(half x);
extern half half_pow(half x, half y);
extern half half_powr(half x, half y);
extern half half_pown(half x, int y);
extern half half_rootn(half x, int y);
extern half half_floor(half x);

extern half half_ceil(half x);

extern half half_trunc(half x);

extern half half_round(half x);

extern half half_nearbyint(half x);
extern half half_rint(half x);
extern long int half_lrint(half x);
extern long long int half_llrint(half x);
extern long int half_lround(half x);
extern long long int half_llround(half x);
extern half half_modf(half x, half *intpart);

extern half half_fract(half x, half *intpart);
extern half half_nextafter(half x, half y);
extern half half_fmod(half x, half y);
extern half half_remainder(half x, half y);
extern half half_remquo(half x, half y, int* quo);
extern half half_divide(half x, half y);
# 57 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h" 2
# 128 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/limits.h" 1 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/limits.h" 3
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 195 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 196 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 200 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 204 "/usr/include/limits.h" 2 3 4
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/limits.h" 2 3
# 129 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h" 2
# 166 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
typedef unsigned long long ap_ulong;
typedef signed long long ap_slong;
# 202 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
extern "C" void _ssdm_string2bits(...);
# 215 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_N, bool _AP_S> struct ssdm_int;
# 242 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
# 1 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/etc/autopilot_dt.def" 1


template<> struct ssdm_int<1 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<2 + 1024 * 0,true> { int V __attribute__ ((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<2 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<3 + 1024 * 0,true> { int V __attribute__ ((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<3 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<4 + 1024 * 0,true> { int V __attribute__ ((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<4 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<5 + 1024 * 0,true> { int V __attribute__ ((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<5 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<6 + 1024 * 0,true> { int V __attribute__ ((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<6 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<7 + 1024 * 0,true> { int V __attribute__ ((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<7 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<8 + 1024 * 0,true> { int V __attribute__ ((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<8 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<9 + 1024 * 0,true> { int V __attribute__ ((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<9 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<10 + 1024 * 0,true> { int V __attribute__ ((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<10 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<11 + 1024 * 0,true> { int V __attribute__ ((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<11 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<12 + 1024 * 0,true> { int V __attribute__ ((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<12 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<13 + 1024 * 0,true> { int V __attribute__ ((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<13 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<14 + 1024 * 0,true> { int V __attribute__ ((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<14 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<15 + 1024 * 0,true> { int V __attribute__ ((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<15 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<16 + 1024 * 0,true> { int V __attribute__ ((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<16 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<17 + 1024 * 0,true> { int V __attribute__ ((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<17 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<18 + 1024 * 0,true> { int V __attribute__ ((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<18 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<19 + 1024 * 0,true> { int V __attribute__ ((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<19 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<20 + 1024 * 0,true> { int V __attribute__ ((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<20 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<21 + 1024 * 0,true> { int V __attribute__ ((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<21 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<22 + 1024 * 0,true> { int V __attribute__ ((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<22 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<23 + 1024 * 0,true> { int V __attribute__ ((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<23 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<24 + 1024 * 0,true> { int V __attribute__ ((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<24 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<25 + 1024 * 0,true> { int V __attribute__ ((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<25 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<26 + 1024 * 0,true> { int V __attribute__ ((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<26 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<27 + 1024 * 0,true> { int V __attribute__ ((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<27 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<28 + 1024 * 0,true> { int V __attribute__ ((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<28 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<29 + 1024 * 0,true> { int V __attribute__ ((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<29 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<30 + 1024 * 0,true> { int V __attribute__ ((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<30 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<31 + 1024 * 0,true> { int V __attribute__ ((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<31 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<32 + 1024 * 0,true> { int V __attribute__ ((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<32 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<33 + 1024 * 0,true> { int V __attribute__ ((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<33 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<34 + 1024 * 0,true> { int V __attribute__ ((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<34 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<35 + 1024 * 0,true> { int V __attribute__ ((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<35 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<36 + 1024 * 0,true> { int V __attribute__ ((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<36 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<37 + 1024 * 0,true> { int V __attribute__ ((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<37 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<38 + 1024 * 0,true> { int V __attribute__ ((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<38 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<39 + 1024 * 0,true> { int V __attribute__ ((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<39 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<40 + 1024 * 0,true> { int V __attribute__ ((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<40 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<41 + 1024 * 0,true> { int V __attribute__ ((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<41 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<42 + 1024 * 0,true> { int V __attribute__ ((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<42 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<43 + 1024 * 0,true> { int V __attribute__ ((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<43 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<44 + 1024 * 0,true> { int V __attribute__ ((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<44 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<45 + 1024 * 0,true> { int V __attribute__ ((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<45 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<46 + 1024 * 0,true> { int V __attribute__ ((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<46 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<47 + 1024 * 0,true> { int V __attribute__ ((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<47 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<48 + 1024 * 0,true> { int V __attribute__ ((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<48 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<49 + 1024 * 0,true> { int V __attribute__ ((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<49 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<50 + 1024 * 0,true> { int V __attribute__ ((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<50 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<51 + 1024 * 0,true> { int V __attribute__ ((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<51 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<52 + 1024 * 0,true> { int V __attribute__ ((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<52 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<53 + 1024 * 0,true> { int V __attribute__ ((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<53 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<54 + 1024 * 0,true> { int V __attribute__ ((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<54 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<55 + 1024 * 0,true> { int V __attribute__ ((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<55 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<56 + 1024 * 0,true> { int V __attribute__ ((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<56 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<57 + 1024 * 0,true> { int V __attribute__ ((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<57 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<58 + 1024 * 0,true> { int V __attribute__ ((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<58 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<59 + 1024 * 0,true> { int V __attribute__ ((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<59 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<60 + 1024 * 0,true> { int V __attribute__ ((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<60 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<61 + 1024 * 0,true> { int V __attribute__ ((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<61 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<62 + 1024 * 0,true> { int V __attribute__ ((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<62 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<63 + 1024 * 0,true> { int V __attribute__ ((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<63 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0 , false>() { }; };


template<> struct ssdm_int<64 + 1024 * 0,true> { int V __attribute__ ((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<64 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0 , false>() { }; };




template<> struct ssdm_int<65 + 1024 * 0,true> { int V __attribute__ ((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<65 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<66 + 1024 * 0,true> { int V __attribute__ ((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<66 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<67 + 1024 * 0,true> { int V __attribute__ ((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<67 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<68 + 1024 * 0,true> { int V __attribute__ ((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<68 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<69 + 1024 * 0,true> { int V __attribute__ ((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<69 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<70 + 1024 * 0,true> { int V __attribute__ ((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<70 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<71 + 1024 * 0,true> { int V __attribute__ ((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<71 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<72 + 1024 * 0,true> { int V __attribute__ ((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<72 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<73 + 1024 * 0,true> { int V __attribute__ ((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<73 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<74 + 1024 * 0,true> { int V __attribute__ ((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<74 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<75 + 1024 * 0,true> { int V __attribute__ ((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<75 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<76 + 1024 * 0,true> { int V __attribute__ ((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<76 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<77 + 1024 * 0,true> { int V __attribute__ ((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<77 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<78 + 1024 * 0,true> { int V __attribute__ ((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<78 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<79 + 1024 * 0,true> { int V __attribute__ ((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<79 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<80 + 1024 * 0,true> { int V __attribute__ ((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<80 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<81 + 1024 * 0,true> { int V __attribute__ ((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<81 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<82 + 1024 * 0,true> { int V __attribute__ ((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<82 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<83 + 1024 * 0,true> { int V __attribute__ ((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<83 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<84 + 1024 * 0,true> { int V __attribute__ ((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<84 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<85 + 1024 * 0,true> { int V __attribute__ ((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<85 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<86 + 1024 * 0,true> { int V __attribute__ ((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<86 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<87 + 1024 * 0,true> { int V __attribute__ ((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<87 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<88 + 1024 * 0,true> { int V __attribute__ ((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<88 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<89 + 1024 * 0,true> { int V __attribute__ ((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<89 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<90 + 1024 * 0,true> { int V __attribute__ ((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<90 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<91 + 1024 * 0,true> { int V __attribute__ ((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<91 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<92 + 1024 * 0,true> { int V __attribute__ ((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<92 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<93 + 1024 * 0,true> { int V __attribute__ ((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<93 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<94 + 1024 * 0,true> { int V __attribute__ ((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<94 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<95 + 1024 * 0,true> { int V __attribute__ ((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<95 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<96 + 1024 * 0,true> { int V __attribute__ ((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<96 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<97 + 1024 * 0,true> { int V __attribute__ ((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<97 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<98 + 1024 * 0,true> { int V __attribute__ ((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<98 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<99 + 1024 * 0,true> { int V __attribute__ ((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<99 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<100 + 1024 * 0,true> { int V __attribute__ ((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<100 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<101 + 1024 * 0,true> { int V __attribute__ ((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<101 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<102 + 1024 * 0,true> { int V __attribute__ ((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<102 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<103 + 1024 * 0,true> { int V __attribute__ ((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<103 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<104 + 1024 * 0,true> { int V __attribute__ ((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<104 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<105 + 1024 * 0,true> { int V __attribute__ ((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<105 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<106 + 1024 * 0,true> { int V __attribute__ ((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<106 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<107 + 1024 * 0,true> { int V __attribute__ ((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<107 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<108 + 1024 * 0,true> { int V __attribute__ ((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<108 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<109 + 1024 * 0,true> { int V __attribute__ ((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<109 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<110 + 1024 * 0,true> { int V __attribute__ ((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<110 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<111 + 1024 * 0,true> { int V __attribute__ ((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<111 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<112 + 1024 * 0,true> { int V __attribute__ ((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<112 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<113 + 1024 * 0,true> { int V __attribute__ ((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<113 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<114 + 1024 * 0,true> { int V __attribute__ ((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<114 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<115 + 1024 * 0,true> { int V __attribute__ ((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<115 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<116 + 1024 * 0,true> { int V __attribute__ ((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<116 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<117 + 1024 * 0,true> { int V __attribute__ ((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<117 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<118 + 1024 * 0,true> { int V __attribute__ ((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<118 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<119 + 1024 * 0,true> { int V __attribute__ ((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<119 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<120 + 1024 * 0,true> { int V __attribute__ ((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<120 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<121 + 1024 * 0,true> { int V __attribute__ ((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<121 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<122 + 1024 * 0,true> { int V __attribute__ ((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<122 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<123 + 1024 * 0,true> { int V __attribute__ ((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<123 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<124 + 1024 * 0,true> { int V __attribute__ ((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<124 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<125 + 1024 * 0,true> { int V __attribute__ ((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<125 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<126 + 1024 * 0,true> { int V __attribute__ ((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<126 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<127 + 1024 * 0,true> { int V __attribute__ ((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<127 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<128 + 1024 * 0,true> { int V __attribute__ ((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<128 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0 , false>() { }; };






template<> struct ssdm_int<129 + 1024 * 0,true> { int V __attribute__ ((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<129 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<130 + 1024 * 0,true> { int V __attribute__ ((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<130 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<131 + 1024 * 0,true> { int V __attribute__ ((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<131 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<132 + 1024 * 0,true> { int V __attribute__ ((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<132 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<133 + 1024 * 0,true> { int V __attribute__ ((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<133 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<134 + 1024 * 0,true> { int V __attribute__ ((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<134 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<135 + 1024 * 0,true> { int V __attribute__ ((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<135 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<136 + 1024 * 0,true> { int V __attribute__ ((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<136 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<137 + 1024 * 0,true> { int V __attribute__ ((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<137 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<138 + 1024 * 0,true> { int V __attribute__ ((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<138 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<139 + 1024 * 0,true> { int V __attribute__ ((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<139 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<140 + 1024 * 0,true> { int V __attribute__ ((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<140 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<141 + 1024 * 0,true> { int V __attribute__ ((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<141 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<142 + 1024 * 0,true> { int V __attribute__ ((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<142 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<143 + 1024 * 0,true> { int V __attribute__ ((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<143 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<144 + 1024 * 0,true> { int V __attribute__ ((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<144 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<145 + 1024 * 0,true> { int V __attribute__ ((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<145 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<146 + 1024 * 0,true> { int V __attribute__ ((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<146 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<147 + 1024 * 0,true> { int V __attribute__ ((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<147 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<148 + 1024 * 0,true> { int V __attribute__ ((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<148 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<149 + 1024 * 0,true> { int V __attribute__ ((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<149 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<150 + 1024 * 0,true> { int V __attribute__ ((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<150 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<151 + 1024 * 0,true> { int V __attribute__ ((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<151 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<152 + 1024 * 0,true> { int V __attribute__ ((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<152 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<153 + 1024 * 0,true> { int V __attribute__ ((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<153 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<154 + 1024 * 0,true> { int V __attribute__ ((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<154 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<155 + 1024 * 0,true> { int V __attribute__ ((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<155 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<156 + 1024 * 0,true> { int V __attribute__ ((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<156 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<157 + 1024 * 0,true> { int V __attribute__ ((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<157 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<158 + 1024 * 0,true> { int V __attribute__ ((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<158 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<159 + 1024 * 0,true> { int V __attribute__ ((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<159 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<160 + 1024 * 0,true> { int V __attribute__ ((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<160 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<161 + 1024 * 0,true> { int V __attribute__ ((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<161 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<162 + 1024 * 0,true> { int V __attribute__ ((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<162 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<163 + 1024 * 0,true> { int V __attribute__ ((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<163 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<164 + 1024 * 0,true> { int V __attribute__ ((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<164 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<165 + 1024 * 0,true> { int V __attribute__ ((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<165 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<166 + 1024 * 0,true> { int V __attribute__ ((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<166 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<167 + 1024 * 0,true> { int V __attribute__ ((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<167 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<168 + 1024 * 0,true> { int V __attribute__ ((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<168 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<169 + 1024 * 0,true> { int V __attribute__ ((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<169 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<170 + 1024 * 0,true> { int V __attribute__ ((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<170 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<171 + 1024 * 0,true> { int V __attribute__ ((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<171 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<172 + 1024 * 0,true> { int V __attribute__ ((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<172 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<173 + 1024 * 0,true> { int V __attribute__ ((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<173 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<174 + 1024 * 0,true> { int V __attribute__ ((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<174 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<175 + 1024 * 0,true> { int V __attribute__ ((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<175 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<176 + 1024 * 0,true> { int V __attribute__ ((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<176 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<177 + 1024 * 0,true> { int V __attribute__ ((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<177 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<178 + 1024 * 0,true> { int V __attribute__ ((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<178 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<179 + 1024 * 0,true> { int V __attribute__ ((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<179 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<180 + 1024 * 0,true> { int V __attribute__ ((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<180 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<181 + 1024 * 0,true> { int V __attribute__ ((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<181 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<182 + 1024 * 0,true> { int V __attribute__ ((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<182 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<183 + 1024 * 0,true> { int V __attribute__ ((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<183 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<184 + 1024 * 0,true> { int V __attribute__ ((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<184 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<185 + 1024 * 0,true> { int V __attribute__ ((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<185 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<186 + 1024 * 0,true> { int V __attribute__ ((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<186 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<187 + 1024 * 0,true> { int V __attribute__ ((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<187 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<188 + 1024 * 0,true> { int V __attribute__ ((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<188 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<189 + 1024 * 0,true> { int V __attribute__ ((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<189 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<190 + 1024 * 0,true> { int V __attribute__ ((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<190 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<191 + 1024 * 0,true> { int V __attribute__ ((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<191 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<192 + 1024 * 0,true> { int V __attribute__ ((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<192 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<193 + 1024 * 0,true> { int V __attribute__ ((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<193 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<194 + 1024 * 0,true> { int V __attribute__ ((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<194 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<195 + 1024 * 0,true> { int V __attribute__ ((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<195 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<196 + 1024 * 0,true> { int V __attribute__ ((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<196 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<197 + 1024 * 0,true> { int V __attribute__ ((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<197 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<198 + 1024 * 0,true> { int V __attribute__ ((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<198 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<199 + 1024 * 0,true> { int V __attribute__ ((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<199 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<200 + 1024 * 0,true> { int V __attribute__ ((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<200 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<201 + 1024 * 0,true> { int V __attribute__ ((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<201 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<202 + 1024 * 0,true> { int V __attribute__ ((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<202 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<203 + 1024 * 0,true> { int V __attribute__ ((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<203 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<204 + 1024 * 0,true> { int V __attribute__ ((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<204 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<205 + 1024 * 0,true> { int V __attribute__ ((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<205 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<206 + 1024 * 0,true> { int V __attribute__ ((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<206 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<207 + 1024 * 0,true> { int V __attribute__ ((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<207 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<208 + 1024 * 0,true> { int V __attribute__ ((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<208 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<209 + 1024 * 0,true> { int V __attribute__ ((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<209 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<210 + 1024 * 0,true> { int V __attribute__ ((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<210 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<211 + 1024 * 0,true> { int V __attribute__ ((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<211 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<212 + 1024 * 0,true> { int V __attribute__ ((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<212 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<213 + 1024 * 0,true> { int V __attribute__ ((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<213 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<214 + 1024 * 0,true> { int V __attribute__ ((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<214 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<215 + 1024 * 0,true> { int V __attribute__ ((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<215 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<216 + 1024 * 0,true> { int V __attribute__ ((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<216 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<217 + 1024 * 0,true> { int V __attribute__ ((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<217 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<218 + 1024 * 0,true> { int V __attribute__ ((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<218 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<219 + 1024 * 0,true> { int V __attribute__ ((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<219 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<220 + 1024 * 0,true> { int V __attribute__ ((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<220 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<221 + 1024 * 0,true> { int V __attribute__ ((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<221 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<222 + 1024 * 0,true> { int V __attribute__ ((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<222 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<223 + 1024 * 0,true> { int V __attribute__ ((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<223 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<224 + 1024 * 0,true> { int V __attribute__ ((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<224 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<225 + 1024 * 0,true> { int V __attribute__ ((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<225 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<226 + 1024 * 0,true> { int V __attribute__ ((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<226 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<227 + 1024 * 0,true> { int V __attribute__ ((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<227 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<228 + 1024 * 0,true> { int V __attribute__ ((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<228 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<229 + 1024 * 0,true> { int V __attribute__ ((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<229 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<230 + 1024 * 0,true> { int V __attribute__ ((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<230 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<231 + 1024 * 0,true> { int V __attribute__ ((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<231 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<232 + 1024 * 0,true> { int V __attribute__ ((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<232 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<233 + 1024 * 0,true> { int V __attribute__ ((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<233 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<234 + 1024 * 0,true> { int V __attribute__ ((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<234 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<235 + 1024 * 0,true> { int V __attribute__ ((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<235 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<236 + 1024 * 0,true> { int V __attribute__ ((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<236 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<237 + 1024 * 0,true> { int V __attribute__ ((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<237 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<238 + 1024 * 0,true> { int V __attribute__ ((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<238 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<239 + 1024 * 0,true> { int V __attribute__ ((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<239 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<240 + 1024 * 0,true> { int V __attribute__ ((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<240 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<241 + 1024 * 0,true> { int V __attribute__ ((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<241 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<242 + 1024 * 0,true> { int V __attribute__ ((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<242 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<243 + 1024 * 0,true> { int V __attribute__ ((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<243 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<244 + 1024 * 0,true> { int V __attribute__ ((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<244 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<245 + 1024 * 0,true> { int V __attribute__ ((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<245 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<246 + 1024 * 0,true> { int V __attribute__ ((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<246 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<247 + 1024 * 0,true> { int V __attribute__ ((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<247 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<248 + 1024 * 0,true> { int V __attribute__ ((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<248 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<249 + 1024 * 0,true> { int V __attribute__ ((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<249 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<250 + 1024 * 0,true> { int V __attribute__ ((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<250 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<251 + 1024 * 0,true> { int V __attribute__ ((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<251 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<252 + 1024 * 0,true> { int V __attribute__ ((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<252 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<253 + 1024 * 0,true> { int V __attribute__ ((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<253 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<254 + 1024 * 0,true> { int V __attribute__ ((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<254 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<255 + 1024 * 0,true> { int V __attribute__ ((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<255 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<256 + 1024 * 0,true> { int V __attribute__ ((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<256 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<257 + 1024 * 0,true> { int V __attribute__ ((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<257 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<258 + 1024 * 0,true> { int V __attribute__ ((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<258 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<259 + 1024 * 0,true> { int V __attribute__ ((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<259 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<260 + 1024 * 0,true> { int V __attribute__ ((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<260 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<261 + 1024 * 0,true> { int V __attribute__ ((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<261 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<262 + 1024 * 0,true> { int V __attribute__ ((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<262 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<263 + 1024 * 0,true> { int V __attribute__ ((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<263 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<264 + 1024 * 0,true> { int V __attribute__ ((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<264 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<265 + 1024 * 0,true> { int V __attribute__ ((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<265 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<266 + 1024 * 0,true> { int V __attribute__ ((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<266 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<267 + 1024 * 0,true> { int V __attribute__ ((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<267 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<268 + 1024 * 0,true> { int V __attribute__ ((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<268 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<269 + 1024 * 0,true> { int V __attribute__ ((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<269 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<270 + 1024 * 0,true> { int V __attribute__ ((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<270 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<271 + 1024 * 0,true> { int V __attribute__ ((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<271 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<272 + 1024 * 0,true> { int V __attribute__ ((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<272 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<273 + 1024 * 0,true> { int V __attribute__ ((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<273 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<274 + 1024 * 0,true> { int V __attribute__ ((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<274 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<275 + 1024 * 0,true> { int V __attribute__ ((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<275 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<276 + 1024 * 0,true> { int V __attribute__ ((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<276 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<277 + 1024 * 0,true> { int V __attribute__ ((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<277 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<278 + 1024 * 0,true> { int V __attribute__ ((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<278 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<279 + 1024 * 0,true> { int V __attribute__ ((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<279 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<280 + 1024 * 0,true> { int V __attribute__ ((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<280 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<281 + 1024 * 0,true> { int V __attribute__ ((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<281 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<282 + 1024 * 0,true> { int V __attribute__ ((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<282 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<283 + 1024 * 0,true> { int V __attribute__ ((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<283 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<284 + 1024 * 0,true> { int V __attribute__ ((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<284 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<285 + 1024 * 0,true> { int V __attribute__ ((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<285 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<286 + 1024 * 0,true> { int V __attribute__ ((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<286 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<287 + 1024 * 0,true> { int V __attribute__ ((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<287 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<288 + 1024 * 0,true> { int V __attribute__ ((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<288 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<289 + 1024 * 0,true> { int V __attribute__ ((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<289 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<290 + 1024 * 0,true> { int V __attribute__ ((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<290 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<291 + 1024 * 0,true> { int V __attribute__ ((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<291 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<292 + 1024 * 0,true> { int V __attribute__ ((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<292 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<293 + 1024 * 0,true> { int V __attribute__ ((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<293 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<294 + 1024 * 0,true> { int V __attribute__ ((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<294 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<295 + 1024 * 0,true> { int V __attribute__ ((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<295 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<296 + 1024 * 0,true> { int V __attribute__ ((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<296 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<297 + 1024 * 0,true> { int V __attribute__ ((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<297 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<298 + 1024 * 0,true> { int V __attribute__ ((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<298 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<299 + 1024 * 0,true> { int V __attribute__ ((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<299 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<300 + 1024 * 0,true> { int V __attribute__ ((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<300 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<301 + 1024 * 0,true> { int V __attribute__ ((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<301 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<302 + 1024 * 0,true> { int V __attribute__ ((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<302 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<303 + 1024 * 0,true> { int V __attribute__ ((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<303 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<304 + 1024 * 0,true> { int V __attribute__ ((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<304 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<305 + 1024 * 0,true> { int V __attribute__ ((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<305 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<306 + 1024 * 0,true> { int V __attribute__ ((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<306 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<307 + 1024 * 0,true> { int V __attribute__ ((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<307 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<308 + 1024 * 0,true> { int V __attribute__ ((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<308 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<309 + 1024 * 0,true> { int V __attribute__ ((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<309 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<310 + 1024 * 0,true> { int V __attribute__ ((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<310 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<311 + 1024 * 0,true> { int V __attribute__ ((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<311 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<312 + 1024 * 0,true> { int V __attribute__ ((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<312 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<313 + 1024 * 0,true> { int V __attribute__ ((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<313 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<314 + 1024 * 0,true> { int V __attribute__ ((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<314 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<315 + 1024 * 0,true> { int V __attribute__ ((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<315 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<316 + 1024 * 0,true> { int V __attribute__ ((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<316 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<317 + 1024 * 0,true> { int V __attribute__ ((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<317 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<318 + 1024 * 0,true> { int V __attribute__ ((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<318 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<319 + 1024 * 0,true> { int V __attribute__ ((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<319 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<320 + 1024 * 0,true> { int V __attribute__ ((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<320 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<321 + 1024 * 0,true> { int V __attribute__ ((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<321 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<322 + 1024 * 0,true> { int V __attribute__ ((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<322 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<323 + 1024 * 0,true> { int V __attribute__ ((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<323 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<324 + 1024 * 0,true> { int V __attribute__ ((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<324 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<325 + 1024 * 0,true> { int V __attribute__ ((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<325 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<326 + 1024 * 0,true> { int V __attribute__ ((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<326 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<327 + 1024 * 0,true> { int V __attribute__ ((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<327 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<328 + 1024 * 0,true> { int V __attribute__ ((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<328 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<329 + 1024 * 0,true> { int V __attribute__ ((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<329 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<330 + 1024 * 0,true> { int V __attribute__ ((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<330 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<331 + 1024 * 0,true> { int V __attribute__ ((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<331 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<332 + 1024 * 0,true> { int V __attribute__ ((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<332 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<333 + 1024 * 0,true> { int V __attribute__ ((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<333 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<334 + 1024 * 0,true> { int V __attribute__ ((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<334 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<335 + 1024 * 0,true> { int V __attribute__ ((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<335 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<336 + 1024 * 0,true> { int V __attribute__ ((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<336 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<337 + 1024 * 0,true> { int V __attribute__ ((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<337 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<338 + 1024 * 0,true> { int V __attribute__ ((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<338 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<339 + 1024 * 0,true> { int V __attribute__ ((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<339 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<340 + 1024 * 0,true> { int V __attribute__ ((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<340 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<341 + 1024 * 0,true> { int V __attribute__ ((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<341 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<342 + 1024 * 0,true> { int V __attribute__ ((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<342 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<343 + 1024 * 0,true> { int V __attribute__ ((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<343 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<344 + 1024 * 0,true> { int V __attribute__ ((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<344 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<345 + 1024 * 0,true> { int V __attribute__ ((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<345 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<346 + 1024 * 0,true> { int V __attribute__ ((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<346 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<347 + 1024 * 0,true> { int V __attribute__ ((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<347 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<348 + 1024 * 0,true> { int V __attribute__ ((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<348 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<349 + 1024 * 0,true> { int V __attribute__ ((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<349 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<350 + 1024 * 0,true> { int V __attribute__ ((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<350 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<351 + 1024 * 0,true> { int V __attribute__ ((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<351 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<352 + 1024 * 0,true> { int V __attribute__ ((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<352 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<353 + 1024 * 0,true> { int V __attribute__ ((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<353 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<354 + 1024 * 0,true> { int V __attribute__ ((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<354 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<355 + 1024 * 0,true> { int V __attribute__ ((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<355 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<356 + 1024 * 0,true> { int V __attribute__ ((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<356 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<357 + 1024 * 0,true> { int V __attribute__ ((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<357 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<358 + 1024 * 0,true> { int V __attribute__ ((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<358 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<359 + 1024 * 0,true> { int V __attribute__ ((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<359 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<360 + 1024 * 0,true> { int V __attribute__ ((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<360 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<361 + 1024 * 0,true> { int V __attribute__ ((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<361 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<362 + 1024 * 0,true> { int V __attribute__ ((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<362 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<363 + 1024 * 0,true> { int V __attribute__ ((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<363 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<364 + 1024 * 0,true> { int V __attribute__ ((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<364 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<365 + 1024 * 0,true> { int V __attribute__ ((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<365 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<366 + 1024 * 0,true> { int V __attribute__ ((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<366 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<367 + 1024 * 0,true> { int V __attribute__ ((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<367 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<368 + 1024 * 0,true> { int V __attribute__ ((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<368 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<369 + 1024 * 0,true> { int V __attribute__ ((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<369 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<370 + 1024 * 0,true> { int V __attribute__ ((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<370 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<371 + 1024 * 0,true> { int V __attribute__ ((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<371 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<372 + 1024 * 0,true> { int V __attribute__ ((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<372 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<373 + 1024 * 0,true> { int V __attribute__ ((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<373 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<374 + 1024 * 0,true> { int V __attribute__ ((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<374 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<375 + 1024 * 0,true> { int V __attribute__ ((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<375 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<376 + 1024 * 0,true> { int V __attribute__ ((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<376 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<377 + 1024 * 0,true> { int V __attribute__ ((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<377 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<378 + 1024 * 0,true> { int V __attribute__ ((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<378 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<379 + 1024 * 0,true> { int V __attribute__ ((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<379 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<380 + 1024 * 0,true> { int V __attribute__ ((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<380 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<381 + 1024 * 0,true> { int V __attribute__ ((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<381 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<382 + 1024 * 0,true> { int V __attribute__ ((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<382 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<383 + 1024 * 0,true> { int V __attribute__ ((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<383 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<384 + 1024 * 0,true> { int V __attribute__ ((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<384 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<385 + 1024 * 0,true> { int V __attribute__ ((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<385 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<386 + 1024 * 0,true> { int V __attribute__ ((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<386 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<387 + 1024 * 0,true> { int V __attribute__ ((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<387 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<388 + 1024 * 0,true> { int V __attribute__ ((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<388 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<389 + 1024 * 0,true> { int V __attribute__ ((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<389 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<390 + 1024 * 0,true> { int V __attribute__ ((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<390 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<391 + 1024 * 0,true> { int V __attribute__ ((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<391 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<392 + 1024 * 0,true> { int V __attribute__ ((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<392 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<393 + 1024 * 0,true> { int V __attribute__ ((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<393 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<394 + 1024 * 0,true> { int V __attribute__ ((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<394 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<395 + 1024 * 0,true> { int V __attribute__ ((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<395 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<396 + 1024 * 0,true> { int V __attribute__ ((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<396 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<397 + 1024 * 0,true> { int V __attribute__ ((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<397 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<398 + 1024 * 0,true> { int V __attribute__ ((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<398 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<399 + 1024 * 0,true> { int V __attribute__ ((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<399 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<400 + 1024 * 0,true> { int V __attribute__ ((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<400 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<401 + 1024 * 0,true> { int V __attribute__ ((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<401 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<402 + 1024 * 0,true> { int V __attribute__ ((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<402 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<403 + 1024 * 0,true> { int V __attribute__ ((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<403 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<404 + 1024 * 0,true> { int V __attribute__ ((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<404 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<405 + 1024 * 0,true> { int V __attribute__ ((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<405 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<406 + 1024 * 0,true> { int V __attribute__ ((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<406 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<407 + 1024 * 0,true> { int V __attribute__ ((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<407 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<408 + 1024 * 0,true> { int V __attribute__ ((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<408 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<409 + 1024 * 0,true> { int V __attribute__ ((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<409 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<410 + 1024 * 0,true> { int V __attribute__ ((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<410 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<411 + 1024 * 0,true> { int V __attribute__ ((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<411 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<412 + 1024 * 0,true> { int V __attribute__ ((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<412 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<413 + 1024 * 0,true> { int V __attribute__ ((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<413 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<414 + 1024 * 0,true> { int V __attribute__ ((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<414 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<415 + 1024 * 0,true> { int V __attribute__ ((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<415 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<416 + 1024 * 0,true> { int V __attribute__ ((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<416 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<417 + 1024 * 0,true> { int V __attribute__ ((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<417 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<418 + 1024 * 0,true> { int V __attribute__ ((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<418 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<419 + 1024 * 0,true> { int V __attribute__ ((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<419 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<420 + 1024 * 0,true> { int V __attribute__ ((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<420 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<421 + 1024 * 0,true> { int V __attribute__ ((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<421 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<422 + 1024 * 0,true> { int V __attribute__ ((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<422 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<423 + 1024 * 0,true> { int V __attribute__ ((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<423 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<424 + 1024 * 0,true> { int V __attribute__ ((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<424 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<425 + 1024 * 0,true> { int V __attribute__ ((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<425 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<426 + 1024 * 0,true> { int V __attribute__ ((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<426 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<427 + 1024 * 0,true> { int V __attribute__ ((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<427 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<428 + 1024 * 0,true> { int V __attribute__ ((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<428 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<429 + 1024 * 0,true> { int V __attribute__ ((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<429 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<430 + 1024 * 0,true> { int V __attribute__ ((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<430 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<431 + 1024 * 0,true> { int V __attribute__ ((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<431 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<432 + 1024 * 0,true> { int V __attribute__ ((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<432 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<433 + 1024 * 0,true> { int V __attribute__ ((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<433 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<434 + 1024 * 0,true> { int V __attribute__ ((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<434 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<435 + 1024 * 0,true> { int V __attribute__ ((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<435 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<436 + 1024 * 0,true> { int V __attribute__ ((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<436 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<437 + 1024 * 0,true> { int V __attribute__ ((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<437 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<438 + 1024 * 0,true> { int V __attribute__ ((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<438 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<439 + 1024 * 0,true> { int V __attribute__ ((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<439 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<440 + 1024 * 0,true> { int V __attribute__ ((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<440 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<441 + 1024 * 0,true> { int V __attribute__ ((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<441 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<442 + 1024 * 0,true> { int V __attribute__ ((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<442 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<443 + 1024 * 0,true> { int V __attribute__ ((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<443 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<444 + 1024 * 0,true> { int V __attribute__ ((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<444 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<445 + 1024 * 0,true> { int V __attribute__ ((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<445 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<446 + 1024 * 0,true> { int V __attribute__ ((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<446 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<447 + 1024 * 0,true> { int V __attribute__ ((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<447 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<448 + 1024 * 0,true> { int V __attribute__ ((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<448 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<449 + 1024 * 0,true> { int V __attribute__ ((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<449 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<450 + 1024 * 0,true> { int V __attribute__ ((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<450 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<451 + 1024 * 0,true> { int V __attribute__ ((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<451 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<452 + 1024 * 0,true> { int V __attribute__ ((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<452 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<453 + 1024 * 0,true> { int V __attribute__ ((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<453 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<454 + 1024 * 0,true> { int V __attribute__ ((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<454 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<455 + 1024 * 0,true> { int V __attribute__ ((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<455 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<456 + 1024 * 0,true> { int V __attribute__ ((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<456 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<457 + 1024 * 0,true> { int V __attribute__ ((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<457 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<458 + 1024 * 0,true> { int V __attribute__ ((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<458 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<459 + 1024 * 0,true> { int V __attribute__ ((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<459 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<460 + 1024 * 0,true> { int V __attribute__ ((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<460 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<461 + 1024 * 0,true> { int V __attribute__ ((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<461 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<462 + 1024 * 0,true> { int V __attribute__ ((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<462 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<463 + 1024 * 0,true> { int V __attribute__ ((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<463 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<464 + 1024 * 0,true> { int V __attribute__ ((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<464 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<465 + 1024 * 0,true> { int V __attribute__ ((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<465 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<466 + 1024 * 0,true> { int V __attribute__ ((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<466 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<467 + 1024 * 0,true> { int V __attribute__ ((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<467 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<468 + 1024 * 0,true> { int V __attribute__ ((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<468 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<469 + 1024 * 0,true> { int V __attribute__ ((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<469 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<470 + 1024 * 0,true> { int V __attribute__ ((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<470 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<471 + 1024 * 0,true> { int V __attribute__ ((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<471 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<472 + 1024 * 0,true> { int V __attribute__ ((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<472 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<473 + 1024 * 0,true> { int V __attribute__ ((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<473 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<474 + 1024 * 0,true> { int V __attribute__ ((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<474 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<475 + 1024 * 0,true> { int V __attribute__ ((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<475 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<476 + 1024 * 0,true> { int V __attribute__ ((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<476 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<477 + 1024 * 0,true> { int V __attribute__ ((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<477 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<478 + 1024 * 0,true> { int V __attribute__ ((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<478 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<479 + 1024 * 0,true> { int V __attribute__ ((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<479 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<480 + 1024 * 0,true> { int V __attribute__ ((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<480 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<481 + 1024 * 0,true> { int V __attribute__ ((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<481 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<482 + 1024 * 0,true> { int V __attribute__ ((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<482 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<483 + 1024 * 0,true> { int V __attribute__ ((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<483 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<484 + 1024 * 0,true> { int V __attribute__ ((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<484 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<485 + 1024 * 0,true> { int V __attribute__ ((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<485 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<486 + 1024 * 0,true> { int V __attribute__ ((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<486 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<487 + 1024 * 0,true> { int V __attribute__ ((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<487 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<488 + 1024 * 0,true> { int V __attribute__ ((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<488 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<489 + 1024 * 0,true> { int V __attribute__ ((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<489 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<490 + 1024 * 0,true> { int V __attribute__ ((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<490 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<491 + 1024 * 0,true> { int V __attribute__ ((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<491 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<492 + 1024 * 0,true> { int V __attribute__ ((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<492 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<493 + 1024 * 0,true> { int V __attribute__ ((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<493 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<494 + 1024 * 0,true> { int V __attribute__ ((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<494 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<495 + 1024 * 0,true> { int V __attribute__ ((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<495 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<496 + 1024 * 0,true> { int V __attribute__ ((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<496 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<497 + 1024 * 0,true> { int V __attribute__ ((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<497 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<498 + 1024 * 0,true> { int V __attribute__ ((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<498 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<499 + 1024 * 0,true> { int V __attribute__ ((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<499 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<500 + 1024 * 0,true> { int V __attribute__ ((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<500 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<501 + 1024 * 0,true> { int V __attribute__ ((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<501 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<502 + 1024 * 0,true> { int V __attribute__ ((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<502 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<503 + 1024 * 0,true> { int V __attribute__ ((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<503 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<504 + 1024 * 0,true> { int V __attribute__ ((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<504 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<505 + 1024 * 0,true> { int V __attribute__ ((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<505 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<506 + 1024 * 0,true> { int V __attribute__ ((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<506 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<507 + 1024 * 0,true> { int V __attribute__ ((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<507 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<508 + 1024 * 0,true> { int V __attribute__ ((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<508 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<509 + 1024 * 0,true> { int V __attribute__ ((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<509 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<510 + 1024 * 0,true> { int V __attribute__ ((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<510 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<511 + 1024 * 0,true> { int V __attribute__ ((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<511 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<512 + 1024 * 0,true> { int V __attribute__ ((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<512 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<513 + 1024 * 0,true> { int V __attribute__ ((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<513 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<514 + 1024 * 0,true> { int V __attribute__ ((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<514 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<515 + 1024 * 0,true> { int V __attribute__ ((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<515 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<516 + 1024 * 0,true> { int V __attribute__ ((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<516 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<517 + 1024 * 0,true> { int V __attribute__ ((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<517 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<518 + 1024 * 0,true> { int V __attribute__ ((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<518 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<519 + 1024 * 0,true> { int V __attribute__ ((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<519 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<520 + 1024 * 0,true> { int V __attribute__ ((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<520 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<521 + 1024 * 0,true> { int V __attribute__ ((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<521 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<522 + 1024 * 0,true> { int V __attribute__ ((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<522 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<523 + 1024 * 0,true> { int V __attribute__ ((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<523 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<524 + 1024 * 0,true> { int V __attribute__ ((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<524 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<525 + 1024 * 0,true> { int V __attribute__ ((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<525 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<526 + 1024 * 0,true> { int V __attribute__ ((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<526 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<527 + 1024 * 0,true> { int V __attribute__ ((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<527 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<528 + 1024 * 0,true> { int V __attribute__ ((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<528 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<529 + 1024 * 0,true> { int V __attribute__ ((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<529 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<530 + 1024 * 0,true> { int V __attribute__ ((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<530 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<531 + 1024 * 0,true> { int V __attribute__ ((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<531 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<532 + 1024 * 0,true> { int V __attribute__ ((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<532 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<533 + 1024 * 0,true> { int V __attribute__ ((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<533 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<534 + 1024 * 0,true> { int V __attribute__ ((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<534 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<535 + 1024 * 0,true> { int V __attribute__ ((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<535 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<536 + 1024 * 0,true> { int V __attribute__ ((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<536 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<537 + 1024 * 0,true> { int V __attribute__ ((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<537 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<538 + 1024 * 0,true> { int V __attribute__ ((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<538 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<539 + 1024 * 0,true> { int V __attribute__ ((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<539 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<540 + 1024 * 0,true> { int V __attribute__ ((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<540 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<541 + 1024 * 0,true> { int V __attribute__ ((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<541 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<542 + 1024 * 0,true> { int V __attribute__ ((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<542 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<543 + 1024 * 0,true> { int V __attribute__ ((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<543 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<544 + 1024 * 0,true> { int V __attribute__ ((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<544 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<545 + 1024 * 0,true> { int V __attribute__ ((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<545 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<546 + 1024 * 0,true> { int V __attribute__ ((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<546 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<547 + 1024 * 0,true> { int V __attribute__ ((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<547 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<548 + 1024 * 0,true> { int V __attribute__ ((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<548 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<549 + 1024 * 0,true> { int V __attribute__ ((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<549 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<550 + 1024 * 0,true> { int V __attribute__ ((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<550 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<551 + 1024 * 0,true> { int V __attribute__ ((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<551 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<552 + 1024 * 0,true> { int V __attribute__ ((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<552 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<553 + 1024 * 0,true> { int V __attribute__ ((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<553 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<554 + 1024 * 0,true> { int V __attribute__ ((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<554 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<555 + 1024 * 0,true> { int V __attribute__ ((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<555 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<556 + 1024 * 0,true> { int V __attribute__ ((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<556 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<557 + 1024 * 0,true> { int V __attribute__ ((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<557 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<558 + 1024 * 0,true> { int V __attribute__ ((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<558 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<559 + 1024 * 0,true> { int V __attribute__ ((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<559 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<560 + 1024 * 0,true> { int V __attribute__ ((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<560 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<561 + 1024 * 0,true> { int V __attribute__ ((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<561 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<562 + 1024 * 0,true> { int V __attribute__ ((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<562 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<563 + 1024 * 0,true> { int V __attribute__ ((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<563 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<564 + 1024 * 0,true> { int V __attribute__ ((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<564 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<565 + 1024 * 0,true> { int V __attribute__ ((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<565 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<566 + 1024 * 0,true> { int V __attribute__ ((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<566 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<567 + 1024 * 0,true> { int V __attribute__ ((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<567 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<568 + 1024 * 0,true> { int V __attribute__ ((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<568 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<569 + 1024 * 0,true> { int V __attribute__ ((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<569 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<570 + 1024 * 0,true> { int V __attribute__ ((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<570 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<571 + 1024 * 0,true> { int V __attribute__ ((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<571 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<572 + 1024 * 0,true> { int V __attribute__ ((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<572 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<573 + 1024 * 0,true> { int V __attribute__ ((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<573 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<574 + 1024 * 0,true> { int V __attribute__ ((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<574 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<575 + 1024 * 0,true> { int V __attribute__ ((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<575 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<576 + 1024 * 0,true> { int V __attribute__ ((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<576 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<577 + 1024 * 0,true> { int V __attribute__ ((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<577 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<578 + 1024 * 0,true> { int V __attribute__ ((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<578 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<579 + 1024 * 0,true> { int V __attribute__ ((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<579 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<580 + 1024 * 0,true> { int V __attribute__ ((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<580 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<581 + 1024 * 0,true> { int V __attribute__ ((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<581 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<582 + 1024 * 0,true> { int V __attribute__ ((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<582 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<583 + 1024 * 0,true> { int V __attribute__ ((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<583 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<584 + 1024 * 0,true> { int V __attribute__ ((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<584 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<585 + 1024 * 0,true> { int V __attribute__ ((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<585 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<586 + 1024 * 0,true> { int V __attribute__ ((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<586 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<587 + 1024 * 0,true> { int V __attribute__ ((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<587 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<588 + 1024 * 0,true> { int V __attribute__ ((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<588 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<589 + 1024 * 0,true> { int V __attribute__ ((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<589 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<590 + 1024 * 0,true> { int V __attribute__ ((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<590 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<591 + 1024 * 0,true> { int V __attribute__ ((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<591 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<592 + 1024 * 0,true> { int V __attribute__ ((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<592 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<593 + 1024 * 0,true> { int V __attribute__ ((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<593 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<594 + 1024 * 0,true> { int V __attribute__ ((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<594 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<595 + 1024 * 0,true> { int V __attribute__ ((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<595 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<596 + 1024 * 0,true> { int V __attribute__ ((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<596 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<597 + 1024 * 0,true> { int V __attribute__ ((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<597 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<598 + 1024 * 0,true> { int V __attribute__ ((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<598 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<599 + 1024 * 0,true> { int V __attribute__ ((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<599 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<600 + 1024 * 0,true> { int V __attribute__ ((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<600 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<601 + 1024 * 0,true> { int V __attribute__ ((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<601 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<602 + 1024 * 0,true> { int V __attribute__ ((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<602 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<603 + 1024 * 0,true> { int V __attribute__ ((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<603 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<604 + 1024 * 0,true> { int V __attribute__ ((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<604 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<605 + 1024 * 0,true> { int V __attribute__ ((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<605 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<606 + 1024 * 0,true> { int V __attribute__ ((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<606 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<607 + 1024 * 0,true> { int V __attribute__ ((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<607 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<608 + 1024 * 0,true> { int V __attribute__ ((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<608 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<609 + 1024 * 0,true> { int V __attribute__ ((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<609 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<610 + 1024 * 0,true> { int V __attribute__ ((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<610 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<611 + 1024 * 0,true> { int V __attribute__ ((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<611 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<612 + 1024 * 0,true> { int V __attribute__ ((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<612 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<613 + 1024 * 0,true> { int V __attribute__ ((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<613 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<614 + 1024 * 0,true> { int V __attribute__ ((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<614 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<615 + 1024 * 0,true> { int V __attribute__ ((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<615 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<616 + 1024 * 0,true> { int V __attribute__ ((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<616 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<617 + 1024 * 0,true> { int V __attribute__ ((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<617 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<618 + 1024 * 0,true> { int V __attribute__ ((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<618 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<619 + 1024 * 0,true> { int V __attribute__ ((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<619 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<620 + 1024 * 0,true> { int V __attribute__ ((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<620 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<621 + 1024 * 0,true> { int V __attribute__ ((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<621 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<622 + 1024 * 0,true> { int V __attribute__ ((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<622 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<623 + 1024 * 0,true> { int V __attribute__ ((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<623 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<624 + 1024 * 0,true> { int V __attribute__ ((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<624 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<625 + 1024 * 0,true> { int V __attribute__ ((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<625 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<626 + 1024 * 0,true> { int V __attribute__ ((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<626 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<627 + 1024 * 0,true> { int V __attribute__ ((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<627 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<628 + 1024 * 0,true> { int V __attribute__ ((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<628 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<629 + 1024 * 0,true> { int V __attribute__ ((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<629 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<630 + 1024 * 0,true> { int V __attribute__ ((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<630 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<631 + 1024 * 0,true> { int V __attribute__ ((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<631 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<632 + 1024 * 0,true> { int V __attribute__ ((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<632 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<633 + 1024 * 0,true> { int V __attribute__ ((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<633 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<634 + 1024 * 0,true> { int V __attribute__ ((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<634 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<635 + 1024 * 0,true> { int V __attribute__ ((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<635 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<636 + 1024 * 0,true> { int V __attribute__ ((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<636 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<637 + 1024 * 0,true> { int V __attribute__ ((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<637 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<638 + 1024 * 0,true> { int V __attribute__ ((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<638 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<639 + 1024 * 0,true> { int V __attribute__ ((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<639 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<640 + 1024 * 0,true> { int V __attribute__ ((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<640 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<641 + 1024 * 0,true> { int V __attribute__ ((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<641 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<642 + 1024 * 0,true> { int V __attribute__ ((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<642 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<643 + 1024 * 0,true> { int V __attribute__ ((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<643 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<644 + 1024 * 0,true> { int V __attribute__ ((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<644 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<645 + 1024 * 0,true> { int V __attribute__ ((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<645 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<646 + 1024 * 0,true> { int V __attribute__ ((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<646 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<647 + 1024 * 0,true> { int V __attribute__ ((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<647 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<648 + 1024 * 0,true> { int V __attribute__ ((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<648 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<649 + 1024 * 0,true> { int V __attribute__ ((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<649 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<650 + 1024 * 0,true> { int V __attribute__ ((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<650 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<651 + 1024 * 0,true> { int V __attribute__ ((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<651 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<652 + 1024 * 0,true> { int V __attribute__ ((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<652 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<653 + 1024 * 0,true> { int V __attribute__ ((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<653 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<654 + 1024 * 0,true> { int V __attribute__ ((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<654 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<655 + 1024 * 0,true> { int V __attribute__ ((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<655 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<656 + 1024 * 0,true> { int V __attribute__ ((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<656 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<657 + 1024 * 0,true> { int V __attribute__ ((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<657 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<658 + 1024 * 0,true> { int V __attribute__ ((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<658 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<659 + 1024 * 0,true> { int V __attribute__ ((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<659 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<660 + 1024 * 0,true> { int V __attribute__ ((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<660 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<661 + 1024 * 0,true> { int V __attribute__ ((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<661 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<662 + 1024 * 0,true> { int V __attribute__ ((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<662 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<663 + 1024 * 0,true> { int V __attribute__ ((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<663 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<664 + 1024 * 0,true> { int V __attribute__ ((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<664 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<665 + 1024 * 0,true> { int V __attribute__ ((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<665 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<666 + 1024 * 0,true> { int V __attribute__ ((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<666 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<667 + 1024 * 0,true> { int V __attribute__ ((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<667 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<668 + 1024 * 0,true> { int V __attribute__ ((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<668 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<669 + 1024 * 0,true> { int V __attribute__ ((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<669 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<670 + 1024 * 0,true> { int V __attribute__ ((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<670 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<671 + 1024 * 0,true> { int V __attribute__ ((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<671 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<672 + 1024 * 0,true> { int V __attribute__ ((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<672 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<673 + 1024 * 0,true> { int V __attribute__ ((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<673 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<674 + 1024 * 0,true> { int V __attribute__ ((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<674 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<675 + 1024 * 0,true> { int V __attribute__ ((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<675 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<676 + 1024 * 0,true> { int V __attribute__ ((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<676 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<677 + 1024 * 0,true> { int V __attribute__ ((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<677 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<678 + 1024 * 0,true> { int V __attribute__ ((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<678 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<679 + 1024 * 0,true> { int V __attribute__ ((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<679 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<680 + 1024 * 0,true> { int V __attribute__ ((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<680 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<681 + 1024 * 0,true> { int V __attribute__ ((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<681 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<682 + 1024 * 0,true> { int V __attribute__ ((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<682 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<683 + 1024 * 0,true> { int V __attribute__ ((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<683 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<684 + 1024 * 0,true> { int V __attribute__ ((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<684 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<685 + 1024 * 0,true> { int V __attribute__ ((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<685 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<686 + 1024 * 0,true> { int V __attribute__ ((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<686 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<687 + 1024 * 0,true> { int V __attribute__ ((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<687 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<688 + 1024 * 0,true> { int V __attribute__ ((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<688 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<689 + 1024 * 0,true> { int V __attribute__ ((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<689 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<690 + 1024 * 0,true> { int V __attribute__ ((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<690 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<691 + 1024 * 0,true> { int V __attribute__ ((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<691 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<692 + 1024 * 0,true> { int V __attribute__ ((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<692 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<693 + 1024 * 0,true> { int V __attribute__ ((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<693 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<694 + 1024 * 0,true> { int V __attribute__ ((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<694 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<695 + 1024 * 0,true> { int V __attribute__ ((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<695 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<696 + 1024 * 0,true> { int V __attribute__ ((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<696 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<697 + 1024 * 0,true> { int V __attribute__ ((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<697 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<698 + 1024 * 0,true> { int V __attribute__ ((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<698 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<699 + 1024 * 0,true> { int V __attribute__ ((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<699 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<700 + 1024 * 0,true> { int V __attribute__ ((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<700 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<701 + 1024 * 0,true> { int V __attribute__ ((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<701 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<702 + 1024 * 0,true> { int V __attribute__ ((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<702 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<703 + 1024 * 0,true> { int V __attribute__ ((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<703 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<704 + 1024 * 0,true> { int V __attribute__ ((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<704 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<705 + 1024 * 0,true> { int V __attribute__ ((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<705 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<706 + 1024 * 0,true> { int V __attribute__ ((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<706 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<707 + 1024 * 0,true> { int V __attribute__ ((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<707 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<708 + 1024 * 0,true> { int V __attribute__ ((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<708 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<709 + 1024 * 0,true> { int V __attribute__ ((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<709 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<710 + 1024 * 0,true> { int V __attribute__ ((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<710 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<711 + 1024 * 0,true> { int V __attribute__ ((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<711 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<712 + 1024 * 0,true> { int V __attribute__ ((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<712 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<713 + 1024 * 0,true> { int V __attribute__ ((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<713 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<714 + 1024 * 0,true> { int V __attribute__ ((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<714 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<715 + 1024 * 0,true> { int V __attribute__ ((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<715 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<716 + 1024 * 0,true> { int V __attribute__ ((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<716 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<717 + 1024 * 0,true> { int V __attribute__ ((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<717 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<718 + 1024 * 0,true> { int V __attribute__ ((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<718 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<719 + 1024 * 0,true> { int V __attribute__ ((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<719 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<720 + 1024 * 0,true> { int V __attribute__ ((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<720 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<721 + 1024 * 0,true> { int V __attribute__ ((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<721 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<722 + 1024 * 0,true> { int V __attribute__ ((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<722 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<723 + 1024 * 0,true> { int V __attribute__ ((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<723 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<724 + 1024 * 0,true> { int V __attribute__ ((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<724 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<725 + 1024 * 0,true> { int V __attribute__ ((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<725 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<726 + 1024 * 0,true> { int V __attribute__ ((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<726 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<727 + 1024 * 0,true> { int V __attribute__ ((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<727 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<728 + 1024 * 0,true> { int V __attribute__ ((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<728 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<729 + 1024 * 0,true> { int V __attribute__ ((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<729 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<730 + 1024 * 0,true> { int V __attribute__ ((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<730 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<731 + 1024 * 0,true> { int V __attribute__ ((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<731 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<732 + 1024 * 0,true> { int V __attribute__ ((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<732 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<733 + 1024 * 0,true> { int V __attribute__ ((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<733 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<734 + 1024 * 0,true> { int V __attribute__ ((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<734 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<735 + 1024 * 0,true> { int V __attribute__ ((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<735 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<736 + 1024 * 0,true> { int V __attribute__ ((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<736 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<737 + 1024 * 0,true> { int V __attribute__ ((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<737 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<738 + 1024 * 0,true> { int V __attribute__ ((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<738 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<739 + 1024 * 0,true> { int V __attribute__ ((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<739 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<740 + 1024 * 0,true> { int V __attribute__ ((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<740 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<741 + 1024 * 0,true> { int V __attribute__ ((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<741 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<742 + 1024 * 0,true> { int V __attribute__ ((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<742 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<743 + 1024 * 0,true> { int V __attribute__ ((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<743 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<744 + 1024 * 0,true> { int V __attribute__ ((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<744 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<745 + 1024 * 0,true> { int V __attribute__ ((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<745 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<746 + 1024 * 0,true> { int V __attribute__ ((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<746 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<747 + 1024 * 0,true> { int V __attribute__ ((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<747 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<748 + 1024 * 0,true> { int V __attribute__ ((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<748 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<749 + 1024 * 0,true> { int V __attribute__ ((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<749 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<750 + 1024 * 0,true> { int V __attribute__ ((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<750 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<751 + 1024 * 0,true> { int V __attribute__ ((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<751 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<752 + 1024 * 0,true> { int V __attribute__ ((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<752 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<753 + 1024 * 0,true> { int V __attribute__ ((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<753 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<754 + 1024 * 0,true> { int V __attribute__ ((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<754 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<755 + 1024 * 0,true> { int V __attribute__ ((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<755 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<756 + 1024 * 0,true> { int V __attribute__ ((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<756 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<757 + 1024 * 0,true> { int V __attribute__ ((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<757 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<758 + 1024 * 0,true> { int V __attribute__ ((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<758 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<759 + 1024 * 0,true> { int V __attribute__ ((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<759 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<760 + 1024 * 0,true> { int V __attribute__ ((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<760 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<761 + 1024 * 0,true> { int V __attribute__ ((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<761 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<762 + 1024 * 0,true> { int V __attribute__ ((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<762 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<763 + 1024 * 0,true> { int V __attribute__ ((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<763 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<764 + 1024 * 0,true> { int V __attribute__ ((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<764 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<765 + 1024 * 0,true> { int V __attribute__ ((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<765 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<766 + 1024 * 0,true> { int V __attribute__ ((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<766 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<767 + 1024 * 0,true> { int V __attribute__ ((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<767 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<768 + 1024 * 0,true> { int V __attribute__ ((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<768 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<769 + 1024 * 0,true> { int V __attribute__ ((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<769 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<770 + 1024 * 0,true> { int V __attribute__ ((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<770 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<771 + 1024 * 0,true> { int V __attribute__ ((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<771 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<772 + 1024 * 0,true> { int V __attribute__ ((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<772 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<773 + 1024 * 0,true> { int V __attribute__ ((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<773 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<774 + 1024 * 0,true> { int V __attribute__ ((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<774 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<775 + 1024 * 0,true> { int V __attribute__ ((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<775 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<776 + 1024 * 0,true> { int V __attribute__ ((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<776 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<777 + 1024 * 0,true> { int V __attribute__ ((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<777 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<778 + 1024 * 0,true> { int V __attribute__ ((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<778 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<779 + 1024 * 0,true> { int V __attribute__ ((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<779 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<780 + 1024 * 0,true> { int V __attribute__ ((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<780 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<781 + 1024 * 0,true> { int V __attribute__ ((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<781 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<782 + 1024 * 0,true> { int V __attribute__ ((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<782 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<783 + 1024 * 0,true> { int V __attribute__ ((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<783 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<784 + 1024 * 0,true> { int V __attribute__ ((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<784 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<785 + 1024 * 0,true> { int V __attribute__ ((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<785 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<786 + 1024 * 0,true> { int V __attribute__ ((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<786 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<787 + 1024 * 0,true> { int V __attribute__ ((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<787 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<788 + 1024 * 0,true> { int V __attribute__ ((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<788 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<789 + 1024 * 0,true> { int V __attribute__ ((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<789 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<790 + 1024 * 0,true> { int V __attribute__ ((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<790 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<791 + 1024 * 0,true> { int V __attribute__ ((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<791 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<792 + 1024 * 0,true> { int V __attribute__ ((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<792 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<793 + 1024 * 0,true> { int V __attribute__ ((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<793 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<794 + 1024 * 0,true> { int V __attribute__ ((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<794 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<795 + 1024 * 0,true> { int V __attribute__ ((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<795 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<796 + 1024 * 0,true> { int V __attribute__ ((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<796 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<797 + 1024 * 0,true> { int V __attribute__ ((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<797 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<798 + 1024 * 0,true> { int V __attribute__ ((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<798 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<799 + 1024 * 0,true> { int V __attribute__ ((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<799 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<800 + 1024 * 0,true> { int V __attribute__ ((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<800 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<801 + 1024 * 0,true> { int V __attribute__ ((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<801 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<802 + 1024 * 0,true> { int V __attribute__ ((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<802 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<803 + 1024 * 0,true> { int V __attribute__ ((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<803 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<804 + 1024 * 0,true> { int V __attribute__ ((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<804 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<805 + 1024 * 0,true> { int V __attribute__ ((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<805 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<806 + 1024 * 0,true> { int V __attribute__ ((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<806 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<807 + 1024 * 0,true> { int V __attribute__ ((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<807 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<808 + 1024 * 0,true> { int V __attribute__ ((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<808 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<809 + 1024 * 0,true> { int V __attribute__ ((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<809 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<810 + 1024 * 0,true> { int V __attribute__ ((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<810 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<811 + 1024 * 0,true> { int V __attribute__ ((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<811 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<812 + 1024 * 0,true> { int V __attribute__ ((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<812 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<813 + 1024 * 0,true> { int V __attribute__ ((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<813 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<814 + 1024 * 0,true> { int V __attribute__ ((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<814 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<815 + 1024 * 0,true> { int V __attribute__ ((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<815 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<816 + 1024 * 0,true> { int V __attribute__ ((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<816 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<817 + 1024 * 0,true> { int V __attribute__ ((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<817 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<818 + 1024 * 0,true> { int V __attribute__ ((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<818 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<819 + 1024 * 0,true> { int V __attribute__ ((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<819 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<820 + 1024 * 0,true> { int V __attribute__ ((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<820 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<821 + 1024 * 0,true> { int V __attribute__ ((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<821 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<822 + 1024 * 0,true> { int V __attribute__ ((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<822 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<823 + 1024 * 0,true> { int V __attribute__ ((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<823 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<824 + 1024 * 0,true> { int V __attribute__ ((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<824 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<825 + 1024 * 0,true> { int V __attribute__ ((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<825 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<826 + 1024 * 0,true> { int V __attribute__ ((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<826 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<827 + 1024 * 0,true> { int V __attribute__ ((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<827 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<828 + 1024 * 0,true> { int V __attribute__ ((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<828 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<829 + 1024 * 0,true> { int V __attribute__ ((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<829 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<830 + 1024 * 0,true> { int V __attribute__ ((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<830 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<831 + 1024 * 0,true> { int V __attribute__ ((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<831 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<832 + 1024 * 0,true> { int V __attribute__ ((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<832 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<833 + 1024 * 0,true> { int V __attribute__ ((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<833 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<834 + 1024 * 0,true> { int V __attribute__ ((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<834 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<835 + 1024 * 0,true> { int V __attribute__ ((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<835 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<836 + 1024 * 0,true> { int V __attribute__ ((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<836 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<837 + 1024 * 0,true> { int V __attribute__ ((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<837 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<838 + 1024 * 0,true> { int V __attribute__ ((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<838 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<839 + 1024 * 0,true> { int V __attribute__ ((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<839 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<840 + 1024 * 0,true> { int V __attribute__ ((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<840 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<841 + 1024 * 0,true> { int V __attribute__ ((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<841 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<842 + 1024 * 0,true> { int V __attribute__ ((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<842 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<843 + 1024 * 0,true> { int V __attribute__ ((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<843 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<844 + 1024 * 0,true> { int V __attribute__ ((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<844 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<845 + 1024 * 0,true> { int V __attribute__ ((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<845 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<846 + 1024 * 0,true> { int V __attribute__ ((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<846 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<847 + 1024 * 0,true> { int V __attribute__ ((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<847 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<848 + 1024 * 0,true> { int V __attribute__ ((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<848 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<849 + 1024 * 0,true> { int V __attribute__ ((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<849 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<850 + 1024 * 0,true> { int V __attribute__ ((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<850 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<851 + 1024 * 0,true> { int V __attribute__ ((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<851 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<852 + 1024 * 0,true> { int V __attribute__ ((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<852 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<853 + 1024 * 0,true> { int V __attribute__ ((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<853 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<854 + 1024 * 0,true> { int V __attribute__ ((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<854 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<855 + 1024 * 0,true> { int V __attribute__ ((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<855 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<856 + 1024 * 0,true> { int V __attribute__ ((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<856 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<857 + 1024 * 0,true> { int V __attribute__ ((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<857 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<858 + 1024 * 0,true> { int V __attribute__ ((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<858 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<859 + 1024 * 0,true> { int V __attribute__ ((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<859 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<860 + 1024 * 0,true> { int V __attribute__ ((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<860 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<861 + 1024 * 0,true> { int V __attribute__ ((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<861 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<862 + 1024 * 0,true> { int V __attribute__ ((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<862 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<863 + 1024 * 0,true> { int V __attribute__ ((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<863 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<864 + 1024 * 0,true> { int V __attribute__ ((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<864 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<865 + 1024 * 0,true> { int V __attribute__ ((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<865 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<866 + 1024 * 0,true> { int V __attribute__ ((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<866 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<867 + 1024 * 0,true> { int V __attribute__ ((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<867 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<868 + 1024 * 0,true> { int V __attribute__ ((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<868 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<869 + 1024 * 0,true> { int V __attribute__ ((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<869 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<870 + 1024 * 0,true> { int V __attribute__ ((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<870 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<871 + 1024 * 0,true> { int V __attribute__ ((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<871 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<872 + 1024 * 0,true> { int V __attribute__ ((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<872 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<873 + 1024 * 0,true> { int V __attribute__ ((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<873 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<874 + 1024 * 0,true> { int V __attribute__ ((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<874 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<875 + 1024 * 0,true> { int V __attribute__ ((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<875 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<876 + 1024 * 0,true> { int V __attribute__ ((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<876 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<877 + 1024 * 0,true> { int V __attribute__ ((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<877 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<878 + 1024 * 0,true> { int V __attribute__ ((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<878 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<879 + 1024 * 0,true> { int V __attribute__ ((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<879 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<880 + 1024 * 0,true> { int V __attribute__ ((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<880 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<881 + 1024 * 0,true> { int V __attribute__ ((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<881 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<882 + 1024 * 0,true> { int V __attribute__ ((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<882 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<883 + 1024 * 0,true> { int V __attribute__ ((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<883 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<884 + 1024 * 0,true> { int V __attribute__ ((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<884 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<885 + 1024 * 0,true> { int V __attribute__ ((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<885 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<886 + 1024 * 0,true> { int V __attribute__ ((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<886 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<887 + 1024 * 0,true> { int V __attribute__ ((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<887 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<888 + 1024 * 0,true> { int V __attribute__ ((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<888 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<889 + 1024 * 0,true> { int V __attribute__ ((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<889 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<890 + 1024 * 0,true> { int V __attribute__ ((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<890 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<891 + 1024 * 0,true> { int V __attribute__ ((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<891 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<892 + 1024 * 0,true> { int V __attribute__ ((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<892 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<893 + 1024 * 0,true> { int V __attribute__ ((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<893 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<894 + 1024 * 0,true> { int V __attribute__ ((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<894 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<895 + 1024 * 0,true> { int V __attribute__ ((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<895 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<896 + 1024 * 0,true> { int V __attribute__ ((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<896 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<897 + 1024 * 0,true> { int V __attribute__ ((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<897 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<898 + 1024 * 0,true> { int V __attribute__ ((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<898 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<899 + 1024 * 0,true> { int V __attribute__ ((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<899 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<900 + 1024 * 0,true> { int V __attribute__ ((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<900 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<901 + 1024 * 0,true> { int V __attribute__ ((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<901 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<902 + 1024 * 0,true> { int V __attribute__ ((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<902 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<903 + 1024 * 0,true> { int V __attribute__ ((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<903 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<904 + 1024 * 0,true> { int V __attribute__ ((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<904 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<905 + 1024 * 0,true> { int V __attribute__ ((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<905 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<906 + 1024 * 0,true> { int V __attribute__ ((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<906 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<907 + 1024 * 0,true> { int V __attribute__ ((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<907 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<908 + 1024 * 0,true> { int V __attribute__ ((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<908 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<909 + 1024 * 0,true> { int V __attribute__ ((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<909 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<910 + 1024 * 0,true> { int V __attribute__ ((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<910 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<911 + 1024 * 0,true> { int V __attribute__ ((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<911 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<912 + 1024 * 0,true> { int V __attribute__ ((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<912 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<913 + 1024 * 0,true> { int V __attribute__ ((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<913 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<914 + 1024 * 0,true> { int V __attribute__ ((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<914 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<915 + 1024 * 0,true> { int V __attribute__ ((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<915 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<916 + 1024 * 0,true> { int V __attribute__ ((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<916 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<917 + 1024 * 0,true> { int V __attribute__ ((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<917 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<918 + 1024 * 0,true> { int V __attribute__ ((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<918 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<919 + 1024 * 0,true> { int V __attribute__ ((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<919 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<920 + 1024 * 0,true> { int V __attribute__ ((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<920 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<921 + 1024 * 0,true> { int V __attribute__ ((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<921 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<922 + 1024 * 0,true> { int V __attribute__ ((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<922 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<923 + 1024 * 0,true> { int V __attribute__ ((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<923 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<924 + 1024 * 0,true> { int V __attribute__ ((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<924 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<925 + 1024 * 0,true> { int V __attribute__ ((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<925 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<926 + 1024 * 0,true> { int V __attribute__ ((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<926 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<927 + 1024 * 0,true> { int V __attribute__ ((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<927 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<928 + 1024 * 0,true> { int V __attribute__ ((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<928 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<929 + 1024 * 0,true> { int V __attribute__ ((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<929 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<930 + 1024 * 0,true> { int V __attribute__ ((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<930 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<931 + 1024 * 0,true> { int V __attribute__ ((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<931 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<932 + 1024 * 0,true> { int V __attribute__ ((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<932 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<933 + 1024 * 0,true> { int V __attribute__ ((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<933 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<934 + 1024 * 0,true> { int V __attribute__ ((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<934 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<935 + 1024 * 0,true> { int V __attribute__ ((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<935 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<936 + 1024 * 0,true> { int V __attribute__ ((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<936 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<937 + 1024 * 0,true> { int V __attribute__ ((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<937 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<938 + 1024 * 0,true> { int V __attribute__ ((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<938 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<939 + 1024 * 0,true> { int V __attribute__ ((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<939 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<940 + 1024 * 0,true> { int V __attribute__ ((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<940 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<941 + 1024 * 0,true> { int V __attribute__ ((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<941 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<942 + 1024 * 0,true> { int V __attribute__ ((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<942 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<943 + 1024 * 0,true> { int V __attribute__ ((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<943 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<944 + 1024 * 0,true> { int V __attribute__ ((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<944 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<945 + 1024 * 0,true> { int V __attribute__ ((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<945 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<946 + 1024 * 0,true> { int V __attribute__ ((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<946 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<947 + 1024 * 0,true> { int V __attribute__ ((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<947 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<948 + 1024 * 0,true> { int V __attribute__ ((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<948 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<949 + 1024 * 0,true> { int V __attribute__ ((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<949 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<950 + 1024 * 0,true> { int V __attribute__ ((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<950 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<951 + 1024 * 0,true> { int V __attribute__ ((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<951 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<952 + 1024 * 0,true> { int V __attribute__ ((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<952 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<953 + 1024 * 0,true> { int V __attribute__ ((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<953 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<954 + 1024 * 0,true> { int V __attribute__ ((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<954 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<955 + 1024 * 0,true> { int V __attribute__ ((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<955 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<956 + 1024 * 0,true> { int V __attribute__ ((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<956 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<957 + 1024 * 0,true> { int V __attribute__ ((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<957 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<958 + 1024 * 0,true> { int V __attribute__ ((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<958 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<959 + 1024 * 0,true> { int V __attribute__ ((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<959 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<960 + 1024 * 0,true> { int V __attribute__ ((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<960 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<961 + 1024 * 0,true> { int V __attribute__ ((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<961 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<962 + 1024 * 0,true> { int V __attribute__ ((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<962 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<963 + 1024 * 0,true> { int V __attribute__ ((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<963 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<964 + 1024 * 0,true> { int V __attribute__ ((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<964 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<965 + 1024 * 0,true> { int V __attribute__ ((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<965 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<966 + 1024 * 0,true> { int V __attribute__ ((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<966 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<967 + 1024 * 0,true> { int V __attribute__ ((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<967 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<968 + 1024 * 0,true> { int V __attribute__ ((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<968 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<969 + 1024 * 0,true> { int V __attribute__ ((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<969 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<970 + 1024 * 0,true> { int V __attribute__ ((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<970 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<971 + 1024 * 0,true> { int V __attribute__ ((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<971 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<972 + 1024 * 0,true> { int V __attribute__ ((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<972 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<973 + 1024 * 0,true> { int V __attribute__ ((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<973 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<974 + 1024 * 0,true> { int V __attribute__ ((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<974 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<975 + 1024 * 0,true> { int V __attribute__ ((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<975 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<976 + 1024 * 0,true> { int V __attribute__ ((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<976 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<977 + 1024 * 0,true> { int V __attribute__ ((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<977 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<978 + 1024 * 0,true> { int V __attribute__ ((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<978 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<979 + 1024 * 0,true> { int V __attribute__ ((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<979 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<980 + 1024 * 0,true> { int V __attribute__ ((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<980 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<981 + 1024 * 0,true> { int V __attribute__ ((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<981 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<982 + 1024 * 0,true> { int V __attribute__ ((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<982 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<983 + 1024 * 0,true> { int V __attribute__ ((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<983 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<984 + 1024 * 0,true> { int V __attribute__ ((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<984 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<985 + 1024 * 0,true> { int V __attribute__ ((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<985 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<986 + 1024 * 0,true> { int V __attribute__ ((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<986 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<987 + 1024 * 0,true> { int V __attribute__ ((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<987 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<988 + 1024 * 0,true> { int V __attribute__ ((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<988 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<989 + 1024 * 0,true> { int V __attribute__ ((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<989 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<990 + 1024 * 0,true> { int V __attribute__ ((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<990 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<991 + 1024 * 0,true> { int V __attribute__ ((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<991 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<992 + 1024 * 0,true> { int V __attribute__ ((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<992 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<993 + 1024 * 0,true> { int V __attribute__ ((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<993 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<994 + 1024 * 0,true> { int V __attribute__ ((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<994 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<995 + 1024 * 0,true> { int V __attribute__ ((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<995 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<996 + 1024 * 0,true> { int V __attribute__ ((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<996 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<997 + 1024 * 0,true> { int V __attribute__ ((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<997 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<998 + 1024 * 0,true> { int V __attribute__ ((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<998 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<999 + 1024 * 0,true> { int V __attribute__ ((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<999 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1000 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1000 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1001 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1001 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1002 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1002 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1003 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1003 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1004 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1004 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1005 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1005 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1006 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1006 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1007 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1007 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1008 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1008 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1009 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1009 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1010 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1010 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1011 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1011 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1012 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1012 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1013 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1013 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1014 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1014 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1015 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1015 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1016 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1016 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1017 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1017 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1018 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1018 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1019 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1019 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1020 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1020 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1021 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1021 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1022 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1022 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1023 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1023 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0 , false>() { }; };
template<> struct ssdm_int<1024 + 1024 * 0,true> { int V __attribute__ ((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0 ,true>() { }; }; template<> struct ssdm_int<1024 + 1024 * 0, false> { unsigned int V __attribute__ ((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0 , false>() { }; };
# 243 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h" 2
# 677 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
enum BaseMode { SC_BIN=2, SC_OCT=8, SC_DEC=10, SC_HEX=16 };
# 720 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
# 1 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 721 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h" 2



# 1 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_common.h" 1
# 73 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_common.h"
template <int _AP_W, bool _AP_S, bool _AP_C = (_AP_W <= 64)>
struct ap_int_base;

template <int _AP_W>
struct ap_uint;

template <int _AP_W>
struct ap_int;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

enum ap_q_mode {
  SC_RND,
  SC_RND_ZERO,
  SC_RND_MIN_INF,
  SC_RND_INF,
  SC_RND_CONV,
  SC_TRN,
  SC_TRN_ZERO

};

enum ap_o_mode {
  SC_SAT,
  SC_SAT_ZERO,
  SC_SAT_SYM,
  SC_WRAP,
  SC_WRAP_SM
};

template<int _AP_W, int _AP_I, bool _AP_S=true,
         ap_q_mode _AP_Q=SC_TRN, ap_o_mode _AP_O=SC_WRAP, int _AP_N=0>
struct ap_fixed_base;

template<int _AP_W, int _AP_I, ap_q_mode _AP_Q = SC_TRN,
         ap_o_mode _AP_O = SC_WRAP, int _AP_N = 0>
struct ap_fixed;

template<int _AP_W, int _AP_I, ap_q_mode _AP_Q = SC_TRN,
         ap_o_mode _AP_O = SC_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;
# 725 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h" 2




template<int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum { _AP_WR = _AP_W1+_AP_W2, };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1,
         _AP_W2, _AP_T2>& ref):
    mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref( _AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) { }


  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator = (const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1+_AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1,false> Part1;
    Part1.V = ({ __typeof__(vval.V) __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1+W_ref2-1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2,false> Part2;
    Part2.V = ({ __typeof__(vval.V) __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2-1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }

  inline __attribute__((always_inline)) ap_concat_ref& operator = (unsigned long long val) {
    ap_int_base<_AP_W1+_AP_W2, false> tmpVal(val);
    return operator = (tmpVal);
  }






  template<int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator = (const ap_concat_ref<_AP_W3,_AP_T3,_AP_W4,_AP_T4>& val) {
    ap_int_base<_AP_W1+_AP_W2, false> tmpVal(val);
    return operator = (tmpVal);
  }

  inline __attribute__((always_inline)) ap_concat_ref& operator = (const ap_concat_ref<_AP_W1,_AP_T1,_AP_W2,_AP_T2>& val) {
    ap_int_base<_AP_W1+_AP_W2, false> tmpVal(val);
    return operator = (tmpVal);
  }
  template<int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator = (const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1+_AP_W2, false> tmpVal(val);
    return operator = (tmpVal);
  }
  template<int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator = (const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1+_AP_W2, false> tmpVal(val);
    return operator = (tmpVal);
  }

  template<int _AP_W3, int _AP_I3, bool _AP_S3,
    ap_q_mode _AP_Q3, ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator= (const af_range_ref<_AP_W3, _AP_I3, _AP_S3,
       _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator = ((const ap_int_base<_AP_W3, false>)(val));
  }

  template<int _AP_W3, int _AP_I3, bool _AP_S3,
    ap_q_mode _AP_Q3, ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator= (const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3,
       _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator = (val.to_ap_int_base());
  }

  template<int _AP_W3, int _AP_I3, bool _AP_S3,
    ap_q_mode _AP_Q3, ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator= (const af_bit_ref<_AP_W3, _AP_I3, _AP_S3,
       _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((unsigned long long)(bool)(val));
  }
  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false> () const {
    return get();
  }

  inline __attribute__((always_inline)) operator unsigned long long () const {
    return get().to_uint64();
  }



  template<int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_range_ref<_AP_W3, _AP_S3> >
  operator, (const ap_range_ref<_AP_W3, _AP_S3>& a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref,
      _AP_W3, ap_range_ref<_AP_W3, _AP_S3> >(*this,
          const_cast<ap_range_ref<_AP_W3, _AP_S3>& >(a2));
  }

  template<int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
  operator, (ap_int_base<_AP_W3, _AP_S3>& a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref,
      _AP_W3, ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template<int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
  operator, (volatile ap_int_base<_AP_W3, _AP_S3>& a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref,
      _AP_W3, ap_int_base<_AP_W3, _AP_S3> >(*this,
         const_cast<ap_int_base<_AP_W3, _AP_S3>& >(a2));
  }

  template<int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
  operator, (const ap_int_base<_AP_W3, _AP_S3>& a2) {
    ap_int_base<_AP_W3,_AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref,
      _AP_W3, ap_int_base<_AP_W3, _AP_S3> >(*this,
         const_cast<ap_int_base<_AP_W3, _AP_S3>& >(op));
  }

  template<int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
  operator, (const volatile ap_int_base<_AP_W3, _AP_S3>& a2) {
    ap_int_base<_AP_W3,_AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref,
      _AP_W3, ap_int_base<_AP_W3, _AP_S3> >(*this,
         const_cast<ap_int_base<_AP_W3, _AP_S3>& >(op));
  }
  template<int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator, (const ap_bit_ref<_AP_W3, _AP_S3>& a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref,
      1, ap_bit_ref<_AP_W3, _AP_S3> >(*this,
          const_cast<ap_bit_ref<_AP_W3, _AP_S3>& >(a2));
  }

  template<int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3+_AP_W4,
         ap_concat_ref<_AP_W3,_AP_T3,_AP_W4,_AP_T4> >
  operator, (const ap_concat_ref<_AP_W3,_AP_T3,_AP_W4,_AP_T4>& a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref,
      _AP_W3+_AP_W4, ap_concat_ref<_AP_W3,_AP_T3,_AP_W4,_AP_T4> >(
          *this, const_cast<ap_concat_ref<_AP_W3,_AP_T3,
          _AP_W4,_AP_T4>& >(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3, ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator, (const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3,
      _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, af_range_ref<_AP_W3,
      _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(*this,
      const_cast<af_range_ref< _AP_W3, _AP_I3, _AP_S3, _AP_Q3,
      _AP_O3, _AP_N3>& >(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3, ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_WR, ap_concat_ref, 1, af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator, (const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3,
      _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, af_bit_ref<_AP_W3,
      _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(*this,
      const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3,
      _AP_O3, _AP_N3>& >(a2));
  }

  template<int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3>
  operator & (const ap_int_base<_AP_W3,_AP_S3>& a2) {
    return get() & a2;
  }

  template<int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3>
  operator | (const ap_int_base<_AP_W3,_AP_S3>& a2) {
    return get() | a2;
  }

  template<int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3>
  operator ^ (const ap_int_base<_AP_W3,_AP_S3>& a2) {
    return get() ^ a2;
  }
# 924 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 inline __attribute__((always_inline)) ap_int_base<_AP_WR,false> get() const {
    ap_int_base<_AP_WR,false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    tmpVal.V = ({ __typeof__(tmpVal.V) __Result__ = 0; __typeof__(tmpVal.V) __Val2__ = tmpVal.V; __typeof__((ap_int_base<_AP_W2,false>(mbv2)).V) __Repl2__ = (ap_int_base<_AP_W2,false>(mbv2)).V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2-1); __Result__; });

    tmpVal.V = ({ __typeof__(tmpVal.V) __Result__ = 0; __typeof__(tmpVal.V) __Val2__ = tmpVal.V; __typeof__((ap_int_base<_AP_W1,false>(mbv1)).V) __Repl2__ = (ap_int_base<_AP_W1,false>(mbv1)).V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1+W_ref2-1); __Result__; });

    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1+_AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1,false> tmpVal1;
    tmpVal1.V = ({ __typeof__(vval.V) __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1+W_ref2-1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V=({ __typeof__(vval.V) __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2-1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const {
    return mbv1.length() + mbv2.length();
  }
};
# 966 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, bool _AP_S>
struct ap_range_ref {
  ap_int_base<_AP_W,_AP_S> &d_bv;
  int l_index;
  int h_index;

public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref):
    d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ap_int_base<_AP_W,_AP_S>* bv, int h, int l) :
    d_bv(*bv), l_index(l), h_index(h) {

  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false> () const {
    ap_int_base<_AP_W,false> ret;
    ret.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator unsigned long long () const {
    return to_uint64();
  }

  inline __attribute__((always_inline)) ap_range_ref& operator = (unsigned long long val) {
    ap_int_base<_AP_W, false> loc(val);
    d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator = (const ap_int_base<_AP_W2,_AP_S2>& val) {
    ap_int_base<_AP_W, false> loc(val);
    d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator= (const ap_range_ref<_AP_W2,_AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  inline __attribute__((always_inline)) ap_range_ref& operator= (const ap_range_ref<_AP_W, _AP_S>& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2,
    ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator= (const af_range_ref<_AP_W2, _AP_I2, _AP_S2,
      _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)(val));
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2,
    ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator= (const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2,
      _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(val.to_ap_int_base());
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2,
    ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator= (const af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
      _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((unsigned long long)(bool)(val));
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator= (const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((unsigned long long)(bool)(val));
  }

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator= (const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W,ap_range_ref,_AP_W2,ap_range_ref<_AP_W2,_AP_S2> >
  operator, (const ap_range_ref<_AP_W2,_AP_S2> &a2) {
    return
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
      ap_range_ref<_AP_W2,_AP_S2> >(*this,
        const_cast<ap_range_ref<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W,ap_range_ref,_AP_W2,ap_int_base<_AP_W2,_AP_S2> >
  operator, (ap_int_base<_AP_W2,_AP_S2> &a2) {
    return
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2,_AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W,ap_range_ref,_AP_W,ap_int_base<_AP_W,_AP_S> >
  operator, (ap_int_base<_AP_W,_AP_S> &a2) {
    return
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W,_AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W,ap_range_ref,_AP_W2,ap_int_base<_AP_W2,_AP_S2> >
  operator, (volatile ap_int_base<_AP_W2,_AP_S2>& a2) {
    return
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2,_AP_S2> >(*this,
               const_cast<ap_int_base<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W,ap_range_ref,_AP_W2,ap_int_base<_AP_W2,_AP_S2> >
  operator, (const ap_int_base<_AP_W2,_AP_S2>& a2) {
    return
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2,_AP_S2> >(*this,
               const_cast<ap_int_base<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W,ap_range_ref,_AP_W2,ap_int_base<_AP_W2,_AP_S2> >
  operator, (const volatile ap_int_base<_AP_W2,_AP_S2>& a2) {
    return
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
      ap_int_base<_AP_W2,_AP_S2> >(*this,
       const_cast<ap_int_base<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W,ap_range_ref,1,ap_bit_ref<_AP_W2,_AP_S2> >
  operator, (const ap_bit_ref<_AP_W2,_AP_S2> &a2) {
    return
      ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2,_AP_S2> >(*this,
         const_cast<ap_bit_ref<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W2+_AP_W3, ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator, (const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2+_AP_W3,
      ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
            const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& >(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator, (const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, af_range_ref<_AP_W2,
      _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
      const_cast<af_range_ref<_AP_W2,_AP_I2, _AP_S2,
      _AP_Q2, _AP_O2, _AP_N2>& >(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator, (const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, af_bit_ref<_AP_W2,
      _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
      const_cast<af_bit_ref<_AP_W2,_AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2>& >(a2));
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator == (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator != (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator == (op2));
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator < (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop (*this);

    ap_int_base<_AP_W2, false> hop (op2);
    return lop < hop;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator <= (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop (*this);

    ap_int_base<_AP_W2, false> hop (op2);
    return lop <= hop;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator > (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator <= (op2));
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator >= (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator < (op2));
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S> & operator |= (const ap_range_ref<_AP_W2,_AP_S2> &op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S> & operator |= (const ap_int<_AP_W2> &op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S> & operator |= (const ap_uint<_AP_W2> &op2) {
    (this->d_bv.V) |= op2.V;
    return *this;
  };

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S> & operator &= (const ap_range_ref<_AP_W2,_AP_S2> &op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S> & operator &= (const ap_int<_AP_W2> &op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S> & operator &= (const ap_uint<_AP_W2> &op2) {
    (this->d_bv.V) &= op2.V;
    return *this;
  };

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S> & operator ^= (const ap_range_ref<_AP_W2,_AP_S2> &op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S> & operator ^= (const ap_int<_AP_W2> &op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S> & operator ^= (const ap_uint<_AP_W2> &op2) {
    (this->d_bv.V) ^= op2.V;
    return *this;
  };

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }
  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }
  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }
  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }
  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }
  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {
_ssdm_Unroll(0,0,0, "");
 ret &= (bool)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), i, i); __Result__; }));
    }
    return ret;
  }
  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {
_ssdm_Unroll(0,0,0, "");
 ret |= (bool)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), i, i); __Result__; }));
    }
    return ret;
  }
  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {
_ssdm_Unroll(0,0,0, "");
 ret ^= (bool)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), i, i); __Result__; }));
    }
    return ret;
  }
};





template<int _AP_W, bool _AP_S>
struct ap_bit_ref {
  ap_int_base<_AP_W, _AP_S>& d_bv;
  int d_index;

public:
  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref):
    d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ap_int_base<_AP_W,_AP_S>* bv, int index=0) :
    d_bv(*bv), d_index(index) { }
  inline __attribute__((always_inline)) operator bool () const { return ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), d_index, d_index); (bool)(__Result__ & 1); }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), d_index, d_index); (bool)(__Result__ & 1); }); }

  inline __attribute__((always_inline)) ap_bit_ref& operator = ( unsigned long long val ) {
    d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator = ( const ap_int_base<_AP_W2,_AP_S2> &val ) {
    return operator =((unsigned long long)(val.V != 0));
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator = ( const ap_range_ref<_AP_W2,_AP_S2> &val ) {
    return operator =(val.operator ap_int_base<_AP_W2, false>());
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator = (const ap_bit_ref<_AP_W2,_AP_S2>& val) {
    return operator =((unsigned long long) (bool) val);
  }

  inline __attribute__((always_inline)) ap_bit_ref& operator = (const ap_bit_ref<_AP_W,_AP_S>& val) {
    return operator =((unsigned long long) (bool) val);
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2,
    ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator= (const af_range_ref<_AP_W2, _AP_I2, _AP_S2,
    _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)(val));
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2,
    ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator= (const af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
    _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((unsigned long long)(bool)(val));
  }

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator= (const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2,_AP_S2> >
  operator, (ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2,_AP_S2> >(*this, a2);
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2,_AP_S2> >
  operator, (volatile ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2,_AP_S2>
      >(*this, const_cast<ap_int_base<_AP_W2, _AP_S2>& >(a2));
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2,_AP_S2> >
  operator, (const ap_int_base<_AP_W2, _AP_S2>& a2) {
    ap_int_base<_AP_W2,_AP_S2> op(a2);
    return ap_concat_ref<1,ap_bit_ref,_AP_W2,ap_int_base<_AP_W2,
      _AP_S2> >(*this, const_cast<ap_int_base<_AP_W2, _AP_S2>& >(op));
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2,_AP_S2> >
  operator, (const volatile ap_int_base<_AP_W2, _AP_S2>& a2) {
    ap_int_base<_AP_W2,_AP_S2> op(a2);
    return ap_concat_ref<1,ap_bit_ref,_AP_W2, ap_int_base<_AP_W2,_AP_S2>
      >(*this, const_cast< ap_int_base<_AP_W2, _AP_S2>& >(op));
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2,_AP_S2> >
  operator, (const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return
      ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2,
      _AP_S2> >(*this, const_cast<ap_range_ref<_AP_W2, _AP_S2> &>(a2));
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2,_AP_S2> >
  operator, (const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2,_AP_S2> >(*this,
               const_cast<ap_bit_ref<_AP_W2,_AP_S2>& >(a2));
  }

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2+_AP_W3, ap_concat_ref<_AP_W2,_AP_T2,_AP_W3,_AP_T3> >
  operator, (const ap_concat_ref<_AP_W2,_AP_T2,_AP_W3,_AP_T3> &a2) {
    return ap_concat_ref<1,ap_bit_ref,_AP_W2+_AP_W3,ap_concat_ref<_AP_W2,
      _AP_T2,_AP_W3,_AP_T3> >(*this,
         const_cast<ap_concat_ref<_AP_W2,_AP_T2,_AP_W3,_AP_T3> &>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
  ap_concat_ref<1, ap_bit_ref, _AP_W2, af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator, (const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, af_range_ref<_AP_W2,
      _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
      const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2>& >(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
  ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator, (const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2,
      _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
      const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
      _AP_Q2, _AP_O2, _AP_N2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator == (const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator != (const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const {
    return ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), d_index, d_index); (bool)(__Result__ & 1); });
  }

  inline __attribute__((always_inline)) bool get() {
    return ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), d_index, d_index); (bool)(__Result__ & 1); });
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator = (val);
  }

  inline __attribute__((always_inline)) bool operator ~() const {
    bool bit = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), d_index, d_index); (bool)(__Result__ & 1); });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }
};

template <int _AP_N, bool _AP_S> struct retval;

template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};
template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};

template<> struct retval<1, true> {
  typedef signed char Type;
};
template<> struct retval<1, false> {
  typedef unsigned char Type;
};
template<> struct retval<2, true> {
  typedef short Type;
};
template<> struct retval<2, false> {
  typedef unsigned short Type;
};
template<> struct retval<3, true> {
  typedef int Type;
};
template<> struct retval<3, false> {
  typedef unsigned int Type;
};
template<> struct retval<4, true> {
  typedef int Type;
};
template<> struct retval<4, false> {
  typedef unsigned int Type;
};






template<int _AP_W, bool _AP_S>
struct ap_int_base <_AP_W, _AP_S, true>: public ssdm_int<_AP_W,_AP_S> {

public:
  typedef ssdm_int<_AP_W, _AP_S> Base;

  typedef typename retval< (_AP_W + 7)/8, _AP_S>::Type RetType;

  static const int width = _AP_W;



  template<int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W+_AP_W2,
      mult_s = _AP_S||_AP_S2,
      plus_w = ((_AP_W+(_AP_S2&&!_AP_S)) > (_AP_W2+(_AP_S&&!_AP_S2)) ? (_AP_W+(_AP_S2&&!_AP_S)) : (_AP_W2+(_AP_S&&!_AP_S2)))+1,
      plus_s = _AP_S||_AP_S2,
      minus_w = ((_AP_W+(_AP_S2&&!_AP_S)) > (_AP_W2+(_AP_S&&!_AP_S2)) ? (_AP_W+(_AP_S2&&!_AP_S)) : (_AP_W2+(_AP_S&&!_AP_S2)))+1,
      minus_s = true,
      div_w = _AP_W+_AP_S2,
      div_s = _AP_S||_AP_S2,
      mod_w = ((_AP_W) < (_AP_W2+(!_AP_S2&&_AP_S)) ? (_AP_W) : (_AP_W2+(!_AP_S2&&_AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W+(_AP_S2&&!_AP_S)) > (_AP_W2+(_AP_S&&!_AP_S2)) ? (_AP_W+(_AP_S2&&!_AP_S)) : (_AP_W2+(_AP_S&&!_AP_S2))),
      logic_s = _AP_S||_AP_S2
    };

    typedef ap_int_base<mult_w, mult_s> mult;
    typedef ap_int_base<plus_w, plus_s> plus;
    typedef ap_int_base<minus_w, minus_s> minus;
    typedef ap_int_base<logic_w, logic_s> logic;
    typedef ap_int_base<div_w, div_s> div;
    typedef ap_int_base<mod_w, mod_s> mod;
    typedef ap_int_base<_AP_W, _AP_S> arg1;
    typedef bool reduce;
  };




  inline __attribute__((always_inline)) ap_int_base() {





  }




  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2,_AP_S2> &op) { Base::V = op.V; }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2,_AP_S2> &op) { Base::V = op.V; }






  inline __attribute__((always_inline)) explicit ap_int_base(bool op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(short op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(int op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(long op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(ap_ulong op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(half op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(float op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(double op) { Base::V = op; }

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2,_AP_S2>& ref) {
    Base::V = ref.operator ap_int_base<_AP_W2, false>().V;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2,_AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2,_AP_T2,_AP_W3,_AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2,_AP_T2,_AP_W3,_AP_T3>::_AP_WR,false> tmp = ref.get();
    Base::V = tmp.V;
  }





  inline __attribute__((always_inline)) ap_int_base(const char* str) {
    __typeof__(Base::V) Result;
    _ssdm_string2bits((void*)(&Result), (const char*)(str), 10,
        _AP_W, _AP_S, SC_TRN, SC_WRAP, 0, true);
    Base::V = Result;
  }

  inline __attribute__((always_inline)) ap_int_base(const char* str, signed char radix) {
    __typeof__(Base::V) Result;
    _ssdm_string2bits((void*)(&Result), (const char*)(str), radix,
        _AP_W, _AP_S, SC_TRN, SC_WRAP, 0, true);
    Base::V = Result;
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2,
    ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(const af_range_ref<_AP_W2, _AP_I2, _AP_S2,
       _AP_Q2, _AP_O2, _AP_N2> &val) {
    Base::V = (val.operator ap_int_base<_AP_W2, false> ()).V;
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2,
    ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
       _AP_Q2, _AP_O2, _AP_N2> &val) {
    Base::V = val.operator bool ();
  }







  inline __attribute__((always_inline)) ap_int_base read() volatile {
                                                ;
    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }
  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
                                               ;
    Base::V = op2.V;
  }



  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator = (const volatile ap_int_base<_AP_W2,_AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator = (const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator = (const ap_int_base<_AP_W2,_AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator = (const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }
# 1670 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const volatile ap_int_base<_AP_W2,_AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const ap_int_base<_AP_W2,_AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator = (const volatile ap_int_base<_AP_W,_AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator = (const ap_int_base<_AP_W,_AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator = (const char* str) {
    __typeof__(Base::V) Result;
    _ssdm_string2bits((void*)(&Result), (const char*)(str),
        10, _AP_W, _AP_S, SC_TRN, SC_WRAP, 0,true);
    Base::V = Result;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& set(const char* str, signed char radix) {
    __typeof__(Base::V) Result;
    _ssdm_string2bits((void*)(&Result), (const char*)(str), radix,
        _AP_W, _AP_S, SC_TRN, SC_WRAP, 0, true);
    Base::V = Result;
    return *this;
  }







  inline __attribute__((always_inline)) ap_int_base& operator = (signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (ap_ulong op) { Base::V = op; return *this; }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool) op2;
    return *this;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator = (const ap_concat_ref<_AP_W2,_AP_T2,_AP_W3,_AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool) op;
    return *this;
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }

  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }





  inline __attribute__((always_inline)) bool to_bool() const {return (bool)(Base::V);}
  inline __attribute__((always_inline)) unsigned char to_uchar() const {return (unsigned char)(Base::V);}
  inline __attribute__((always_inline)) signed char to_char() const {return (signed char)(Base::V);}
  inline __attribute__((always_inline)) unsigned short to_ushort() const {return (unsigned short)(Base::V);}
  inline __attribute__((always_inline)) short to_short() const {return (short)(Base::V);}
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 1789 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 inline __attribute__((always_inline)) int length() const { return _AP_W; }
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }




  inline __attribute__((always_inline)) ap_int_base& reverse () {
    Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) bool iszero () const {
    return Base::V == 0 ;
  }


  inline __attribute__((always_inline)) bool is_zero () const {
    return Base::V == 0 ;
  }


  inline __attribute__((always_inline)) bool sign () const {
    if (_AP_S && ({ __typeof__(const_cast<ap_int_base*>(this)->V) __Result__ = 0; __typeof__(const_cast<ap_int_base*>(this)->V) __Val2__ = const_cast<ap_int_base*>(this)->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, _AP_W - 1); (bool)(__Result__ & 1); }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                            ;
    Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                            ;
    bool val = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), i, i); (bool)(__Result__ & 1); });
    if (val) Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool test (int i) const {
                                                            ;
    return ({ __typeof__(const_cast<ap_int_base*>(this)->V) __Result__ = 0; __typeof__(const_cast<ap_int_base*>(this)->V) __Val2__ = const_cast<ap_int_base*>(this)->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), i, i); (bool)(__Result__ & 1); });
  }


  inline __attribute__((always_inline)) void set (int i) {
                                                            ;
    Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set (int i, bool v) {
                                                            ;
    Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) void lrotate(int n) {
                                                              ;
    __typeof__(Base::V) l_p = Base::V << n;
    __typeof__(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;
  }



  inline __attribute__((always_inline)) void rrotate(int n) {
                                                              ;
    __typeof__(Base::V) l_p = Base::V << (_AP_W - n);
    __typeof__(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;
  }


  inline __attribute__((always_inline)) void set_bit (int i, bool v) {
    Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit (int i) const {
    return (bool)({ __typeof__(const_cast<ap_int_base*>(this)->V) __Result__ = 0; __typeof__(const_cast<ap_int_base*>(this)->V) __Val2__ = const_cast<ap_int_base*>(this)->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), i, i); (bool)(__Result__ & 1); });
  }


  inline __attribute__((always_inline)) void b_not() {
    Base::V = ~Base::V;
  }




  inline __attribute__((always_inline)) int countLeadingZeros() {
    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W-1, 0) = this->range(0, _AP_W-1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W-1, 0) = this->range(0, _AP_W-1);
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W+63)/64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i=0; i<__N-1; ++i) {
 ap_int_base<64, false> t;
 t.range(0, 63) = this->range(_AP_W - i*64 - 64, _AP_W - i*64 - 1);
 NZeros += hitNonZero?0:__builtin_clzll(t.V);
 hitNonZero |= (t.to_uint64() != 0);
      }
      if (!hitNonZero) {
 ap_int_base<64, false> t(-1ULL);
 t.range(63-(_AP_W-1)%64, 63) = this->range(0, (_AP_W-1)%64);
 NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }
  }
# 1926 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V *= op2.V; return *this; }
  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator += ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V += op2.V; return *this; }
  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V -= op2.V; return *this; }
  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V /= op2.V; return *this; }
  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V %= op2.V; return *this; }




  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V &= op2.V; return *this; }
  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V |= op2.V; return *this; }
  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator ++() {
    operator+=((ap_int_base<1,false>) 1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator --() {
    operator-=((ap_int_base<1,false>) 1);
    return *this;
  }




  inline __attribute__((always_inline)) const ap_int_base operator ++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1,false>) 1);
    return t;
  }
  inline __attribute__((always_inline)) const ap_int_base operator --(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1,false>) 1);
    return t;
  }




  inline __attribute__((always_inline)) ap_int_base operator +() const {
    return *this;
  }



  inline __attribute__((always_inline)) bool operator ! () const {
    return Base::V == 0;
  }

  inline __attribute__((always_inline)) ap_int_base<((64) < (_AP_W + 1) ? (64) : (_AP_W + 1)), true>
  operator -() const {
    return ((ap_int_base<1,false>) 0) - *this;
  }





  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base operator << ( const ap_int_base<_AP_W2,true> &op2 ) const {
    bool isNeg = op2[_AP_W2 - 1];
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator >> (sh);
    } else
      return operator << (sh);
  }

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base operator << ( const ap_int_base<_AP_W2,false> &op2 ) const {
    ap_int_base r ;
    r.V = Base::V << op2.to_uint();
    return r;
  }


  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base operator >> ( const ap_int_base<_AP_W2,true> &op2 ) const {
    bool isNeg = op2[_AP_W2 - 1];
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator << (sh);
    }
    return operator >> (sh);
  }
  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base operator >> ( const ap_int_base<_AP_W2,false> &op2 ) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base operator << ( const ap_range_ref<_AP_W2,_AP_S2>& op2 ) const {
    return *this << (op2.operator ap_int_base<_AP_W2, false>());
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base operator >> ( const ap_range_ref<_AP_W2,_AP_S2>& op2 ) const {
    return *this >> (op2.operator ap_int_base<_AP_W2, false>());
  }





  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator <<= ( const ap_int_base<_AP_W2,true> &op2 ) {
    bool isNeg = op2[_AP_W2 - 1];
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator >>= (sh);
    } else
      return operator <<= (sh);
  }
  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator <<= ( const ap_int_base<_AP_W2,false> &op2 ) {
    Base::V <<= op2.to_uint();
    return *this;
  }
  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator >>= ( const ap_int_base<_AP_W2,true> &op2 ) {
    bool isNeg = op2[_AP_W2 - 1];
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator <<= (sh);
    }
    return operator >>= (sh);
  }
  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator >>= ( const ap_int_base<_AP_W2,false> &op2 ) {
    Base::V >>= op2.to_uint();
    return *this;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator <<= ( const ap_range_ref<_AP_W2,_AP_S2>& op2 ) {
    return *this <<= (op2.operator ap_int_base<_AP_W2, false>());
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator >>= ( const ap_range_ref<_AP_W2,_AP_S2>& op2 ) {
    return *this >>= (op2.operator ap_int_base<_AP_W2, false>());
  }




  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W2,_AP_S2> &op2) const {
    return Base::V == op2.V;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W2,_AP_S2> &op2) const {
    return !(Base::V == op2.V);
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W2,_AP_S2> &op2) const {
    return Base::V < op2.V;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W2,_AP_S2> &op2) const {
    return Base::V >= op2.V;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W2,_AP_S2> &op2) const {
    return Base::V > op2.V;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W2,_AP_S2> &op2) const {
    return Base::V <= op2.V;
  }





  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S>
  range (int Hi, int Lo) {
                                                                       ;
    return ap_range_ref<_AP_W,_AP_S>(this, Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S>
  operator () (int Hi, int Lo) {
                                                                       ;
    return ap_range_ref<_AP_W,_AP_S>(this, Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S>
  range (int Hi, int Lo) const {
                                                                       ;
    return ap_range_ref<_AP_W,_AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S>
  operator () (int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }
# 2147 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 inline __attribute__((always_inline)) ap_bit_ref<_AP_W,_AP_S> operator [] (int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> bvh( this, index );
    return bvh;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W,_AP_S> operator [] (const ap_int_base<_AP_W2,_AP_S2> &index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> bvh( this, index.to_int() );
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator [] (int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> br(const_cast<ap_int_base*>(this), index);
    return br.to_bool();
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator [] (const ap_int_base<_AP_W2,_AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> br(const_cast<ap_int_base*>(this),
          index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W,_AP_S> bit (int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> bvh( this, index );
    return bvh;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W,_AP_S> bit (const ap_int_base<_AP_W2,_AP_S2> &index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> bvh( this, index.to_int() );
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit (int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> br(const_cast<ap_int_base*>(this), index);
    return br.to_bool();
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit (const ap_int_base<_AP_W2,_AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> br = bit(index);
    return br.to_bool();
  }
# 2210 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W,ap_int_base,_AP_W2,ap_int_base<_AP_W2,_AP_S2> > concat(const ap_int_base<_AP_W2,_AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2,_AP_S2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
            const_cast<ap_int_base<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W,ap_int_base,_AP_W2,ap_int_base<_AP_W2,_AP_S2> > concat(ap_int_base<_AP_W2,_AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2,_AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator, (const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
      ap_range_ref<_AP_W2, _AP_S2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
         const_cast< ap_range_ref<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator, (ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
      ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator, (const ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2,
      _AP_S2> >(*this,
  const_cast<ap_int_base<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator, (ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2,
      _AP_S2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
  a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator, (const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2,
      _AP_S2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
  const_cast<ap_int_base<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator, (ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator, (const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2,
      _AP_S2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this), const_cast<ap_bit_ref<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator, (ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2,
      _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2+_AP_W3, ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator, (const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2+_AP_W3,
      ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
            const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& >(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2+_AP_W3, ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator, (ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2+_AP_W3,
      ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this, a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator, (const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, af_range_ref<_AP_W2,
      _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
      const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& >(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator, (af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, af_range_ref<_AP_W2,
      _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator, (const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, af_bit_ref<_AP_W2,
      _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
      const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& >(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator, (af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, af_bit_ref<_AP_W2,
      _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2+_AP_W3) > (_AP_W) ? (_AP_W2+_AP_W3) : (_AP_W)), _AP_S>
  operator & (const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2+_AP_W3) > (_AP_W) ? (_AP_W2+_AP_W3) : (_AP_W)), _AP_S>
  operator | (const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2+_AP_W3) > (_AP_W) ? (_AP_W2+_AP_W3) : (_AP_W)), _AP_S>
  operator ^ (const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }




  inline __attribute__((always_inline)) bool and_reduce() {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool nand_reduce() {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool or_reduce() {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool nor_reduce() {
    return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }));
  }
  inline __attribute__((always_inline)) bool xor_reduce() {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool xnor_reduce() {
    return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool nand_reduce() const {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool or_reduce() const {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool nor_reduce() const {
    return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }));
  }
  inline __attribute__((always_inline)) bool xor_reduce() const {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }




  void to_string(char* str, int len, BaseMode mode, bool sign = false) const {
    for (int i = 0; i <= len; ++i) str[i] = '\0';
    if (mode == SC_BIN) {
      int size = ((_AP_W) < (len) ? (_AP_W) : (len));
      for (int bit = size; bit > 0; --bit) {
 if (({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), bit-1, bit-1); (bool)(__Result__ & 1); })) str[size-bit] = '1';
 else str[size-bit] = '0';
      }
    } else if (mode == SC_OCT || mode == SC_DEC) {
# 2431 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 ;
    } else {
                                           ;
    }
  }

  inline __attribute__((always_inline)) char* to_string(BaseMode mode, bool sign=false) const {
    return 0;
  }

  inline __attribute__((always_inline)) char* to_string(signed char mode, bool sign=false) const {
    return to_string(BaseMode(mode), sign);
  }
};
template<int _AP_W, bool _AP_S>
struct ap_int_base<_AP_W, _AP_S, false> : public ssdm_int<_AP_W,_AP_S> {

public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  typedef typename retval<8, _AP_S>::Type RetType;
  static const int width = _AP_W;


  template<int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W+_AP_W2,
      mult_s = _AP_S||_AP_S2,
      plus_w = ((_AP_W+(_AP_S2&&!_AP_S)) > (_AP_W2+(_AP_S&&!_AP_S2)) ? (_AP_W+(_AP_S2&&!_AP_S)) : (_AP_W2+(_AP_S&&!_AP_S2)))+1,
      plus_s = _AP_S||_AP_S2,
      minus_w = ((_AP_W+(_AP_S2&&!_AP_S)) > (_AP_W2+(_AP_S&&!_AP_S2)) ? (_AP_W+(_AP_S2&&!_AP_S)) : (_AP_W2+(_AP_S&&!_AP_S2)))+1,
      minus_s = true,
      div_w = _AP_W+_AP_S2,
      div_s = _AP_S||_AP_S2,
      mod_w = ((_AP_W) < (_AP_W2+(!_AP_S2&&_AP_S)) ? (_AP_W) : (_AP_W2+(!_AP_S2&&_AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W+(_AP_S2&&!_AP_S)) > (_AP_W2+(_AP_S&&!_AP_S2)) ? (_AP_W+(_AP_S2&&!_AP_S)) : (_AP_W2+(_AP_S&&!_AP_S2))),
      logic_s = _AP_S||_AP_S2
    };

    typedef ap_int_base<mult_w, mult_s> mult;
    typedef ap_int_base<plus_w, plus_s> plus;
    typedef ap_int_base<minus_w, minus_s> minus;
    typedef ap_int_base<logic_w, logic_s> logic;
    typedef ap_int_base<div_w, div_s> div;
    typedef ap_int_base<mod_w, mod_s> mod;
    typedef ap_int_base<_AP_W, _AP_S> arg1;
    typedef bool reduce;
  };




  inline __attribute__((always_inline)) ap_int_base() {





  }




  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2,_AP_S2> &op) { Base::V = op.V; }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2,_AP_S2> &op) { Base::V = op.V; }






  inline __attribute__((always_inline)) explicit ap_int_base(bool op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(short op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(int op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(long op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(ap_ulong op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(half op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(float op) { Base::V = op; }
  inline __attribute__((always_inline)) explicit ap_int_base(double op) { Base::V = op; }

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2,_AP_S2>& ref) {
    Base::V = ref.operator ap_int_base<_AP_W2, false>().V;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2,_AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2,_AP_T2,_AP_W3,_AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2,_AP_T2,_AP_W3,_AP_T3>::_AP_WR,false> tmp = ref.get();
    Base::V = tmp.V;
  }





  inline __attribute__((always_inline)) ap_int_base(const char* str) {
    __typeof__(Base::V) Result;
    _ssdm_string2bits((void*)(&Result), (const char*)(str), 10,
        _AP_W, _AP_S, SC_TRN, SC_WRAP, 0, true);
    Base::V = Result;
  }

  inline __attribute__((always_inline)) ap_int_base(const char* str, signed char radix) {
    __typeof__(Base::V) Result;
    _ssdm_string2bits((void*)(&Result), (const char*)(str), radix,
        _AP_W, _AP_S, SC_TRN, SC_WRAP, 0, true);
    Base::V = Result;
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2,
    ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(const af_range_ref<_AP_W2, _AP_I2, _AP_S2,
       _AP_Q2, _AP_O2, _AP_N2> &val) {
    Base::V = (val.operator ap_int_base<_AP_W2, false> ()).V;
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2,
    ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
       _AP_Q2, _AP_O2, _AP_N2> &val) {
    Base::V = val.operator bool ();
  }







  inline __attribute__((always_inline)) ap_int_base read() volatile {
                                                ;
    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }
  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
                                               ;
    Base::V = op2.V;
  }



  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator = (const volatile ap_int_base<_AP_W2,_AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator = (const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator = (const ap_int_base<_AP_W2,_AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator = (const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }
# 2618 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const volatile ap_int_base<_AP_W2,_AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const ap_int_base<_AP_W2,_AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator = (const volatile ap_int_base<_AP_W,_AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator = (const ap_int_base<_AP_W,_AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator = (const char* str) {
    __typeof__(Base::V) Result;
    _ssdm_string2bits((void*)(&Result), (const char*)(str), 10,
        _AP_W, _AP_S, SC_TRN, SC_WRAP, 0, true);
    Base::V = Result;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& set(const char* str, signed char radix) {
    __typeof__(Base::V) Result;
    _ssdm_string2bits((void*)(&Result), (const char*)(str), radix,
        _AP_W, _AP_S, SC_TRN, SC_WRAP, 0, true);
    Base::V = Result;
    return *this;
  }







  inline __attribute__((always_inline)) ap_int_base& operator = (char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator = (ap_ulong op) { Base::V = op; return *this; }


  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool) op2;
    return *this;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator = (const ap_concat_ref<_AP_W2,_AP_T2,_AP_W3,_AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool) op;
    return *this;
  }

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator = (const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }

  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }





  inline __attribute__((always_inline)) bool to_bool() const {return (bool)(Base::V);}
  inline __attribute__((always_inline)) bool to_uchar() const {return (unsigned char)(Base::V);}
  inline __attribute__((always_inline)) bool to_char() const {return (char)(Base::V);}
  inline __attribute__((always_inline)) bool to_ushort() const {return (unsigned short)(Base::V);}
  inline __attribute__((always_inline)) bool to_short() const {return (short)(Base::V);}
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 2737 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 inline __attribute__((always_inline)) int length() const { return _AP_W; }
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }




  inline __attribute__((always_inline)) ap_int_base& reverse () {
    Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) bool iszero () const {
    return Base::V == 0 ;
  }


  inline __attribute__((always_inline)) bool is_zero () const {
    return Base::V == 0 ;
  }


  inline __attribute__((always_inline)) bool sign () const {
    if (_AP_S && ({ __typeof__(const_cast<ap_int_base*>(this)->V) __Result__ = 0; __typeof__(const_cast<ap_int_base*>(this)->V) __Val2__ = const_cast<ap_int_base*>(this)->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, _AP_W - 1); (bool)(__Result__ & 1); }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                            ;
    Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                            ;
    bool val = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), i, i); (bool)(__Result__ & 1); });
    if (val) Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool test (int i) const {
                                                            ;
    return ({ __typeof__(const_cast<ap_int_base*>(this)->V) __Result__ = 0; __typeof__(const_cast<ap_int_base*>(this)->V) __Val2__ = const_cast<ap_int_base*>(this)->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), i, i); (bool)(__Result__ & 1); });
  }


  inline __attribute__((always_inline)) void set (int i) {
                                                            ;
    Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set (int i, bool v) {
                                                            ;
    Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) void lrotate(int n) {
                                                              ;
    __typeof__(Base::V) l_p = Base::V << n;
    __typeof__(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;
  }



  inline __attribute__((always_inline)) void rrotate(int n) {
                                                              ;
    __typeof__(Base::V) l_p = Base::V << (_AP_W - n);
    __typeof__(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;
  }


  inline __attribute__((always_inline)) void set_bit (int i, bool v) {
    Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit (int i) const {
    return (bool)({ __typeof__(const_cast<ap_int_base*>(this)->V) __Result__ = 0; __typeof__(const_cast<ap_int_base*>(this)->V) __Val2__ = const_cast<ap_int_base*>(this)->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), i, i); (bool)(__Result__ & 1); });
  }


  inline __attribute__((always_inline)) void b_not() {
    Base::V = ~Base::V;
  }




  inline __attribute__((always_inline)) int countLeadingZeros() {
    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W-1, 0) = this->range(0, _AP_W-1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W-1, 0) = this->range(0, _AP_W-1);
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W+63)/64 };
      int NZeros = 0;
      unsigned i = 0;
      bool hitNonZero = false;
      for (i=0; i<__N-1; ++i) {
 ap_int_base<64, false> t;
 t.range(0, 63) = this->range(_AP_W - i*64 - 64, _AP_W - i*64 - 1);
 NZeros += hitNonZero?0:__builtin_clzll(t.V);
 hitNonZero |= (t.to_uint64() != 0);
      }
      if (!hitNonZero) {
 ap_int_base<64, false> t(-1ULL);
 t.range(63-(_AP_W-1)%64, 63) = this->range(0, (_AP_W-1)%64);
 NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }
  }
# 2874 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V *= op2.V; return *this; }
  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator += ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V += op2.V; return *this; }
  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V -= op2.V; return *this; }
  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V /= op2.V; return *this; }
  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V %= op2.V; return *this; }




  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V &= op2.V; return *this; }
  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V |= op2.V; return *this; }
  template<int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^= ( const ap_int_base<_AP_W2,_AP_S2> &op2) { ; Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator ++() {
    operator+=((ap_int_base<1,false>) 1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator --() {
    operator-=((ap_int_base<1,false>) 1);
    return *this;
  }




  inline __attribute__((always_inline)) const ap_int_base operator ++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1,false>) 1);
    return t;
  }
  inline __attribute__((always_inline)) const ap_int_base operator --(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1,false>) 1);
    return t;
  }




  inline __attribute__((always_inline)) ap_int_base operator +() const{
    return *this;
  }

  inline __attribute__((always_inline)) typename RType<1,false>::minus operator -() const {
    return ((ap_int_base<1,false>) 0) - *this;
  }




  inline __attribute__((always_inline)) bool operator ! () const {
    return Base::V == 0;
  }




  inline __attribute__((always_inline)) ap_int_base<_AP_W+!_AP_S, true> operator ~() const {
    ap_int_base<_AP_W+!_AP_S, true> r;
    r.V = ~Base::V;
    return r;
  }




  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base operator << ( const ap_int_base<_AP_W2,true> &op2 ) const {
    bool isNeg = op2[_AP_W2 - 1];
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator >> (sh);
    } else
      return operator << (sh);
  }
  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base operator << ( const ap_int_base<_AP_W2,false> &op2 ) const {
    ap_int_base r ;
    r.V = Base::V << op2.to_uint();
    return r;
  }
  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base operator >> ( const ap_int_base<_AP_W2,true> &op2 ) const {
    bool isNeg = op2[_AP_W2 - 1];
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator << (sh);
    }
    return operator >> (sh);
  }
  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base operator >> ( const ap_int_base<_AP_W2,false> &op2 ) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base operator << ( const ap_range_ref<_AP_W2,_AP_S2>& op2 ) const {
    return *this << (op2.operator ap_int_base<_AP_W2, false>());
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base operator >> ( const ap_range_ref<_AP_W2,_AP_S2>& op2 ) const {
    return *this >> (op2.operator ap_int_base<_AP_W2, false>());
  }




  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator <<= ( const ap_int_base<_AP_W2,true> &op2 ) {
    bool isNeg = op2[_AP_W2 - 1];
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator >>= (sh);
    } else
      return operator <<= (sh);
  }
  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator <<= ( const ap_int_base<_AP_W2,false> &op2 ) {
    Base::V <<= op2.to_uint();
    return *this;
  }
  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator >>= ( const ap_int_base<_AP_W2,true> &op2 ) {
    bool isNeg = op2[_AP_W2 - 1];
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      operator <<= (sh);
    }
    return operator >>= (sh);
  }
  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator >>= ( const ap_int_base<_AP_W2,false> &op2 ) {
    Base::V >>= op2.to_uint();
    return *this;
  }

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator <<= ( const ap_range_ref<_AP_W2,_AP_S2>& op2 ) {
    return *this <<= (op2.operator ap_int_base<_AP_W2, false>());
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator >>= ( const ap_range_ref<_AP_W2,_AP_S2>& op2 ) {
    return *this >>= (op2.operator ap_int_base<_AP_W2, false>());
  }




  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W2,_AP_S2> &op2) const {
    return Base::V == op2.V;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W2,_AP_S2> &op2) const {
    return !(Base::V == op2.V);
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W2,_AP_S2> &op2) const {
    return Base::V < op2.V;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W2,_AP_S2> &op2) const {
    return Base::V >= op2.V;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W2,_AP_S2> &op2) const {
    return Base::V > op2.V;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W2,_AP_S2> &op2) const {
    return Base::V <= op2.V;
  }





  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S>
  range (int Hi, int Lo) {
                                                                       ;
    return ap_range_ref<_AP_W,_AP_S>(this, Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S>
  operator () (int Hi, int Lo) {
                                                                       ;
    return ap_range_ref<_AP_W,_AP_S>(this, Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S>
  range (int Hi, int Lo) const {
                                                                       ;
    return ap_range_ref<_AP_W,_AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W,_AP_S>
  operator () (int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }
# 3100 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 inline __attribute__((always_inline)) ap_bit_ref<_AP_W,_AP_S> operator [] (int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> bvh( this, index );
    return bvh;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W,_AP_S> operator [] (const ap_int_base<_AP_W2,_AP_S2> &index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> bvh( this, index.to_int() );
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator [] (int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> br(const_cast<ap_int_base*>(this), index);
    return br.to_bool();
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator [] (const ap_int_base<_AP_W2,_AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> br(const_cast<ap_int_base*>(this),
          index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W,_AP_S> bit (int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> bvh( this, index );
    return bvh;
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W,_AP_S> bit (const ap_int_base<_AP_W2,_AP_S2> &index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> bvh( this, index.to_int() );
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit (int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> br(const_cast<ap_int_base*>(this), index);
    return br.to_bool();
  }
  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit (const ap_int_base<_AP_W2,_AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W,_AP_S> br = bit(index);
    return br.to_bool();
  }
# 3163 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W,ap_int_base,_AP_W2,ap_int_base<_AP_W2,_AP_S2> > concat(const ap_int_base<_AP_W2,_AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2,_AP_S2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
            const_cast<ap_int_base<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W,ap_int_base,_AP_W2,ap_int_base<_AP_W2,_AP_S2> > concat(ap_int_base<_AP_W2,_AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2,_AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator, (const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
      ap_range_ref<_AP_W2, _AP_S2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
         const_cast< ap_range_ref<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator, (ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
      ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator, (const ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2,
      _AP_S2> >(*this,
  const_cast<ap_int_base<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator, (ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2,
      _AP_S2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
  a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator, (const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2,
      _AP_S2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
  const_cast<ap_int_base<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator, (ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator, (const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2,
      _AP_S2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this), const_cast<ap_bit_ref<_AP_W2, _AP_S2>& >(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator, (ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2,
      _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2+_AP_W3, ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator, (const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2+_AP_W3,
      ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
            const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& >(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2+_AP_W3, ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator, (ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2+_AP_W3,
      ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this, a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator, (const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, af_range_ref<_AP_W2,
      _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
      const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& >(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, _AP_W2, af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator, (af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2, af_range_ref<_AP_W2,
      _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator, (const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, af_bit_ref<_AP_W2,
      _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(const_cast<ap_int_base<_AP_W, _AP_S>& >(*this),
      const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& >(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_int_base, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator, (af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
      _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, af_bit_ref<_AP_W2,
      _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2+_AP_W3) > (_AP_W) ? (_AP_W2+_AP_W3) : (_AP_W)), _AP_S>
  operator & (const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2+_AP_W3) > (_AP_W) ? (_AP_W2+_AP_W3) : (_AP_W)), _AP_S>
  operator | (const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2+_AP_W3) > (_AP_W) ? (_AP_W2+_AP_W3) : (_AP_W)), _AP_S>
  operator ^ (const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }




  inline __attribute__((always_inline)) bool and_reduce() {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool nand_reduce() {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool or_reduce() {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool nor_reduce() {
    return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }));
  }
  inline __attribute__((always_inline)) bool xor_reduce() {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool xnor_reduce() {
    return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool nand_reduce() const {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool or_reduce() const {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool nor_reduce() const {
    return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }));
  }
  inline __attribute__((always_inline)) bool xor_reduce() const {
    return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); });
  }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }




  void to_string(char* str, int len, BaseMode mode, bool sign = false) const {
    for (int i = 0; i <= len; ++i) str[i] = '\0';
    if (mode == SC_BIN) {
      int size = ((_AP_W) < (len) ? (_AP_W) : (len));
      for (int bit = size; bit > 0; --bit) {
 if (({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), bit-1, bit-1); (bool)(__Result__ & 1); })) str[size-bit] = '1';
 else str[size-bit] = '0';
      }
    } else if (mode == SC_OCT || mode == SC_DEC) {
# 3384 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 ;
    } else {
                                           ;
    }
  }

  inline __attribute__((always_inline)) char* to_string(BaseMode mode, bool sign=false) const {
    return 0;
  }

  inline __attribute__((always_inline)) char* to_string(signed char mode, bool sign=false) const {
    return to_string(BaseMode(mode), sign);
  }
};
# 3408 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, bool _AP_S>
inline __attribute__((always_inline)) std::ostream& operator << (std::ostream &os, const ap_int_base<_AP_W,_AP_S> &x) {

  return os;
}




template<int _AP_W, bool _AP_S>
inline __attribute__((always_inline)) std::istream& operator >> (std::istream& in, ap_int_base<_AP_W,_AP_S> &op) {





  return in;
}

template<int _AP_W, bool _AP_S>
inline __attribute__((always_inline)) std::ostream& operator << (std::ostream &os, const ap_range_ref<_AP_W,_AP_S> &x) {

  return os;
}




template<int _AP_W, bool _AP_S>
inline __attribute__((always_inline)) std::istream& operator >> (std::istream& in, ap_range_ref<_AP_W,_AP_S> &op) {





  return in;
}
# 3477 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::mult operator * (const ap_int_base<_AP_W,_AP_S> &op, const ap_int_base<_AP_W2,_AP_S2> &op2) { ; typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::mult lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::mult rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::mult r ; r.V = lhs.V * rhs.V; return r; }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::plus operator + (const ap_int_base<_AP_W,_AP_S> &op, const ap_int_base<_AP_W2,_AP_S2> &op2) { ; typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::plus lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::plus rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::plus r ; r.V = lhs.V + rhs.V; return r; }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::minus operator - (const ap_int_base<_AP_W,_AP_S> &op, const ap_int_base<_AP_W2,_AP_S2> &op2) { ; typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::minus lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::minus rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::minus r ; r.V = lhs.V - rhs.V; return r; }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::div operator / ( const ap_int_base<_AP_W,_AP_S> &op, const ap_int_base<_AP_W2,_AP_S2> &op2) { ; typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::div r ; r.V = op.V / op2.V; return r; }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::mod operator % ( const ap_int_base<_AP_W,_AP_S> &op, const ap_int_base<_AP_W2,_AP_S2> &op2) { ; typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::mod r ; r.V = op.V % op2.V; return r; }




template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::logic operator & (const ap_int_base<_AP_W,_AP_S> &op, const ap_int_base<_AP_W2,_AP_S2> &op2) { ; typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::logic lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::logic rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::logic r ; r.V = lhs.V & rhs.V; return r; }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::logic operator | (const ap_int_base<_AP_W,_AP_S> &op, const ap_int_base<_AP_W2,_AP_S2> &op2) { ; typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::logic lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::logic rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::logic r ; r.V = lhs.V | rhs.V; return r; }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::logic operator ^ (const ap_int_base<_AP_W,_AP_S> &op, const ap_int_base<_AP_W2,_AP_S2> &op2) { ; typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::logic lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::logic rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2,_AP_S2>::logic r ; r.V = lhs.V ^ rhs.V; return r; }
# 3512 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator + (PTR_TYPE* i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op + op2; } template<typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator + (const ap_int_base<_AP_W,_AP_S> &op, PTR_TYPE* i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return op2 + i_op; }
template<typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator - (PTR_TYPE* i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op - op2; } template<typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator - (const ap_int_base<_AP_W,_AP_S> &op, PTR_TYPE* i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return op2 - i_op; }
# 3537 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator * (half i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op * op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator * (const ap_int_base<_AP_W,_AP_S> &op, half i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op * op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator / (half i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op / op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator / (const ap_int_base<_AP_W,_AP_S> &op, half i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op / op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator + (half i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op + op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator + (const ap_int_base<_AP_W,_AP_S> &op, half i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op + op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator - (half i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op - op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator - (const ap_int_base<_AP_W,_AP_S> &op, half i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op - op2; }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator * (float i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op * op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator * (const ap_int_base<_AP_W,_AP_S> &op, float i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op * op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator / (float i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op / op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator / (const ap_int_base<_AP_W,_AP_S> &op, float i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op / op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator + (float i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op + op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator + (const ap_int_base<_AP_W,_AP_S> &op, float i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op + op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator - (float i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op - op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator - (const ap_int_base<_AP_W,_AP_S> &op, float i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op - op2; }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator * (double i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op * op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator * (const ap_int_base<_AP_W,_AP_S> &op, double i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op * op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator / (double i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op / op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator / (const ap_int_base<_AP_W,_AP_S> &op, double i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op / op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator + (double i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op + op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator + (const ap_int_base<_AP_W,_AP_S> &op, double i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op + op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator - (double i_op, const ap_int_base<_AP_W,_AP_S> &op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op - op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator - (const ap_int_base<_AP_W,_AP_S> &op, double i_op) { typename ap_int_base<_AP_W,_AP_S>::RetType op2 = op; return i_op - op2; }
# 3571 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::mult operator * (bool i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(i_op) * (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::mult operator * ( const ap_int_base<_AP_W,_AP_S> &op, bool i_op) { return op * ap_int_base<1,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::plus operator + (bool i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(i_op) + (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::plus operator + ( const ap_int_base<_AP_W,_AP_S> &op, bool i_op) { return op + ap_int_base<1,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::minus operator - (bool i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(i_op) - (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::minus operator - ( const ap_int_base<_AP_W,_AP_S> &op, bool i_op) { return op - ap_int_base<1,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::div operator / (bool i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(i_op) / (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::div operator / ( const ap_int_base<_AP_W,_AP_S> &op, bool i_op) { return op / ap_int_base<1,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::mod operator % (bool i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(i_op) % (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::mod operator % ( const ap_int_base<_AP_W,_AP_S> &op, bool i_op) { return op % ap_int_base<1,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::logic operator & (bool i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(i_op) & (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::logic operator & ( const ap_int_base<_AP_W,_AP_S> &op, bool i_op) { return op & ap_int_base<1,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::logic operator | (bool i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(i_op) | (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::logic operator | ( const ap_int_base<_AP_W,_AP_S> &op, bool i_op) { return op | ap_int_base<1,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::logic operator ^ (bool i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(i_op) ^ (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<1,false>::logic operator ^ ( const ap_int_base<_AP_W,_AP_S> &op, bool i_op) { return op ^ ap_int_base<1,false>(i_op); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::mult operator * (char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) * (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::mult operator * ( const ap_int_base<_AP_W,_AP_S> &op, char i_op) { return op * ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::plus operator + (char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) + (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::plus operator + ( const ap_int_base<_AP_W,_AP_S> &op, char i_op) { return op + ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::minus operator - (char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) - (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::minus operator - ( const ap_int_base<_AP_W,_AP_S> &op, char i_op) { return op - ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::div operator / (char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) / (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::div operator / ( const ap_int_base<_AP_W,_AP_S> &op, char i_op) { return op / ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::mod operator % (char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) % (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::mod operator % ( const ap_int_base<_AP_W,_AP_S> &op, char i_op) { return op % ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::logic operator & (char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) & (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::logic operator & ( const ap_int_base<_AP_W,_AP_S> &op, char i_op) { return op & ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::logic operator | (char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) | (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::logic operator | ( const ap_int_base<_AP_W,_AP_S> &op, char i_op) { return op | ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::logic operator ^ (char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) ^ (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::logic operator ^ ( const ap_int_base<_AP_W,_AP_S> &op, char i_op) { return op ^ ap_int_base<8,true>(i_op); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::mult operator * (signed char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) * (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::mult operator * ( const ap_int_base<_AP_W,_AP_S> &op, signed char i_op) { return op * ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::plus operator + (signed char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) + (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::plus operator + ( const ap_int_base<_AP_W,_AP_S> &op, signed char i_op) { return op + ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::minus operator - (signed char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) - (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::minus operator - ( const ap_int_base<_AP_W,_AP_S> &op, signed char i_op) { return op - ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::div operator / (signed char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) / (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::div operator / ( const ap_int_base<_AP_W,_AP_S> &op, signed char i_op) { return op / ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::mod operator % (signed char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) % (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::mod operator % ( const ap_int_base<_AP_W,_AP_S> &op, signed char i_op) { return op % ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::logic operator & (signed char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) & (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::logic operator & ( const ap_int_base<_AP_W,_AP_S> &op, signed char i_op) { return op & ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::logic operator | (signed char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) | (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::logic operator | ( const ap_int_base<_AP_W,_AP_S> &op, signed char i_op) { return op | ap_int_base<8,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::logic operator ^ (signed char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(i_op) ^ (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,true>::logic operator ^ ( const ap_int_base<_AP_W,_AP_S> &op, signed char i_op) { return op ^ ap_int_base<8,true>(i_op); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::mult operator * (unsigned char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(i_op) * (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::mult operator * ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char i_op) { return op * ap_int_base<8,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::plus operator + (unsigned char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(i_op) + (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::plus operator + ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char i_op) { return op + ap_int_base<8,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::minus operator - (unsigned char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(i_op) - (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::minus operator - ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char i_op) { return op - ap_int_base<8,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::div operator / (unsigned char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(i_op) / (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::div operator / ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char i_op) { return op / ap_int_base<8,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::mod operator % (unsigned char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(i_op) % (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::mod operator % ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char i_op) { return op % ap_int_base<8,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::logic operator & (unsigned char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(i_op) & (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::logic operator & ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char i_op) { return op & ap_int_base<8,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::logic operator | (unsigned char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(i_op) | (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::logic operator | ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char i_op) { return op | ap_int_base<8,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::logic operator ^ (unsigned char i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(i_op) ^ (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<8,false>::logic operator ^ ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char i_op) { return op ^ ap_int_base<8,false>(i_op); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::mult operator * (short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(i_op) * (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::mult operator * ( const ap_int_base<_AP_W,_AP_S> &op, short i_op) { return op * ap_int_base<16,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::plus operator + (short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(i_op) + (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::plus operator + ( const ap_int_base<_AP_W,_AP_S> &op, short i_op) { return op + ap_int_base<16,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::minus operator - (short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(i_op) - (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::minus operator - ( const ap_int_base<_AP_W,_AP_S> &op, short i_op) { return op - ap_int_base<16,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::div operator / (short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(i_op) / (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::div operator / ( const ap_int_base<_AP_W,_AP_S> &op, short i_op) { return op / ap_int_base<16,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::mod operator % (short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(i_op) % (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::mod operator % ( const ap_int_base<_AP_W,_AP_S> &op, short i_op) { return op % ap_int_base<16,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::logic operator & (short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(i_op) & (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::logic operator & ( const ap_int_base<_AP_W,_AP_S> &op, short i_op) { return op & ap_int_base<16,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::logic operator | (short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(i_op) | (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::logic operator | ( const ap_int_base<_AP_W,_AP_S> &op, short i_op) { return op | ap_int_base<16,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::logic operator ^ (short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(i_op) ^ (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,true>::logic operator ^ ( const ap_int_base<_AP_W,_AP_S> &op, short i_op) { return op ^ ap_int_base<16,true>(i_op); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::mult operator * (unsigned short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(i_op) * (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::mult operator * ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short i_op) { return op * ap_int_base<16,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::plus operator + (unsigned short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(i_op) + (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::plus operator + ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short i_op) { return op + ap_int_base<16,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::minus operator - (unsigned short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(i_op) - (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::minus operator - ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short i_op) { return op - ap_int_base<16,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::div operator / (unsigned short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(i_op) / (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::div operator / ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short i_op) { return op / ap_int_base<16,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::mod operator % (unsigned short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(i_op) % (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::mod operator % ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short i_op) { return op % ap_int_base<16,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::logic operator & (unsigned short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(i_op) & (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::logic operator & ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short i_op) { return op & ap_int_base<16,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::logic operator | (unsigned short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(i_op) | (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::logic operator | ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short i_op) { return op | ap_int_base<16,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::logic operator ^ (unsigned short i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(i_op) ^ (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<16,false>::logic operator ^ ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short i_op) { return op ^ ap_int_base<16,false>(i_op); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::mult operator * (int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(i_op) * (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::mult operator * ( const ap_int_base<_AP_W,_AP_S> &op, int i_op) { return op * ap_int_base<32,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::plus operator + (int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(i_op) + (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::plus operator + ( const ap_int_base<_AP_W,_AP_S> &op, int i_op) { return op + ap_int_base<32,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::minus operator - (int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(i_op) - (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::minus operator - ( const ap_int_base<_AP_W,_AP_S> &op, int i_op) { return op - ap_int_base<32,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::div operator / (int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(i_op) / (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::div operator / ( const ap_int_base<_AP_W,_AP_S> &op, int i_op) { return op / ap_int_base<32,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::mod operator % (int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(i_op) % (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::mod operator % ( const ap_int_base<_AP_W,_AP_S> &op, int i_op) { return op % ap_int_base<32,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::logic operator & (int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(i_op) & (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::logic operator & ( const ap_int_base<_AP_W,_AP_S> &op, int i_op) { return op & ap_int_base<32,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::logic operator | (int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(i_op) | (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::logic operator | ( const ap_int_base<_AP_W,_AP_S> &op, int i_op) { return op | ap_int_base<32,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::logic operator ^ (int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(i_op) ^ (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,true>::logic operator ^ ( const ap_int_base<_AP_W,_AP_S> &op, int i_op) { return op ^ ap_int_base<32,true>(i_op); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::mult operator * (unsigned int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(i_op) * (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::mult operator * ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int i_op) { return op * ap_int_base<32,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::plus operator + (unsigned int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(i_op) + (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::plus operator + ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int i_op) { return op + ap_int_base<32,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::minus operator - (unsigned int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(i_op) - (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::minus operator - ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int i_op) { return op - ap_int_base<32,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::div operator / (unsigned int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(i_op) / (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::div operator / ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int i_op) { return op / ap_int_base<32,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::mod operator % (unsigned int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(i_op) % (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::mod operator % ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int i_op) { return op % ap_int_base<32,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::logic operator & (unsigned int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(i_op) & (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::logic operator & ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int i_op) { return op & ap_int_base<32,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::logic operator | (unsigned int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(i_op) | (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::logic operator | ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int i_op) { return op | ap_int_base<32,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::logic operator ^ (unsigned int i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(i_op) ^ (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<32,false>::logic operator ^ ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int i_op) { return op ^ ap_int_base<32,false>(i_op); }

template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::mult operator * (long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) * (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::mult operator * ( const ap_int_base<_AP_W,_AP_S> &op, long i_op) { return op * ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::plus operator + (long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) + (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::plus operator + ( const ap_int_base<_AP_W,_AP_S> &op, long i_op) { return op + ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::minus operator - (long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) - (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::minus operator - ( const ap_int_base<_AP_W,_AP_S> &op, long i_op) { return op - ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::div operator / (long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) / (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::div operator / ( const ap_int_base<_AP_W,_AP_S> &op, long i_op) { return op / ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::mod operator % (long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) % (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::mod operator % ( const ap_int_base<_AP_W,_AP_S> &op, long i_op) { return op % ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::logic operator & (long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) & (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::logic operator & ( const ap_int_base<_AP_W,_AP_S> &op, long i_op) { return op & ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::logic operator | (long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) | (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::logic operator | ( const ap_int_base<_AP_W,_AP_S> &op, long i_op) { return op | ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::logic operator ^ (long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) ^ (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::logic operator ^ ( const ap_int_base<_AP_W,_AP_S> &op, long i_op) { return op ^ ap_int_base<64,true>(i_op); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::mult operator * (unsigned long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) * (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::mult operator * ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long i_op) { return op * ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::plus operator + (unsigned long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) + (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::plus operator + ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long i_op) { return op + ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::minus operator - (unsigned long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) - (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::minus operator - ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long i_op) { return op - ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::div operator / (unsigned long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) / (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::div operator / ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long i_op) { return op / ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::mod operator % (unsigned long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) % (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::mod operator % ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long i_op) { return op % ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::logic operator & (unsigned long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) & (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::logic operator & ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long i_op) { return op & ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::logic operator | (unsigned long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) | (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::logic operator | ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long i_op) { return op | ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::logic operator ^ (unsigned long i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) ^ (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::logic operator ^ ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long i_op) { return op ^ ap_int_base<64,false>(i_op); }




template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::mult operator * (ap_slong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) * (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::mult operator * ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong i_op) { return op * ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::plus operator + (ap_slong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) + (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::plus operator + ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong i_op) { return op + ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::minus operator - (ap_slong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) - (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::minus operator - ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong i_op) { return op - ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::div operator / (ap_slong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) / (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::div operator / ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong i_op) { return op / ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::mod operator % (ap_slong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) % (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::mod operator % ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong i_op) { return op % ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::logic operator & (ap_slong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) & (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::logic operator & ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong i_op) { return op & ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::logic operator | (ap_slong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) | (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::logic operator | ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong i_op) { return op | ap_int_base<64,true>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::logic operator ^ (ap_slong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(i_op) ^ (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,true>::logic operator ^ ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong i_op) { return op ^ ap_int_base<64,true>(i_op); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::mult operator * (ap_ulong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) * (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::mult operator * ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong i_op) { return op * ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::plus operator + (ap_ulong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) + (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::plus operator + ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong i_op) { return op + ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::minus operator - (ap_ulong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) - (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::minus operator - ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong i_op) { return op - ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::div operator / (ap_ulong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) / (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::div operator / ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong i_op) { return op / ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::mod operator % (ap_ulong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) % (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::mod operator % ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong i_op) { return op % ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::logic operator & (ap_ulong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) & (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::logic operator & ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong i_op) { return op & ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::logic operator | (ap_ulong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) | (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::logic operator | ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong i_op) { return op | ap_int_base<64,false>(i_op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::logic operator ^ (ap_ulong i_op, const ap_int_base<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(i_op) ^ (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,_AP_S>::template RType<64,false>::logic operator ^ ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong i_op) { return op ^ ap_int_base<64,false>(i_op); }
# 3607 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<1,false>(i_op).operator == (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator == (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<1,false>(i_op).operator != (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator != (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<1,false>(i_op).operator > (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator > (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<1,false>(i_op).operator >= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator >= (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( bool i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<1,false>(i_op).operator < (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator < (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( bool i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<1,false>(i_op).operator <= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator <= (ap_int_base<1,false>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,true>(i_op).operator == (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator == (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,true>(i_op).operator != (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator != (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,true>(i_op).operator > (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator > (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,true>(i_op).operator >= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator >= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,true>(i_op).operator < (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator < (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,true>(i_op).operator <= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator <= (ap_int_base<8,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,true>(i_op).operator == (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator == (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,true>(i_op).operator != (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator != (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,true>(i_op).operator > (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator > (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,true>(i_op).operator >= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator >= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( signed char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,true>(i_op).operator < (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator < (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( signed char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,true>(i_op).operator <= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator <= (ap_int_base<8,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( unsigned char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,false>(i_op).operator == (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator == (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,false>(i_op).operator != (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator != (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,false>(i_op).operator > (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator > (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,false>(i_op).operator >= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator >= (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( unsigned char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,false>(i_op).operator < (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator < (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( unsigned char i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<8,false>(i_op).operator <= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator <= (ap_int_base<8,false>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( short i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<16,true>(i_op).operator == (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator == (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( short i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<16,true>(i_op).operator != (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator != (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( short i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<16,true>(i_op).operator > (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator > (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( short i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<16,true>(i_op).operator >= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator >= (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( short i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<16,true>(i_op).operator < (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator < (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( short i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<16,true>(i_op).operator <= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator <= (ap_int_base<16,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<16,false>(i_op).operator == (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator == (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<16,false>(i_op).operator != (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator != (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<16,false>(i_op).operator > (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator > (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<16,false>(i_op).operator >= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator >= (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( unsigned short i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<16,false>(i_op).operator < (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator < (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( unsigned short i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<16,false>(i_op).operator <= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator <= (ap_int_base<16,false>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<32,true>(i_op).operator == (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator == (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<32,true>(i_op).operator != (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator != (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<32,true>(i_op).operator > (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator > (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<32,true>(i_op).operator >= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator >= (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( int i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<32,true>(i_op).operator < (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator < (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( int i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<32,true>(i_op).operator <= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator <= (ap_int_base<32,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( unsigned int i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<32,false>(i_op).operator == (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator == (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<32,false>(i_op).operator != (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator != (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<32,false>(i_op).operator > (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator > (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<32,false>(i_op).operator >= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator >= (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( unsigned int i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<32,false>(i_op).operator < (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator < (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( unsigned int i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<32,false>(i_op).operator <= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator <= (ap_int_base<32,false>(op2)); }

template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,true>(i_op).operator == (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator == (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,true>(i_op).operator != (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator != (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,true>(i_op).operator > (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator > (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,true>(i_op).operator >= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator >= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( long i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,true>(i_op).operator < (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator < (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( long i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,true>(i_op).operator <= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator <= (ap_int_base<64,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,false>(i_op).operator == (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator == (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,false>(i_op).operator != (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator != (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,false>(i_op).operator > (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator > (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,false>(i_op).operator >= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator >= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( unsigned long i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,false>(i_op).operator < (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator < (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( unsigned long i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,false>(i_op).operator <= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator <= (ap_int_base<64,false>(op2)); }




template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,true>(i_op).operator == (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator == (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,true>(i_op).operator != (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator != (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,true>(i_op).operator > (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator > (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,true>(i_op).operator >= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator >= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( ap_slong i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,true>(i_op).operator < (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator < (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( ap_slong i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,true>(i_op).operator <= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator <= (ap_int_base<64,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,false>(i_op).operator == (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator == (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,false>(i_op).operator != (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator != (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,false>(i_op).operator > (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator > (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,false>(i_op).operator >= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator >= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( ap_ulong i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,false>(i_op).operator < (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator < (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( ap_ulong i_op, const ap_int_base<_AP_W,_AP_S, false> &op) { return ap_int_base<64,false>(i_op).operator <= (op); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator <= (ap_int_base<64,false>(op2)); }
# 3643 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator += ( ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator += (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator -= ( ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator -= (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator *= ( ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator *= (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator /= ( ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator /= (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator %= ( ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator %= (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator >>= ( ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator >>= (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator <<= ( ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator <<= (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator &= ( ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator &= (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator |= ( ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator |= (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator ^= ( ap_int_base<_AP_W,_AP_S> &op, bool op2) { return op.operator ^= (ap_int_base<1,false>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator += ( ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator += (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator -= ( ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator -= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator *= ( ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator *= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator /= ( ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator /= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator %= ( ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator %= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator >>= ( ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator >>= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator <<= ( ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator <<= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator &= ( ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator &= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator |= ( ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator |= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator ^= ( ap_int_base<_AP_W,_AP_S> &op, char op2) { return op.operator ^= (ap_int_base<8,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator += ( ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator += (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator -= ( ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator -= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator *= ( ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator *= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator /= ( ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator /= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator %= ( ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator %= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator >>= ( ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator >>= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator <<= ( ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator <<= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator &= ( ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator &= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator |= ( ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator |= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator ^= ( ap_int_base<_AP_W,_AP_S> &op, signed char op2) { return op.operator ^= (ap_int_base<8,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator += ( ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator += (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator -= ( ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator -= (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator *= ( ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator *= (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator /= ( ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator /= (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator %= ( ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator %= (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator >>= ( ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator >>= (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator <<= ( ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator <<= (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator &= ( ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator &= (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator |= ( ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator |= (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator ^= ( ap_int_base<_AP_W,_AP_S> &op, unsigned char op2) { return op.operator ^= (ap_int_base<8,false>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator += ( ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator += (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator -= ( ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator -= (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator *= ( ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator *= (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator /= ( ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator /= (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator %= ( ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator %= (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator >>= ( ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator >>= (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator <<= ( ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator <<= (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator &= ( ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator &= (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator |= ( ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator |= (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator ^= ( ap_int_base<_AP_W,_AP_S> &op, short op2) { return op.operator ^= (ap_int_base<16,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator += ( ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator += (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator -= ( ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator -= (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator *= ( ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator *= (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator /= ( ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator /= (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator %= ( ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator %= (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator >>= ( ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator >>= (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator <<= ( ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator <<= (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator &= ( ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator &= (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator |= ( ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator |= (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator ^= ( ap_int_base<_AP_W,_AP_S> &op, unsigned short op2) { return op.operator ^= (ap_int_base<16,false>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator += ( ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator += (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator -= ( ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator -= (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator *= ( ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator *= (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator /= ( ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator /= (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator %= ( ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator %= (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator >>= ( ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator >>= (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator <<= ( ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator <<= (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator &= ( ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator &= (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator |= ( ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator |= (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator ^= ( ap_int_base<_AP_W,_AP_S> &op, int op2) { return op.operator ^= (ap_int_base<32,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator += ( ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator += (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator -= ( ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator -= (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator *= ( ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator *= (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator /= ( ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator /= (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator %= ( ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator %= (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator >>= ( ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator >>= (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator <<= ( ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator <<= (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator &= ( ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator &= (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator |= ( ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator |= (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator ^= ( ap_int_base<_AP_W,_AP_S> &op, unsigned int op2) { return op.operator ^= (ap_int_base<32,false>(op2)); }

template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator += ( ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator += (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator -= ( ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator -= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator *= ( ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator *= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator /= ( ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator /= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator %= ( ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator %= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator >>= ( ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator >>= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator <<= ( ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator <<= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator &= ( ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator &= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator |= ( ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator |= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator ^= ( ap_int_base<_AP_W,_AP_S> &op, long op2) { return op.operator ^= (ap_int_base<64,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator += ( ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator += (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator -= ( ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator -= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator *= ( ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator *= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator /= ( ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator /= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator %= ( ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator %= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator >>= ( ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator >>= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator <<= ( ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator <<= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator &= ( ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator &= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator |= ( ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator |= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator ^= ( ap_int_base<_AP_W,_AP_S> &op, unsigned long op2) { return op.operator ^= (ap_int_base<64,false>(op2)); }




template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator += ( ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator += (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator -= ( ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator -= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator *= ( ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator *= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator /= ( ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator /= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator %= ( ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator %= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator >>= ( ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator >>= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator <<= ( ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator <<= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator &= ( ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator &= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator |= ( ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator |= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator ^= ( ap_int_base<_AP_W,_AP_S> &op, ap_slong op2) { return op.operator ^= (ap_int_base<64,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator += ( ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator += (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator -= ( ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator -= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator *= ( ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator *= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator /= ( ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator /= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator %= ( ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator %= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator >>= ( ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator >>= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator <<= ( ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator <<= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator &= ( ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator &= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator |= ( ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator |= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W,_AP_S> &operator ^= ( ap_int_base<_AP_W,_AP_S> &op, ap_ulong op2) { return op.operator ^= (ap_int_base<64,false>(op2)); }
# 3683 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator << (const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; if (false) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator >> (const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; if (false) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator << (const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator >> (const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator << (const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator >> (const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator << (const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; if (false) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator >> (const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; if (false) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator << (const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator >> (const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator << (const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; if (false) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator >> (const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; if (false) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator << (const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator >> (const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator << (const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; if (false) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator >> (const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; if (false) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }

template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator << (const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator >> (const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator << (const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; if (false) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator >> (const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; if (false) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }




template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator << (const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator >> (const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator << (const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; if (false) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S> operator >> (const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; if (false) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 3737 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator += ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator += (ap_int_base<_AP_W2, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1,_AP_S1>& operator += ( ap_range_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.operator += (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator -= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator -= (ap_int_base<_AP_W2, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1,_AP_S1>& operator -= ( ap_range_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.operator -= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator *= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator *= (ap_int_base<_AP_W2, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1,_AP_S1>& operator *= ( ap_range_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.operator *= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator /= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator /= (ap_int_base<_AP_W2, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1,_AP_S1>& operator /= ( ap_range_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.operator /= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator %= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator %= (ap_int_base<_AP_W2, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1,_AP_S1>& operator %= ( ap_range_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.operator %= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator >>= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator >>= (ap_int_base<_AP_W2, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1,_AP_S1>& operator >>= ( ap_range_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.operator >>= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator <<= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator <<= (ap_int_base<_AP_W2, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1,_AP_S1>& operator <<= ( ap_range_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.operator <<= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator &= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator &= (ap_int_base<_AP_W2, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1,_AP_S1>& operator &= ( ap_range_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.operator &= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator |= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator |= (ap_int_base<_AP_W2, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1,_AP_S1>& operator |= ( ap_range_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.operator |= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator ^= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator ^= (ap_int_base<_AP_W2, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1,_AP_S1>& operator ^= ( ap_range_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.operator ^= (op2); op1 = tmp; return op1; }

template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator == ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1,false>(op1).operator == (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator == (op2.operator ap_int_base<_AP_W2, false>()); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator != ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1,false>(op1).operator != (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator != (op2.operator ap_int_base<_AP_W2, false>()); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator > ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1,false>(op1).operator > (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator > (op2.operator ap_int_base<_AP_W2, false>()); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >= ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1,false>(op1).operator >= (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator >= (op2.operator ap_int_base<_AP_W2, false>()); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator < ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1,false>(op1).operator < (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator < (op2.operator ap_int_base<_AP_W2, false>()); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <= ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1,false>(op1).operator <= (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1.operator <= (op2.operator ap_int_base<_AP_W2, false>()); }

template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::plus operator + ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::plus operator + ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1 + (ap_int_base<_AP_W2, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::minus operator - ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::minus operator - ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1 - (ap_int_base<_AP_W2, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::mult operator * ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::mult operator * ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1 * (ap_int_base<_AP_W2, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::div operator / ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::div operator / ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1 / (ap_int_base<_AP_W2, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::mod operator % ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::mod operator % ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1 % (ap_int_base<_AP_W2, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::arg1 operator >> ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::arg1 operator >> ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1 >> (ap_int_base<_AP_W2, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::arg1 operator << ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::arg1 operator << ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1 << (ap_int_base<_AP_W2, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::logic operator & ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::logic operator & ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1 & (ap_int_base<_AP_W2, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::logic operator | ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::logic operator | ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1 | (ap_int_base<_AP_W2, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::logic operator ^ ( const ap_range_ref<_AP_W1,_AP_S1>& op1, const ap_int_base<_AP_W2,_AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ (op2); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<_AP_W2,_AP_S2>::logic operator ^ ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_range_ref<_AP_W2,_AP_S2>& op2) { return op1 ^ (ap_int_base<_AP_W2, false>(op2)); }
# 3793 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator += ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator += (ap_int_base<1, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1,_AP_S1>& operator += ( ap_bit_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.operator += (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator -= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator -= (ap_int_base<1, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1,_AP_S1>& operator -= ( ap_bit_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.operator -= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator *= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator *= (ap_int_base<1, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1,_AP_S1>& operator *= ( ap_bit_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.operator *= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator /= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator /= (ap_int_base<1, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1,_AP_S1>& operator /= ( ap_bit_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.operator /= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator %= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator %= (ap_int_base<1, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1,_AP_S1>& operator %= ( ap_bit_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.operator %= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator >>= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator >>= (ap_int_base<1, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1,_AP_S1>& operator >>= ( ap_bit_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.operator >>= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator <<= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator <<= (ap_int_base<1, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1,_AP_S1>& operator <<= ( ap_bit_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.operator <<= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator &= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator &= (ap_int_base<1, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1,_AP_S1>& operator &= ( ap_bit_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.operator &= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator |= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator |= (ap_int_base<1, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1,_AP_S1>& operator |= ( ap_bit_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.operator |= (op2); op1 = tmp; return op1; }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1,_AP_S1>& operator ^= ( ap_int_base<_AP_W1,_AP_S1>& op1, ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator ^= (ap_int_base<1, false>(op2)); } template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1,_AP_S1>& operator ^= ( ap_bit_ref<_AP_W1,_AP_S1>& op1, ap_int_base<_AP_W2,_AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.operator ^= (op2); op1 = tmp; return op1; }

template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator == (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator != (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator > (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator >= (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator < (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1.operator <= (ap_int_base<1, false>(op2)); }

template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<1,false>::plus operator + ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1 + (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<1,false>::minus operator - ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1 - (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<1,false>::mult operator * ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1 * (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<1,false>::div operator / ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1 / (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<1,false>::mod operator % ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1 % (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<1,false>::arg1 operator >> ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1 >> (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<1,false>::arg1 operator << ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1 << (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<1,false>::logic operator & ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1 & (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<1,false>::logic operator | ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1 | (ap_int_base<1, false>(op2)); }
template<int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1,_AP_S1>::template RType<1,false>::logic operator ^ ( const ap_int_base<_AP_W1,_AP_S1>& op1, const ap_bit_ref<_AP_W2,_AP_S2>& op2) { return op1 ^ (ap_int_base<1, false>(op2)); }
# 3847 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_bit_ref<_AP_W,_AP_S> &op, bool op2) { return (bool(op)) > op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( bool op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 > (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator > ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, bool op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator > (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_bit_ref<_AP_W,_AP_S> &op, bool op2) { return (bool(op)) < op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( bool op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 < (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator < ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, bool op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator < (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_bit_ref<_AP_W,_AP_S> &op, bool op2) { return (bool(op)) >= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( bool op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 >= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, bool op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator >= (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_bit_ref<_AP_W,_AP_S> &op, bool op2) { return (bool(op)) <= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( bool op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 <= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, bool op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator <= (ap_int_base<1,false>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_bit_ref<_AP_W,_AP_S> &op, char op2) { return (bool(op)) > op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 > (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator > ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator > (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_bit_ref<_AP_W,_AP_S> &op, char op2) { return (bool(op)) < op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 < (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator < ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator < (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_bit_ref<_AP_W,_AP_S> &op, char op2) { return (bool(op)) >= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 >= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator >= (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_bit_ref<_AP_W,_AP_S> &op, char op2) { return (bool(op)) <= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 <= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator <= (ap_int_base<8,(-127 -1) != 0>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_bit_ref<_AP_W,_AP_S> &op, signed char op2) { return (bool(op)) > op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( signed char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 > (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator > ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, signed char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator > (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_bit_ref<_AP_W,_AP_S> &op, signed char op2) { return (bool(op)) < op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( signed char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 < (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator < ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, signed char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator < (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_bit_ref<_AP_W,_AP_S> &op, signed char op2) { return (bool(op)) >= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( signed char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 >= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, signed char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator >= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_bit_ref<_AP_W,_AP_S> &op, signed char op2) { return (bool(op)) <= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( signed char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 <= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, signed char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator <= (ap_int_base<8,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (bool(op)) > op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( unsigned char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 > (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator > ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator > (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (bool(op)) < op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( unsigned char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 < (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator < ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator < (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (bool(op)) >= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( unsigned char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 >= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator >= (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (bool(op)) <= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( unsigned char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 <= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator <= (ap_int_base<8,false>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_bit_ref<_AP_W,_AP_S> &op, short op2) { return (bool(op)) > op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( short op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 > (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator > ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, short op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator > (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_bit_ref<_AP_W,_AP_S> &op, short op2) { return (bool(op)) < op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( short op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 < (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator < ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, short op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator < (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_bit_ref<_AP_W,_AP_S> &op, short op2) { return (bool(op)) >= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( short op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 >= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, short op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator >= (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_bit_ref<_AP_W,_AP_S> &op, short op2) { return (bool(op)) <= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( short op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 <= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, short op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator <= (ap_int_base<16,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (bool(op)) > op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( unsigned short op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 > (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator > ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned short op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator > (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (bool(op)) < op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( unsigned short op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 < (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator < ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned short op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator < (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (bool(op)) >= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( unsigned short op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 >= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned short op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator >= (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (bool(op)) <= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( unsigned short op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 <= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned short op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator <= (ap_int_base<16,false>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_bit_ref<_AP_W,_AP_S> &op, int op2) { return (bool(op)) > op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( int op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 > (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator > ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, int op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator > (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_bit_ref<_AP_W,_AP_S> &op, int op2) { return (bool(op)) < op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( int op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 < (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator < ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, int op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator < (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_bit_ref<_AP_W,_AP_S> &op, int op2) { return (bool(op)) >= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( int op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 >= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, int op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator >= (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_bit_ref<_AP_W,_AP_S> &op, int op2) { return (bool(op)) <= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( int op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 <= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, int op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator <= (ap_int_base<32,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (bool(op)) > op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( unsigned int op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 > (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator > ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned int op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator > (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (bool(op)) < op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( unsigned int op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 < (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator < ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned int op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator < (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (bool(op)) >= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( unsigned int op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 >= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned int op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator >= (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (bool(op)) <= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( unsigned int op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 <= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned int op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator <= (ap_int_base<32,false>(op2)); }

template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_bit_ref<_AP_W,_AP_S> &op, long op2) { return (bool(op)) > op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( long op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 > (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator > ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, long op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator > (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_bit_ref<_AP_W,_AP_S> &op, long op2) { return (bool(op)) < op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( long op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 < (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator < ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, long op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator < (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_bit_ref<_AP_W,_AP_S> &op, long op2) { return (bool(op)) >= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( long op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 >= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, long op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator >= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_bit_ref<_AP_W,_AP_S> &op, long op2) { return (bool(op)) <= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( long op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 <= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, long op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator <= (ap_int_base<64,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (bool(op)) > op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( unsigned long op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 > (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator > ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned long op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator > (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (bool(op)) < op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( unsigned long op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 < (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator < ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned long op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator < (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (bool(op)) >= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( unsigned long op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 >= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned long op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator >= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (bool(op)) <= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( unsigned long op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 <= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned long op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator <= (ap_int_base<64,false>(op2)); }




template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_bit_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (bool(op)) > op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( ap_slong op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 > (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator > ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, ap_slong op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator > (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_bit_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (bool(op)) < op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( ap_slong op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 < (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator < ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, ap_slong op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator < (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_bit_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (bool(op)) >= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( ap_slong op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 >= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, ap_slong op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator >= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_bit_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (bool(op)) <= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( ap_slong op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 <= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, ap_slong op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator <= (ap_int_base<64,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( const ap_bit_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (bool(op)) > op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator > ( ap_ulong op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 > (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator > ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, ap_ulong op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator > (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( const ap_bit_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (bool(op)) < op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator < ( ap_ulong op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 < (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator < ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, ap_ulong op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator < (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( const ap_bit_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (bool(op)) >= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >= ( ap_ulong op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 >= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, ap_ulong op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator >= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( const ap_bit_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (bool(op)) <= op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <= ( ap_ulong op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 <= (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <= ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, ap_ulong op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator <= (ap_int_base<64,false>(op2)); }






template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_bit_ref<_AP_W,_AP_S> &op, bool op2) { return (bool(op)) == op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( bool op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 == (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator == ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, bool op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator == (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_bit_ref<_AP_W,_AP_S> &op, bool op2) { return (bool(op)) != op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( bool op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 != (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator != ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, bool op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator != (ap_int_base<1,false>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_bit_ref<_AP_W,_AP_S> &op, char op2) { return (bool(op)) == op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 == (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator == ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator == (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_bit_ref<_AP_W,_AP_S> &op, char op2) { return (bool(op)) != op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 != (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator != ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator != (ap_int_base<8,(-127 -1) != 0>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_bit_ref<_AP_W,_AP_S> &op, signed char op2) { return (bool(op)) == op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( signed char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 == (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator == ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, signed char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator == (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_bit_ref<_AP_W,_AP_S> &op, signed char op2) { return (bool(op)) != op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( signed char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 != (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator != ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, signed char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator != (ap_int_base<8,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (bool(op)) == op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( unsigned char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 == (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator == ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator == (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (bool(op)) != op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( unsigned char op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 != (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator != ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned char op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator != (ap_int_base<8,false>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_bit_ref<_AP_W,_AP_S> &op, short op2) { return (bool(op)) == op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( short op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 == (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator == ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, short op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator == (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_bit_ref<_AP_W,_AP_S> &op, short op2) { return (bool(op)) != op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( short op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 != (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator != ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, short op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator != (ap_int_base<16,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (bool(op)) == op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( unsigned short op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 == (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator == ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned short op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator == (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (bool(op)) != op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( unsigned short op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 != (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator != ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned short op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator != (ap_int_base<16,false>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_bit_ref<_AP_W,_AP_S> &op, int op2) { return (bool(op)) == op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( int op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 == (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator == ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, int op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator == (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_bit_ref<_AP_W,_AP_S> &op, int op2) { return (bool(op)) != op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( int op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 != (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator != ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, int op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator != (ap_int_base<32,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (bool(op)) == op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( unsigned int op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 == (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator == ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned int op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator == (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (bool(op)) != op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( unsigned int op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 != (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator != ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned int op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator != (ap_int_base<32,false>(op2)); }

template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_bit_ref<_AP_W,_AP_S> &op, long op2) { return (bool(op)) == op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( long op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 == (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator == ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, long op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator == (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_bit_ref<_AP_W,_AP_S> &op, long op2) { return (bool(op)) != op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( long op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 != (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator != ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, long op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator != (ap_int_base<64,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (bool(op)) == op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( unsigned long op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 == (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator == ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned long op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator == (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_bit_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (bool(op)) != op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( unsigned long op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 != (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator != ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, unsigned long op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator != (ap_int_base<64,false>(op2)); }




template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_bit_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (bool(op)) == op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( ap_slong op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 == (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator == ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, ap_slong op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator == (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_bit_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (bool(op)) != op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( ap_slong op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 != (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator != ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, ap_slong op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator != (ap_int_base<64,true>(op2)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( const ap_bit_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (bool(op)) == op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator == ( ap_ulong op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 == (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator == ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, ap_ulong op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator == (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( const ap_bit_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (bool(op)) != op2; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator != ( ap_ulong op2, const ap_bit_ref<_AP_W,_AP_S> &op) { return op2 != (bool(op)); } template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator != ( const ap_concat_ref<_AP_W,_AP_T, _AP_W1, _AP_T1> &op, ap_ulong op2) { return (ap_int_base<_AP_W + _AP_W1, false>(op)).operator != (ap_int_base<64,false>(op2)); }
# 3907 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<1,false>::plus operator + ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)) + (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<1,false>::template RType<_AP_W,false>::plus operator + ( bool op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(op2) + (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<1,false>::minus operator - ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)) - (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<1,false>::template RType<_AP_W,false>::minus operator - ( bool op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(op2) - (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<1,false>::mult operator * ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)) * (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<1,false>::template RType<_AP_W,false>::mult operator * ( bool op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(op2) * (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<1,false>::div operator / ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)) / (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<1,false>::template RType<_AP_W,false>::div operator / ( bool op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(op2) / (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<1,false>::mod operator % ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)) % (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<1,false>::template RType<_AP_W,false>::mod operator % ( bool op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(op2) % (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,(-127 -1) != 0>::plus operator + ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)) + (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,(-127 -1) != 0>::template RType<_AP_W,false>::plus operator + ( char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,(-127 -1) != 0>(op2) + (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,(-127 -1) != 0>::minus operator - ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)) - (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,(-127 -1) != 0>::template RType<_AP_W,false>::minus operator - ( char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,(-127 -1) != 0>(op2) - (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,(-127 -1) != 0>::mult operator * ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)) * (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,(-127 -1) != 0>::template RType<_AP_W,false>::mult operator * ( char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,(-127 -1) != 0>(op2) * (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,(-127 -1) != 0>::div operator / ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)) / (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,(-127 -1) != 0>::template RType<_AP_W,false>::div operator / ( char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,(-127 -1) != 0>(op2) / (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,(-127 -1) != 0>::mod operator % ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)) % (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,(-127 -1) != 0>::template RType<_AP_W,false>::mod operator % ( char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,(-127 -1) != 0>(op2) % (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,true>::plus operator + ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)) + (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,true>::template RType<_AP_W,false>::plus operator + ( signed char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(op2) + (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,true>::minus operator - ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)) - (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,true>::template RType<_AP_W,false>::minus operator - ( signed char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(op2) - (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,true>::mult operator * ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)) * (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,true>::template RType<_AP_W,false>::mult operator * ( signed char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(op2) * (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,true>::div operator / ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)) / (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,true>::template RType<_AP_W,false>::div operator / ( signed char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(op2) / (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,true>::mod operator % ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)) % (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,true>::template RType<_AP_W,false>::mod operator % ( signed char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(op2) % (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,false>::plus operator + ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)) + (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,false>::template RType<_AP_W,false>::plus operator + ( unsigned char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(op2) + (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,false>::minus operator - ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)) - (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,false>::template RType<_AP_W,false>::minus operator - ( unsigned char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(op2) - (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,false>::mult operator * ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)) * (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,false>::template RType<_AP_W,false>::mult operator * ( unsigned char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(op2) * (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,false>::div operator / ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)) / (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,false>::template RType<_AP_W,false>::div operator / ( unsigned char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(op2) / (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,false>::mod operator % ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)) % (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,false>::template RType<_AP_W,false>::mod operator % ( unsigned char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(op2) % (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,true>::plus operator + ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)) + (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,true>::template RType<_AP_W,false>::plus operator + ( short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(op2) + (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,true>::minus operator - ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)) - (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,true>::template RType<_AP_W,false>::minus operator - ( short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(op2) - (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,true>::mult operator * ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)) * (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,true>::template RType<_AP_W,false>::mult operator * ( short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(op2) * (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,true>::div operator / ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)) / (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,true>::template RType<_AP_W,false>::div operator / ( short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(op2) / (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,true>::mod operator % ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)) % (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,true>::template RType<_AP_W,false>::mod operator % ( short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(op2) % (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,false>::plus operator + ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)) + (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,false>::template RType<_AP_W,false>::plus operator + ( unsigned short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(op2) + (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,false>::minus operator - ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)) - (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,false>::template RType<_AP_W,false>::minus operator - ( unsigned short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(op2) - (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,false>::mult operator * ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)) * (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,false>::template RType<_AP_W,false>::mult operator * ( unsigned short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(op2) * (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,false>::div operator / ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)) / (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,false>::template RType<_AP_W,false>::div operator / ( unsigned short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(op2) / (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,false>::mod operator % ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)) % (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,false>::template RType<_AP_W,false>::mod operator % ( unsigned short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(op2) % (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,true>::plus operator + ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)) + (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,true>::template RType<_AP_W,false>::plus operator + ( int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(op2) + (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,true>::minus operator - ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)) - (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,true>::template RType<_AP_W,false>::minus operator - ( int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(op2) - (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,true>::mult operator * ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)) * (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,true>::template RType<_AP_W,false>::mult operator * ( int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(op2) * (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,true>::div operator / ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)) / (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,true>::template RType<_AP_W,false>::div operator / ( int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(op2) / (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,true>::mod operator % ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)) % (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,true>::template RType<_AP_W,false>::mod operator % ( int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(op2) % (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,false>::plus operator + ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)) + (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,false>::template RType<_AP_W,false>::plus operator + ( unsigned int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(op2) + (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,false>::minus operator - ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)) - (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,false>::template RType<_AP_W,false>::minus operator - ( unsigned int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(op2) - (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,false>::mult operator * ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)) * (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,false>::template RType<_AP_W,false>::mult operator * ( unsigned int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(op2) * (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,false>::div operator / ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)) / (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,false>::template RType<_AP_W,false>::div operator / ( unsigned int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(op2) / (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,false>::mod operator % ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)) % (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,false>::template RType<_AP_W,false>::mod operator % ( unsigned int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(op2) % (ap_int_base<_AP_W, false>(op)); }

template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::plus operator + ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)) + (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::plus operator + ( long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) + (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::minus operator - ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)) - (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::minus operator - ( long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) - (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::mult operator * ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)) * (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::mult operator * ( long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) * (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::div operator / ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)) / (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::div operator / ( long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) / (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::mod operator % ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)) % (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::mod operator % ( long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) % (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::plus operator + ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)) + (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::plus operator + ( unsigned long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) + (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::minus operator - ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)) - (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::minus operator - ( unsigned long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) - (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::mult operator * ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)) * (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::mult operator * ( unsigned long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) * (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::div operator / ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)) / (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::div operator / ( unsigned long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) / (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::mod operator % ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)) % (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::mod operator % ( unsigned long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) % (ap_int_base<_AP_W, false>(op)); }




template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::plus operator + ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)) + (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::plus operator + ( ap_slong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) + (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::minus operator - ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)) - (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::minus operator - ( ap_slong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) - (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::mult operator * ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)) * (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::mult operator * ( ap_slong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) * (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::div operator / ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)) / (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::div operator / ( ap_slong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) / (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::mod operator % ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)) % (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::mod operator % ( ap_slong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) % (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::plus operator + ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)) + (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::plus operator + ( ap_ulong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) + (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::minus operator - ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)) - (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::minus operator - ( ap_ulong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) - (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::mult operator * ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)) * (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::mult operator * ( ap_ulong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) * (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::div operator / ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)) / (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::div operator / ( ap_ulong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) / (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::mod operator % ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)) % (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::mod operator % ( ap_ulong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) % (ap_int_base<_AP_W, false>(op)); }
# 3932 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<1,false>::arg1 operator >> ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)) >> (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<1,false>::template RType<_AP_W,false>::arg1 operator >> ( bool op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(op2) >> (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<1,false>::arg1 operator << ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)) << (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<1,false>::template RType<_AP_W,false>::arg1 operator << ( bool op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(op2) << (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<1,false>::logic operator & ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)) & (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<1,false>::template RType<_AP_W,false>::logic operator & ( bool op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(op2) & (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<1,false>::logic operator | ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)) | (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<1,false>::template RType<_AP_W,false>::logic operator | ( bool op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(op2) | (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<1,false>::logic operator ^ ( const ap_range_ref<_AP_W,_AP_S> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)) ^ (ap_int_base<1,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<1,false>::template RType<_AP_W,false>::logic operator ^ ( bool op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<1,false>(op2) ^ (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,(-127 -1) != 0>::arg1 operator >> ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)) >> (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,(-127 -1) != 0>::template RType<_AP_W,false>::arg1 operator >> ( char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,(-127 -1) != 0>(op2) >> (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,(-127 -1) != 0>::arg1 operator << ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)) << (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,(-127 -1) != 0>::template RType<_AP_W,false>::arg1 operator << ( char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,(-127 -1) != 0>(op2) << (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,(-127 -1) != 0>::logic operator & ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)) & (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,(-127 -1) != 0>::template RType<_AP_W,false>::logic operator & ( char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,(-127 -1) != 0>(op2) & (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,(-127 -1) != 0>::logic operator | ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)) | (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,(-127 -1) != 0>::template RType<_AP_W,false>::logic operator | ( char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,(-127 -1) != 0>(op2) | (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,(-127 -1) != 0>::logic operator ^ ( const ap_range_ref<_AP_W,_AP_S> &op, char op2) { return (ap_int_base<_AP_W, false>(op)) ^ (ap_int_base<8,(-127 -1) != 0>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,(-127 -1) != 0>::template RType<_AP_W,false>::logic operator ^ ( char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,(-127 -1) != 0>(op2) ^ (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,true>::arg1 operator >> ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)) >> (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,true>::template RType<_AP_W,false>::arg1 operator >> ( signed char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(op2) >> (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,true>::arg1 operator << ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)) << (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,true>::template RType<_AP_W,false>::arg1 operator << ( signed char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(op2) << (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,true>::logic operator & ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)) & (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,true>::template RType<_AP_W,false>::logic operator & ( signed char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(op2) & (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,true>::logic operator | ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)) | (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,true>::template RType<_AP_W,false>::logic operator | ( signed char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(op2) | (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,true>::logic operator ^ ( const ap_range_ref<_AP_W,_AP_S> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)) ^ (ap_int_base<8,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,true>::template RType<_AP_W,false>::logic operator ^ ( signed char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,true>(op2) ^ (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,false>::arg1 operator >> ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)) >> (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,false>::template RType<_AP_W,false>::arg1 operator >> ( unsigned char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(op2) >> (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,false>::arg1 operator << ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)) << (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,false>::template RType<_AP_W,false>::arg1 operator << ( unsigned char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(op2) << (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,false>::logic operator & ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)) & (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,false>::template RType<_AP_W,false>::logic operator & ( unsigned char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(op2) & (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,false>::logic operator | ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)) | (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,false>::template RType<_AP_W,false>::logic operator | ( unsigned char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(op2) | (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<8,false>::logic operator ^ ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)) ^ (ap_int_base<8,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<8,false>::template RType<_AP_W,false>::logic operator ^ ( unsigned char op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<8,false>(op2) ^ (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,true>::arg1 operator >> ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)) >> (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,true>::template RType<_AP_W,false>::arg1 operator >> ( short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(op2) >> (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,true>::arg1 operator << ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)) << (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,true>::template RType<_AP_W,false>::arg1 operator << ( short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(op2) << (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,true>::logic operator & ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)) & (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,true>::template RType<_AP_W,false>::logic operator & ( short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(op2) & (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,true>::logic operator | ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)) | (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,true>::template RType<_AP_W,false>::logic operator | ( short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(op2) | (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,true>::logic operator ^ ( const ap_range_ref<_AP_W,_AP_S> &op, short op2) { return (ap_int_base<_AP_W, false>(op)) ^ (ap_int_base<16,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,true>::template RType<_AP_W,false>::logic operator ^ ( short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,true>(op2) ^ (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,false>::arg1 operator >> ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)) >> (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,false>::template RType<_AP_W,false>::arg1 operator >> ( unsigned short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(op2) >> (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,false>::arg1 operator << ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)) << (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,false>::template RType<_AP_W,false>::arg1 operator << ( unsigned short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(op2) << (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,false>::logic operator & ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)) & (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,false>::template RType<_AP_W,false>::logic operator & ( unsigned short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(op2) & (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,false>::logic operator | ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)) | (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,false>::template RType<_AP_W,false>::logic operator | ( unsigned short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(op2) | (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<16,false>::logic operator ^ ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)) ^ (ap_int_base<16,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<16,false>::template RType<_AP_W,false>::logic operator ^ ( unsigned short op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<16,false>(op2) ^ (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,true>::arg1 operator >> ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)) >> (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,true>::template RType<_AP_W,false>::arg1 operator >> ( int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(op2) >> (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,true>::arg1 operator << ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)) << (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,true>::template RType<_AP_W,false>::arg1 operator << ( int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(op2) << (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,true>::logic operator & ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)) & (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,true>::template RType<_AP_W,false>::logic operator & ( int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(op2) & (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,true>::logic operator | ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)) | (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,true>::template RType<_AP_W,false>::logic operator | ( int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(op2) | (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,true>::logic operator ^ ( const ap_range_ref<_AP_W,_AP_S> &op, int op2) { return (ap_int_base<_AP_W, false>(op)) ^ (ap_int_base<32,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,true>::template RType<_AP_W,false>::logic operator ^ ( int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,true>(op2) ^ (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,false>::arg1 operator >> ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)) >> (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,false>::template RType<_AP_W,false>::arg1 operator >> ( unsigned int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(op2) >> (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,false>::arg1 operator << ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)) << (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,false>::template RType<_AP_W,false>::arg1 operator << ( unsigned int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(op2) << (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,false>::logic operator & ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)) & (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,false>::template RType<_AP_W,false>::logic operator & ( unsigned int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(op2) & (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,false>::logic operator | ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)) | (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,false>::template RType<_AP_W,false>::logic operator | ( unsigned int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(op2) | (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<32,false>::logic operator ^ ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)) ^ (ap_int_base<32,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<32,false>::template RType<_AP_W,false>::logic operator ^ ( unsigned int op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<32,false>(op2) ^ (ap_int_base<_AP_W, false>(op)); }

template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::arg1 operator >> ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)) >> (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::arg1 operator >> ( long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) >> (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::arg1 operator << ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)) << (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::arg1 operator << ( long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) << (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::logic operator & ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)) & (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::logic operator & ( long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) & (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::logic operator | ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)) | (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::logic operator | ( long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) | (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::logic operator ^ ( const ap_range_ref<_AP_W,_AP_S> &op, long op2) { return (ap_int_base<_AP_W, false>(op)) ^ (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::logic operator ^ ( long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) ^ (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::arg1 operator >> ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)) >> (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::arg1 operator >> ( unsigned long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) >> (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::arg1 operator << ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)) << (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::arg1 operator << ( unsigned long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) << (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::logic operator & ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)) & (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::logic operator & ( unsigned long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) & (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::logic operator | ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)) | (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::logic operator | ( unsigned long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) | (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::logic operator ^ ( const ap_range_ref<_AP_W,_AP_S> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)) ^ (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::logic operator ^ ( unsigned long op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) ^ (ap_int_base<_AP_W, false>(op)); }




template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::arg1 operator >> ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)) >> (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::arg1 operator >> ( ap_slong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) >> (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::arg1 operator << ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)) << (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::arg1 operator << ( ap_slong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) << (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::logic operator & ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)) & (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::logic operator & ( ap_slong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) & (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::logic operator | ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)) | (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::logic operator | ( ap_slong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) | (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,true>::logic operator ^ ( const ap_range_ref<_AP_W,_AP_S> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)) ^ (ap_int_base<64,true>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,true>::template RType<_AP_W,false>::logic operator ^ ( ap_slong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,true>(op2) ^ (ap_int_base<_AP_W, false>(op)); }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::arg1 operator >> ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)) >> (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::arg1 operator >> ( ap_ulong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) >> (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::arg1 operator << ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)) << (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::arg1 operator << ( ap_ulong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) << (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::logic operator & ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)) & (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::logic operator & ( ap_ulong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) & (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::logic operator | ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)) | (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::logic operator | ( ap_ulong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) | (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W,false>::template RType<64,false>::logic operator ^ ( const ap_range_ref<_AP_W,_AP_S> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)) ^ (ap_int_base<64,false>(op2)); } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<64,false>::template RType<_AP_W,false>::logic operator ^ ( ap_ulong op2, const ap_range_ref<_AP_W,_AP_S> &op) { return ap_int_base<64,false>(op2) ^ (ap_int_base<_AP_W, false>(op)); }
# 3957 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator + (const ap_range_ref<_AP_W,_AP_S> &lhs, const ap_range_ref<_AP_W2,_AP_S2> &rhs) { return ap_int_base<_AP_W, false>(lhs) + (ap_int_base<_AP_W2, false>(rhs)); }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator - (const ap_range_ref<_AP_W,_AP_S> &lhs, const ap_range_ref<_AP_W2,_AP_S2> &rhs) { return ap_int_base<_AP_W, false>(lhs) - (ap_int_base<_AP_W2, false>(rhs)); }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator * (const ap_range_ref<_AP_W,_AP_S> &lhs, const ap_range_ref<_AP_W2,_AP_S2> &rhs) { return ap_int_base<_AP_W, false>(lhs) * (ap_int_base<_AP_W2, false>(rhs)); }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator / (const ap_range_ref<_AP_W,_AP_S> &lhs, const ap_range_ref<_AP_W2,_AP_S2> &rhs) { return ap_int_base<_AP_W, false>(lhs) / (ap_int_base<_AP_W2, false>(rhs)); }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator % (const ap_range_ref<_AP_W,_AP_S> &lhs, const ap_range_ref<_AP_W2,_AP_S2> &rhs) { return ap_int_base<_AP_W, false>(lhs) % (ap_int_base<_AP_W2, false>(rhs)); }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >> (const ap_range_ref<_AP_W,_AP_S> &lhs, const ap_range_ref<_AP_W2,_AP_S2> &rhs) { return ap_int_base<_AP_W, false>(lhs) >> (ap_int_base<_AP_W2, false>(rhs)); }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator << (const ap_range_ref<_AP_W,_AP_S> &lhs, const ap_range_ref<_AP_W2,_AP_S2> &rhs) { return ap_int_base<_AP_W, false>(lhs) << (ap_int_base<_AP_W2, false>(rhs)); }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator & (const ap_range_ref<_AP_W,_AP_S> &lhs, const ap_range_ref<_AP_W2,_AP_S2> &rhs) { return ap_int_base<_AP_W, false>(lhs) & (ap_int_base<_AP_W2, false>(rhs)); }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator | (const ap_range_ref<_AP_W,_AP_S> &lhs, const ap_range_ref<_AP_W2,_AP_S2> &rhs) { return ap_int_base<_AP_W, false>(lhs) | (ap_int_base<_AP_W2, false>(rhs)); }
template<int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^ (const ap_range_ref<_AP_W,_AP_S> &lhs, const ap_range_ref<_AP_W2,_AP_S2> &rhs) { return ap_int_base<_AP_W, false>(lhs) ^ (ap_int_base<_AP_W2, false>(rhs)); }
# 4002 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_LW1,typename _AP_LT1,int _AP_LW2,typename _AP_LT2, int _AP_RW1,typename _AP_RT1,int _AP_RW2,typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1+_AP_LW2,false>::template RType<_AP_RW1+_AP_RW2,false>::plus operator + (const ap_concat_ref<_AP_LW1,_AP_LT1,_AP_LW2,_AP_LT2>& lhs, const ap_concat_ref<_AP_RW1,_AP_RT1,_AP_RW2,_AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template<int _AP_LW1,typename _AP_LT1,int _AP_LW2,typename _AP_LT2, int _AP_RW1,typename _AP_RT1,int _AP_RW2,typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1+_AP_LW2,false>::template RType<_AP_RW1+_AP_RW2,false>::minus operator - (const ap_concat_ref<_AP_LW1,_AP_LT1,_AP_LW2,_AP_LT2>& lhs, const ap_concat_ref<_AP_RW1,_AP_RT1,_AP_RW2,_AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template<int _AP_LW1,typename _AP_LT1,int _AP_LW2,typename _AP_LT2, int _AP_RW1,typename _AP_RT1,int _AP_RW2,typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1+_AP_LW2,false>::template RType<_AP_RW1+_AP_RW2,false>::mult operator * (const ap_concat_ref<_AP_LW1,_AP_LT1,_AP_LW2,_AP_LT2>& lhs, const ap_concat_ref<_AP_RW1,_AP_RT1,_AP_RW2,_AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template<int _AP_LW1,typename _AP_LT1,int _AP_LW2,typename _AP_LT2, int _AP_RW1,typename _AP_RT1,int _AP_RW2,typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1+_AP_LW2,false>::template RType<_AP_RW1+_AP_RW2,false>::div operator / (const ap_concat_ref<_AP_LW1,_AP_LT1,_AP_LW2,_AP_LT2>& lhs, const ap_concat_ref<_AP_RW1,_AP_RT1,_AP_RW2,_AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template<int _AP_LW1,typename _AP_LT1,int _AP_LW2,typename _AP_LT2, int _AP_RW1,typename _AP_RT1,int _AP_RW2,typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1+_AP_LW2,false>::template RType<_AP_RW1+_AP_RW2,false>::mod operator % (const ap_concat_ref<_AP_LW1,_AP_LT1,_AP_LW2,_AP_LT2>& lhs, const ap_concat_ref<_AP_RW1,_AP_RT1,_AP_RW2,_AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template<int _AP_LW1,typename _AP_LT1,int _AP_LW2,typename _AP_LT2, int _AP_RW1,typename _AP_RT1,int _AP_RW2,typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1+_AP_LW2,false>::template RType<_AP_RW1+_AP_RW2,false>::arg1 operator >> (const ap_concat_ref<_AP_LW1,_AP_LT1,_AP_LW2,_AP_LT2>& lhs, const ap_concat_ref<_AP_RW1,_AP_RT1,_AP_RW2,_AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template<int _AP_LW1,typename _AP_LT1,int _AP_LW2,typename _AP_LT2, int _AP_RW1,typename _AP_RT1,int _AP_RW2,typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1+_AP_LW2,false>::template RType<_AP_RW1+_AP_RW2,false>::arg1 operator << (const ap_concat_ref<_AP_LW1,_AP_LT1,_AP_LW2,_AP_LT2>& lhs, const ap_concat_ref<_AP_RW1,_AP_RT1,_AP_RW2,_AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
template<int _AP_LW1,typename _AP_LT1,int _AP_LW2,typename _AP_LT2, int _AP_RW1,typename _AP_RT1,int _AP_RW2,typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1+_AP_LW2,false>::template RType<_AP_RW1+_AP_RW2,false>::logic operator & (const ap_concat_ref<_AP_LW1,_AP_LT1,_AP_LW2,_AP_LT2>& lhs, const ap_concat_ref<_AP_RW1,_AP_RT1,_AP_RW2,_AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template<int _AP_LW1,typename _AP_LT1,int _AP_LW2,typename _AP_LT2, int _AP_RW1,typename _AP_RT1,int _AP_RW2,typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1+_AP_LW2,false>::template RType<_AP_RW1+_AP_RW2,false>::logic operator | (const ap_concat_ref<_AP_LW1,_AP_LT1,_AP_LW2,_AP_LT2>& lhs, const ap_concat_ref<_AP_RW1,_AP_RT1,_AP_RW2,_AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template<int _AP_LW1,typename _AP_LT1,int _AP_LW2,typename _AP_LT2, int _AP_RW1,typename _AP_RT1,int _AP_RW2,typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1+_AP_LW2,false>::template RType<_AP_RW1+_AP_RW2,false>::logic operator ^ (const ap_concat_ref<_AP_LW1,_AP_LT1,_AP_LW2,_AP_LT2>& lhs, const ap_concat_ref<_AP_RW1,_AP_RT1,_AP_RW2,_AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
# 4157 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 1, false > operator, (const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 1, false > operator, (bool op1, const ap_int_base<_AP_W, _AP_S>& op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 1, false > operator, (const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 1, false > operator, (bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false > operator, (const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false > operator, (bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false > operator, (const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false > operator, (bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 1, false > operator, (const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 1, false > operator, (bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 1, false> operator, (const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 1, false> operator, (bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if ((-127 -1) != 0) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (char op1, const ap_int_base<_AP_W, _AP_S>& op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if ((-127 -1) != 0) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false > operator, (const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false > operator, (char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false > operator, (const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, (-127 -1) != 0> val(op2); ap_int_base<8 + _AP_W + _AP_W2, (-127 -1) != 0> ret(op1); if ((-127 -1) != 0) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false > operator, (char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, (-127 -1) != 0> val(op1); ap_int_base<8 + _AP_W + _AP_W2, (-127 -1) != 0> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if ((-127 -1) != 0) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 8, false> operator, (const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, (-127 -1) != 0> val(op2); val[8] = op1; return val; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 8, false> operator, (char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, (-127 -1) != 0> val(op1); val <<= 1; val[0] = op2; return val; }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (signed char op1, const ap_int_base<_AP_W, _AP_S>& op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false > operator, (const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false > operator, (signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false > operator, (const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false > operator, (signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 8, false> operator, (const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 8, false> operator, (signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (unsigned char op1, const ap_int_base<_AP_W, _AP_S>& op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false > operator, (const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false > operator, (unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false > operator, (const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false > operator, (unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 8, false > operator, (unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 8, false> operator, (const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 8, false> operator, (unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 16, false > operator, (const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<16 + _AP_W, false> val(op2); ap_int_base<16 + _AP_W, false> ret(op1); ret <<= 16; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 16, false > operator, (short op1, const ap_int_base<_AP_W, _AP_S>& op2) { ap_int_base<16 + _AP_W, false> val(op1); ap_int_base<16 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 16; ret >>= 16; } ret |= val << _AP_W; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 16, false > operator, (const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<16 + _AP_W, false> val(op2); ap_int_base<16 + _AP_W, false> ret(op1); ret <<= 16; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 16, false > operator, (short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<16 + _AP_W, false> val(op1); ap_int_base<16 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<16 + 1, false > operator, (const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<16 + 1, false> val(op2); val[16] = op1; return val; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<16 + 1, false > operator, (short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<16 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 16, false > operator, (const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<16 + _AP_W + _AP_W2, true> val(op2); ap_int_base<16 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 16; ret |= val; return ret; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 16, false > operator, (short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<16 + _AP_W + _AP_W2, true> val(op1); ap_int_base<16 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 16, false > operator, (const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<16 + _AP_W, false> val(op2); ap_int_base<16 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 16; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 16, false > operator, (short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<16 + _AP_W, false> val(op1); ap_int_base<16 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 16, false> operator, (const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<16 + 1, true> val(op2); val[16] = op1; return val; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 16, false> operator, (short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<16 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 16, false > operator, (const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<16 + _AP_W, false> val(op2); ap_int_base<16 + _AP_W, false> ret(op1); ret <<= 16; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 16, false > operator, (unsigned short op1, const ap_int_base<_AP_W, _AP_S>& op2) { ap_int_base<16 + _AP_W, false> val(op1); ap_int_base<16 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 16; ret >>= 16; } ret |= val << _AP_W; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 16, false > operator, (const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<16 + _AP_W, false> val(op2); ap_int_base<16 + _AP_W, false> ret(op1); ret <<= 16; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 16, false > operator, (unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<16 + _AP_W, false> val(op1); ap_int_base<16 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<16 + 1, false > operator, (const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<16 + 1, false> val(op2); val[16] = op1; return val; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<16 + 1, false > operator, (unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<16 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 16, false > operator, (const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<16 + _AP_W + _AP_W2, false> val(op2); ap_int_base<16 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 16; ret |= val; return ret; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 16, false > operator, (unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<16 + _AP_W + _AP_W2, false> val(op1); ap_int_base<16 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 16, false > operator, (const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<16 + _AP_W, false> val(op2); ap_int_base<16 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 16; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 16, false > operator, (unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<16 + _AP_W, false> val(op1); ap_int_base<16 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 16, false> operator, (const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<16 + 1, false> val(op2); val[16] = op1; return val; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 16, false> operator, (unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<16 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 32, false > operator, (const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<32 + _AP_W, false> val(op2); ap_int_base<32 + _AP_W, false> ret(op1); ret <<= 32; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 32, false > operator, (int op1, const ap_int_base<_AP_W, _AP_S>& op2) { ap_int_base<32 + _AP_W, false> val(op1); ap_int_base<32 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 32; ret >>= 32; } ret |= val << _AP_W; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 32, false > operator, (const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<32 + _AP_W, false> val(op2); ap_int_base<32 + _AP_W, false> ret(op1); ret <<= 32; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 32, false > operator, (int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<32 + _AP_W, false> val(op1); ap_int_base<32 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<32 + 1, false > operator, (const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<32 + 1, false> val(op2); val[32] = op1; return val; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<32 + 1, false > operator, (int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<32 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 32, false > operator, (const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<32 + _AP_W + _AP_W2, true> val(op2); ap_int_base<32 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 32; ret |= val; return ret; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 32, false > operator, (int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<32 + _AP_W + _AP_W2, true> val(op1); ap_int_base<32 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 32, false > operator, (const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<32 + _AP_W, false> val(op2); ap_int_base<32 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 32; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 32, false > operator, (int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<32 + _AP_W, false> val(op1); ap_int_base<32 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 32, false> operator, (const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<32 + 1, true> val(op2); val[32] = op1; return val; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 32, false> operator, (int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<32 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 32, false > operator, (const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<32 + _AP_W, false> val(op2); ap_int_base<32 + _AP_W, false> ret(op1); ret <<= 32; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 32, false > operator, (unsigned int op1, const ap_int_base<_AP_W, _AP_S>& op2) { ap_int_base<32 + _AP_W, false> val(op1); ap_int_base<32 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 32; ret >>= 32; } ret |= val << _AP_W; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 32, false > operator, (const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<32 + _AP_W, false> val(op2); ap_int_base<32 + _AP_W, false> ret(op1); ret <<= 32; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 32, false > operator, (unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<32 + _AP_W, false> val(op1); ap_int_base<32 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<32 + 1, false > operator, (const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<32 + 1, false> val(op2); val[32] = op1; return val; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<32 + 1, false > operator, (unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<32 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 32, false > operator, (const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<32 + _AP_W + _AP_W2, false> val(op2); ap_int_base<32 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 32; ret |= val; return ret; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 32, false > operator, (unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<32 + _AP_W + _AP_W2, false> val(op1); ap_int_base<32 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 32, false > operator, (const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<32 + _AP_W, false> val(op2); ap_int_base<32 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 32; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 32, false > operator, (unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<32 + _AP_W, false> val(op1); ap_int_base<32 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 32, false> operator, (const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<32 + 1, false> val(op2); val[32] = op1; return val; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 32, false> operator, (unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<32 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }

template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<64 + _AP_W, false> val(op2); ap_int_base<64 + _AP_W, false> ret(op1); ret <<= 64; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (long op1, const ap_int_base<_AP_W, _AP_S>& op2) { ap_int_base<64 + _AP_W, false> val(op1); ap_int_base<64 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 64; ret >>= 64; } ret |= val << _AP_W; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<64 + _AP_W, false> val(op2); ap_int_base<64 + _AP_W, false> ret(op1); ret <<= 64; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<64 + _AP_W, false> val(op1); ap_int_base<64 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<64 + 1, false > operator, (const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<64 + 1, false> val(op2); val[64] = op1; return val; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<64 + 1, false > operator, (long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<64 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 64, false > operator, (const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<64 + _AP_W + _AP_W2, true> val(op2); ap_int_base<64 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 64; ret |= val; return ret; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 64, false > operator, (long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<64 + _AP_W + _AP_W2, true> val(op1); ap_int_base<64 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<64 + _AP_W, false> val(op2); ap_int_base<64 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 64; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<64 + _AP_W, false> val(op1); ap_int_base<64 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 64, false> operator, (const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<64 + 1, true> val(op2); val[64] = op1; return val; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 64, false> operator, (long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<64 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<64 + _AP_W, false> val(op2); ap_int_base<64 + _AP_W, false> ret(op1); ret <<= 64; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (unsigned long op1, const ap_int_base<_AP_W, _AP_S>& op2) { ap_int_base<64 + _AP_W, false> val(op1); ap_int_base<64 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 64; ret >>= 64; } ret |= val << _AP_W; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<64 + _AP_W, false> val(op2); ap_int_base<64 + _AP_W, false> ret(op1); ret <<= 64; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<64 + _AP_W, false> val(op1); ap_int_base<64 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<64 + 1, false > operator, (const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<64 + 1, false> val(op2); val[64] = op1; return val; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<64 + 1, false > operator, (unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<64 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 64, false > operator, (const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<64 + _AP_W + _AP_W2, false> val(op2); ap_int_base<64 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 64; ret |= val; return ret; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 64, false > operator, (unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<64 + _AP_W + _AP_W2, false> val(op1); ap_int_base<64 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<64 + _AP_W, false> val(op2); ap_int_base<64 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 64; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<64 + _AP_W, false> val(op1); ap_int_base<64 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 64, false> operator, (const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<64 + 1, false> val(op2); val[64] = op1; return val; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 64, false> operator, (unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<64 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }




template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<64 + _AP_W, false> val(op2); ap_int_base<64 + _AP_W, false> ret(op1); ret <<= 64; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (ap_slong op1, const ap_int_base<_AP_W, _AP_S>& op2) { ap_int_base<64 + _AP_W, false> val(op1); ap_int_base<64 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 64; ret >>= 64; } ret |= val << _AP_W; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<64 + _AP_W, false> val(op2); ap_int_base<64 + _AP_W, false> ret(op1); ret <<= 64; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<64 + _AP_W, false> val(op1); ap_int_base<64 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<64 + 1, false > operator, (const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<64 + 1, false> val(op2); val[64] = op1; return val; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<64 + 1, false > operator, (ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<64 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 64, false > operator, (const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<64 + _AP_W + _AP_W2, true> val(op2); ap_int_base<64 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 64; ret |= val; return ret; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 64, false > operator, (ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<64 + _AP_W + _AP_W2, true> val(op1); ap_int_base<64 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<64 + _AP_W, false> val(op2); ap_int_base<64 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 64; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<64 + _AP_W, false> val(op1); ap_int_base<64 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 64, false> operator, (const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<64 + 1, true> val(op2); val[64] = op1; return val; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 64, false> operator, (ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<64 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<64 + _AP_W, false> val(op2); ap_int_base<64 + _AP_W, false> ret(op1); ret <<= 64; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (ap_ulong op1, const ap_int_base<_AP_W, _AP_S>& op2) { ap_int_base<64 + _AP_W, false> val(op1); ap_int_base<64 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 64; ret >>= 64; } ret |= val << _AP_W; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<64 + _AP_W, false> val(op2); ap_int_base<64 + _AP_W, false> ret(op1); ret <<= 64; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<64 + _AP_W, false> val(op1); ap_int_base<64 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<64 + 1, false > operator, (const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<64 + 1, false> val(op2); val[64] = op1; return val; } template<int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<64 + 1, false > operator, (ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<64 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 64, false > operator, (const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<64 + _AP_W + _AP_W2, false> val(op2); ap_int_base<64 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 64; ret |= val; return ret; } template<int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 64, false > operator, (ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<64 + _AP_W + _AP_W2, false> val(op1); ap_int_base<64 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<64 + _AP_W, false> val(op2); ap_int_base<64 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 64; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< _AP_W + 64, false > operator, (ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<64 + _AP_W, false> val(op1); ap_int_base<64 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 64, false> operator, (const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<64 + 1, false> val(op2); val[64] = op1; return val; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N > inline __attribute__((always_inline)) ap_int_base< 1 + 64, false> operator, (ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<64 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 4183 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W+_AP_W1> operator << (const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ((ap_uint<_AP_W+_AP_W1>)lhs.get()) << ((int)rhs); }
template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W+_AP_W1> operator << (const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ((ap_uint<_AP_W+_AP_W1>)lhs.get()) << ((int)rhs); }
template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W+_AP_W1> operator << (const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ((ap_uint<_AP_W+_AP_W1>)lhs.get()) << ((int)rhs); }
template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W+_AP_W1> operator << (const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ((ap_uint<_AP_W+_AP_W1>)lhs.get()) << ((int)rhs); }
template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W+_AP_W1> operator << (const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ((ap_uint<_AP_W+_AP_W1>)lhs.get()) << ((int)rhs); }
template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W+_AP_W1> operator >> (const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ((ap_uint<_AP_W+_AP_W1>)lhs.get()) >> ((int)rhs); }
template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W+_AP_W1> operator >> (const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ((ap_uint<_AP_W+_AP_W1>)lhs.get()) >> ((int)rhs); }
template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W+_AP_W1> operator >> (const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ((ap_uint<_AP_W+_AP_W1>)lhs.get()) >> ((int)rhs); }
template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W+_AP_W1> operator >> (const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ((ap_uint<_AP_W+_AP_W1>)lhs.get()) >> ((int)rhs); }
template<int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W+_AP_W1> operator >> (const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ((ap_uint<_AP_W+_AP_W1>)lhs.get()) >> ((int)rhs); }
# 4274 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, int _AP_I, bool _AP_S,
         ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct af_bit_ref {
    ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& d_bv;
    int d_index;

public:
    inline __attribute__((always_inline)) af_bit_ref(const af_bit_ref<_AP_W,_AP_I,_AP_S,
              _AP_Q,_AP_O,_AP_N>&ref):
              d_bv(ref.d_bv), d_index(ref.d_index) {}

    inline __attribute__((always_inline)) af_bit_ref(ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>* bv, int index = 0) :
        d_bv(*bv), d_index(index) {}
    inline __attribute__((always_inline)) operator bool () const { return ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), d_index, d_index); (bool)(__Result__ & 1); }); }

    inline __attribute__((always_inline)) af_bit_ref& operator = (unsigned long long val) {
        d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
        return *this;
    }

    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) af_bit_ref& operator = (const ap_int_base<_AP_W2,_AP_S2>& val) {
        return operator =(val.to_uint64());
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) af_bit_ref& operator = (const af_bit_ref<_AP_W2,_AP_I2,
                                  _AP_S2,_AP_Q2,_AP_O2,_AP_N2>& val) {
        return operator =((unsigned long long) (bool) val);
    }

    inline __attribute__((always_inline)) af_bit_ref& operator = (const af_bit_ref<_AP_W,_AP_I,
                                  _AP_S,_AP_Q,_AP_O,_AP_N>& val) {
        return operator =((unsigned long long) (bool) val);
    }
    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) af_bit_ref& operator = ( const ap_bit_ref<_AP_W2, _AP_S2> &val) {
        return operator =((unsigned long long) (bool) val);
    }

    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) af_bit_ref& operator = ( const ap_range_ref<_AP_W2,_AP_S2>& val) {
        return operator =((const ap_int_base<_AP_W2, false>) val);
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) af_bit_ref& operator= (const af_range_ref<_AP_W2, _AP_I2, _AP_S2,
                                    _AP_Q2, _AP_O2, _AP_N2>& val) {
        return operator=((const ap_int_base<_AP_W2, false>)(val));
    }

    template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
    inline __attribute__((always_inline)) af_bit_ref& operator= (const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
        return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
    }

    template<int _AP_W2, int _AP_S2>
    inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
    operator, (ap_int_base<_AP_W2, _AP_S2>& op) {
        return ap_concat_ref<1, af_bit_ref, _AP_W2,
               ap_int_base<_AP_W2, _AP_S2> >(*this, op);
    }

    template<int _AP_W2, int _AP_S2>
    inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
    operator, (const ap_bit_ref<_AP_W2, _AP_S2> &op) {
        return ap_concat_ref<1, af_bit_ref, 1,
                 ap_bit_ref<_AP_W2, _AP_S2> >(*this,
               const_cast<ap_bit_ref<_AP_W2, _AP_S2>& >(op));
    }

    template<int _AP_W2, int _AP_S2>
    inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
    operator, (const ap_range_ref<_AP_W2, _AP_S2> &op) {
        return ap_concat_ref<1, af_bit_ref, _AP_W2,
                  ap_range_ref<_AP_W2, _AP_S2> >(*this,
                  const_cast< ap_range_ref<_AP_W2, _AP_S2>& >(op));
    }

    template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
    inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                        ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
    operator, (const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> op) {
        return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                 ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                 const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& > (op));
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2,
             af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
    operator, (const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
               _AP_O2, _AP_N2> &op) {
       return ap_concat_ref<1, af_bit_ref, _AP_W2,
             af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
             const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
             _AP_O2, _AP_N2>& >(op));
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1,
             af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
    operator, (const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
               _AP_O2, _AP_N2> &op) {
       return ap_concat_ref<1, af_bit_ref, 1,
             af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
             const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
             _AP_O2, _AP_N2>& >(op));
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) bool operator == (const af_bit_ref<_AP_W2, _AP_I2,
                             _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
        return get() == op.get();
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) bool operator != (const af_bit_ref<_AP_W2, _AP_I2,
                             _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
        return get() != op.get();
    }

    inline __attribute__((always_inline)) bool get() const {
        return ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), d_index, d_index); (bool)(__Result__ & 1); });
    }

    inline __attribute__((always_inline)) bool operator ~ () const {
        bool bit = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), d_index, d_index); (bool)(__Result__ & 1); });
        return bit ? false : true;
    }

    inline __attribute__((always_inline)) int length() const {
        return 1;
    }

};



template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q,
         ap_o_mode _AP_O, int _AP_N>
struct af_range_ref {
    ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& d_bv;
    int l_index;
    int h_index;

public:
    inline __attribute__((always_inline)) af_range_ref(const af_range_ref<_AP_W,_AP_I,_AP_S,
           _AP_Q,_AP_O, _AP_N>&ref):
           d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

    inline __attribute__((always_inline)) af_range_ref(ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>* bv
                        , int h, int l) :
        d_bv(*bv), l_index(l), h_index(h) {
    }

    inline __attribute__((always_inline)) operator ap_int_base<_AP_W,false> () const {
        ap_int_base<_AP_W, false> ret;
        ret.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
        return ret;
    }

    inline __attribute__((always_inline)) operator unsigned long long () const {
        ap_int_base<_AP_W, false> ret;
        ret.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
        return ret.to_uint64();
    }







inline __attribute__((always_inline)) af_range_ref& operator = (const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
inline __attribute__((always_inline)) af_range_ref& operator = (const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
inline __attribute__((always_inline)) af_range_ref& operator = (const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
inline __attribute__((always_inline)) af_range_ref& operator = (const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
inline __attribute__((always_inline)) af_range_ref& operator = (const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
inline __attribute__((always_inline)) af_range_ref& operator = (const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
inline __attribute__((always_inline)) af_range_ref& operator = (const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
inline __attribute__((always_inline)) af_range_ref& operator = (const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
inline __attribute__((always_inline)) af_range_ref& operator = (const long long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
inline __attribute__((always_inline)) af_range_ref& operator = (const unsigned long long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) af_range_ref& operator = (const ap_int_base<_AP_W2,_AP_S2>& val) {
        ap_int_base<_AP_W, false> loc(val);
        d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
        return *this;
    }

    inline __attribute__((always_inline)) af_range_ref& operator = (const char* val) {
        ap_int_base<_AP_W, false> loc(val);
        d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
        return *this;
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) af_range_ref& operator= (const af_range_ref<_AP_W2,
                          _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
        ap_int_base<_AP_W2, false> tmp(val);
        return operator=(tmp);
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) af_range_ref& operator= (const ap_fixed_base<_AP_W2,
                          _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
        return operator=(val.to_ap_int_base());
    }

    inline __attribute__((always_inline)) af_range_ref& operator= (const af_range_ref<_AP_W,
                          _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& val) {
        ap_int_base<_AP_W, false> tmp(val);
        return operator=(tmp);
    }

    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) af_range_ref& operator= (const ap_range_ref<_AP_W2, _AP_S2>& val) {
        return operator=((ap_int_base<_AP_W2, false>)val);
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) af_range_ref& operator= (const af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                    _AP_Q2, _AP_O2, _AP_N2>& val) {
        return operator=((unsigned long long)(bool)(val));
    }

    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) af_range_ref& operator= (const ap_bit_ref<_AP_W2, _AP_S2>& val) {
        return operator=((unsigned long long)(bool)(val));
    }

    template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
    inline __attribute__((always_inline)) af_range_ref& operator= (const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
        return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
    }

    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) bool operator == (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
        ap_int_base<_AP_W, false> lop (*this);
        ap_int_base<_AP_W2, false> rop (op2);
        return lop == rop;
    }
    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) bool operator != (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
        return !(operator == (op2));
    }
    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) bool operator < (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
        ap_int_base<_AP_W, false> lop(*this);
        ap_int_base<_AP_W2, false> rop(op2);
        return lop < rop;
    }
    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) bool operator <= (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
        ap_int_base<_AP_W, false> lop(*this);
        ap_int_base<_AP_W2, false> rop(op2);
        return lop <= rop;
    }
    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) bool operator > (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
        return !(operator <= (op2));
    }

    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) bool operator >= (const ap_range_ref<_AP_W2, _AP_S2>& op2) {
        return !(operator < (op2));
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) bool operator == (const af_range_ref<_AP_W2, _AP_I2,
                              _AP_S2,_AP_Q2, _AP_O2, _AP_N2>& op2) {
        ap_int_base<_AP_W, false> lop (*this);
        ap_int_base<_AP_W2, false> rop (op2);
        return lop == rop;
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) bool operator != (const af_range_ref<_AP_W2, _AP_I2,
                             _AP_S2,_AP_Q2, _AP_O2, _AP_N2>& op2) {
       return !(operator == (op2));
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) bool operator < (const af_range_ref<_AP_W2, _AP_I2,
                            _AP_S2,_AP_Q2, _AP_O2, _AP_N2>& op2) {
        ap_int_base<_AP_W, false> lop (*this);
        ap_int_base<_AP_W2, false> rop (op2);
        return lop < rop;
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) bool operator <= (const af_range_ref<_AP_W2, _AP_I2,
                             _AP_S2,_AP_Q2, _AP_O2, _AP_N2>& op2) {
        ap_int_base<_AP_W, false> lop( *this);
        ap_int_base<_AP_W2, false> rop (op2);
        return lop <= rop;
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) bool operator > (const af_range_ref<_AP_W2, _AP_I2,
                               _AP_S2,_AP_Q2, _AP_O2, _AP_N2>& op2) {
        return !(operator <= (op2));
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) bool operator >= (const af_range_ref<_AP_W2, _AP_I2,
                             _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
        return !(operator < (op2));
    }

    template <int _AP_W3>
    inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
        d_bv.V = ({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    }

    template<int _AP_W2, int _AP_S2>
    inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
    operator, (ap_int_base<_AP_W2, _AP_S2>& op) {
        return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
               ap_int_base<_AP_W2, _AP_S2> >(*this, op);
    }

    template<int _AP_W2, int _AP_S2>
    inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
    operator, (const ap_bit_ref<_AP_W2, _AP_S2> &op) {
        return ap_concat_ref<_AP_W, af_range_ref, 1,
               ap_bit_ref<_AP_W2, _AP_S2> >(*this,
               const_cast<ap_bit_ref<_AP_W2, _AP_S2>& >(op));
    }

    template<int _AP_W2, int _AP_S2>
    inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
    operator, (const ap_range_ref<_AP_W2, _AP_S2> &op) {
        return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
               ap_range_ref<_AP_W2, _AP_S2> >(*this,
               const_cast<ap_range_ref<_AP_W2, _AP_S2>& >(op));
    }

    template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
    inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                        ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
    operator, (const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
        return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                 ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                 const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& >(op));
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
             af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
    operator, (const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
               _AP_O2, _AP_N2> &op) {
       return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
             af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
             const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                       _AP_O2, _AP_N2>& >(op));
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1,
             af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
    operator, (const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
               _AP_O2, _AP_N2> &op) {
       return ap_concat_ref<_AP_W, af_range_ref, 1,
             af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
             const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
             _AP_O2, _AP_N2>& >(op));
    }


    inline __attribute__((always_inline)) int length() const {
      return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
    }

    inline __attribute__((always_inline)) int to_int() const {
        return (int)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
    }
    inline __attribute__((always_inline)) unsigned to_uint() const {
        return (unsigned)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
    }
    inline __attribute__((always_inline)) long to_long() const {
        return (long)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
    }
    inline __attribute__((always_inline)) unsigned long to_ulong() const {
        return (unsigned long)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
    }
    inline __attribute__((always_inline)) ap_slong to_int64() const {
        return (ap_slong)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
    }
    inline __attribute__((always_inline)) ap_ulong to_uint64() const {
        return (ap_ulong)(({ __typeof__(d_bv.V) __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
    }
};





template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
         int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {

public:
    typedef ssdm_int<_AP_W, _AP_S> Base;

    static const int width = _AP_W;
    static const int iwidth = _AP_I;
    static const ap_q_mode qmode = _AP_Q;
    static const ap_o_mode omode = _AP_O;

            void overflow_adjust(bool underflow, bool overflow,bool lD, bool sign) {

_ssdm_InlineSelf(0, "");


 if (!underflow && !overflow) return;
        if (_AP_O==SC_WRAP) {
            if (_AP_N == 0)
                return;
            if (_AP_S) {


                Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
                if (_AP_N > 1) {

                    ap_int_base<_AP_W, false> mask(-1);
                    if (sign) mask.V = 0;
                    Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });

                }
            } else {

                ap_int_base<_AP_W, false> mask(-1);
                Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });

            }
        } else if (_AP_O==SC_SAT_ZERO) {
              Base::V = 0;
        }
        else if (_AP_O == SC_WRAP_SM && _AP_S) {
            bool Ro = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, _AP_W - 1); (bool)(__Result__ & 1); });
            if (_AP_N == 0) {
                if (lD != Ro) {
                    Base::V = ~Base::V;
                    Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
                }
            } else {
                if (_AP_N == 1 && sign != Ro) {
                   Base::V = ~Base::V;
                } else if (_AP_N > 1) {
                    bool lNo = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_N, _AP_W - _AP_N); (bool)(__Result__ & 1); });
                    if (lNo == sign)
                        Base::V = ~Base::V;
                    ap_int_base<_AP_W, false> mask(-1);
                    if (sign) mask.V = 0;
                    Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });

                }
                Base::V = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });

            }
        } else {
            if (_AP_S) {
                if (overflow) {
                    Base::V = 1;
                    Base::V <<= _AP_W - 1;
                    Base::V = ~Base::V;
                } else if (underflow) {
                    Base::V = 1;
                    Base::V <<= _AP_W - 1;
                    if (_AP_O==SC_SAT_SYM)
                        Base::V |= 1;
                }
            }
            else {
                if (overflow)
                    Base::V = ~(ap_int_base<_AP_W,false>(0).V);
                else if (underflow)
                    Base::V = 0;
            }
        }
    }

            bool quantization_adjust(bool qb, bool r, bool s) {

_ssdm_InlineSelf(0, "");

 bool carry=(bool)({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W-1, _AP_W-1); (bool)(__Result__ & 1); });
        if (_AP_Q==SC_TRN)
            return false;
        if (_AP_Q==SC_RND_ZERO)
            qb &= s || r;
        else if (_AP_Q==SC_RND_MIN_INF)
            qb &= r;
        else if (_AP_Q==SC_RND_INF)
            qb &= !s || r;
        else if (_AP_Q==SC_RND_CONV)
            qb &= ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 0); (bool)(__Result__ & 1); }) || r;
        else if (_AP_Q==SC_TRN_ZERO)
            qb = s && ( qb || r );
        Base::V += qb;

        return carry&&(!(bool)({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W-1, _AP_W-1); (bool)(__Result__ & 1); }));
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2>
    struct RType {
        enum {
            _AP_F=_AP_W-_AP_I,
            F2=_AP_W2-_AP_I2,
            mult_w = _AP_W+_AP_W2,
            mult_i = _AP_I+_AP_I2,
            mult_s = _AP_S||_AP_S2,
            plus_w = ((_AP_I+(_AP_S2&&!_AP_S)) > (_AP_I2+(_AP_S&&!_AP_S2)) ? (_AP_I+(_AP_S2&&!_AP_S)) : (_AP_I2+(_AP_S&&!_AP_S2)))+1+((_AP_F) > (F2) ? (_AP_F) : (F2)),
            plus_i = ((_AP_I+(_AP_S2&&!_AP_S)) > (_AP_I2+(_AP_S&&!_AP_S2)) ? (_AP_I+(_AP_S2&&!_AP_S)) : (_AP_I2+(_AP_S&&!_AP_S2)))+1,
            plus_s = _AP_S||_AP_S2,
            minus_w = ((_AP_I+(_AP_S2&&!_AP_S)) > (_AP_I2+(_AP_S&&!_AP_S2)) ? (_AP_I+(_AP_S2&&!_AP_S)) : (_AP_I2+(_AP_S&&!_AP_S2)))+1+((_AP_F) > (F2) ? (_AP_F) : (F2)),
            minus_i = ((_AP_I+(_AP_S2&&!_AP_S)) > (_AP_I2+(_AP_S&&!_AP_S2)) ? (_AP_I+(_AP_S2&&!_AP_S)) : (_AP_I2+(_AP_S&&!_AP_S2)))+1,
            minus_s = true,

            div_w = _AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)) + _AP_S2,



            div_i = _AP_I + _AP_W2 -_AP_I2 + _AP_S2,
            div_s = _AP_S||_AP_S2,
            logic_w = ((_AP_I+(_AP_S2&&!_AP_S)) > (_AP_I2+(_AP_S&&!_AP_S2)) ? (_AP_I+(_AP_S2&&!_AP_S)) : (_AP_I2+(_AP_S&&!_AP_S2)))+((_AP_F) > (F2) ? (_AP_F) : (F2)),
            logic_i = ((_AP_I+(_AP_S2&&!_AP_S)) > (_AP_I2+(_AP_S&&!_AP_S2)) ? (_AP_I+(_AP_S2&&!_AP_S)) : (_AP_I2+(_AP_S&&!_AP_S2))),
            logic_s = _AP_S||_AP_S2
        };

        typedef ap_fixed_base<mult_w, mult_i, mult_s> mult;
        typedef ap_fixed_base<plus_w, plus_i, plus_s> plus;
        typedef ap_fixed_base<minus_w, minus_i, minus_s> minus;
        typedef ap_fixed_base<logic_w, logic_i, logic_s> logic;
        typedef ap_fixed_base<div_w, div_i, div_s> div;
        typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1;
    };



    inline __attribute__((always_inline)) ap_fixed_base() {
                                                                                          ;





    }
    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
            ap_fixed_base (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2> &op) {

_ssdm_InlineSelf(0, "");

 enum { N2=_AP_W2, _AP_F=_AP_W-_AP_I, F2=_AP_W2-_AP_I2,
               QUAN_INC = F2>_AP_F && !(_AP_Q==SC_TRN || (_AP_Q==SC_TRN_ZERO && !_AP_S2)) };
        bool carry = false;




        unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
        bool signbit = ({ __typeof__((const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*>(&op)->V)) __Result__ = 0; __typeof__((const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*>(&op)->V)) __Val2__ = (const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*>(&op)->V); __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W2-1, _AP_W2-1); (bool)(__Result__ & 1); });

        bool isneg = signbit && _AP_S2;
        if (F2 == _AP_F)
            Base::V = op.V;
        else if (F2 > _AP_F) {
            if (sh_amt < _AP_W2)
                Base::V = op.V >> sh_amt;
            else {
                static int AllOnesInt = -1;
                if (isneg) Base::V = AllOnesInt;
                else Base::V = 0;
            }
            if (_AP_Q!=SC_TRN && !(_AP_Q==SC_TRN_ZERO && !_AP_S2)) {
                bool qbit = ({ __typeof__((const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*>(&op)->V)) __Result__ = 0; __typeof__((const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*>(&op)->V)) __Val2__ = (const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*>(&op)->V); __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), F2-_AP_F-1, F2-_AP_F-1); (bool)(__Result__ & 1); });

                bool qb = (F2-_AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;

                bool r = (F2 > _AP_F+1) ?
                         ({ __typeof__((const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*>(&op)->V)) __Result__ = 0; __typeof__((const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*>(&op)->V)) __Val2__ = (const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*>(&op)->V); __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, F2-_AP_F-2<_AP_W2?F2-_AP_F-2:_AP_W2-1); __Result__; })!=0 : false;


                carry = quantization_adjust(qb, r, _AP_S2 && signbit);
            }
        }
        else {
            Base::V = op.V;
            if (sh_amt < _AP_W)
                Base::V = Base::V << sh_amt;
            else
                Base::V = 0;
        }


        if ((_AP_O != SC_WRAP || _AP_N != 0) && ((!_AP_S && _AP_S2) ||
             _AP_I-_AP_S < _AP_I2-_AP_S2+(QUAN_INC ||
              (_AP_S2 && _AP_O==SC_SAT_SYM)))) {
            bool deleted_zeros = _AP_S2?true:!carry,
                 deleted_ones = true;
            bool neg_src = isneg;
            bool lD = false;

            bool newsignbit = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W-1, _AP_W-1); (bool)(__Result__ & 1); });
            int pos1 = F2 - _AP_F + _AP_W;
            int pos2 = F2 - _AP_F + _AP_W + 1;
            if (pos1 < _AP_W2 && pos1 >= 0)
                lD = ({ __typeof__((const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*>(&op)->V)) __Result__ = 0; __typeof__((const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*>(&op)->V)) __Val2__ = (const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*>(&op)->V); __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, pos1); (bool)(__Result__ & 1); });



            if(pos1 < _AP_W2)
            {
                bool Range1_all_ones = true;
                bool Range1_all_zeros = true;
                bool Range2_all_ones = true;
                ap_int_base<_AP_W2,false> Range1(0);
                ap_int_base<_AP_W2,false> Range2(0);
                ap_int_base<_AP_W2,false> all_ones(-1);

                if (pos2 < _AP_W2 && pos2 >= 0) {
                    Range2.V = ({ __typeof__((const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*> (&op)->V)) __Result__ = 0; __typeof__((const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*> (&op)->V)) __Val2__ = (const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*> (&op)->V); __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2-1); __Result__; });


                    Range2_all_ones = Range2 == (all_ones >> pos2);
                } else if (pos2 < 0)
                    Range2_all_ones = false;

                if (pos1 >= 0 && pos2 < _AP_W2) {
                    Range1.V = ({ __typeof__((const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*> (&op)->V)) __Result__ = 0; __typeof__((const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*> (&op)->V)) __Val2__ = (const_cast<ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>*> (&op)->V); __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2-1); __Result__; });



                    Range1_all_ones = Range1 == (all_ones >> pos1);
                    Range1_all_zeros = !Range1.V ;
                } else if (pos2 == _AP_W2) {
                    Range1_all_ones = lD;
                    Range1_all_zeros = !lD;
                } else if (pos1 < 0) {
                    Range1_all_zeros = !op.V;
                    Range1_all_ones = false;
                }


                deleted_zeros = deleted_zeros && (carry ? Range1_all_ones: Range1_all_zeros);
                deleted_ones = carry ? Range2_all_ones &&
                               (pos1 < 0 || !lD): Range1_all_ones;
                neg_src = isneg && !(carry&&Range1_all_ones);
            } else
                neg_src = isneg && newsignbit;
            bool neg_trg = _AP_S && newsignbit;
            bool overflow = (neg_trg || !deleted_zeros) && !isneg;
            bool underflow = (!neg_trg || !deleted_ones) && neg_src;
            if ((_AP_O == SC_SAT_SYM) && _AP_S2 && _AP_S)
                underflow |= neg_src && (_AP_W > 1 ?
                  ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0 : true);

            overflow_adjust(underflow, overflow, lD, neg_src);
        }
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
        *this = const_cast<ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op);
    }

    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) ap_fixed_base (const ap_int_base<_AP_W2,_AP_S2>& op) {
                                                                                          ;
        ap_fixed_base<_AP_W2,_AP_W2,_AP_S2> f_op;
        f_op.V = op.V;
        *this = f_op;
    }

    inline __attribute__((always_inline)) ap_fixed_base( bool b ) { *this = (ap_fixed_base<1, 1, false>) b; }
    inline __attribute__((always_inline)) ap_fixed_base( char b ) { *this = (ap_fixed_base<8, 8, true>) b; }
    inline __attribute__((always_inline)) ap_fixed_base( signed char b ) { *this = (ap_fixed_base<8, 8, true>) b; }
    inline __attribute__((always_inline)) ap_fixed_base( unsigned char b ) { *this = (ap_fixed_base<8, 8, false>) b; }
    inline __attribute__((always_inline)) ap_fixed_base( signed short b ) { *this = (ap_fixed_base<16, 16, true>) b; }
    inline __attribute__((always_inline)) ap_fixed_base( unsigned short b ) { *this = (ap_fixed_base<16, 16, false>) b; }
    inline __attribute__((always_inline)) ap_fixed_base( signed int b ) { *this = (ap_fixed_base<32, 32, true>) b; }
    inline __attribute__((always_inline)) ap_fixed_base( unsigned int b ) { *this = (ap_fixed_base<32, 32, false>) b; }

    inline __attribute__((always_inline)) ap_fixed_base( signed long b ) { *this = (ap_fixed_base<64, 64, true>) b; }
    inline __attribute__((always_inline)) ap_fixed_base( unsigned long b ) { *this = (ap_fixed_base<64, 64, false>) b; }




    inline __attribute__((always_inline)) ap_fixed_base( ap_slong b ) { *this = (ap_fixed_base<64, 64, true>) b; }
    inline __attribute__((always_inline)) ap_fixed_base( ap_ulong b ) { *this = (ap_fixed_base<64, 64, false>) b; }
   inline __attribute__((always_inline)) ap_fixed_base(const char* str) {
        __typeof__(Base::V) Result;
        _ssdm_string2bits((void*)(&Result), (const char*)(str),
         10, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N, true);
        Base::V = Result;
    }

    inline __attribute__((always_inline)) ap_fixed_base(const char* str, signed char radix) {
        __typeof__(Base::V) Result;
        _ssdm_string2bits((void*)(&Result), (const char*)(str),
            radix, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N, true);
        Base::V = Result;
    }

    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
        *this = ((bool)op);
    }

    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
        *this = (ap_int_base<_AP_W2, false>(op));
    }

    template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
    inline __attribute__((always_inline)) ap_fixed_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
        *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));

    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) ap_fixed_base(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
         *this = (bool(op));
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) ap_fixed_base(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
        *this = (ap_int_base<_AP_W2, false>(op));
    }
# 5039 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 inline __attribute__((always_inline)) unsigned long long doubleToRawBits(double pf) const {
        union {
            unsigned long long __L;
            double __D;
        } LD;
        LD.__D = pf;
        return LD.__L;
    }
    inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) const {
        union {
            unsigned int __L;
            float __D;
        } LD;
        LD.__D = pf;
        return LD.__L;
    }
    inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) const {
        union {
            unsigned short __L;
            half __D;
        } LD;
        LD.__D = pf;
        return LD.__L;
    }

    inline __attribute__((always_inline)) double rawBitsToDouble(unsigned long long pi) const {
        union {
            unsigned long long __L;
            double __D;
        } LD;
        LD.__L = pi;
        return LD.__D;
    }

    inline __attribute__((always_inline)) float rawBitsToFloat (unsigned int pi) const {
        union {
            unsigned int __L;
            float __D;
        } LD;
        LD.__L = pi;
        return LD.__D;
    }

    inline __attribute__((always_inline)) half rawBitsToHalf (unsigned short pi) const {
        union {
            unsigned short __L;
            half __D;
        } LD;
        LD.__L = pi;
        return LD.__D;
    }

            ap_fixed_base(double d) {

_ssdm_InlineSelf(0, "");

 ap_int_base<64,false> ireg;
        ireg.V = doubleToRawBits(d);
        bool isneg = ({ __typeof__(ireg.V) __Result__ = 0; __typeof__(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 63, 63); (bool)(__Result__ & 1); });

        ap_int_base<11 + 1, true> exp;
        ap_int_base<11, false> exp_tmp;
        exp_tmp.V = ({ __typeof__(ireg.V) __Result__ = 0; __typeof__(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 -1); __Result__; });

        exp = exp_tmp - ((1<<(11 -1))-1);
        ap_int_base<52 + 2, true> man;
        man.V = ({ __typeof__(ireg.V) __Result__ = 0; __typeof__(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });


                                                    ;
        man.V = ({ __typeof__(man.V) __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
        if(isneg) man = -man;
        if ( (ireg.V & 0x7fffffffffffffffLL)==0 ) {
            Base::V = 0;
        } else {
            int _AP_W2=52 +2, _AP_I2=exp.V+2, _AP_F=_AP_W-_AP_I, F2=_AP_W2-_AP_I2;
            bool _AP_S2 = true,
                 QUAN_INC = F2>_AP_F && !(_AP_Q==SC_TRN || (_AP_Q==SC_TRN_ZERO && !_AP_S2));
            bool carry = false;

            unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
            if (F2 == _AP_F)
                Base::V = man.V;
            else if (F2 > _AP_F) {
                if (sh_amt < 52 + 2)
                   Base::V = man.V >> sh_amt;
                else {
                   static int AllOnesInt = -1;
                   if (isneg) Base::V = AllOnesInt;
                   else Base::V = 0;
                }
                if ((_AP_Q != SC_TRN) && !((_AP_Q == SC_TRN_ZERO) && !_AP_S2)) {

                    bool qb = (F2-_AP_F > _AP_W2) ?
                        isneg : (bool) ({ __typeof__(man.V) __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), F2 - _AP_F - 1, F2 - _AP_F - 1); (bool)(__Result__ & 1); });
                    bool r = (F2 > _AP_F + 1) ? ({ __typeof__(man.V) __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2): (_AP_W2 - 1)); __Result__; }) !=

                             0 : false;
                    carry = quantization_adjust(qb, r, isneg);
                }
            }
            else {
                Base::V = man.V;
                if (sh_amt < _AP_W)
                    Base::V = Base::V << sh_amt;
                else
                    Base::V = 0;
            }

            if ((_AP_O != SC_WRAP || _AP_N != 0) && ((!_AP_S && _AP_S2)
                || _AP_I - _AP_S < _AP_I2 - _AP_S2 + (QUAN_INC ||
                (_AP_S2 && (_AP_O == SC_SAT_SYM)))) ) {
                bool deleted_zeros = _AP_S2?true:!carry,
                     deleted_ones = true;
                bool neg_src = isneg;
                bool lD = false;
                int pos1 =F2 - _AP_F + _AP_W;
                int pos2 =F2 - _AP_F + _AP_W + 1;
                bool newsignbit = ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, _AP_W - 1); (bool)(__Result__ & 1); });
                if (pos1 < _AP_W2 && pos1 >= 0)

                  lD = (man.V >> pos1) & 1;
                if (pos1 < _AP_W2 ) {
                    bool Range1_all_ones = true;
                    bool Range1_all_zeros = true;
                    bool Range2_all_ones = true;
                    ap_int_base<52 +2,false> Range2;
                    ap_int_base<52 +2,false> all_ones(-1);

                    if (pos2 >= 0 && pos2 < _AP_W2) {


                        Range2.V = man.V;
                        Range2.V >>= pos2;
                        Range2_all_ones = Range2 == (all_ones >> pos2);
                    } else if (pos2 < 0)
                        Range2_all_ones = false;
                    if (pos1 >= 0 && pos2 < _AP_W2) {
                        Range1_all_ones = Range2_all_ones && lD;
                        Range1_all_zeros = !Range2.V && !lD;
                    } else if (pos2 == _AP_W2) {
                        Range1_all_ones = lD;
                        Range1_all_zeros = !lD;
                    } else if (pos1 < 0) {
                        Range1_all_zeros = !man.V;
                        Range1_all_ones = false;
                    }

                    deleted_zeros = deleted_zeros && (carry ? Range1_all_ones: Range1_all_zeros);
                    deleted_ones = carry ? Range2_all_ones &&
                                   ( pos1 < 0 || !lD): Range1_all_ones;
                    neg_src=isneg && !(carry&&Range1_all_ones);
                } else
                    neg_src = isneg && newsignbit;
                bool neg_trg = _AP_S && newsignbit;
                bool overflow = (neg_trg || !deleted_zeros) && !isneg;
                bool underflow =(!neg_trg || !deleted_ones) && neg_src;
                if ((_AP_O == SC_SAT_SYM) && _AP_S2 && _AP_S)
                   underflow |= neg_src && (_AP_W > 1 ?
                     ({ __typeof__(Base::V) __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0 : true);
                overflow_adjust(underflow, overflow, lD, neg_src);
            }
        }
    }

    inline __attribute__((always_inline)) ap_fixed_base(float d) {
        *this = ap_fixed_base(double(d));
    }

    inline __attribute__((always_inline)) ap_fixed_base(half d) {
        *this = ap_fixed_base(double(d));
    }

    inline __attribute__((always_inline)) ap_fixed_base& operator=(const ap_fixed_base<_AP_W, _AP_I, _AP_S,
                                        _AP_Q, _AP_O, _AP_N>& op)
    {
        Base::V = op.V;
        return *this;
    }

    inline __attribute__((always_inline)) ap_fixed_base& operator=(const volatile ap_fixed_base<_AP_W, _AP_I, _AP_S,
                                        _AP_Q, _AP_O, _AP_N>& op)
    {
        Base::V = op.V;
        return *this;
    }

    inline __attribute__((always_inline)) void operator=(const ap_fixed_base<_AP_W, _AP_I, _AP_S,
                                        _AP_Q, _AP_O, _AP_N>& op) volatile
    {
        Base::V = op.V;
    }

    inline __attribute__((always_inline)) void operator=(const volatile ap_fixed_base<_AP_W, _AP_I, _AP_S,
                                        _AP_Q, _AP_O, _AP_N>& op) volatile
    {
        Base::V = op.V;
    }




    inline __attribute__((always_inline)) ap_fixed_base& setBits(unsigned long long bv) {
      Base::V = bv;
      return *this;
    }


    static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(unsigned long long bv) {
      ap_fixed_base Tmp;
      Tmp.V = bv;
      return Tmp;
    }



    inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)),_AP_S>
    to_ap_int_base(bool Cnative = true) const {


        ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)),_AP_S> ret(0);
        if(_AP_I > 0 && _AP_I <= _AP_W)
            ret.V = ({ __typeof__(const_cast< ap_fixed_base*>(this)->Base::V) __Result__ = 0; __typeof__(const_cast< ap_fixed_base*>(this)->Base::V) __Val2__ = const_cast< ap_fixed_base*>(this)->Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });


        else if (_AP_I > _AP_W)
        {
            ret.V = ({ __typeof__(const_cast< ap_fixed_base*>(this)->Base::V) __Result__ = 0; __typeof__(const_cast< ap_fixed_base*>(this)->Base::V) __Val2__ = const_cast< ap_fixed_base*>(this)->Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });

            unsigned int shift = _AP_I - _AP_W;
            ret.V <<= shift;
        }
        if (Cnative) {

            if (_AP_S && ({ __typeof__(const_cast< ap_fixed_base*>(this)->Base::V) __Result__ = 0; __typeof__(const_cast< ap_fixed_base*>(this)->Base::V) __Val2__ = const_cast< ap_fixed_base*>(this)->Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, _AP_W - 1); (bool)(__Result__ & 1); })

                && (_AP_I < _AP_W) && (({ __typeof__(const_cast<ap_fixed_base*>(this)->Base::V) __Result__ = 0; __typeof__(const_cast<ap_fixed_base*>(this)->Base::V) __Val2__ = const_cast<ap_fixed_base*>(this)->Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I >= 0 ? _AP_W - _AP_I - 1: _AP_W - 1); __Result__; }) != 0))


                ret.V += 1;
        } else {

        }
        return ret;
    };

    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) operator ap_int_base<_AP_W2,_AP_S2> () const {
        return (ap_int_base<_AP_W2,_AP_S2>)to_ap_int_base();
    }


    inline __attribute__((always_inline)) int to_int() const {
        return to_ap_int_base().to_int();
    }
    inline __attribute__((always_inline)) unsigned to_uint() const {
        return to_ap_int_base().to_uint();
    }
    inline __attribute__((always_inline)) ap_slong to_int64() const {
        return to_ap_int_base().to_int64();
    }
    inline __attribute__((always_inline)) ap_ulong to_uint64() const {
        return to_ap_int_base().to_uint64();
    }
            double to_double() const {

_ssdm_InlineSelf(0, "");

 if (_AP_W - _AP_I > 0 && _AP_W <= 64) {
            if (!Base::V)
                return 0;
            double dp = Base::V;
            ap_int_base<64,true> res;
            res.V = doubleToRawBits(dp);
            ap_int_base<11, true> exp;
            exp.V = ({ __typeof__(res.V) __Result__ = 0; __typeof__(res.V) __Val2__ = res.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 62); __Result__; });
            exp -= _AP_W - _AP_I;
            res.V = ({ __typeof__(res.V) __Result__ = 0; __typeof__(res.V) __Val2__ = res.V; __typeof__(exp.V) __Repl2__ = exp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 62); __Result__; });
            dp = rawBitsToDouble(res.to_int64());
            return dp;
        } else if (_AP_I - _AP_W >= 0 && _AP_I <= 64) {
            ap_int_base<((1) > (_AP_I) ? (1) : (_AP_I)), _AP_S> temp;
            temp.V = Base::V;
            temp <<= _AP_I - _AP_W;
            double dp = temp.V;
            return dp;
        } else {
            if (!Base::V)
                return 0;
            ap_int_base<64,true> res;
            res.V = 0;
            bool isneg = _AP_S ? ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Result__ = 0; __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, _AP_W - 1); (bool)(__Result__ & 1); }) : false;

            ap_int_base<_AP_W+_AP_S,_AP_S> tmp;
            tmp.V = Base::V;
            if (isneg) tmp.V = -Base::V;

            res.V = ({ __typeof__(res.V) __Result__ = 0; __typeof__(res.V) __Val2__ = res.V; __typeof__(isneg) __Repl2__ = !!isneg; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63, 63); __Result__; });
            int j = _AP_W+_AP_S-1-tmp.countLeadingZeros();

            int exp = _AP_I-(_AP_W-j);
            res.V = ({ __typeof__(res.V) __Result__ = 0; __typeof__(res.V) __Val2__ = res.V; __typeof__(exp + ((1<<(11 -1))-1)) __Repl2__ = exp + ((1<<(11 -1))-1); __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 62); __Result__; });
            if (j == 0)
                res.V = ({ __typeof__(res.V) __Result__ = 0; __typeof__(res.V) __Val2__ = res.V; __typeof__(0) __Repl2__ = 0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, 52 - 1); __Result__; });
            else {
                ap_int_base<52,false> man;
                man.V = ({ __typeof__(tmp.V) __Result__ = 0; __typeof__(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), j > 52 ? j - 52 : 0, j - 1); __Result__; });

                man.V <<= 52 > j ? 52 -j : 0;
                res.V = ({ __typeof__(res.V) __Result__ = 0; __typeof__(res.V) __Val2__ = res.V; __typeof__(man.V) __Repl2__ = man.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, 52 - 1); __Result__; });
            }
            double dp = rawBitsToDouble(res.to_int64());
            return dp;
        }

    }

            float to_float() const {

_ssdm_InlineSelf(0, "");

 if (!Base::V) return 0;





        bool is_neg =
            _AP_S && ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Result__ = 0; __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, _AP_W - 1); (bool)(__Result__ & 1); });
        ap_int_base<_AP_W, false> tmp;
        tmp.V = (is_neg ? -Base::V : Base::V);
        int num_zeros = tmp.countLeadingZeros();
        int msb_idx = _AP_W - 1 - num_zeros;
        int exp = _AP_I - (_AP_W - msb_idx);
        msb_idx = (msb_idx < 0) ? 0 : msb_idx;
        ap_int_base<32, false> tmp32;
        if (msb_idx < 32) {
          tmp32.V = tmp.V;
          tmp32.V <<= (31 - msb_idx);
        } else {

          tmp32.V = ({ __typeof__(tmp.V) __Result__ = 0; __typeof__(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), msb_idx - 31, msb_idx); __Result__; });
        }
        float f = tmp32.V;
        tmp32.V = floatToRawBits(f);
        int has_carry;
        has_carry = ({ __typeof__(tmp32.V) __Result__ = 0; __typeof__(tmp32.V) __Val2__ = tmp32.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, 30); __Result__; }) !=
            (31 + ((1<<(8 -1))-1));
        tmp32.V = ({ __typeof__(tmp32.V) __Result__ = 0; __typeof__(tmp32.V) __Val2__ = tmp32.V; __typeof__(exp + has_carry + ((1<<(8 -1))-1)) __Repl2__ = exp + has_carry + ((1<<(8 -1))-1); __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 30); __Result__; });

        tmp32.V = ({ __typeof__(tmp32.V) __Result__ = 0; __typeof__(tmp32.V) __Val2__ = tmp32.V; __typeof__(is_neg) __Repl2__ = !!is_neg; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 31, 31); __Result__; });
        f = rawBitsToFloat(tmp32.to_uint());
        return f;
    }



  inline __attribute__((always_inline)) half to_half() const {
    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    ap_int_base<_AP_W, false> tmp;
    tmp.V = Base::V;
    bool s = _AP_S && tmp.get_bit(_AP_W - 1);
    if (s)
      tmp.V = -Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1<<(5 -1))-1);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (tmp.range(lsb_index - 2, 0) != 0) : 0;

    a |= (lsb_index >=0) ? tmp.get_bit(lsb_index) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ __typeof__(m) __Result__ = 0; __typeof__(m) __Val2__ = m; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 10 + 1, 10 + 1); (bool)(__Result__ & 1); })) {
      e += 1;
    }

    m = ({ __typeof__(m) __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ __typeof__(m) __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }

    inline __attribute__((always_inline)) operator double () const {
        return to_double();
    }

    inline __attribute__((always_inline)) operator float () const {
        return to_float();
    }
    inline __attribute__((always_inline)) operator half () const {
        return to_half();
    }

    inline __attribute__((always_inline)) operator bool () const {
      return (bool) Base::V != 0;
    }

    inline __attribute__((always_inline)) operator char () const {
        return (char) to_int();
    }

    inline __attribute__((always_inline)) operator signed char () const {
        return (signed char) to_int();
    }

    inline __attribute__((always_inline)) operator unsigned char () const {
        return (unsigned char) to_uint();
    }

    inline __attribute__((always_inline)) operator short () const {
        return (short) to_int();
    }

    inline __attribute__((always_inline)) operator unsigned short () const {
        return (unsigned short) to_uint();
    }


    inline __attribute__((always_inline)) operator int () const {
        return to_int();
    }

    inline __attribute__((always_inline)) operator unsigned int () const {
        return to_uint();
    }


    inline __attribute__((always_inline)) operator long () const {
        return (long)to_int64();
    }

    inline __attribute__((always_inline)) operator unsigned long () const {
        return (unsigned long) to_uint64();
    }
# 5498 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 inline __attribute__((always_inline)) operator unsigned long long () const {
        return to_uint64();
    }

    inline __attribute__((always_inline)) operator long long () const {
        return to_int64();
    }

    inline __attribute__((always_inline)) int length() const { return _AP_W; };



    inline __attribute__((always_inline)) int countLeadingZeros() {
        if (_AP_W <= 32) {
            ap_int_base<32, false> t(-1ULL);
            t.range(_AP_W-1, 0) = this->range(0, _AP_W-1);
            return __builtin_ctz(t.V);
        } else if (_AP_W <= 64) {
            ap_int_base<64, false> t(-1ULL);
            t.range(_AP_W-1, 0) = this->range(0, _AP_W-1);
            return __builtin_ctzll(t.V);
        } else {
            enum { __N = (_AP_W+63)/64 };
            int NZeros = 0;
            unsigned i = 0;
            bool hitNonZero = false;
            for (i=0; i<__N-1; ++i) {
                ap_int_base<64, false> t;
                t.range(0, 63) = this->range(_AP_W - i*64 - 64, _AP_W - i*64 - 1);
                NZeros += hitNonZero?0:__builtin_clzll(t.V);
                hitNonZero |= (t != 0);
            }
            if (!hitNonZero) {
                ap_int_base<64, false> t(-1ULL);
                t.range(63-(_AP_W-1)%64, 63) = this->range(0, (_AP_W-1)%64);
                NZeros += __builtin_clzll(t.V);
            }
            return NZeros;
        }
    }



    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) typename RType<_AP_W2,_AP_I2,_AP_S2>::mult
    operator *(const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op2) const {
        typename RType<_AP_W2,_AP_I2,_AP_S2>::mult r;
        ap_int_base<_AP_W+_AP_W2,_AP_S> OP1;
        OP1.V = Base::V;
        ap_int_base<_AP_W+_AP_W2,_AP_S2> OP2;
        OP2.V = op2.V ;
        r.V = OP1.V * OP2.V;
        return r;
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) typename RType<_AP_W2,_AP_I2,_AP_S2>::div
    operator /(const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op2) const {
        typename RType<_AP_W2,_AP_I2,_AP_S2>::div r;

        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),
                      _AP_I, _AP_S> t(*this);




        r.V = t.V / op2.V;

        return r;
    }
# 5582 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2,_AP_I2,_AP_S2>::plus operator + (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op2) const { ; enum { _AP_F = _AP_W-_AP_I, F2 = _AP_W2-_AP_I2 }; ; typename RType<_AP_W2,_AP_I2,_AP_S2>::plus r, lhs(*this), rhs(op2); ; r.V = lhs.V + rhs.V; return r; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2,_AP_I2,_AP_S2>::minus operator - (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op2) const { ; enum { _AP_F = _AP_W-_AP_I, F2 = _AP_W2-_AP_I2 }; ; typename RType<_AP_W2,_AP_I2,_AP_S2>::minus r, lhs(*this), rhs(op2); ; r.V = lhs.V - rhs.V; return r; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2,_AP_I2,_AP_S2>::logic operator & (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op2) const { ; enum { _AP_F = _AP_W-_AP_I, F2 = _AP_W2-_AP_I2 }; ; typename RType<_AP_W2,_AP_I2,_AP_S2>::logic r, lhs(*this), rhs(op2); ; r.V = lhs.V & rhs.V; return r; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2,_AP_I2,_AP_S2>::logic operator | (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op2) const { ; enum { _AP_F = _AP_W-_AP_I, F2 = _AP_W2-_AP_I2 }; ; typename RType<_AP_W2,_AP_I2,_AP_S2>::logic r, lhs(*this), rhs(op2); ; r.V = lhs.V | rhs.V; return r; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2,_AP_I2,_AP_S2>::logic operator ^ (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op2) const { ; enum { _AP_F = _AP_W-_AP_I, F2 = _AP_W2-_AP_I2 }; ; typename RType<_AP_W2,_AP_I2,_AP_S2>::logic r, lhs(*this), rhs(op2); ; r.V = lhs.V ^ rhs.V; return r; }
# 5600 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator += (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2,_AP_N2>& op2) { ; *this = operator + (op2); return *this; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -= (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2,_AP_N2>& op2) { ; *this = operator - (op2); return *this; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *= (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2,_AP_N2>& op2) { ; *this = operator * (op2); return *this; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /= (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2,_AP_N2>& op2) { ; *this = operator / (op2); return *this; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &= (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2,_AP_N2>& op2) { ; *this = operator & (op2); return *this; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |= (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2,_AP_N2>& op2) { ; *this = operator | (op2); return *this; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^= (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2,_AP_N2>& op2) { ; *this = operator ^ (op2); return *this; }




    inline __attribute__((always_inline)) ap_fixed_base& operator ++() {
        operator+=(ap_fixed_base<_AP_W-_AP_I+1,1,false>(1));
        return *this;
    }
    inline __attribute__((always_inline)) ap_fixed_base& operator --() {
        operator-=(ap_fixed_base<_AP_W-_AP_I+1,1,false>(1));
        return *this;
    }



    inline __attribute__((always_inline)) const ap_fixed_base
    operator ++(int) {
        ap_fixed_base t(*this);
        operator++();
        return t;
    }
    inline __attribute__((always_inline)) const ap_fixed_base
    operator --(int) {
        ap_fixed_base t(*this);
        operator--();
        return t;
    }



    inline __attribute__((always_inline)) ap_fixed_base operator +() {
        return *this;
    }

    inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator -() const {
        ap_fixed_base<_AP_W + 1, _AP_I + 1, true> ret(*this);
        ret.V = - ret.V;
        return ret;
    }

    inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,true,_AP_Q,_AP_O,_AP_N> getNeg() {
        ap_fixed_base<_AP_W,_AP_I,true,_AP_Q,_AP_O,_AP_N> Tmp(*this);
        Tmp.V = -Tmp.V;
        return Tmp;
    }



    inline __attribute__((always_inline)) bool operator !() const {
        return Base::V == 0;
    }



    inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator ~() const {
        ap_fixed_base<_AP_W, _AP_I, _AP_S> ret;
        ret.V=~Base::V;
        return ret;
    }



     template<int _AP_SHIFT>
     inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift () const {
         ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
         r.V = Base::V;
         return r;
     }

     template<int _AP_SHIFT>
     inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift () const {
         ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
         r.V = Base::V;
         return r;
     }

             ap_fixed_base
     operator << (int sh) const {

_ssdm_InlineSelf(0, "");

 ap_fixed_base r;
        bool isNeg = sh & 0x80000000;
        sh = isNeg ? -sh : sh;
        if (isNeg) r.V = Base::V >> sh;
        else r.V = Base::V << sh;
# 5731 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 return r;

    }

    template<int _AP_W2>
    inline __attribute__((always_inline)) ap_fixed_base
    operator << (const ap_int_base<_AP_W2,true>& op2) const {
        int sh = op2.to_int();
        return operator << (sh);
    }

            ap_fixed_base
    operator << (unsigned int sh) const {

_ssdm_InlineSelf(0, "");

 ap_fixed_base r;
        r.V = Base::V << sh;
# 5776 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 return r;
    }

    template<int _AP_W2>
    inline __attribute__((always_inline)) ap_fixed_base
    operator << (const ap_int_base<_AP_W2,false>& op2) const {
        unsigned int sh = op2.to_uint();
        return operator << (sh);
    }

            ap_fixed_base
    operator >> (int sh) const {

_ssdm_InlineSelf(0, "");

 ap_fixed_base r;
        bool isNeg = sh & 0x80000000;
        sh = isNeg ? -sh : sh;
        if (isNeg) r.V = Base::V << sh;
        else r.V = Base::V >> sh;
# 5834 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 return r;
    }

    template<int _AP_W2>
    inline __attribute__((always_inline)) ap_fixed_base
    operator >> (const ap_int_base<_AP_W2,true>& op2) const {
        int sh = op2.to_int();
        return operator >> (sh);
    }

            ap_fixed_base
    operator >> (unsigned sh) const {

_ssdm_InlineSelf(0, "");

 ap_fixed_base r;
        r.V = Base::V >> sh;
# 5866 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 return r;
    }

    template<int _AP_W2>
    inline __attribute__((always_inline)) ap_fixed_base
    operator >> (const ap_int_base<_AP_W2,false>& op2) const {
        unsigned int sh = op2.to_uint();
        return operator >> (sh);
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) ap_fixed_base
    operator >> (const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2,
                 _AP_N2>& op2) {
        return operator >> (op2.to_ap_int_base());
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) ap_fixed_base
    operator << (const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2,
                 _AP_N2>& op2) {
        return operator << (op2.to_ap_int_base());
    }





            ap_fixed_base&
    operator <<= (int sh) {

_ssdm_InlineSelf(0, "");

 if (sh == 0) return *this;
        bool isNeg = sh & 0x80000000;
        sh = isNeg ? -sh : sh;
# 5935 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 if (isNeg) Base::V >>= sh;
        else Base::V <<= sh;
# 5949 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 return *this;
    }

    template<int _AP_W2>
    inline __attribute__((always_inline)) ap_fixed_base&
    operator <<= (const ap_int_base<_AP_W2,true>& op2) {
        int sh = op2.to_int();
        return operator <<= (sh);
    }

            ap_fixed_base&
    operator <<= (unsigned int sh) {

_ssdm_InlineSelf(0, "");
# 5984 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 Base::V <<= sh;
# 5996 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 return *this;
    }

    template<int _AP_W2>
    inline __attribute__((always_inline)) ap_fixed_base&
    operator <<= (const ap_int_base<_AP_W2,false>& op2) {
        unsigned int sh = op2.to_uint();
        return operator <<= (sh);
    }

            ap_fixed_base&
    operator >>= (int sh) {

_ssdm_InlineSelf(0, "");

 if (sh == 0) return *this;
        bool isNeg = sh & 0x80000000;
        sh = isNeg ? -sh : sh;
# 6044 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 if (isNeg) Base::V <<= sh;
        else Base::V >>= sh;
# 6058 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 return *this;
    }

    template<int _AP_W2>
    inline __attribute__((always_inline)) ap_fixed_base&
    operator >>= (const ap_int_base<_AP_W2,true>& op2) {
        int sh = op2.to_int();
        return operator >>= (sh);
    }

            ap_fixed_base&
    operator >>= (unsigned int sh) {

_ssdm_InlineSelf(0, "");
# 6088 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 Base::V >>= sh;




        return *this;
    }

    template<int _AP_W2>
    inline __attribute__((always_inline)) ap_fixed_base&
    operator >>= (const ap_int_base<_AP_W2,false>& op2) {
        unsigned int sh = op2.to_uint();
        return operator >>= (sh);
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) ap_fixed_base&
    operator >>= (const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2,
                 _AP_N2>& op2) {
        return operator >>= (op2.to_ap_int_base());
    }

    template<int _AP_W2, int _AP_I2, bool _AP_S2,
             ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
    inline __attribute__((always_inline)) ap_fixed_base&
    operator <<= (const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2,
                 _AP_N2>& op2) {
        return operator <<= (op2.to_ap_int_base());
    }
# 6135 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator == (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op2) const { const int _AP_F = _AP_W-_AP_I, F2 = _AP_W2-_AP_I2 ; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2+_AP_F-F2) > (1) ? (_AP_W2+_AP_F-F2) : (1)),_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W+F2-_AP_F+1) > (1) ? (_AP_W+F2-_AP_F+1) : (1)),_AP_I+1,_AP_S,_AP_Q,_AP_O, _AP_N>(*this).V == op2.V; return false; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator != (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op2) const { const int _AP_F = _AP_W-_AP_I, F2 = _AP_W2-_AP_I2 ; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2+_AP_F-F2) > (1) ? (_AP_W2+_AP_F-F2) : (1)),_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W+F2-_AP_F+1) > (1) ? (_AP_W+F2-_AP_F+1) : (1)),_AP_I+1,_AP_S,_AP_Q,_AP_O, _AP_N>(*this).V != op2.V; return false; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator > (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op2) const { const int _AP_F = _AP_W-_AP_I, F2 = _AP_W2-_AP_I2 ; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2+_AP_F-F2) > (1) ? (_AP_W2+_AP_F-F2) : (1)),_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W+F2-_AP_F+1) > (1) ? (_AP_W+F2-_AP_F+1) : (1)),_AP_I+1,_AP_S,_AP_Q,_AP_O, _AP_N>(*this).V > op2.V; return false; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >= (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op2) const { const int _AP_F = _AP_W-_AP_I, F2 = _AP_W2-_AP_I2 ; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2+_AP_F-F2) > (1) ? (_AP_W2+_AP_F-F2) : (1)),_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W+F2-_AP_F+1) > (1) ? (_AP_W+F2-_AP_F+1) : (1)),_AP_I+1,_AP_S,_AP_Q,_AP_O, _AP_N>(*this).V >= op2.V; return false; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator < (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op2) const { const int _AP_F = _AP_W-_AP_I, F2 = _AP_W2-_AP_I2 ; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2+_AP_F-F2) > (1) ? (_AP_W2+_AP_F-F2) : (1)),_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W+F2-_AP_F+1) > (1) ? (_AP_W+F2-_AP_F+1) : (1)),_AP_I+1,_AP_S,_AP_Q,_AP_O, _AP_N>(*this).V < op2.V; return false; }
    template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <= (const ap_fixed_base<_AP_W2,_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>& op2) const { const int _AP_F = _AP_W-_AP_I, F2 = _AP_W2-_AP_I2 ; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2+_AP_F-F2) > (1) ? (_AP_W2+_AP_F-F2) : (1)),_AP_I2,_AP_S2,_AP_Q2,_AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W+F2-_AP_F+1) > (1) ? (_AP_W+F2-_AP_F+1) : (1)),_AP_I+1,_AP_S,_AP_Q,_AP_O, _AP_N>(*this).V <= op2.V; return false; }






    inline __attribute__((always_inline)) bool operator == (double d) const { return to_double() == d; }
    inline __attribute__((always_inline)) bool operator != (double d) const { return to_double() != d; }
    inline __attribute__((always_inline)) bool operator > (double d) const { return to_double() > d; }
    inline __attribute__((always_inline)) bool operator >= (double d) const { return to_double() >= d; }
    inline __attribute__((always_inline)) bool operator < (double d) const { return to_double() < d; }
    inline __attribute__((always_inline)) bool operator <= (double d) const { return to_double() <= d; }


    inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N> operator[] (unsigned index) {
                                                                     ;
        return af_bit_ref<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>(this, index);
    }

    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) af_bit_ref<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N> operator [] (const ap_int_base<_AP_W2,_AP_S2>& index) {
                                                                           ;
                                                                     ;
        return af_bit_ref<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>(this, index.to_int());
    }

    inline __attribute__((always_inline)) bool operator [] (unsigned index) const {
                                                                     ;
        return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Result__ = 0; __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), index, index); (bool)(__Result__ & 1); });
    }

    inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N> bit(unsigned index) {
                                                                     ;
        return af_bit_ref<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>(this, index);
    }


    template<int _AP_W2, bool _AP_S2>
    inline __attribute__((always_inline)) af_bit_ref<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N> bit (const ap_int_base<_AP_W2,_AP_S2>& index) {
                                                                           ;
                                                                     ;
        return af_bit_ref<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>(this, index.to_int());
    }

    inline __attribute__((always_inline)) bool bit (unsigned index) const {
                                                                     ;
        return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Result__ = 0; __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), index, index); (bool)(__Result__ & 1); });
    }

    template<int _AP_W2>
    inline __attribute__((always_inline)) af_bit_ref<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N> get_bit (const ap_int_base<_AP_W2, true>& index) {
                                                                                       ;
                                                                     ;
        return af_bit_ref<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>(this, index.to_int() + _AP_W - _AP_I);
    }

    inline __attribute__((always_inline)) bool get_bit (int index) const {
                                                                     ;
                                                                              ;
        return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Result__ = 0; __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), index + _AP_W - _AP_I, index + _AP_W - _AP_I); (bool)(__Result__ & 1); });
    }

    inline __attribute__((always_inline)) af_bit_ref<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N> get_bit (int index) {
                                                                                       ;
                                                                     ;
        return af_bit_ref<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>(this, index + _AP_W - _AP_I);
    }

    template<int _AP_W2>
    inline __attribute__((always_inline)) bool get_bit (const ap_int_base<_AP_W2, true>& index) const {
                                                                     ;
                                                                              ;
        return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Result__ = 0; __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), index.to_int() + _AP_W - _AP_I, index.to_int() + _AP_W - _AP_I); (bool)(__Result__ & 1); });
    }


    inline __attribute__((always_inline)) af_range_ref<_AP_W,_AP_I,_AP_S, _AP_Q, _AP_O, _AP_N>
    range(int Hi, int Lo) {
                                                                           ;
        return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
    }

    inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>
    operator () (int Hi, int Lo) {
                                                                           ;
        return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
    }

    inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>
    range(int Hi, int Lo) const {
                                                                           ;
        return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(const_cast<
               ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>*>(this),
               Hi, Lo);
    }

    template<int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
    inline __attribute__((always_inline)) af_range_ref<_AP_W,_AP_I,_AP_S, _AP_Q, _AP_O, _AP_N>
    range(const ap_int_base<_AP_W2, _AP_S2> &HiIdx,
          const ap_int_base<_AP_W3, _AP_S3> &LoIdx) {
        int Hi = HiIdx.to_int();
        int Lo = LoIdx.to_int();
                                                                           ;
        return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
    }

    template<int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
    inline __attribute__((always_inline)) af_range_ref<_AP_W,_AP_I,_AP_S, _AP_Q, _AP_O, _AP_N>
    operator () (const ap_int_base<_AP_W2, _AP_S2> &HiIdx,
                 const ap_int_base<_AP_W3, _AP_S3> &LoIdx) {
        int Hi = HiIdx.to_int();
        int Lo = LoIdx.to_int();
                                                                           ;
        return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
    }

    template<int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
    inline __attribute__((always_inline)) af_range_ref<_AP_W,_AP_I,_AP_S, _AP_Q, _AP_O, _AP_N>
    range(const ap_int_base<_AP_W2, _AP_S2> &HiIdx,
          const ap_int_base<_AP_W3, _AP_S3> &LoIdx) const {
        int Hi = HiIdx.to_int();
        int Lo = LoIdx.to_int();
                                                                           ;
        return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(const_cast<
               ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>*>(this),
               Hi, Lo);
    }

    template<int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
    inline __attribute__((always_inline)) af_range_ref<_AP_W,_AP_I,_AP_S, _AP_Q, _AP_O, _AP_N>
    operator () (const ap_int_base<_AP_W2, _AP_S2> &HiIdx,
                 const ap_int_base<_AP_W3, _AP_S3> &LoIdx) const {
        int Hi = HiIdx.to_int();
        int Lo = LoIdx.to_int();
        return this->range(Hi, Lo);
    }

    inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>
    operator () (int Hi, int Lo) const {
        return this->range(Hi, Lo);
    }

    inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>
    range() {
        return this->range(_AP_W - 1, 0);
    }

    inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>
    range() const {
        return this->range(_AP_W - 1, 0);
    }

    inline __attribute__((always_inline)) bool is_zero () const {
        return Base::V == 0;
    }

    inline __attribute__((always_inline)) bool is_neg () const {
        if (_AP_S && ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Result__ = 0; __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, _AP_W - 1); (bool)(__Result__ & 1); }))
           return true;
        return false;
    }

    inline __attribute__((always_inline)) int wl () const {
        return _AP_W;
    }

    inline __attribute__((always_inline)) int iwl () const {
        return _AP_I;
    }

    inline __attribute__((always_inline)) ap_q_mode q_mode () const {
        return _AP_Q;
    }

    inline __attribute__((always_inline)) ap_o_mode o_mode () const {
        return _AP_O;
    }

    inline __attribute__((always_inline)) int n_bits () const {
        return _AP_N;
    }

    inline __attribute__((always_inline)) char* to_string(BaseMode mode) {
          return 0;
    }

    inline __attribute__((always_inline)) char* to_string(signed char mode) {
          return to_string(BaseMode(mode));
    }
};

template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q,
         ap_o_mode _AP_O, int _AP_N>
inline __attribute__((always_inline)) void b_not(ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
            const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
    ret.V = ~ op.V;
}

template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q,
         ap_o_mode _AP_O, int _AP_N>
inline __attribute__((always_inline)) void b_and(ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
            const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
            const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
    ret.V = op1.V & op2.V;
}

template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q,
         ap_o_mode _AP_O, int _AP_N>
inline __attribute__((always_inline)) void b_or(ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
            const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
            const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
    ret.V = op1.V | op2.V;
}

template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q,
         ap_o_mode _AP_O, int _AP_N>
inline __attribute__((always_inline)) void b_xor(ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
            const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
            const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
    ret.V = op1.V ^ op2.V;
}

template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q,
         ap_o_mode _AP_O, int _AP_N, int _AP_W2, int _AP_I2,
         bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
            const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    ap_fixed_base<_AP_W2+!_AP_S2, _AP_I2+!_AP_S2, true, _AP_Q2, _AP_O2, _AP_N2> Tmp;
    Tmp.V = - op.V;
    ret = Tmp;
}

template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q,
         ap_o_mode _AP_O, int _AP_N, int _AP_W2, int _AP_I2,
         bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
            const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
            int i) {
    ap_fixed_base<_AP_W2 - _AP_I2 + ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)), ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)), _AP_S2, _AP_Q2, _AP_O2, _AP_N2> Tmp;
    Tmp.V = op.V;
    Tmp.V <<= i;
    ret = Tmp;
}

template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
         int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
         ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
            const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
            int i) {
    ap_fixed_base<_AP_I2 + ((_AP_W - _AP_I) > (_AP_W2 - _AP_I2) ? (_AP_W - _AP_I) : (_AP_W2 - _AP_I2)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> Tmp;
    const int val = _AP_W - _AP_I - (_AP_W2 - _AP_I2);
    Tmp.V = op.V;
    if (val > 0) Tmp.V <<= val;
    Tmp.V >>= i;
    ret = Tmp;
}
# 6408 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<> inline __attribute__((always_inline)) ap_fixed_base<1,1,true,SC_TRN,SC_WRAP>::ap_fixed_base(bool i_op) { Base::V = i_op; } template<> inline __attribute__((always_inline)) ap_fixed_base<1,1,false,SC_TRN,SC_WRAP>::ap_fixed_base(bool i_op) { Base::V = i_op; }
template<> inline __attribute__((always_inline)) ap_fixed_base<8,8,true,SC_TRN,SC_WRAP>::ap_fixed_base(char i_op) { Base::V = i_op; } template<> inline __attribute__((always_inline)) ap_fixed_base<8,8,false,SC_TRN,SC_WRAP>::ap_fixed_base(char i_op) { Base::V = i_op; }
template<> inline __attribute__((always_inline)) ap_fixed_base<8,8,true,SC_TRN,SC_WRAP>::ap_fixed_base(signed char i_op) { Base::V = i_op; } template<> inline __attribute__((always_inline)) ap_fixed_base<8,8,false,SC_TRN,SC_WRAP>::ap_fixed_base(signed char i_op) { Base::V = i_op; }
template<> inline __attribute__((always_inline)) ap_fixed_base<8,8,true,SC_TRN,SC_WRAP>::ap_fixed_base(unsigned char i_op) { Base::V = i_op; } template<> inline __attribute__((always_inline)) ap_fixed_base<8,8,false,SC_TRN,SC_WRAP>::ap_fixed_base(unsigned char i_op) { Base::V = i_op; }
template<> inline __attribute__((always_inline)) ap_fixed_base<16,16,true,SC_TRN,SC_WRAP>::ap_fixed_base(signed short i_op) { Base::V = i_op; } template<> inline __attribute__((always_inline)) ap_fixed_base<16,16,false,SC_TRN,SC_WRAP>::ap_fixed_base(signed short i_op) { Base::V = i_op; }
template<> inline __attribute__((always_inline)) ap_fixed_base<16,16,true,SC_TRN,SC_WRAP>::ap_fixed_base(unsigned short i_op) { Base::V = i_op; } template<> inline __attribute__((always_inline)) ap_fixed_base<16,16,false,SC_TRN,SC_WRAP>::ap_fixed_base(unsigned short i_op) { Base::V = i_op; }
template<> inline __attribute__((always_inline)) ap_fixed_base<32,32,true,SC_TRN,SC_WRAP>::ap_fixed_base(signed int i_op) { Base::V = i_op; } template<> inline __attribute__((always_inline)) ap_fixed_base<32,32,false,SC_TRN,SC_WRAP>::ap_fixed_base(signed int i_op) { Base::V = i_op; }
template<> inline __attribute__((always_inline)) ap_fixed_base<32,32,true,SC_TRN,SC_WRAP>::ap_fixed_base(unsigned int i_op) { Base::V = i_op; } template<> inline __attribute__((always_inline)) ap_fixed_base<32,32,false,SC_TRN,SC_WRAP>::ap_fixed_base(unsigned int i_op) { Base::V = i_op; }

template<> inline __attribute__((always_inline)) ap_fixed_base<64,64,true,SC_TRN,SC_WRAP>::ap_fixed_base(long i_op) { Base::V = i_op; } template<> inline __attribute__((always_inline)) ap_fixed_base<64,64,false,SC_TRN,SC_WRAP>::ap_fixed_base(long i_op) { Base::V = i_op; }
template<> inline __attribute__((always_inline)) ap_fixed_base<64,64,true,SC_TRN,SC_WRAP>::ap_fixed_base(unsigned long i_op) { Base::V = i_op; } template<> inline __attribute__((always_inline)) ap_fixed_base<64,64,false,SC_TRN,SC_WRAP>::ap_fixed_base(unsigned long i_op) { Base::V = i_op; }




template<> inline __attribute__((always_inline)) ap_fixed_base<64,64,true,SC_TRN,SC_WRAP>::ap_fixed_base(ap_slong i_op) { Base::V = i_op; } template<> inline __attribute__((always_inline)) ap_fixed_base<64,64,false,SC_TRN,SC_WRAP>::ap_fixed_base(ap_slong i_op) { Base::V = i_op; }
template<> inline __attribute__((always_inline)) ap_fixed_base<64,64,true,SC_TRN,SC_WRAP>::ap_fixed_base(ap_ulong i_op) { Base::V = i_op; } template<> inline __attribute__((always_inline)) ap_fixed_base<64,64,false,SC_TRN,SC_WRAP>::ap_fixed_base(ap_ulong i_op) { Base::V = i_op; }




template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q,
         ap_o_mode _AP_O, int _AP_N>
inline __attribute__((always_inline)) std::ostream&
operator << (std::ostream& os, const ap_fixed_base<_AP_W,_AP_I,
             _AP_S,_AP_Q,_AP_O, _AP_N>& x) {

    return os;
}



template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q,
         ap_o_mode _AP_O, int _AP_N>
inline __attribute__((always_inline)) std::istream&
operator >> (std::istream& in, ap_fixed_base<_AP_W,_AP_I,
             _AP_S,_AP_Q,_AP_O, _AP_N>& x) {





    return in;
}
# 6526 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::plus operator + ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator + (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::plus operator + ( bool i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<1,1,false>(i_op).operator + (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::minus operator - ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator - (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::minus operator - ( bool i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<1,1,false>(i_op).operator - (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::mult operator * ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator * (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::mult operator * ( bool i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<1,1,false>(i_op).operator * (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::div operator / ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator / (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::div operator / ( bool i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<1,1,false>(i_op).operator / (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::arg1 operator >> ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator >> (ap_int_base<1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::arg1 operator << ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator << (ap_int_base<1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::logic operator & ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator & (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::logic operator & ( bool i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<1,1,false>(i_op).operator & (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::logic operator | ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator | (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::logic operator | ( bool i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<1,1,false>(i_op).operator | (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::logic operator ^ ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator ^ (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<1,1,false>(i_op).operator ^ (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator == (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<1,1,false>(i_op).operator == (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator != (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<1,1,false>(i_op).operator != (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator > (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<1,1,false>(i_op).operator > (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator >= (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<1,1,false>(i_op).operator >= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator < (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( bool i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<1,1,false>(i_op).operator < (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator <= (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( bool i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<1,1,false>(i_op).operator <= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator += ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator += (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator -= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -= (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator *= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *= (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator /= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /= (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator >>= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator >>= (ap_int_base<1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator <<= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, bool i_op) { return op.operator <<= (ap_int_base<1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator &= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &= (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator |= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |= (ap_fixed_base<1,1,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator ^= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^= (ap_fixed_base<1,1,false>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::plus operator + ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator + (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::plus operator + ( char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator + (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::minus operator - ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator - (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::minus operator - ( char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator - (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::mult operator * ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator * (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::mult operator * ( char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator * (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::div operator / ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator / (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::div operator / ( char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator / (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::arg1 operator >> ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator >> (ap_int_base<8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::arg1 operator << ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator << (ap_int_base<8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::logic operator & ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator & (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::logic operator & ( char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator & (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::logic operator | ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator | (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::logic operator | ( char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator | (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::logic operator ^ ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator ^ (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator ^ (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator == (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator == (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator != (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator != (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator > (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator > (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator >= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator >= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator < (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator < (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator <= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator <= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator += ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator += (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator -= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator *= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator /= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator >>= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator >>= (ap_int_base<8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator <<= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, char i_op) { return op.operator <<= (ap_int_base<8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator &= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator |= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator ^= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^= (ap_fixed_base<8,8,true>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::plus operator + ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator + (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator + (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::minus operator - ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator - (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator - (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::mult operator * ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator * (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator * (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::div operator / ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator / (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::div operator / ( signed char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator / (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::arg1 operator >> ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator >> (ap_int_base<8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::arg1 operator << ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator << (ap_int_base<8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::logic operator & ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator & (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::logic operator & ( signed char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator & (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::logic operator | ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator | (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator | (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::logic operator ^ ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator ^ (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator ^ (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator == (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator == (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator != (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator != (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator > (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator > (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator >= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator >= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator < (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( signed char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator < (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator <= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( signed char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,true>(i_op).operator <= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator += ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator += (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator -= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator *= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator /= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator >>= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator >>= (ap_int_base<8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator <<= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed char i_op) { return op.operator <<= (ap_int_base<8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator &= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator |= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |= (ap_fixed_base<8,8,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator ^= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^= (ap_fixed_base<8,8,true>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::plus operator + ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator + (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,false>(i_op).operator + (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::minus operator - ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator - (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,false>(i_op).operator - (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::mult operator * ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator * (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,false>(i_op).operator * (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::div operator / ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator / (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,false>(i_op).operator / (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::arg1 operator >> ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >> (ap_int_base<8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::arg1 operator << ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator << (ap_int_base<8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::logic operator & ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator & (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::logic operator & ( unsigned char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,false>(i_op).operator & (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::logic operator | ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator | (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,false>(i_op).operator | (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::logic operator ^ ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^ (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<8,8,false>(i_op).operator ^ (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator == (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,false>(i_op).operator == (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator != (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,false>(i_op).operator != (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator > (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,false>(i_op).operator > (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >= (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,false>(i_op).operator >= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator < (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( unsigned char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,false>(i_op).operator < (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <= (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( unsigned char i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<8,8,false>(i_op).operator <= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator += ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator += (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator -= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -= (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator *= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *= (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator /= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /= (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator >>= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>= (ap_int_base<8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator <<= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<= (ap_int_base<8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator &= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &= (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator |= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |= (ap_fixed_base<8,8,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator ^= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^= (ap_fixed_base<8,8,false>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::plus operator + ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator + (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,true>(i_op).operator + (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::minus operator - ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator - (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,true>(i_op).operator - (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::mult operator * ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator * (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,true>(i_op).operator * (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::div operator / ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator / (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::div operator / ( signed short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,true>(i_op).operator / (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::arg1 operator >> ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator >> (ap_int_base<16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::arg1 operator << ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator << (ap_int_base<16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::logic operator & ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator & (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::logic operator & ( signed short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,true>(i_op).operator & (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::logic operator | ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator | (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,true>(i_op).operator | (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::logic operator ^ ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator ^ (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,true>(i_op).operator ^ (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator == (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<16,16,true>(i_op).operator == (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator != (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<16,16,true>(i_op).operator != (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator > (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<16,16,true>(i_op).operator > (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator >= (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<16,16,true>(i_op).operator >= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator < (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( signed short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<16,16,true>(i_op).operator < (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator <= (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( signed short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<16,16,true>(i_op).operator <= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator += ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed short i_op) { return op.operator += (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator -= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed short i_op) { return op.operator -= (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator *= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed short i_op) { return op.operator *= (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator /= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed short i_op) { return op.operator /= (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator >>= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator >>= (ap_int_base<16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator <<= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, signed short i_op) { return op.operator <<= (ap_int_base<16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator &= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed short i_op) { return op.operator &= (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator |= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed short i_op) { return op.operator |= (ap_fixed_base<16,16,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator ^= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, signed short i_op) { return op.operator ^= (ap_fixed_base<16,16,true>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::plus operator + ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator + (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,false>(i_op).operator + (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::minus operator - ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator - (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,false>(i_op).operator - (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::mult operator * ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator * (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::mult operator * ( unsigned short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,false>(i_op).operator * (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::div operator / ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator / (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,false>(i_op).operator / (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::arg1 operator >> ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >> (ap_int_base<16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::arg1 operator << ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator << (ap_int_base<16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::logic operator & ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator & (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::logic operator & ( unsigned short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,false>(i_op).operator & (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::logic operator | ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator | (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,false>(i_op).operator | (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::logic operator ^ ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^ (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<16,16,false>(i_op).operator ^ (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator == (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<16,16,false>(i_op).operator == (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator != (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<16,16,false>(i_op).operator != (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator > (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<16,16,false>(i_op).operator > (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >= (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<16,16,false>(i_op).operator >= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator < (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( unsigned short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<16,16,false>(i_op).operator < (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <= (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( unsigned short i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<16,16,false>(i_op).operator <= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator += ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator += (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator -= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -= (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator *= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *= (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator /= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /= (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator >>= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>= (ap_int_base<16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator <<= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<= (ap_int_base<16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator &= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &= (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator |= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |= (ap_fixed_base<16,16,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator ^= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^= (ap_fixed_base<16,16,false>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::plus operator + ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator + (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::plus operator + ( int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,true>(i_op).operator + (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::minus operator - ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator - (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::minus operator - ( int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,true>(i_op).operator - (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::mult operator * ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator * (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::mult operator * ( int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,true>(i_op).operator * (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::div operator / ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator / (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::div operator / ( int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,true>(i_op).operator / (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::arg1 operator >> ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator >> (ap_int_base<32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::arg1 operator << ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator << (ap_int_base<32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::logic operator & ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator & (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::logic operator & ( int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,true>(i_op).operator & (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::logic operator | ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator | (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::logic operator | ( int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,true>(i_op).operator | (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::logic operator ^ ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator ^ (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,true>(i_op).operator ^ (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator == (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<32,32,true>(i_op).operator == (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator != (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<32,32,true>(i_op).operator != (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator > (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<32,32,true>(i_op).operator > (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator >= (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<32,32,true>(i_op).operator >= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator < (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<32,32,true>(i_op).operator < (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator <= (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<32,32,true>(i_op).operator <= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator += ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator += (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator -= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -= (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator *= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *= (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator /= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /= (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator >>= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator >>= (ap_int_base<32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator <<= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, int i_op) { return op.operator <<= (ap_int_base<32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator &= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &= (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator |= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |= (ap_fixed_base<32,32,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator ^= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^= (ap_fixed_base<32,32,true>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::plus operator + ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator + (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,false>(i_op).operator + (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::minus operator - ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator - (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,false>(i_op).operator - (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::mult operator * ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator * (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,false>(i_op).operator * (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::div operator / ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator / (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,false>(i_op).operator / (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::arg1 operator >> ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >> (ap_int_base<32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::arg1 operator << ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator << (ap_int_base<32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::logic operator & ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator & (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::logic operator & ( unsigned int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,false>(i_op).operator & (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::logic operator | ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator | (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,false>(i_op).operator | (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::logic operator ^ ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^ (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<32,32,false>(i_op).operator ^ (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator == (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<32,32,false>(i_op).operator == (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator != (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<32,32,false>(i_op).operator != (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator > (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<32,32,false>(i_op).operator > (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >= (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<32,32,false>(i_op).operator >= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator < (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( unsigned int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<32,32,false>(i_op).operator < (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <= (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( unsigned int i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<32,32,false>(i_op).operator <= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator += ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator += (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator -= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -= (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator *= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *= (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator /= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /= (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator >>= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>= (ap_int_base<32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator <<= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<= (ap_int_base<32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator &= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &= (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator |= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |= (ap_fixed_base<32,32,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator ^= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^= (ap_fixed_base<32,32,false>(i_op)); }

template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::plus operator + ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator + (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::plus operator + ( long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator + (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::minus operator - ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator - (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::minus operator - ( long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator - (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::mult operator * ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator * (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::mult operator * ( long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator * (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::div operator / ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator / (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::div operator / ( long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator / (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::arg1 operator >> ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator >> (ap_int_base<64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::arg1 operator << ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator << (ap_int_base<64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::logic operator & ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator & (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::logic operator & ( long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator & (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::logic operator | ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator | (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::logic operator | ( long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator | (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::logic operator ^ ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator ^ (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator ^ (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator == (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator == (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator != (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator != (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator > (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator > (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator >= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator >= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator < (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator < (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator <= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator <= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator += ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator += (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator -= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator *= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator /= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator >>= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator >>= (ap_int_base<64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator <<= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, long i_op) { return op.operator <<= (ap_int_base<64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator &= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator |= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator ^= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^= (ap_fixed_base<64,64,true>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::plus operator + ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator + (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator + (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::minus operator - ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator - (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator - (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::mult operator * ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator * (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::mult operator * ( unsigned long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator * (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::div operator / ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator / (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator / (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::arg1 operator >> ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >> (ap_int_base<64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::arg1 operator << ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator << (ap_int_base<64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::logic operator & ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator & (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::logic operator & ( unsigned long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator & (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::logic operator | ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator | (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator | (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::logic operator ^ ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^ (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator ^ (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator == (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator == (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator != (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator != (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator > (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator > (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator >= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator < (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( unsigned long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator < (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( unsigned long i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator <= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator += ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator += (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator -= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator *= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator /= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator >>= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>= (ap_int_base<64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator <<= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<= (ap_int_base<64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator &= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator |= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator ^= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^= (ap_fixed_base<64,64,false>(i_op)); }




template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::plus operator + ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator + (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator + (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::minus operator - ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator - (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator - (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::mult operator * ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator * (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator * (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::div operator / ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator / (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator / (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::arg1 operator >> ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >> (ap_int_base<64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::arg1 operator << ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator << (ap_int_base<64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::logic operator & ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator & (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::logic operator & ( ap_slong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator & (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::logic operator | ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator | (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator | (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::logic operator ^ ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^ (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator ^ (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator == (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator == (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator != (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator != (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator > (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator > (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator >= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator < (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( ap_slong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator < (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( ap_slong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,true>(i_op).operator <= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator += ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator += (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator -= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator *= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator /= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator >>= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>= (ap_int_base<64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator <<= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<= (ap_int_base<64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator &= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator |= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |= (ap_fixed_base<64,64,true>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator ^= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^= (ap_fixed_base<64,64,true>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::plus operator + ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator + (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator + (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::minus operator - ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator - (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator - (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::mult operator * ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator * (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator * (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::div operator / ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator / (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator / (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::arg1 operator >> ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >> (ap_int_base<64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::arg1 operator << ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator << (ap_int_base<64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::logic operator & ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator & (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::logic operator & ( ap_ulong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator & (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::logic operator | ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator | (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator | (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::logic operator ^ ( const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W,_AP_I,_AP_S>::template RType<64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator ^ (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator == (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator == (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator != (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator != (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator > (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator > (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator >= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator < (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( ap_ulong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator < (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( ap_ulong i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<64,64,false>(i_op).operator <= (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator += ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator += (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator -= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator *= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator /= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator >>= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>= (ap_int_base<64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& operator <<= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<= (ap_int_base<64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator &= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator |= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |= (ap_fixed_base<64,64,false>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& operator ^= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base<64,64,false>(i_op)); }
# 6576 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>::template RType<_AP_W,_AP_I,_AP_S>::plus operator + ( const ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op).operator + (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType<_AP_W2,_AP_W2,_AP_S2>::plus operator + ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator + (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>::template RType<_AP_W,_AP_I,_AP_S>::minus operator - ( const ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op).operator - (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType<_AP_W2,_AP_W2,_AP_S2>::minus operator - ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator - (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>::template RType<_AP_W,_AP_I,_AP_S>::mult operator * ( const ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op).operator * (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType<_AP_W2,_AP_W2,_AP_S2>::mult operator * ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator * (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>::template RType<_AP_W,_AP_I,_AP_S>::div operator / ( const ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op).operator / (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType<_AP_W2,_AP_W2,_AP_S2>::div operator / ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator / (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>::template RType<_AP_W,_AP_I,_AP_S>::logic operator & ( const ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op).operator & (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType<_AP_W2,_AP_W2,_AP_S2>::logic operator & ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator & (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>::template RType<_AP_W,_AP_I,_AP_S>::logic operator | ( const ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op).operator | (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType<_AP_W2,_AP_W2,_AP_S2>::logic operator | ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator | (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>::template RType<_AP_W,_AP_I,_AP_S>::logic operator ^ ( const ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op).operator ^ (op); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType<_AP_W2,_AP_W2,_AP_S2>::logic operator ^ ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator ^ (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); }

template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator == ( ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op) { return ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op).operator == (op); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator != ( ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op) { return ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op).operator != (op); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator > ( ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op) { return ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op).operator > (op); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator >= ( ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op) { return ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op).operator >= (op); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator < ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator < ( ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op) { return ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op).operator < (op); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <= ( const ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator <= ( ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op) { return ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op).operator <= (op); }

template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& operator += ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator += (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2,_AP_S2>& operator += ( ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return i_op.operator += (op.to_ap_int_base()); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& operator -= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator -= (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2,_AP_S2>& operator -= ( ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return i_op.operator -= (op.to_ap_int_base()); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& operator *= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator *= (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2,_AP_S2>& operator *= ( ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return i_op.operator *= (op.to_ap_int_base()); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& operator /= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator /= (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2,_AP_S2>& operator /= ( ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return i_op.operator /= (op.to_ap_int_base()); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& operator &= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator &= (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2,_AP_S2>& operator &= ( ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return i_op.operator &= (op.to_ap_int_base()); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& operator |= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator |= (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2,_AP_S2>& operator |= ( ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return i_op.operator |= (op.to_ap_int_base()); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& operator ^= ( ap_fixed_base<_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op, const ap_int_base<_AP_W2,_AP_S2>& i_op) { return op.operator ^= (ap_fixed_base<_AP_W2,_AP_W2,_AP_S2>(i_op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2,_AP_S2>& operator ^= ( ap_int_base<_AP_W2,_AP_S2>& i_op, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op) { return i_op.operator ^= (op.to_ap_int_base()); }


template<int _AP_W, int _AP_I, bool _AP_S,
         ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((always_inline)) bool operator == ( double op1, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op2) {
  return op2.operator == (op1);
}
template<int _AP_W, int _AP_I, bool _AP_S,
         ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((always_inline)) bool operator != ( double op1, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op2) {
  return op2.operator != (op1);
}
template<int _AP_W, int _AP_I, bool _AP_S,
        ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((always_inline)) bool operator > ( double op1, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op2) {
  return op2.operator < (op1);
}
template<int _AP_W, int _AP_I, bool _AP_S,
         ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((always_inline)) bool operator >= ( double op1, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>& op2) {
  return op2.operator <= (op1);
}
template<int _AP_W, int _AP_I, bool _AP_S,
        ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((always_inline)) bool operator < ( double op1, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op2) {
  return op2.operator > (op1);
}
template<int _AP_W, int _AP_I, bool _AP_S,
         ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((always_inline)) bool operator <= ( double op1, const ap_fixed_base<_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,_AP_N>& op2) {
  return op2.operator >= (op1);
}
# 6661 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<1,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<1,false>(op2).operator > (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, bool op2) { return (bool(op)) > op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 > (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<1,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<1,false>(op2).operator < (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, bool op2) { return (bool(op)) < op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 < (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<1,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<1,false>(op2).operator >= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, bool op2) { return (bool(op)) >= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 >= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<1,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<1,false>(op2).operator <= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, bool op2) { return (bool(op)) <= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 <= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<1,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<1,false>(op2).operator == (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, bool op2) { return (bool(op)) == op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 == (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, bool op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<1,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<1,false>(op2).operator != (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, bool op2) { return (bool(op)) != op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 != (bool(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, char op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<8,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,true>(op2).operator > (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, char op2) { return (bool(op)) > op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 > (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, char op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<8,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,true>(op2).operator < (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, char op2) { return (bool(op)) < op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 < (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, char op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<8,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,true>(op2).operator >= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, char op2) { return (bool(op)) >= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 >= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, char op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<8,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,true>(op2).operator <= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, char op2) { return (bool(op)) <= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 <= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, char op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<8,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,true>(op2).operator == (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, char op2) { return (bool(op)) == op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 == (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, char op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<8,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,true>(op2).operator != (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, char op2) { return (bool(op)) != op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 != (bool(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<8,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,true>(op2).operator > (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, signed char op2) { return (bool(op)) > op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 > (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<8,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,true>(op2).operator < (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, signed char op2) { return (bool(op)) < op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 < (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<8,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,true>(op2).operator >= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, signed char op2) { return (bool(op)) >= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 >= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<8,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,true>(op2).operator <= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, signed char op2) { return (bool(op)) <= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 <= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<8,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,true>(op2).operator == (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, signed char op2) { return (bool(op)) == op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 == (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, signed char op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<8,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,true>(op2).operator != (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, signed char op2) { return (bool(op)) != op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 != (bool(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<8,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,false>(op2).operator > (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned char op2) { return (bool(op)) > op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 > (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<8,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,false>(op2).operator < (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned char op2) { return (bool(op)) < op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 < (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<8,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,false>(op2).operator >= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned char op2) { return (bool(op)) >= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 >= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<8,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,false>(op2).operator <= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned char op2) { return (bool(op)) <= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 <= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<8,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,false>(op2).operator == (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned char op2) { return (bool(op)) == op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 == (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned char op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<8,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<8,false>(op2).operator != (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned char op2) { return (bool(op)) != op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 != (bool(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, short op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<16,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<16,true>(op2).operator > (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, short op2) { return (bool(op)) > op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 > (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, short op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<16,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<16,true>(op2).operator < (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, short op2) { return (bool(op)) < op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 < (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, short op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<16,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<16,true>(op2).operator >= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, short op2) { return (bool(op)) >= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 >= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, short op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<16,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<16,true>(op2).operator <= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, short op2) { return (bool(op)) <= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 <= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, short op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<16,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<16,true>(op2).operator == (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, short op2) { return (bool(op)) == op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 == (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, short op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<16,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<16,true>(op2).operator != (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, short op2) { return (bool(op)) != op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 != (bool(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<16,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<16,false>(op2).operator > (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned short op2) { return (bool(op)) > op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 > (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<16,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<16,false>(op2).operator < (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned short op2) { return (bool(op)) < op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 < (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<16,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<16,false>(op2).operator >= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned short op2) { return (bool(op)) >= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 >= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<16,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<16,false>(op2).operator <= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned short op2) { return (bool(op)) <= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 <= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<16,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<16,false>(op2).operator == (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned short op2) { return (bool(op)) == op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 == (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned short op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<16,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<16,false>(op2).operator != (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned short op2) { return (bool(op)) != op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 != (bool(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, int op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<32,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,true>(op2).operator > (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, int op2) { return (bool(op)) > op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 > (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, int op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<32,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,true>(op2).operator < (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, int op2) { return (bool(op)) < op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 < (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, int op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<32,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,true>(op2).operator >= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, int op2) { return (bool(op)) >= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 >= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, int op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<32,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,true>(op2).operator <= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, int op2) { return (bool(op)) <= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 <= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, int op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<32,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,true>(op2).operator == (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, int op2) { return (bool(op)) == op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 == (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, int op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<32,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,true>(op2).operator != (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, int op2) { return (bool(op)) != op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 != (bool(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<32,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,false>(op2).operator > (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned int op2) { return (bool(op)) > op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 > (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<32,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,false>(op2).operator < (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned int op2) { return (bool(op)) < op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 < (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<32,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,false>(op2).operator >= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned int op2) { return (bool(op)) >= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 >= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<32,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,false>(op2).operator <= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned int op2) { return (bool(op)) <= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 <= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<32,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,false>(op2).operator == (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned int op2) { return (bool(op)) == op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 == (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned int op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<32,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,false>(op2).operator != (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned int op2) { return (bool(op)) != op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 != (bool(op)); }

template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, long op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<32,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,true>(op2).operator > (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, long op2) { return (bool(op)) > op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 > (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, long op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<32,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,true>(op2).operator < (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, long op2) { return (bool(op)) < op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 < (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, long op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<32,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,true>(op2).operator >= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, long op2) { return (bool(op)) >= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 >= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, long op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<32,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,true>(op2).operator <= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, long op2) { return (bool(op)) <= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 <= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, long op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<32,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,true>(op2).operator == (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, long op2) { return (bool(op)) == op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 == (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, long op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<32,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,true>(op2).operator != (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, long op2) { return (bool(op)) != op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 != (bool(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<32,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,false>(op2).operator > (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned long op2) { return (bool(op)) > op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 > (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<32,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,false>(op2).operator < (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned long op2) { return (bool(op)) < op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 < (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<32,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,false>(op2).operator >= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned long op2) { return (bool(op)) >= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 >= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<32,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,false>(op2).operator <= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned long op2) { return (bool(op)) <= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 <= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<32,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,false>(op2).operator == (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned long op2) { return (bool(op)) == op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 == (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned long op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<32,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<32,false>(op2).operator != (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, unsigned long op2) { return (bool(op)) != op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 != (bool(op)); }




template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<64,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<64,true>(op2).operator > (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_slong op2) { return (bool(op)) > op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 > (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<64,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<64,true>(op2).operator < (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_slong op2) { return (bool(op)) < op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 < (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<64,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<64,true>(op2).operator >= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_slong op2) { return (bool(op)) >= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 >= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<64,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<64,true>(op2).operator <= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_slong op2) { return (bool(op)) <= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 <= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<64,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<64,true>(op2).operator == (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_slong op2) { return (bool(op)) == op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 == (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_slong op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<64,true>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<64,true>(op2).operator != (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_slong op2) { return (bool(op)) != op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 != (bool(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)).operator > (ap_int_base<64,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<64,false>(op2).operator > (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_ulong op2) { return (bool(op)) > op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 > (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)).operator < (ap_int_base<64,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<64,false>(op2).operator < (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_ulong op2) { return (bool(op)) < op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator < ( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 < (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (ap_int_base<64,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<64,false>(op2).operator >= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_ulong op2) { return (bool(op)) >= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 >= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (ap_int_base<64,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<64,false>(op2).operator <= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_ulong op2) { return (bool(op)) <= op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <= ( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 <= (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)).operator == (ap_int_base<64,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<64,false>(op2).operator == (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_ulong op2) { return (bool(op)) == op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 == (bool(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_ulong op2) { return (ap_int_base<_AP_W, false>(op)).operator != (ap_int_base<64,false>(op2)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return ap_int_base<64,false>(op2).operator != (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, ap_ulong op2) { return (bool(op)) != op2; } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2 != (bool(op)); }
# 6701 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator > ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, const ap_int_base<_AP_W2, _AP_S> &op2) { return (ap_int_base<_AP_W, false>(op)).operator > (op2); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator > (const ap_int_base<_AP_W2, _AP_S2> &op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2.operator > (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator > ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, const ap_int_base<_AP_W2, _AP_S2> &op2) { return (ap_int_base<1, false>(op)).operator > (op2); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator > ( const ap_int_base<_AP_W2, _AP_S2> &op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2.operator > (ap_int_base<1,false>(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator < ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, const ap_int_base<_AP_W2, _AP_S> &op2) { return (ap_int_base<_AP_W, false>(op)).operator < (op2); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator < (const ap_int_base<_AP_W2, _AP_S2> &op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2.operator < (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator < ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, const ap_int_base<_AP_W2, _AP_S2> &op2) { return (ap_int_base<1, false>(op)).operator < (op2); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator < ( const ap_int_base<_AP_W2, _AP_S2> &op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2.operator < (ap_int_base<1,false>(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, const ap_int_base<_AP_W2, _AP_S> &op2) { return (ap_int_base<_AP_W, false>(op)).operator >= (op2); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >= (const ap_int_base<_AP_W2, _AP_S2> &op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2.operator >= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, const ap_int_base<_AP_W2, _AP_S2> &op2) { return (ap_int_base<1, false>(op)).operator >= (op2); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >= ( const ap_int_base<_AP_W2, _AP_S2> &op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2.operator >= (ap_int_base<1,false>(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <= ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, const ap_int_base<_AP_W2, _AP_S> &op2) { return (ap_int_base<_AP_W, false>(op)).operator <= (op2); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <= (const ap_int_base<_AP_W2, _AP_S2> &op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2.operator <= (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <= ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, const ap_int_base<_AP_W2, _AP_S2> &op2) { return (ap_int_base<1, false>(op)).operator <= (op2); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <= ( const ap_int_base<_AP_W2, _AP_S2> &op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2.operator <= (ap_int_base<1,false>(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator == ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, const ap_int_base<_AP_W2, _AP_S> &op2) { return (ap_int_base<_AP_W, false>(op)).operator == (op2); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator == (const ap_int_base<_AP_W2, _AP_S2> &op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2.operator == (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator == ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, const ap_int_base<_AP_W2, _AP_S2> &op2) { return (ap_int_base<1, false>(op)).operator == (op2); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator == ( const ap_int_base<_AP_W2, _AP_S2> &op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2.operator == (ap_int_base<1,false>(op)); }
template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator != ( const af_range_ref<_AP_W,_AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, const ap_int_base<_AP_W2, _AP_S> &op2) { return (ap_int_base<_AP_W, false>(op)).operator != (op2); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator != (const ap_int_base<_AP_W2, _AP_S2> &op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2.operator != (ap_int_base<_AP_W, false>(op)); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator != ( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op, const ap_int_base<_AP_W2, _AP_S2> &op2) { return (ap_int_base<1, false>(op)).operator != (op2); } template<int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator != ( const ap_int_base<_AP_W2, _AP_S2> &op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op) { return op2.operator != (ap_int_base<1,false>(op)); }
# 6716 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
template<int _AP_W>
struct ap_int: ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int(): Base() {}
  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2> &op) {Base::V = op.V;}

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2> &op) {Base::V = op.V;}

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2> &op) { Base::V = op.V;}

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2> &op) { Base::V = op.V;}

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref):Base(ref) {}

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref):Base(ref) {}

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref):Base(ref) {}

  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
    :Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
    :Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
    :Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
    :Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {}


  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op){ Base::V = op.V; }

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2,
  _AP_N2>& op):Base(op) {}

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2,
  _AP_N2>& op):Base(op) {}

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2,
  _AP_Q2, _AP_O2, _AP_N2>& op):Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) {Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) {Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) {Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) {Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) {Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) {Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) {Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) {Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) {Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long long val) {Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long long val) {Base::V = val; }
  inline __attribute__((always_inline)) ap_int(half val) {Base::V = val; }
  inline __attribute__((always_inline)) ap_int(float val) {Base::V = val; }
  inline __attribute__((always_inline)) ap_int(double val) {Base::V = val; }

  inline __attribute__((always_inline)) ap_int(const char* str):Base(str) {}
  inline __attribute__((always_inline)) ap_int(const char* str, signed char radix):Base(str, radix) {}
# 6810 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 inline __attribute__((always_inline)) void operator = (const ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator = (const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) ap_int& operator = (const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int& operator = (const ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }

};



template<int _AP_W>
struct ap_uint: ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint(): Base() {}
  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2> &op) { Base::V = op.V; }

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2> &op) { Base::V = op.V;}

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2> &op) { Base::V = op.V; }

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2> &op) { Base::V = op.V;}

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref):Base(ref) {}

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref):Base(ref) {}

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref):Base(ref) {}

  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
    :Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
    :Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
    :Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
    :Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op){ Base::V = op.V;}

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2,
   _AP_N2>& op):Base(op) {}

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2,
   _AP_N2>& op):Base(op) {}

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2,
   _AP_Q2, _AP_O2, _AP_N2>& op):Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(half val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(float val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(double val) { Base::V = val; }

  inline __attribute__((always_inline)) ap_uint(const char* str):Base(str) {}
  inline __attribute__((always_inline)) ap_uint(const char* str, signed char radix):Base(str, radix) {}
# 6924 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 inline __attribute__((always_inline)) void operator = (const ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator = (const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) ap_uint& operator = (const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_uint& operator = (const ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }

};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {

  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;

  inline __attribute__((always_inline)) ap_fixed():Base() {}

  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2,
    _AP_O2, _AP_N2>& op): Base(ap_fixed_base<_AP_W2, _AP_I2,
          true, _AP_Q2, _AP_O2, _AP_N2>(op)) {}

  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2,
    _AP_N2>& op): Base(ap_fixed_base<_AP_W2, _AP_I2,
         false, _AP_Q2, _AP_O2, _AP_N2>(op)) {}

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int<_AP_W2>& op):
    Base(ap_int_base<_AP_W2, true>(op)) {}

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed(const ap_uint<_AP_W2>& op):
    Base(ap_int_base<_AP_W2, false>(op)) {}
  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2,
    _AP_O2, _AP_N2>& op): Base(ap_fixed_base<_AP_W2, _AP_I2,
          true, _AP_Q2, _AP_O2, _AP_N2>(op)) {}

  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2,
    _AP_N2>& op): Base(ap_fixed_base<_AP_W2, _AP_I2,
         false, _AP_Q2, _AP_O2, _AP_N2>(op)) {}

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int<_AP_W2>& op):
    Base(ap_int_base<_AP_W2, true>(op)) {}

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_uint<_AP_W2>& op):
    Base(ap_int_base<_AP_W2, false>(op)) {}
  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2,
    _AP_Q2, _AP_O2, _AP_N2>& op):Base(op) {}

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op):
    Base(op) {}

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op):
    Base(op) {}

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op):
    Base(op) {}

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
    _AP_Q2, _AP_O2, _AP_N2>& op): Base(op) {}

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const af_range_ref<_AP_W2, _AP_I2, _AP_S2,
    _AP_Q2, _AP_O2, _AP_N2>& op): Base(op) {}

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op): Base(op) {}



  inline __attribute__((always_inline)) ap_fixed(bool v):Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v):Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v):Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v):Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v):Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v):Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v):Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v):Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v):Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long long v):Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long long v):Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v):Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v):Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v):Base(v) {}

  inline __attribute__((always_inline)) ap_fixed(const char* str):Base(str) {}
  inline __attribute__((always_inline)) ap_fixed(const char* str, signed char radix):Base(str, radix) {}
# 7050 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 inline __attribute__((always_inline)) ap_fixed& operator = (const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O,
          _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed& operator = (const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator = (const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O,
     _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) void operator = (const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }



};



template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {

  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;

  inline __attribute__((always_inline)) ap_ufixed():Base() {}

  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2,
     _AP_N2>& op): Base(ap_fixed_base<_AP_W2, _AP_I2,
          true, _AP_Q2, _AP_O2, _AP_N2>(op)) {}


  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2,
     _AP_N2>& op): Base(ap_fixed_base<_AP_W2, _AP_I2,
          false, _AP_Q2, _AP_O2, _AP_N2>(op)) {}

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int<_AP_W2>& op):
    Base(ap_int_base<_AP_W2, true>(op)) {}

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_uint<_AP_W2>& op):
    Base(ap_int_base<_AP_W2, false>(op)) {}
  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2,
     _AP_N2>& op): Base(ap_fixed_base<_AP_W2, _AP_I2,
          true, _AP_Q2, _AP_O2, _AP_N2>(op)) {}


  template<int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2,
     _AP_N2>& op): Base(ap_fixed_base<_AP_W2, _AP_I2,
          false, _AP_Q2, _AP_O2, _AP_N2>(op)) {}

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int<_AP_W2>& op):
    Base(ap_int_base<_AP_W2, true>(op)) {}

  template<int _AP_W2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_uint<_AP_W2>& op):
    Base(ap_int_base<_AP_W2, false>(op)) {}
  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2,
     _AP_Q2, _AP_O2, _AP_N2>& op):Base(op) {}

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op):
    Base(op) {}

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op):
    Base(op) {}

  template<int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op):
    Base(op) {}

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
     _AP_Q2, _AP_O2, _AP_N2>& op): Base(op) {}

  template<int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
    ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const af_range_ref<_AP_W2, _AP_I2, _AP_S2,
     _AP_Q2, _AP_O2, _AP_N2>& op): Base(op) {}

  template<int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op): Base(op) {}



  inline __attribute__((always_inline)) ap_ufixed(bool v):Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v):Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v):Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v):Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v):Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v):Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v):Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v):Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v):Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long long v):Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long long v):Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v):Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v):Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v):Base(v) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* str):Base(str) {}
  inline __attribute__((always_inline)) ap_ufixed(const char* str, signed char radix):Base(str, radix) {}
# 7180 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h"
 inline __attribute__((always_inline)) ap_ufixed& operator = (const ap_ufixed<_AP_W, _AP_I,
    _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator = (const volatile ap_ufixed<_AP_W, _AP_I,
    _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator = (const ap_ufixed<_AP_W, _AP_I,
     _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) void operator = (const volatile ap_ufixed<_AP_W, _AP_I,
     _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

};
# 64 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int.h" 2




# 1 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_special.h" 1
# 65 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_special.h"
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 66 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_special.h" 2
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 67 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_special.h" 2



namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 98 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
struct complex<ap_int<_AP_W> > {
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 230 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 69 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_int.h" 2
# 58 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_fixed.h" 2



# 1 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_fixed_special.h" 1
# 65 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_fixed_special.h"
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 66 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_fixed_special.h" 2
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 67 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_fixed_special.h" 2



namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 98 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 229 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 62 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/ap_fixed.h" 2
# 5 "firmware/myproject.h" 2

# 1 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/hls_stream.h" 1
# 66 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/hls_stream.h"
# 1 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/etc/autopilot_enum.h" 1
# 58 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/etc/autopilot_enum.h"
enum SsdmDataTypes {
    _ssdm_sc_int = 0,
    _ssdm_c_int = _ssdm_sc_int,
    _ssdm_sc_uint = 1,
    _ssdm_c_uint = _ssdm_sc_uint,
    _ssdm_sc_bigint = 2,
    _ssdm_sc_biguint = 3,
};



enum SsdmPortTypes {
    _ssdm_sc_in = 0,
    _ssdm_sc_out = 1,
    _ssdm_sc_inout = 2,
    _ssdm_sc_in_clk,

    _ssdm_fifo_in,
    _ssdm_sc_fifo_in = _ssdm_fifo_in,
    _ssdm_tlm_fifo_in = _ssdm_fifo_in,
    _ssdm_fifo_out,
    _ssdm_sc_fifo_out = _ssdm_fifo_out,
    _ssdm_tlm_fifo_out = _ssdm_fifo_out,
    _ssdm_fifo_inout,
    _ssdm_sc_fifo_inout = _ssdm_fifo_inout,
    _ssdm_tlm_fifo_inout = _ssdm_fifo_inout,
    _ssdm_sc_bus,
    _ssdm_hls_bus_port = _ssdm_sc_bus,
    _ssdm_AXI4M_bus_port = _ssdm_sc_bus,
    _ssdm_port_end,
};



enum SsdmProcessTypes {
    _ssdm_method = 0,
    _ssdm_sc_method = _ssdm_method,
    _ssdm_thread = 1,
    _ssdm_sc_thread = _ssdm_thread,
    _ssdm_cthread = 2,
    _ssdm_sc_cthread = _ssdm_cthread,
    _ssdm_process_end,
};



enum SsdmSensitiveTypes {
    _ssdm_sensitive = 0,
    _ssdm_sensitive_pos,
    _ssdm_sensitive_neg,
    _ssdm_sensitive_reset0,
    _ssdm_sensitive_reset1,
    _ssdm_sensitive_end,
};



enum SsdmChannelTypes {
    _ssdm_sc_sig,
    _ssdm_fifo,
    _ssdm_sc_fifo = _ssdm_fifo,
    _ssdm_mem_fifo,
    _ssdm_sc_mem_fifo = _ssdm_mem_fifo,
};


enum SsdmRegionTypes {
    _ssdm_region_reset,
    _ssdm_region_protocol,
    _ssdm_region_pipeline,
    _ssdm_region_parallel,
};
# 67 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/hls_stream.h" 2


namespace hls {
# 78 "/home/nitish/Desktop/Vivado/2018.2/common/technology/autopilot/hls_stream.h"
template<typename __STREAM_T__>
class stream
{
  public:

    inline __attribute__((always_inline)) stream() {
    }

    inline __attribute__((always_inline)) stream(const char* name) {
    }


  private:
    inline __attribute__((always_inline)) stream(const stream< __STREAM_T__ >& chn):V(chn.V) {
    }

    inline __attribute__((always_inline)) stream& operator= (const stream< __STREAM_T__ >& chn) {
        V = chn.V;
        return *this;
    }

  public:

    inline __attribute__((always_inline)) void operator >> (__STREAM_T__& rdata) {
        read(rdata);
    }

    inline __attribute__((always_inline)) void operator << (const __STREAM_T__& wdata) {
        write(wdata);
    }


  public:

    inline __attribute__((always_inline)) bool empty() const {
        bool tmp = _ssdm_StreamCanRead(&V);
        return !tmp;
    }

    inline __attribute__((always_inline)) bool full() const {
        bool tmp = _ssdm_StreamCanWrite(&V);
        return !tmp;
    }


    inline __attribute__((always_inline)) void read(__STREAM_T__& dout) {

        __STREAM_T__ tmp;
        _ssdm_StreamRead(&V, &tmp);
        dout = tmp;



    }

    inline __attribute__((always_inline)) __STREAM_T__ read() {

        __STREAM_T__ tmp;
        _ssdm_StreamRead(&V, &tmp);
        return tmp;





    }


    inline __attribute__((always_inline)) bool read_nb(__STREAM_T__& dout) {
        __STREAM_T__ tmp;
        bool empty_n = _ssdm_StreamNbRead(&V, &tmp);
        dout = tmp;
        return empty_n;
    }


    inline __attribute__((always_inline)) void write(const __STREAM_T__& din) {

        __STREAM_T__ tmp = din;
        _ssdm_StreamWrite(&V, &tmp);



    }


    inline __attribute__((always_inline)) bool write_nb(const __STREAM_T__& din) {
        __STREAM_T__ tmp = din;
        bool full_n = _ssdm_StreamNbWrite(&V, &tmp);
        return full_n;
    }


    inline __attribute__((always_inline)) unsigned size() {
        unsigned size = _ssdm_StreamSize(&V);
        return size;
    }

  public:
    __STREAM_T__ V;
};


}
# 7 "firmware/myproject.h" 2

# 1 "firmware/defines.h" 1





# 1 "firmware/nnet_utils/nnet_types.h" 1



# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     noexcept (true) __attribute__ ((__noreturn__));


}
# 5 "firmware/nnet_utils/nnet_types.h" 2
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 3


# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3
# 44 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 2 3
# 6 "firmware/nnet_utils/nnet_types.h" 2
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 7 "firmware/nnet_utils/nnet_types.h" 2

namespace nnet {


template <typename T, unsigned N> struct array {
    typedef T value_type;
    static const unsigned size = N;

    T data[N];

    T &operator[](size_t pos) { return data[pos]; }

    const T &operator[](size_t pos) const { return data[pos]; }

    array &operator=(const array &other) {
        if (&other == this)
            return *this;

        (static_cast <bool> (N == other.size && "Array sizes must match.") ? void (0) : __assert_fail ("N == other.size && \"Array sizes must match.\"", "firmware/nnet_utils/nnet_types.h", 25, __extension__ __PRETTY_FUNCTION__));

        for (unsigned i = 0; i < N; i++) {
_ssdm_Unroll(0,0,0, "");
 data[i] = other[i];
        }
        return *this;
    }
};


template <typename T, unsigned N, T (*func)(T)> class lookup_table {
  public:
    lookup_table(T from, T to) : range_start(from), range_end(to), base_div(ap_uint<16>(N) / T(to - from)) {
        T step = (range_end - range_start) / ap_uint<16>(N);
        for (size_t i = 0; i < N; i++) {
            T num = range_start + ap_uint<16>(i) * step;
            T sample = func(num);
            samples[i] = sample;
        }
    }

    T operator()(T n) const {
        int index = (n - range_start) * base_div;
        if (index < 0)
            index = 0;
        else if (index > N - 1)
            index = N - 1;
        return samples[index];
    }

  private:
    T samples[N];
    const T range_start, range_end;
    ap_fixed<20, 16> base_div;
};

}
# 7 "firmware/defines.h" 2
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 3


# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3
# 44 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 2 3
# 8 "firmware/defines.h" 2
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 9 "firmware/defines.h" 2
# 22 "firmware/defines.h"
typedef ap_fixed<16,6> input_t;
typedef ap_fixed<16,6> model_default_t;
typedef ap_fixed<16,6> layer2_t;
typedef ap_uint<1> layer2_index;
typedef ap_fixed<16,6> layer3_t;
typedef ap_fixed<18,8> dense_relu_table_t;
typedef ap_fixed<16,6> layer4_t;
typedef ap_uint<1> layer4_index;
typedef ap_fixed<16,6> layer5_t;
typedef ap_fixed<18,8> dense_1_relu_table_t;
typedef ap_fixed<16,6> layer6_t;
typedef ap_uint<1> layer6_index;
typedef ap_fixed<16,6> layer7_t;
typedef ap_fixed<18,8> dense_2_relu_table_t;
typedef ap_fixed<16,6> layer8_t;
typedef ap_uint<1> layer8_index;
typedef ap_fixed<16,6> result_t;
typedef ap_fixed<18,8> dense_3_softmax_table_t;
typedef ap_fixed<18,8,SC_RND,SC_SAT> dense_3_softmax_exp_table_t;
typedef ap_fixed<18,8,SC_RND,SC_SAT> dense_3_softmax_inv_table_t;
# 9 "firmware/myproject.h" 2


void myproject(
    input_t dense_input[784],
    result_t layer9_out[10]
);
# 4 "firmware/myproject.cpp" 2
# 1 "firmware/parameters.h" 1






# 1 "firmware/nnet_utils/nnet_code_gen.h" 1



# 1 "firmware/nnet_utils/nnet_helpers.h" 1




# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 1 3
# 59 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 3
# 59 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 1 3
# 59 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 59 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 69 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 1 3
# 68 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace rel_ops
  {
# 86 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
 template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 99 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
 template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 112 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
 template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 125 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
 template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }


  }

}
# 70 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 2 3






namespace std __attribute__ ((__visibility__ ("default")))
{


  template<class _Tp>
    class tuple_size;

  template<std::size_t _Int, class _Tp>
    class tuple_element;


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2> >
    { static const std::size_t value = 2; };

  template<class _Tp1, class _Tp2>
    const std::size_t
    tuple_size<std::pair<_Tp1, _Tp2> >::value;

  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2> >
    { typedef _Tp1 type; };

  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2> >
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
      static _Tp1& __get(std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
      static const _Tp1& __const_get(const std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.first; }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
      static _Tp2& __get(std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
      static const _Tp2& __const_get(const std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.second; }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&
    get(std::pair<_Tp1, _Tp2>& __in)
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    inline const typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&
    get(const std::pair<_Tp1, _Tp2>& __in)
    { return __pair_get<_Int>::__const_get(__in); }


}
# 61 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 2 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 1 3
# 61 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 62 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 1 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3






namespace std __attribute__ ((__visibility__ ("default")))
{
# 191 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
 template<typename _IIter, typename _Predicate>
    bool
    all_of(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Predicate>
    bool
    any_of(_IIter, _IIter, _Predicate);


  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);


  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    copy_if(_IIter, _IIter, _OIter, _Predicate);

  template<typename _IIter, typename _Size, typename _OIter>
    _OIter
    copy_n(_IIter, _Size, _OIter);





  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);





  template<typename _IIter, typename _Predicate>
    _IIter
    find_if_not(_IIter, _IIter, _Predicate);






  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);


  template<typename _RAIter>
    bool
    is_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    bool
    is_heap(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    _RAIter
    is_heap_until(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    _RAIter
    is_heap_until(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _Predicate>
    bool
    is_partitioned(_IIter, _IIter, _Predicate);

  template<typename _FIter1, typename _FIter2>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2);

  template<typename _FIter1, typename _FIter2,
    typename _BinaryPredicate>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);

  template<typename _FIter>
    bool
    is_sorted(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    bool
    is_sorted(_FIter, _FIter, _Compare);

  template<typename _FIter>
    _FIter
    is_sorted_until(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    is_sorted_until(_FIter, _FIter, _Compare);


  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&, _Compare);

  template<typename _FIter>
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter, _Compare);

  template<typename _Tp>
    _Tp
    min(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    _Tp
    min(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    _Tp
    max(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    _Tp
    max(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>, _Compare);




  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);


  template<typename _IIter, typename _Predicate>
    bool
    none_of(_IIter, _IIter, _Predicate);





  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);




  template<typename _IIter, typename _OIter1,
    typename _OIter2, typename _Predicate>
    pair<_OIter1, _OIter2>
    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);

  template<typename _FIter, typename _Predicate>
    _FIter
    partition_point(_FIter, _FIter, _Predicate);


  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  template<typename _FIter>
    void
    rotate(_FIter, _FIter, _FIter);

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 532 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
 template<typename _RAIter, typename _UGenerator>
    void
    shuffle(_RAIter, _RAIter, _UGenerator&&);


  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);

  template<typename _Tp>
    void
    swap(_Tp&, _Tp&);

  template<typename _Tp, size_t _Nm>
    void
    swap(_Tp (&)[_Nm], _Tp (&)[_Nm]);

  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);





  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,

     _Generator&&);




  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);


}
# 63 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 1 3
# 62 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__first[__parent] < __first[__child])
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first[__parent], __first[__child]))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    { return std::__is_heap_until(__first, __n) == __n; }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    { return std::__is_heap_until(__first, __n, __comp) == __n; }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && *(__first + __parent) < __value)
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 154 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
 template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;
                                                  ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value));
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,
  _Distance __topIndex, _Tp __value, _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex
      && __comp(*(__first + __parent), __value))
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 203 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
 template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;
                                                               ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value));
    }

  template<typename _RandomAccessIterator>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value));
    }
# 276 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
 template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                     ;
                                              ;

      --__last;
      std::__pop_heap(__first, __last, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(*(__first + __secondChild),
       *(__first + (__secondChild - 1))))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value), __comp);
    }
# 350 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
 template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {



                                                     ;
                                                           ;

      --__last;
      std::__pop_heap(__first, __last, __last, __comp);
    }
# 373 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
 template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value));
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 413 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
 template<typename _RandomAccessIterator, typename _Compare>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 452 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
 template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;
                                              ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last);
 }
    }
# 481 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
 template<typename _RandomAccessIterator, typename _Compare>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {



                                                     ;
                                                           ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 510 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
 template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      return __first + std::__is_heap_until(__first, std::distance(__first,
           __last));
    }
# 536 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
 template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {



                                                     ;

      return __first + std::__is_heap_until(__first, std::distance(__first,
           __last),
         __comp);
    }
# 558 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
 template<typename _RandomAccessIterator>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::is_heap_until(__first, __last) == __last; }
# 571 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
 template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
    { return std::is_heap_until(__first, __last, __comp) == __last; }



}
# 64 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 1 3
# 61 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 1 3
# 64 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
# 91 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 3
 template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template <typename _Tp> class allocator;

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 __alloc.destroy(std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 62 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 84 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
 template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len)
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 111 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
 template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {



    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __ucr(_ForwardIterator __first, _ForwardIterator __last,
       _Tp& __value)
        {
   if(__first == __last)
     return;

   _ForwardIterator __cur = __first;
   if (true)
     {
       std::_Construct(std::__addressof(*__first),
         std::move(__value));
       _ForwardIterator __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       __value = std::move(*__prev);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __ucr(_ForwardIterator, _ForwardIterator, _Tp&) { }
    };
# 230 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
 template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_construct_buf(_ForwardIterator __first,
      _ForwardIterator __last,
      _Tp& __value)
    {
      typedef typename std::iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __value);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      if (true)
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if(_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            *__first);
 }
      if (false)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
                          ;
 }
    }


}
# 65 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3


# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 1 3
# 32 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 3
# 32 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 3





# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 40 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3


# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
# 147 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 191 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
 struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;



    static constexpr bool is_integer = false;





    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;





    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 302 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
 template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() throw() { return static_cast<_Tp>(0); }


      static constexpr _Tp
      max() throw() { return static_cast<_Tp>(0); }




      static constexpr _Tp
      lowest() throw() { return static_cast<_Tp>(0); }




      static constexpr _Tp
      epsilon() throw() { return static_cast<_Tp>(0); }


      static constexpr _Tp
      round_error() throw() { return static_cast<_Tp>(0); }


      static constexpr _Tp
      infinity() throw() { return static_cast<_Tp>(0); }



      static constexpr _Tp
      quiet_NaN() throw() { return static_cast<_Tp>(0); }



      static constexpr _Tp
      signaling_NaN() throw() { return static_cast<_Tp>(0); }




      static constexpr _Tp
      denorm_min() throw() { return static_cast<_Tp>(0); }
    };


  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };






  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() throw() { return false; }

      static constexpr bool
      max() throw() { return true; }


      static constexpr bool
      lowest() throw() { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() throw() { return false; }

      static constexpr bool
      round_error() throw() { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() throw() { return false; }

      static constexpr bool
      quiet_NaN() throw() { return false; }

      static constexpr bool
      signaling_NaN() throw() { return false; }

      static constexpr bool
      denorm_min() throw() { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() throw() { return (((char)(-1) < 0) ? (char)1 << (sizeof(char) * 8 - ((char)(-1) < 0)) : (char)0); }

      static constexpr char
      max() throw() { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() throw() { return 0; }

      static constexpr char
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() throw() { return char(); }

      static constexpr char
      quiet_NaN() throw() { return char(); }

      static constexpr char
      signaling_NaN() throw() { return char(); }

      static constexpr char
      denorm_min() throw() { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() throw() { return -127 - 1; }

      static constexpr signed char
      max() throw() { return 127; }


      static constexpr signed char
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() throw() { return 0; }

      static constexpr signed char
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() throw() { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() throw() { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() throw() { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() throw() { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() throw() { return 0; }

      static constexpr unsigned char
      max() throw() { return 127 * 2U + 1; }


      static constexpr unsigned char
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() throw() { return 0; }

      static constexpr unsigned char
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() throw() { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() throw() { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() throw() { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() throw() { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() throw() { return (((wchar_t)(-1) < 0) ? (wchar_t)1 << (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) : (wchar_t)0); }

      static constexpr wchar_t
      max() throw() { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() throw() { return 0; }

      static constexpr wchar_t
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() throw() { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() throw() { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() throw() { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() throw() { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() throw() { return (((char16_t)(-1) < 0) ? (char16_t)1 << (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) : (char16_t)0); }

      static constexpr char16_t
      max() throw() { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }


      static constexpr char16_t
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed
       = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() throw() { return 0; }

      static constexpr char16_t
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() throw() { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() throw() { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() throw() { return char16_t(); }

      static constexpr char16_t
      denorm_min() throw() { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() throw() { return (((char32_t)(-1) < 0) ? (char32_t)1 << (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) : (char32_t)0); }

      static constexpr char32_t
      max() throw() { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }


      static constexpr char32_t
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed
       = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() throw() { return 0; }

      static constexpr char32_t
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() throw() { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() throw() { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() throw() { return char32_t(); }

      static constexpr char32_t
      denorm_min() throw() { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() throw() { return -32767 - 1; }

      static constexpr short
      max() throw() { return 32767; }


      static constexpr short
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() throw() { return 0; }

      static constexpr short
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() throw() { return short(); }

      static constexpr short
      quiet_NaN() throw() { return short(); }

      static constexpr short
      signaling_NaN() throw() { return short(); }

      static constexpr short
      denorm_min() throw() { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() throw() { return 0; }

      static constexpr unsigned short
      max() throw() { return 32767 * 2U + 1; }


      static constexpr unsigned short
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() throw() { return 0; }

      static constexpr unsigned short
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() throw() { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() throw() { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() throw() { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() throw() { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() throw() { return -2147483647 - 1; }

      static constexpr int
      max() throw() { return 2147483647; }


      static constexpr int
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() throw() { return 0; }

      static constexpr int
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() throw() { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() throw() { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() throw() { return static_cast<int>(0); }

      static constexpr int
      denorm_min() throw() { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() throw() { return 0; }

      static constexpr unsigned int
      max() throw() { return 2147483647 * 2U + 1; }


      static constexpr unsigned int
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() throw() { return 0; }

      static constexpr unsigned int
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() throw() { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() throw() { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() throw() { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() throw() { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() throw() { return -9223372036854775807L - 1; }

      static constexpr long
      max() throw() { return 9223372036854775807L; }


      static constexpr long
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() throw() { return 0; }

      static constexpr long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() throw() { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() throw() { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() throw() { return static_cast<long>(0); }

      static constexpr long
      denorm_min() throw() { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() throw() { return 0; }

      static constexpr unsigned long
      max() throw() { return 9223372036854775807L * 2UL + 1; }


      static constexpr unsigned long
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() throw() { return 0; }

      static constexpr unsigned long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() throw() { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() throw() { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() throw() { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() throw() { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() throw() { return -9223372036854775807LL - 1; }

      static constexpr long long
      max() throw() { return 9223372036854775807LL; }


      static constexpr long long
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() throw() { return 0; }

      static constexpr long long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() throw() { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() throw() { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() throw() { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() throw() { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() throw() { return 0; }

      static constexpr unsigned long long
      max() throw() { return 9223372036854775807LL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() throw() { return 0; }

      static constexpr unsigned long long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() throw() { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() throw() { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() throw() { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() throw() { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() throw() { return 1.17549435e-38F; }

      static constexpr float
      max() throw() { return 3.40282347e+38F; }


      static constexpr float
      lowest() throw() { return -3.40282347e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() throw() { return 1.19209290e-7F; }

      static constexpr float
      round_error() throw() { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() throw() { return __builtin_huge_valf (); }

      static constexpr float
      quiet_NaN() throw() { return __builtin_nanf (""); }

      static constexpr float
      signaling_NaN() throw() { return __builtin_nansf (""); }

      static constexpr float
      denorm_min() throw() { return 1.40129846e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() throw() { return 2.2250738585072014e-308; }

      static constexpr double
      max() throw() { return 1.7976931348623157e+308; }


      static constexpr double
      lowest() throw() { return -1.7976931348623157e+308; }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() throw() { return 2.2204460492503131e-16; }

      static constexpr double
      round_error() throw() { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() throw() { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() throw() { return __builtin_nan (""); }

      static constexpr double
      signaling_NaN() throw() { return __builtin_nans (""); }

      static constexpr double
      denorm_min() throw() { return 4.9406564584124654e-324; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() throw() { return 3.36210314311209350626e-4932L; }

      static constexpr long double
      max() throw() { return 1.18973149535723176502e+4932L; }


      static constexpr long double
      lowest() throw() { return -1.18973149535723176502e+4932L; }


      static constexpr int digits = 64;
      static constexpr int digits10 = 18;

      static constexpr int max_digits10
  = (2 + (64) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() throw() { return 1.08420217248550443401e-19L; }

      static constexpr long double
      round_error() throw() { return 0.5L; }

      static constexpr int min_exponent = (-16381);
      static constexpr int min_exponent10 = (-4931);
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() throw() { return __builtin_huge_vall (); }

      static constexpr long double
      quiet_NaN() throw() { return __builtin_nanl (""); }

      static constexpr long double
      signaling_NaN() throw() { return __builtin_nansl (""); }

      static constexpr long double
      denorm_min() throw() { return 3.64519953188247460253e-4951L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };






}
# 43 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3






# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 1 3
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 1 3
# 59 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 3
# 59 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 3




# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 1 3
# 61 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   if (true)
     {
       for (; __first != __last; ++__first, ++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   if (false)
     {
       std::_Destroy(__result, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 107 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
 template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
     && __is_trivial(_ValueType2))>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 164 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
 template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill<__is_trivial(_ValueType)>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { std::fill_n(__first, __n, __x); }
    };
# 218 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
 template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill_n<__is_trivial(_ValueType)>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   for (; __first != __last; ++__first, ++__cur)
     __alloc.construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__result, __cur, __alloc);
                          ;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __cur != __last; ++__cur)
     __alloc.construct(std::__addressof(*__cur), __x);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __n > 0; --__n, ++__cur)
     __alloc.construct(std::__addressof(*__cur), __x);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill_n(__first, __n, __x); }
# 332 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      if (true)
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      if (false)
 {
   std::_Destroy(__first2, __mid2, __alloc);
                          ;
 }
    }





  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill_n(__first, __n, _ValueType());
 }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_1<__is_trivial(_ValueType)>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline void
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_n_1<__is_trivial(_ValueType)>::
 __uninit_default_n(__first, __n);
    }

 template<typename _Tp, typename _Allocator>
   inline auto
   _Construct_default_a_impl(_Tp* __ptr, _Allocator& __alloc, void*)
   -> decltype(__alloc.construct(__ptr))
   { return __alloc.construct(__ptr); }

  template<typename _Tp, typename _Allocator>
   inline void
   _Construct_default_a_impl(_Tp* __ptr, _Allocator& __alloc, ...)
   { _Construct(__ptr); }

  template<typename _Tp, typename _Allocator>
   inline void
   _Construct_default_a(_Tp* __ptr, _Allocator& __alloc)
   { _Construct_default_a_impl(__ptr, __alloc, nullptr); }




  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __cur != __last; ++__cur)
     _Construct_default_a(std::__addressof(*__cur), __alloc);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __n > 0; --__n, ++__cur)
     _Construct_default_a(std::__addressof(*__cur), __alloc);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { std::__uninitialized_default_n(__first, __n); }


  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   for (; __n > 0; --__n, ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__result, __cur);
                          ;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }
# 644 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
 template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }



}
# 64 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 1 3
# 65 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 typename _Tp_alloc_type::pointer _M_start;
 typename _Tp_alloc_type::pointer _M_finish;
 typename _Tp_alloc_type::pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }

 _Vector_impl(_Tp_alloc_type const& __a)
 : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }


      _Vector_base(_Vector_base&& __x)
      : _M_impl(__x._M_get_Tp_allocator())
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = 0;
 __x._M_impl._M_finish = 0;
 __x._M_impl._M_end_of_storage = 0;
      }


      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      typename _Tp_alloc_type::pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
      {
 if (__p)
   _M_impl.deallocate(__p, __n);
      }
    };
# 179 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;



      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type::pointer pointer;
      typedef typename _Tp_alloc_type::const_pointer const_pointer;
      typedef typename _Tp_alloc_type::reference reference;
      typedef typename _Tp_alloc_type::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:





      vector()
      : _Base() { }





      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }
# 236 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 explicit
      vector(size_type __n)
      : _Base(__n)
      { _M_default_initialize(__n); }
# 249 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 278 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 vector(const vector& __x)
      : _Base(__x.size(), __x._M_get_Tp_allocator())
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 294 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 vector(vector&& __x)
      : _Base(std::move(__x)) { }
# 308 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 333 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 template<typename _InputIterator>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }







      ~vector()
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 361 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 vector&
      operator=(const vector& __x);
# 372 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 vector&
      operator=(vector&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 393 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 vector&
      operator=(initializer_list<value_type> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }
# 411 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 427 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }
# 448 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 void
      assign(initializer_list<value_type> __l)
      { this->assign(__l.begin(), __l.end()); }



      using _Base::get_allocator;







      iterator
      begin()
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end()
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const
      { return const_iterator(this->_M_impl._M_start); }






      const_iterator
      cend() const
      { return const_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crbegin() const
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const
      { return const_reverse_iterator(begin()); }




      size_type
      size() const
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const
      { return _M_get_Tp_allocator().max_size(); }
# 588 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 608 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 640 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 void
      shrink_to_fit()
      { std::__shrink_to_fit<vector>::_S_do_it(*this); }






      size_type
      capacity() const
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const
      { return begin() == end(); }
# 679 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 void
      reserve(size_type __n);
# 694 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 reference
      operator[](size_type __n)
      { return *(this->_M_impl._M_start + __n); }
# 709 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 const_reference
      operator[](size_type __n) const
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("vector::_M_range_check"));
      }

    public:
# 734 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 752 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      { return *(end() - 1); }





      const_reference
      back() const
      { return *(end() - 1); }
# 799 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 _Tp*



      data()
      { return std::__addressof(front()); }


      const _Tp*



      data() const
      { return std::__addressof(front()); }
# 825 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     this->_M_impl.construct(this->_M_impl._M_finish, __x);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(end(), __x);
      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>
        void
        emplace_back(_Args&&... __args);
# 856 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 void
      pop_back()
      {
 --this->_M_impl._M_finish;
 this->_M_impl.destroy(this->_M_impl._M_finish);
      }
# 876 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 template<typename... _Args>
        iterator
        emplace(iterator __position, _Args&&... __args);
# 892 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 iterator
      insert(iterator __position, const value_type& __x);
# 907 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 iterator
      insert(iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 924 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 void
      insert(iterator __position, initializer_list<value_type> __l)
      { this->insert(__position, __l.begin(), __l.end()); }
# 942 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 void
      insert(iterator __position, size_type __n, const value_type& __x)
      { _M_fill_insert(__position, __n, __x); }
# 960 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_insert_dispatch(__position, __first, __last, _Integral());
 }
# 985 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 iterator
      erase(iterator __position);
# 1006 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 iterator
      erase(iterator __first, iterator __last);
# 1018 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 void
      swap(vector& __x)
      {
 std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 std::swap(this->_M_impl._M_end_of_storage,
    __x._M_impl._M_end_of_storage);



 std::__alloc_swap<_Tp_alloc_type>::_S_do_it(_M_get_Tp_allocator(),
          __x._M_get_Tp_allocator());
      }







      void
      clear()
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   if (true)
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   if (false)
     {
       _M_deallocate(__result, __n);
                              ;
     }
 }
# 1073 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
          _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }



      void
      _M_default_initialize(size_type __n)
      {
 std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
      _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }
# 1147 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1187 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_default_append(size_type __n);







      template<typename... _Args>
        void
        _M_insert_aux(iterator __position, _Args&&... __args);



      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos)
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }
    };
# 1271 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1288 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
 template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 65 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 1 3
# 62 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() : _M_p(0), _M_mask(0) { }

    operator bool() const
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x)
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x)
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip()
    { *_M_p ^= _M_mask; }
  };

  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename _Alloc::template rebind<_Bit_type>::other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type* _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator()
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }


      _Bvector_base(_Bvector_base&& __x)
      : _M_impl(__x._M_get_Bit_allocator())
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = _Bit_iterator();
 __x._M_impl._M_finish = _Bit_iterator();
 __x._M_impl._M_end_of_storage = 0;
      }


      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_type*
      _M_allocate(size_t __n)
      { return _M_impl.allocate((__n + int(_S_word_bit) - 1)
    / int(_S_word_bit)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   _M_impl.deallocate(_M_impl._M_start._M_p,
        _M_impl._M_end_of_storage - _M_impl._M_start._M_p);
      }
    };


}




namespace std __attribute__ ((__visibility__ ("default")))
{
# 478 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;


    template<typename> friend class hash;


  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()
    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }

    explicit
    vector(size_type __n, const bool& __value = bool(),
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_of_storage,
  __value ? ~0 : 0);
    }

    vector(const vector& __x)
    : _Base(__x._M_get_Bit_allocator())
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }


    vector(vector&& __x)
    : _Base(std::move(__x)) { }

    vector(initializer_list<bool> __l,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize_range(__l.begin(), __l.end(),
     random_access_iterator_tag());
    }


    template<typename _InputIterator>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_initialize_dispatch(__first, __last, _Integral());
      }

    ~vector() { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }


    vector&
    operator=(vector&& __x)
    {


      this->clear();
      this->swap(__x);
      return *this;
    }

    vector&
    operator=(initializer_list<bool> __l)
    {
      this->assign (__l.begin(), __l.end());
      return *this;
    }






    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }

    template<typename _InputIterator>
      void
      assign(_InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_assign_dispatch(__first, __last, _Integral());
      }


    void
    assign(initializer_list<bool> __l)
    { this->assign(__l.begin(), __l.end()); }


    iterator
    begin()
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const
    { return this->_M_impl._M_start; }

    iterator
    end()
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin()
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend()
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const
    { return const_reverse_iterator(begin()); }


    const_iterator
    cbegin() const
    { return this->_M_impl._M_start; }

    const_iterator
    cend() const
    { return this->_M_impl._M_finish; }

    const_reverse_iterator
    crbegin() const
    { return const_reverse_iterator(end()); }

    const_reverse_iterator
    crend() const
    { return const_reverse_iterator(begin()); }


    size_type
    size() const
    { return size_type(end() - begin()); }

    size_type
    max_size() const
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize = _M_get_Bit_allocator().max_size();
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const
    { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)
         - begin()); }

    bool
    empty() const
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
        __throw_out_of_range(("vector<bool>::_M_range_check"));
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n);

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x)
    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);



      std::__alloc_swap<typename _Base::_Bit_alloc_type>::
 _S_do_it(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y)
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator
    insert(iterator __position, const bool& __x = bool())
    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position, __x);
      return begin() + __n;
    }

    template<typename _InputIterator>
      void
      insert(iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_insert_dispatch(__position, __first, __last, _Integral());
      }

    void
    insert(iterator __position, size_type __n, const bool& __x)
    { _M_fill_insert(__position, __n, __x); }


    void insert(iterator __p, initializer_list<bool> __l)
    { this->insert(__p, __l.begin(), __l.end()); }


    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator
    erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

    iterator
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }


    void
    shrink_to_fit()
    { std::__shrink_to_fit<vector>::_S_do_it(*this); }


    void
    flip()
    {
      for (_Bit_type * __p = this->_M_impl._M_start._M_p;
    __p != this->_M_impl._M_end_of_storage; ++__p)
        *__p = ~*__p;
    }

    void
    clear()
    { _M_erase_at_end(begin()); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = (__q
      + ((__n + int(_S_word_bit) - 1)
         / int(_S_word_bit)));
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }





    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }
  };


}





namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>& __b) const;
    };


}
# 66 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3



# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 1 3
# 60 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
   std::make_move_iterator(this->_M_impl._M_start),
   std::make_move_iterator(this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     this->_M_impl.construct(this->_M_impl._M_finish,
        std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(end(), std::forward<_Args>(__args)...);
      }


  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    insert(iterator __position, const value_type& __x)
    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   this->_M_impl.construct(this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {

   if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     {
       _Tp __x_copy = __x;
       _M_insert_aux(__position, std::move(__x_copy));
     }
   else

     _M_insert_aux(__position, __x);
 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      this->_M_impl.destroy(this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp.swap(*this);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
     __n - size(), __val,
     _M_get_Tp_allocator());
   this->_M_impl._M_finish += __n - size();
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename vector<_Tp, _Alloc>::iterator
      vector<_Tp, _Alloc>::
      emplace(iterator __position, _Args&&... __args)
      {
 const size_type __n = __position - begin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
     && __position == end())
   {
     this->_M_impl.construct(this->_M_impl._M_finish,
        std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(__position, std::forward<_Args>(__args)...);
 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Args&&... __args)






    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   this->_M_impl.construct(this->_M_impl._M_finish,
      std::move(*(this->_M_impl._M_finish - 1)));

   ++this->_M_impl._M_finish;



   std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1);





   *__position = _Tp(std::forward<_Args>(__args)...);

 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   if (true)
     {




       this->_M_impl.construct(__new_start + __elems_before,

          std::forward<_Args>(__args)...);



       __new_finish = 0;

       __new_finish =
  std::__uninitialized_move_a(this->_M_impl._M_start,
         __position.base(), __new_start,
         _M_get_Tp_allocator());
       ++__new_finish;

       __new_finish =
  std::__uninitialized_move_a(__position.base(),
         this->_M_impl._M_finish,
         __new_finish,
         _M_get_Tp_allocator());
     }
          if (false)
     {
       if (!__new_finish)
  this->_M_impl.destroy(__new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
                              ;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish);

    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n - __elems_after;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       if (true)
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = 0;

    __new_finish =
      std::__uninitialized_move_a(this->_M_impl._M_start,
      __position.base(),
      __new_start,
      _M_get_Tp_allocator());
    __new_finish += __n;

    __new_finish =
      std::__uninitialized_move_a(__position.base(),
      this->_M_impl._M_finish,
      __new_finish,
      _M_get_Tp_allocator());
  }
       if (false)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
                           ;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       std::__uninitialized_default_n_a(this->_M_impl._M_finish,
            __n, _M_get_Tp_allocator());
       this->_M_impl._M_finish += __n;
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       const size_type __old_size = this->size();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       if (true)
  {
    __new_finish =
      std::__uninitialized_move_a(this->_M_impl._M_start,
      this->_M_impl._M_finish,
      __new_start,
      _M_get_Tp_allocator());
    std::__uninitialized_default_n_a(__new_finish, __n,
         _M_get_Tp_allocator());
    __new_finish += __n;
  }
       if (false)
  {
    std::_Destroy(__new_start, __new_finish,
    _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
                           ;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish);

      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  if (true)
    {
      __new_finish =
        std::__uninitialized_move_a(this->_M_impl._M_start,
        __position.base(),
        __new_start,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_copy_a(__first, __last,
        __new_finish,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_move_a(__position.base(),
        this->_M_impl._M_finish,
        __new_finish,
        _M_get_Tp_allocator());
    }
  if (false)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
                             ;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }




  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   _Bit_type* __q = this->_M_allocate(__n);
   this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),
          iterator(__q, 0));
   this->_M_deallocate();
   this->_M_impl._M_start = iterator(__q, 0);
   this->_M_impl._M_end_of_storage = (__q + (__n + int(_S_word_bit) - 1)
          / int(_S_word_bit));
 }
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_type * __q = this->_M_allocate(__len);
  iterator __i = _M_copy_aligned(begin(), __position,
            iterator(__q, 0));
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = (__q
         + ((__len
             + int(_S_word_bit) - 1)
            / int(_S_word_bit)));
  this->_M_impl._M_start = iterator(__q, 0);
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }


}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const
    {
      size_t __hash = 0;
      using std::_S_word_bit;
      using std::_Bit_type;

      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}
# 70 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 35 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __g);






  namespace __detail
  {


    template<typename _UIntType, size_t __w,
      bool = __w < static_cast<size_t>
     (std::numeric_limits<_UIntType>::digits)>
      struct _Shift
      { static const _UIntType __value = 0; };

    template<typename _UIntType, size_t __w>
      struct _Shift<_UIntType, __w, true>
      { static const _UIntType __value = _UIntType(1) << __w; };

    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool>
      struct _Mod;



    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
      inline _Tp
      __mod(_Tp __x)
      { return _Mod<_Tp, __m, __a, __c, __m == 0>::__calc(__x); }





    template<typename _Engine, typename _DInputType>
      struct _Adaptor
      {

      public:
 _Adaptor(_Engine& __g)
 : _M_g(__g) { }

 _DInputType
 min() const
 { return _DInputType(0); }

 _DInputType
 max() const
 { return _DInputType(1); }






 _DInputType
 operator()()
 {
   return std::generate_canonical<_DInputType,
                             std::numeric_limits<_DInputType>::digits,
                             _Engine>(_M_g);
 }

      private:
 _Engine& _M_g;
      };


  }
# 169 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    class linear_congruential_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(__m == 0u || (__a < __m && __c < __m),
      "template argument substituting __m out of bounds");



      static_assert(__m % __a < __m / __a,
      "sorry, not implemented yet: try a smaller 'a' constant");

    public:

      typedef _UIntType result_type;


      static constexpr result_type multiplier = __a;

      static constexpr result_type increment = __c;

      static constexpr result_type modulus = __m;
      static constexpr result_type default_seed = 1u;
# 201 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 explicit
      linear_congruential_engine(result_type __s = default_seed)
      { seed(__s); }







      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, linear_congruential_engine>::value>
        ::type>
        explicit
        linear_congruential_engine(_Sseq& __q)
        { seed(__q); }







      void
      seed(result_type __s = default_seed);
# 234 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _Sseq>
        typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);







      static constexpr result_type
      min()
      { return __c == 0u ? 1u : 0u; }




      static constexpr result_type
      max()
      { return __m - 1u; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()()
      {
 _M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
 return _M_x;
      }
# 286 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 friend bool
      operator==(const linear_congruential_engine& __lhs,
   const linear_congruential_engine& __rhs)
      { return __lhs._M_x == __rhs._M_x; }
# 299 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::linear_congruential_engine<_UIntType1,
     __a1, __c1, __m1>&);
# 319 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::linear_congruential_engine<_UIntType1, __a1,
     __c1, __m1>&);

    private:
      _UIntType _M_x;
    };
# 341 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    inline bool
    operator!=(const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __lhs,
        const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __rhs)
    { return !(__lhs == __rhs); }
# 375 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    class mersenne_twister_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(1u <= __m && __m <= __n,
      "template argument substituting __m out of bounds");
      static_assert(__r <= __w, "template argument substituting "
      "__r out of bound");
      static_assert(__u <= __w, "template argument substituting "
      "__u out of bound");
      static_assert(__s <= __w, "template argument substituting "
      "__s out of bound");
      static_assert(__t <= __w, "template argument substituting "
      "__t out of bound");
      static_assert(__l <= __w, "template argument substituting "
      "__l out of bound");
      static_assert(__w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bound");
      static_assert(__a <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __a out of bound");
      static_assert(__b <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __b out of bound");
      static_assert(__c <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __c out of bound");
      static_assert(__d <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __d out of bound");
      static_assert(__f <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __f out of bound");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t state_size = __n;
      static constexpr size_t shift_size = __m;
      static constexpr size_t mask_bits = __r;
      static constexpr result_type xor_mask = __a;
      static constexpr size_t tempering_u = __u;
      static constexpr result_type tempering_d = __d;
      static constexpr size_t tempering_s = __s;
      static constexpr result_type tempering_b = __b;
      static constexpr size_t tempering_t = __t;
      static constexpr result_type tempering_c = __c;
      static constexpr size_t tempering_l = __l;
      static constexpr result_type initialization_multiplier = __f;
      static constexpr result_type default_seed = 5489u;


      explicit
      mersenne_twister_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, mersenne_twister_engine>::value>
        ::type>
        explicit
        mersenne_twister_engine(_Sseq& __q)
        { seed(__q); }

      void
      seed(result_type __sd = default_seed);

      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);




      static constexpr result_type
      min()
      { return 0; };




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }

      result_type
      operator()();
# 493 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 friend bool
      operator==(const mersenne_twister_engine& __lhs,
   const mersenne_twister_engine& __rhs)
      { return std::equal(__lhs._M_x, __lhs._M_x + state_size, __rhs._M_x); }
# 510 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::mersenne_twister_engine<_UIntType1, __w1, __n1,
     __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>&);
# 536 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::mersenne_twister_engine<_UIntType1, __w1, __n1, __m1,
     __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>&);

    private:
      _UIntType _M_x[state_size];
      size_t _M_p;
    };
# 567 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    inline bool
    operator!=(const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __lhs,
        const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __rhs)
    { return !(__lhs == __rhs); }
# 599 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    class subtract_with_carry_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __s && __s < __r,
      "template argument substituting __s out of bounds");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t short_lag = __s;
      static constexpr size_t long_lag = __r;
      static constexpr result_type default_seed = 19780503u;





      explicit
      subtract_with_carry_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, subtract_with_carry_engine>::value>
        ::type>
        explicit
        subtract_with_carry_engine(_Sseq& __q)
        { seed(__q); }
# 652 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 void
      seed(result_type __sd = default_seed);





      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);





      static constexpr result_type
      min()
      { return 0; }





      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 707 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 friend bool
      operator==(const subtract_with_carry_engine& __lhs,
   const subtract_with_carry_engine& __rhs)
      { return std::equal(__lhs._M_x, __lhs._M_x + long_lag, __rhs._M_x); }
# 724 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>&);
# 743 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>&);

    private:
      _UIntType _M_x[long_lag];
      _UIntType _M_carry;
      size_t _M_p;
    };
# 768 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    inline bool
    operator!=(const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __lhs,
        const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __rhs)
    { return !(__lhs == __rhs); }
# 783 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RandomNumberEngine, size_t __p, size_t __r>
    class discard_block_engine
    {
      static_assert(1 <= __r && __r <= __p,
      "template argument substituting __r out of bounds");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;


      static constexpr size_t block_size = __p;
      static constexpr size_t used_block = __r;






      discard_block_engine()
      : _M_b(), _M_n(0) { }







      explicit
      discard_block_engine(const _RandomNumberEngine& __rne)
      : _M_b(__rne), _M_n(0) { }







      explicit
      discard_block_engine(_RandomNumberEngine&& __rne)
      : _M_b(std::move(__rne)), _M_n(0) { }







      explicit
      discard_block_engine(result_type __s)
      : _M_b(__s), _M_n(0) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, discard_block_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        discard_block_engine(_Sseq& __q)
 : _M_b(__q), _M_n(0)
        { }





      void
      seed()
      {
 _M_b.seed();
 _M_n = 0;
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_n = 0;
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_n = 0;
 }





      const _RandomNumberEngine&
      base() const
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 933 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 friend bool
      operator==(const discard_block_engine& __lhs,
   const discard_block_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b && __lhs._M_n == __rhs._M_n; }
# 949 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>&);
# 967 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>&);

    private:
      _RandomNumberEngine _M_b;
      size_t _M_n;
    };
# 990 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RandomNumberEngine, size_t __p, size_t __r>
    inline bool
    operator!=(const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __lhs,
        const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __rhs)
    { return !(__lhs == __rhs); }






  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    class independent_bits_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;






      independent_bits_engine()
      : _M_b() { }







      explicit
      independent_bits_engine(const _RandomNumberEngine& __rne)
      : _M_b(__rne) { }







      explicit
      independent_bits_engine(_RandomNumberEngine&& __rne)
      : _M_b(std::move(__rne)) { }







      explicit
      independent_bits_engine(result_type __s)
      : _M_b(__s) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, independent_bits_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
               ::type>
        explicit
        independent_bits_engine(_Sseq& __q)
        : _M_b(__q)
        { }





      void
      seed()
      { _M_b.seed(); }





      void
      seed(result_type __s)
      { _M_b.seed(__s); }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        { _M_b.seed(__q); }





      const _RandomNumberEngine&
      base() const
      { return _M_b; }




      static constexpr result_type
      min()
      { return 0U; }




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1143 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 friend bool
      operator==(const independent_bits_engine& __lhs,
   const independent_bits_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b; }
# 1160 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::independent_bits_engine<_RandomNumberEngine,
     __w, _UIntType>& __x)
 {
   __is >> __x._M_b;
   return __is;
 }

    private:
      _RandomNumberEngine _M_b;
    };
# 1186 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    inline bool
    operator!=(const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __lhs,
        const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __rhs)
    { return !(__lhs == __rhs); }
# 1204 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RandomNumberEngine, size_t __w, typename _UIntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::independent_bits_engine<_RandomNumberEngine,
        __w, _UIntType>& __x)
    {
      __os << __x.base();
      return __os;
    }







  template<typename _RandomNumberEngine, size_t __k>
    class shuffle_order_engine
    {
      static_assert(1u <= __k, "template argument substituting "
      "__k out of bound");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;

      static constexpr size_t table_size = __k;






      shuffle_order_engine()
      : _M_b()
      { _M_initialize(); }







      explicit
      shuffle_order_engine(const _RandomNumberEngine& __rne)
      : _M_b(__rne)
      { _M_initialize(); }







      explicit
      shuffle_order_engine(_RandomNumberEngine&& __rne)
      : _M_b(std::move(__rne))
      { _M_initialize(); }







      explicit
      shuffle_order_engine(result_type __s)
      : _M_b(__s)
      { _M_initialize(); }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, shuffle_order_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        shuffle_order_engine(_Sseq& __q)
        : _M_b(__q)
        { _M_initialize(); }





      void
      seed()
      {
 _M_b.seed();
 _M_initialize();
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_initialize();
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_initialize();
 }




      const _RandomNumberEngine&
      base() const
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1372 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 friend bool
      operator==(const shuffle_order_engine& __lhs,
   const shuffle_order_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b; }
# 1388 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::shuffle_order_engine<_RandomNumberEngine1,
     __k1>&);
# 1406 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::shuffle_order_engine<_RandomNumberEngine1, __k1>&);

    private:
      void _M_initialize()
      {
 for (size_t __i = 0; __i < __k; ++__i)
   _M_v[__i] = _M_b();
 _M_y = _M_b();
      }

      _RandomNumberEngine _M_b;
      result_type _M_v[__k];
      result_type _M_y;
    };
# 1436 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RandomNumberEngine, size_t __k>
    inline bool
    operator!=(const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __lhs,
        const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __rhs)
    { return !(__lhs == __rhs); }





  typedef linear_congruential_engine<uint_fast32_t, 16807UL, 0UL, 2147483647UL>
  minstd_rand0;




  typedef linear_congruential_engine<uint_fast32_t, 48271UL, 0UL, 2147483647UL>
  minstd_rand;
# 1465 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 typedef mersenne_twister_engine<
    uint_fast32_t,
    32, 624, 397, 31,
    0x9908b0dfUL, 11,
    0xffffffffUL, 7,
    0x9d2c5680UL, 15,
    0xefc60000UL, 18, 1812433253UL> mt19937;




  typedef mersenne_twister_engine<
    uint_fast64_t,
    64, 312, 156, 31,
    0xb5026f5aa96619e9ULL, 29,
    0x5555555555555555ULL, 17,
    0x71d67fffeda60000ULL, 37,
    0xfff7eee000000000ULL, 43,
    6364136223846793005ULL> mt19937_64;

  typedef subtract_with_carry_engine<uint_fast32_t, 24, 10, 24>
    ranlux24_base;

  typedef subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>
    ranlux48_base;

  typedef discard_block_engine<ranlux24_base, 223, 23> ranlux24;

  typedef discard_block_engine<ranlux48_base, 389, 11> ranlux48;

  typedef shuffle_order_engine<minstd_rand0, 256> knuth_b;

  typedef minstd_rand0 default_random_engine;





  class random_device
  {
  public:

    typedef unsigned int result_type;





    explicit
    random_device(const std::string& __token = "/dev/urandom")
    {
      if ((__token != "/dev/urandom" && __token != "/dev/random")
   || !(_M_file = std::fopen(__token.c_str(), "rb")))
 std::__throw_runtime_error(("random_device::" "random_device(const std::string&)"));

    }

    ~random_device()
    { std::fclose(_M_file); }
# 1552 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 result_type
    min() const
    { return std::numeric_limits<result_type>::min(); }

    result_type
    max() const
    { return std::numeric_limits<result_type>::max(); }

    double
    entropy() const
    { return 0.0; }

    result_type
    operator()()
    {

      result_type __ret;
      std::fread(reinterpret_cast<void*>(&__ret), sizeof(result_type),
   1, _M_file);
      return __ret;



    }


    random_device(const random_device&) = delete;
    void operator=(const random_device&) = delete;

  private:


    FILE* _M_file;



  };
# 1609 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType = int>
    class uniform_int_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef uniform_int_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __a = 0,
     _IntType __b = std::numeric_limits<_IntType>::max())
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _IntType _M_a;
 _IntType _M_b;
      };

    public:



      explicit
      uniform_int_distribution(_IntType __a = 0,
      _IntType __b = std::numeric_limits<_IntType>::max())
      : _M_param(__a, __b)
      { }

      explicit
      uniform_int_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::uniform_int_distribution<_IntType>& __d1,
        const std::uniform_int_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_int_distribution<_IntType>& __d1,
        const std::uniform_int_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 1754 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_int_distribution<_IntType>&);
# 1768 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_int_distribution<_IntType>&);
# 1781 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType = double>
    class uniform_real_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef uniform_real_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

    public:






      explicit
      uniform_real_distribution(_RealType __a = _RealType(0),
    _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      uniform_real_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return (__aurng() * (__p.b() - __p.a())) + __p.a();
 }

    private:
      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::uniform_real_distribution<_IntType>& __d1,
        const std::uniform_real_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_real_distribution<_IntType>& __d1,
        const std::uniform_real_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 1935 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_real_distribution<_RealType>&);
# 1949 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_real_distribution<_RealType>&);
# 1971 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType = double>
    class normal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef normal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __mean = _RealType(0),
     _RealType __stddev = _RealType(1))
 : _M_mean(__mean), _M_stddev(__stddev)
 {
                                                  ;
 }

 _RealType
 mean() const
 { return _M_mean; }

 _RealType
 stddev() const
 { return _M_stddev; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_mean == __p2._M_mean
    && __p1._M_stddev == __p2._M_stddev); }

      private:
 _RealType _M_mean;
 _RealType _M_stddev;
      };

    public:




      explicit
      normal_distribution(result_type __mean = result_type(0),
     result_type __stddev = result_type(1))
      : _M_param(__mean, __stddev), _M_saved_available(false)
      { }

      explicit
      normal_distribution(const param_type& __p)
      : _M_param(__p), _M_saved_available(false)
      { }




      void
      reset()
      { _M_saved_available = false; }




      _RealType
      mean() const
      { return _M_param.mean(); }




      _RealType
      stddev() const
      { return _M_param.stddev(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _RealType1>
 friend bool
        operator==(const std::normal_distribution<_RealType1>& __d1,
     const std::normal_distribution<_RealType1>& __d2);
# 2110 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::normal_distribution<_RealType1>&);
# 2125 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::normal_distribution<_RealType1>&);

    private:
      param_type _M_param;
      result_type _M_saved;
      bool _M_saved_available;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2155 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType = double>
    class lognormal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef lognormal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(0),
     _RealType __s = _RealType(1))
 : _M_m(__m), _M_s(__s)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 s() const
 { return _M_s; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_s == __p2._M_s; }

      private:
 _RealType _M_m;
 _RealType _M_s;
      };

      explicit
      lognormal_distribution(_RealType __m = _RealType(0),
        _RealType __s = _RealType(1))
      : _M_param(__m, __s), _M_nd()
      { }

      explicit
      lognormal_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      s() const
      { return _M_param.s(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        { return std::exp(__p.s() * _M_nd(__urng) + __p.m()); }






      template<typename _RealType1>
        friend bool
        operator==(const std::lognormal_distribution<_RealType1>& __d1,
     const std::lognormal_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_nd == __d2._M_nd); }
# 2286 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::lognormal_distribution<_RealType1>&);
# 2301 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::lognormal_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::lognormal_distribution<_RealType>& __d1,
        const std::lognormal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2331 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType = double>
    class gamma_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef gamma_distribution<_RealType> distribution_type;
 friend class gamma_distribution<_RealType>;

 explicit
 param_type(_RealType __alpha_val = _RealType(1),
     _RealType __beta_val = _RealType(1))
 : _M_alpha(__alpha_val), _M_beta(__beta_val)
 {
                                                 ;
   _M_initialize();
 }

 _RealType
 alpha() const
 { return _M_alpha; }

 _RealType
 beta() const
 { return _M_beta; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_alpha == __p2._M_alpha
    && __p1._M_beta == __p2._M_beta); }

      private:
 void
 _M_initialize();

 _RealType _M_alpha;
 _RealType _M_beta;

 _RealType _M_malpha, _M_a2;
      };

    public:




      explicit
      gamma_distribution(_RealType __alpha_val = _RealType(1),
    _RealType __beta_val = _RealType(1))
      : _M_param(__alpha_val, __beta_val), _M_nd()
      { }

      explicit
      gamma_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      alpha() const
      { return _M_param.alpha(); }




      _RealType
      beta() const
      { return _M_param.beta(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _RealType1>
        friend bool
        operator==(const std::gamma_distribution<_RealType1>& __d1,
     const std::gamma_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_nd == __d2._M_nd); }
# 2479 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::gamma_distribution<_RealType1>&);
# 2493 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::gamma_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




   template<typename _RealType>
    inline bool
     operator!=(const std::gamma_distribution<_RealType>& __d1,
  const std::gamma_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2520 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType = double>
    class chi_squared_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef chi_squared_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      chi_squared_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_gd(__n / 2)
      { }

      explicit
      chi_squared_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.n() / 2)
      { }




      void
      reset()
      { _M_gd.reset(); }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return 2 * _M_gd(__urng); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return 2 * _M_gd(__urng, param_type(__p.n() / 2));
 }






      template<typename _RealType1>
        friend bool
        operator==(const std::chi_squared_distribution<_RealType1>& __d1,
     const std::chi_squared_distribution<_RealType1>& __d2)
        { return __d1.param() == __d2.param() && __d1._M_gd == __d2._M_gd; }
# 2643 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::chi_squared_distribution<_RealType1>&);
# 2658 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::chi_squared_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::chi_squared_distribution<_RealType>& __d1,
        const std::chi_squared_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2685 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType = double>
    class cauchy_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef cauchy_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      cauchy_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      cauchy_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }

      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::cauchy_distribution<_RealType>& __d1,
        const std::cauchy_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::cauchy_distribution<_RealType>& __d1,
        const std::cauchy_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2827 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::cauchy_distribution<_RealType>&);
# 2842 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::cauchy_distribution<_RealType>&);
# 2858 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType = double>
    class fisher_f_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef fisher_f_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(1),
     _RealType __n = _RealType(1))
 : _M_m(__m), _M_n(__n)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_m;
 _RealType _M_n;
      };

      explicit
      fisher_f_distribution(_RealType __m = _RealType(1),
       _RealType __n = _RealType(1))
      : _M_param(__m, __n), _M_gd_x(__m / 2), _M_gd_y(__n / 2)
      { }

      explicit
      fisher_f_distribution(const param_type& __p)
      : _M_param(__p), _M_gd_x(__p.m() / 2), _M_gd_y(__p.n() / 2)
      { }




      void
      reset()
      {
 _M_gd_x.reset();
 _M_gd_y.reset();
      }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return (_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return ((_M_gd_x(__urng, param_type(__p.m() / 2)) * n())
    / (_M_gd_y(__urng, param_type(__p.n() / 2)) * m()));
 }






      template<typename _RealType1>
        friend bool
        operator==(const std::fisher_f_distribution<_RealType1>& __d1,
     const std::fisher_f_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_gd_x == __d2._M_gd_x
    && __d1._M_gd_y == __d2._M_gd_y); }
# 2998 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::fisher_f_distribution<_RealType1>&);
# 3013 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::fisher_f_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd_x, _M_gd_y;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::fisher_f_distribution<_RealType>& __d1,
        const std::fisher_f_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3042 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType = double>
    class student_t_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef student_t_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      student_t_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_nd(), _M_gd(__n / 2, 2)
      { }

      explicit
      student_t_distribution(const param_type& __p)
      : _M_param(__p), _M_nd(), _M_gd(__p.n() / 2, 2)
      { }




      void
      reset()
      {
 _M_nd.reset();
 _M_gd.reset();
      }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng)
        { return _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng)); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;

   const result_type __g = _M_gd(__urng, param_type(__p.n() / 2, 2));
   return _M_nd(__urng) * std::sqrt(__p.n() / __g);
        }






      template<typename _RealType1>
        friend bool
        operator==(const std::student_t_distribution<_RealType1>& __d1,
     const std::student_t_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_nd == __d2._M_nd && __d1._M_gd == __d2._M_gd); }
# 3171 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::student_t_distribution<_RealType1>&);
# 3186 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::student_t_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::student_t_distribution<_RealType>& __d1,
        const std::student_t_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3222 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 class bernoulli_distribution
  {
  public:

    typedef bool result_type;

    struct param_type
    {
      typedef bernoulli_distribution distribution_type;

      explicit
      param_type(double __p = 0.5)
      : _M_p(__p)
      {
                                                      ;
      }

      double
      p() const
      { return _M_p; }

      friend bool
      operator==(const param_type& __p1, const param_type& __p2)
      { return __p1._M_p == __p2._M_p; }

    private:
      double _M_p;
    };

  public:






    explicit
    bernoulli_distribution(double __p = 0.5)
    : _M_param(__p)
    { }

    explicit
    bernoulli_distribution(const param_type& __p)
    : _M_param(__p)
    { }






    void
    reset() { }




    double
    p() const
    { return _M_param.p(); }




    param_type
    param() const
    { return _M_param; }





    void
    param(const param_type& __param)
    { _M_param = __param; }




    result_type
    min() const
    { return std::numeric_limits<result_type>::min(); }




    result_type
    max() const
    { return std::numeric_limits<result_type>::max(); }




    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng)
      { return this->operator()(__urng, this->param()); }

    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);
 if ((__aurng() - __aurng.min())
      < __p.p() * (__aurng.max() - __aurng.min()))
   return true;
 return false;
      }

  private:
    param_type _M_param;
  };





  inline bool
  operator==(const std::bernoulli_distribution& __d1,
      const std::bernoulli_distribution& __d2)
  { return __d1.param() == __d2.param(); }





  inline bool
  operator!=(const std::bernoulli_distribution& __d1,
      const std::bernoulli_distribution& __d2)
  { return !(__d1 == __d2); }
# 3365 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::bernoulli_distribution&);
# 3379 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::bernoulli_distribution& __x)
    {
      double __p;
      __is >> __p;
      __x.param(bernoulli_distribution::param_type(__p));
      return __is;
    }
# 3398 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType = int>
    class binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef binomial_distribution<_IntType> distribution_type;
 friend class binomial_distribution<_IntType>;

 explicit
 param_type(_IntType __t = _IntType(1), double __p = 0.5)
 : _M_t(__t), _M_p(__p)
 {


                     ;
   _M_initialize();
 }

 _IntType
 t() const
 { return _M_t; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_t == __p2._M_t && __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize();

 _IntType _M_t;
 double _M_p;

 double _M_q;

 double _M_d1, _M_d2, _M_s1, _M_s2, _M_c,
        _M_a1, _M_a123, _M_s, _M_lf, _M_lp1p;

 bool _M_easy;
      };


      explicit
      binomial_distribution(_IntType __t = _IntType(1),
       double __p = 0.5)
      : _M_param(__t, __p), _M_nd()
      { }

      explicit
      binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _IntType
      t() const
      { return _M_param.t(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return _M_param.t(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _IntType1>
 friend bool
        operator==(const std::binomial_distribution<_IntType1>& __d1,
     const std::binomial_distribution<_IntType1>& __d2)

 { return __d1.param() == __d2.param() && __d1._M_nd == __d2._M_nd; }
# 3550 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::binomial_distribution<_IntType1>&);
# 3566 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::binomial_distribution<_IntType1>&);

    private:
      template<typename _UniformRandomNumberGenerator>
 result_type
 _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t);

      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::binomial_distribution<_IntType>& __d1,
        const std::binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 3600 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType = int>
    class geometric_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef geometric_distribution<_IntType> distribution_type;
 friend class geometric_distribution<_IntType>;

 explicit
 param_type(double __p = 0.5)
 : _M_p(__p)
 {

                        ;
   _M_initialize();
 }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize()
 { _M_log_1_p = std::log(1.0 - _M_p); }

 double _M_p;

 double _M_log_1_p;
      };


      explicit
      geometric_distribution(double __p = 0.5)
      : _M_param(__p)
      { }

      explicit
      geometric_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::geometric_distribution<_IntType>& __d1,
        const std::geometric_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::geometric_distribution<_IntType>& __d1,
        const std::geometric_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 3744 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::geometric_distribution<_IntType>&);
# 3759 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::geometric_distribution<_IntType>&);
# 3773 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType = int>
    class negative_binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef negative_binomial_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __k = 1, double __p = 0.5)
 : _M_k(__k), _M_p(__p)
 {
                                                                     ;
 }

 _IntType
 k() const
 { return _M_k; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_k == __p2._M_k && __p1._M_p == __p2._M_p; }

      private:
 _IntType _M_k;
 double _M_p;
      };

      explicit
      negative_binomial_distribution(_IntType __k = 1, double __p = 0.5)
      : _M_param(__k, __p), _M_gd(__k, (1.0 - __p) / __p)
      { }

      explicit
      negative_binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.k(), (1.0 - __p.p()) / __p.p())
      { }




      void
      reset()
      { _M_gd.reset(); }




      _IntType
      k() const
      { return _M_param.k(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng);

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _IntType1>
        friend bool
        operator==(const std::negative_binomial_distribution<_IntType1>& __d1,
     const std::negative_binomial_distribution<_IntType1>& __d2)
        { return __d1.param() == __d2.param() && __d1._M_gd == __d2._M_gd; }
# 3905 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::negative_binomial_distribution<_IntType1>&);
# 3920 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::negative_binomial_distribution<_IntType1>&);

    private:
      param_type _M_param;

      std::gamma_distribution<double> _M_gd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::negative_binomial_distribution<_IntType>& __d1,
        const std::negative_binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 3956 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType = int>
    class poisson_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef poisson_distribution<_IntType> distribution_type;
 friend class poisson_distribution<_IntType>;

 explicit
 param_type(double __mean = 1.0)
 : _M_mean(__mean)
 {
                                       ;
   _M_initialize();
 }

 double
 mean() const
 { return _M_mean; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_mean == __p2._M_mean; }

      private:

 void
 _M_initialize();

 double _M_mean;

 double _M_lm_thr;

 double _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb;

      };


      explicit
      poisson_distribution(double __mean = 1.0)
      : _M_param(__mean), _M_nd()
      { }

      explicit
      poisson_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      double
      mean() const
      { return _M_param.mean(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _IntType1>
        friend bool
        operator==(const std::poisson_distribution<_IntType1>& __d1,
     const std::poisson_distribution<_IntType1>& __d2)

        { return __d1.param() == __d2.param() && __d1._M_nd == __d2._M_nd; }
# 4092 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::poisson_distribution<_IntType1>&);
# 4107 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::poisson_distribution<_IntType1>&);

    private:
      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::poisson_distribution<_IntType>& __d1,
        const std::poisson_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4144 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType = double>
    class exponential_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef exponential_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __lambda = _RealType(1))
 : _M_lambda(__lambda)
 {
                                                  ;
 }

 _RealType
 lambda() const
 { return _M_lambda; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_lambda == __p2._M_lambda; }

      private:
 _RealType _M_lambda;
      };

    public:




      explicit
      exponential_distribution(const result_type& __lambda = result_type(1))
      : _M_param(__lambda)
      { }

      explicit
      exponential_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      _RealType
      lambda() const
      { return _M_param.lambda(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return -std::log(__aurng()) / __p.lambda();
 }

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::exponential_distribution<_RealType>& __d1,
        const std::exponential_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::exponential_distribution<_RealType>& __d1,
        const std::exponential_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4288 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::exponential_distribution<_RealType>&);
# 4303 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::exponential_distribution<_RealType>&);
# 4318 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType = double>
    class weibull_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef weibull_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(1),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      weibull_distribution(_RealType __a = _RealType(1),
      _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      weibull_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::weibull_distribution<_RealType>& __d1,
        const std::weibull_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::weibull_distribution<_RealType>& __d1,
        const std::weibull_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4463 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::weibull_distribution<_RealType>&);
# 4478 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::weibull_distribution<_RealType>&);
# 4493 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType = double>
    class extreme_value_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef extreme_value_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      extreme_value_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      extreme_value_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::extreme_value_distribution<_RealType>& __d1,
        const std::extreme_value_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::extreme_value_distribution<_RealType>& __d1,
        const std::extreme_value_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4638 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::extreme_value_distribution<_RealType>&);
# 4653 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::extreme_value_distribution<_RealType>&);
# 4665 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType = int>
    class discrete_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef discrete_distribution<_IntType> distribution_type;
 friend class discrete_distribution<_IntType>;

 param_type()
 : _M_prob(), _M_cp()
 { }

 template<typename _InputIterator>
   param_type(_InputIterator __wbegin,
       _InputIterator __wend)
   : _M_prob(__wbegin, __wend), _M_cp()
   { _M_initialize(); }

 param_type(initializer_list<double> __wil)
 : _M_prob(__wil.begin(), __wil.end()), _M_cp()
 { _M_initialize(); }

 template<typename _Func>
   param_type(size_t __nw, double __xmin, double __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<double>
 probabilities() const
 { return _M_prob.empty() ? std::vector<double>(1, 1.0) : _M_prob; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_prob == __p2._M_prob; }

      private:
 void
 _M_initialize();

 std::vector<double> _M_prob;
 std::vector<double> _M_cp;
      };

      discrete_distribution()
      : _M_param()
      { }

      template<typename _InputIterator>
 discrete_distribution(_InputIterator __wbegin,
         _InputIterator __wend)
 : _M_param(__wbegin, __wend)
 { }

      discrete_distribution(initializer_list<double> __wl)
      : _M_param(__wl)
      { }

      template<typename _Func>
 discrete_distribution(size_t __nw, double __xmin, double __xmax,
         _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      discrete_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<double>
      probabilities() const
      {
 return _M_param._M_prob.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_prob;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      {
 return _M_param._M_prob.empty()
   ? result_type(0) : result_type(_M_param._M_prob.size() - 1);
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);
# 4815 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::discrete_distribution<_IntType1>&);
# 4831 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::discrete_distribution<_IntType1>&);

    private:
      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::discrete_distribution<_IntType>& __d1,
        const std::discrete_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::discrete_distribution<_IntType>& __d1,
        const std::discrete_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4867 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType = double>
    class piecewise_constant_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_constant_distribution<_RealType> distribution_type;
 friend class piecewise_constant_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bi, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(1, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_int == __p2._M_int && __p1._M_den == __p2._M_den; }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
      };

      explicit
      piecewise_constant_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_constant_distribution(_InputIteratorB __bfirst,
     _InputIteratorB __bend,
     _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_constant_distribution(initializer_list<_RealType> __bl,
     _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_constant_distribution(size_t __nw,
     _RealType __xmin, _RealType __xmax,
     _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_constant_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }




      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);
# 5054 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::piecewise_constant_distribution<_RealType1>&);
# 5070 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::piecewise_constant_distribution<_RealType1>&);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::piecewise_constant_distribution<_RealType>& __d1,
        const std::piecewise_constant_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_constant_distribution<_RealType>& __d1,
        const std::piecewise_constant_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5106 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType = double>
    class piecewise_linear_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_linear_distribution<_RealType> distribution_type;
 friend class piecewise_linear_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp(), _M_m()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bl, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(2, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_int == __p2._M_int
    && __p1._M_den == __p2._M_den); }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
 std::vector<double> _M_m;
      };

      explicit
      piecewise_linear_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_linear_distribution(_InputIteratorB __bfirst,
          _InputIteratorB __bend,
          _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_linear_distribution(initializer_list<_RealType> __bl,
          _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_linear_distribution(size_t __nw,
          _RealType __xmin, _RealType __xmax,
          _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_linear_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }





      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(2, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);
# 5296 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::piecewise_linear_distribution<_RealType1>&);
# 5312 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::piecewise_linear_distribution<_RealType1>&);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::piecewise_linear_distribution<_RealType>& __d1,
        const std::piecewise_linear_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_linear_distribution<_RealType>& __d1,
        const std::piecewise_linear_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5356 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
 class seed_seq
  {

  public:

    typedef uint_least32_t result_type;


    seed_seq()
    : _M_v()
    { }

    template<typename _IntType>
      seed_seq(std::initializer_list<_IntType> il);

    template<typename _InputIterator>
      seed_seq(_InputIterator __begin, _InputIterator __end);


    template<typename _RandomAccessIterator>
      void
      generate(_RandomAccessIterator __begin, _RandomAccessIterator __end);


    size_t size() const
    { return _M_v.size(); }

    template<typename OutputIterator>
      void
      param(OutputIterator __dest) const
      { std::copy(_M_v.begin(), _M_v.end(), __dest); }

  private:

    std::vector<result_type> _M_v;
  };






}
# 50 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 1 3
# 33 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 1 3
# 58 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 3
# 58 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 3



# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 1 3
# 66 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 81 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
 template<typename _ForwardIterator, typename _Tp>
    void
    iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)
    {





                                                     ;

      for (; __first != __last; ++__first)
 {
   *__first = __value;
   ++__value;
 }
    }


}



namespace std __attribute__ ((__visibility__ ("default")))
{
# 119 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
 template<typename _InputIterator, typename _Tp>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __init + *__first;
      return __init;
    }
# 145 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
 template<typename _InputIterator, typename _Tp, typename _BinaryOperation>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,
        _BinaryOperation __binary_op)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __binary_op(__init, *__first);
      return __init;
    }
# 173 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
 template<typename _InputIterator1, typename _InputIterator2, typename _Tp>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __init + (*__first1 * *__first2);
      return __init;
    }
# 204 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
 template<typename _InputIterator1, typename _InputIterator2, typename _Tp,
    typename _BinaryOperation1, typename _BinaryOperation2>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init,
    _BinaryOperation1 __binary_op1,
    _BinaryOperation2 __binary_op2)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __binary_op1(__init, __binary_op2(*__first1, *__first2));
      return __init;
    }
# 236 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
 template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __value + *__first;
   *++__result = __value;
 }
      return ++__result;
    }
# 276 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
 template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __binary_op(__value, *__first);
   *++__result = __value;
 }
      return ++__result;
    }
# 316 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
 template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    adjacent_difference(_InputIterator __first,
   _InputIterator __last, _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __tmp - __value;
   __value = std::move(__tmp);
 }
      return ++__result;
    }
# 357 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
 template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    adjacent_difference(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __binary_op(__tmp, __value);
   __value = std::move(__tmp);
 }
      return ++__result;
    }


}
# 62 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 2 3
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  namespace __detail
  {
# 54 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
 template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool>
      struct _Mod
      {
 static _Tp
 __calc(_Tp __x)
 {
   if (__a == 1)
     __x %= __m;
   else
     {
       static const _Tp __q = __m / __a;
       static const _Tp __r = __m % __a;

       _Tp __t1 = __a * (__x % __q);
       _Tp __t2 = __r * (__x / __q);
       if (__t1 >= __t2)
  __x = __t1 - __t2;
       else
  __x = __m - __t2 + __t1;
     }

   if (__c != 0)
     {
       const _Tp __d = __m - __x;
       if (__d > __c)
  __x += __c;
       else
  __x = __c - __d;
     }
   return __x;
 }
      };



    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>
      struct _Mod<_Tp, __m, __a, __c, true>
      {
 static _Tp
 __calc(_Tp __x)
 { return __a * __x + __c; }
      };

    template<typename _InputIterator, typename _OutputIterator,
      typename _UnaryOperation>
      _OutputIterator
      __transform(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _UnaryOperation __unary_op)
      {
 for (; __first != __last; ++__first, ++__result)
   *__result = __unary_op(*__first);
 return __result;
      }


  }



  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::multiplier;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::increment;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::modulus;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::default_seed;





  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    void
    linear_congruential_engine<_UIntType, __a, __c, __m>::
    seed(result_type __s)
    {
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
   && (__detail::__mod<_UIntType, __m>(__s) == 0))
 _M_x = 1;
      else
 _M_x = __detail::__mod<_UIntType, __m>(__s);
    }




  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      linear_congruential_engine<_UIntType, __a, __c, __m>::
      seed(_Sseq& __q)
      {
 const _UIntType __k0 = __m == 0 ? std::numeric_limits<_UIntType>::digits
                                 : std::__lg(__m);
 const _UIntType __k = (__k0 + 31) / 32;
 uint_least32_t __arr[__k + 3];
 __q.generate(__arr + 0, __arr + __k + 3);
 _UIntType __factor = 1u;
 _UIntType __sum = 0u;
 for (size_t __j = 0; __j < __k; ++__j)
   {
     __sum += __arr[__j + 3] * __factor;
     __factor *= __detail::_Shift<_UIntType, 32>::__value;
   }
 seed(__sum);
      }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const linear_congruential_engine<_UIntType,
      __a, __c, __m>& __lcr)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__os.widen(' '));

      __os << __lcr._M_x;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        linear_congruential_engine<_UIntType, __a, __c, __m>& __lcr)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec);

      __is >> __lcr._M_x;

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::word_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::state_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::shift_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::mask_bits;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::xor_mask;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_u;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_d;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_s;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_b;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_t;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_c;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_l;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
                                              initialization_multiplier;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::default_seed;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
 __detail::_Shift<_UIntType, __w>::__value>(__sd);

      for (size_t __i = 1; __i < state_size; ++__i)
 {
   _UIntType __x = _M_x[__i - 1];
   __x ^= __x >> (__w - 2);
   __x *= __f;
   __x += __detail::__mod<_UIntType, __n>(__i);
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__x);
 }
      _M_p = state_size;
    }

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
         __s, __b, __t, __c, __l, __f>::
      seed(_Sseq& __q)
      {
 const _UIntType __upper_mask = (~_UIntType()) << __r;
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__n * __k];
 __q.generate(__arr + 0, __arr + __n * __k);

 bool __zero = true;
 for (size_t __i = 0; __i < state_size; ++__i)
   {
     _UIntType __factor = 1u;
     _UIntType __sum = 0u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);

     if (__zero)
       {
  if (__i == 0)
    {
      if ((_M_x[0] & __upper_mask) != 0u)
        __zero = false;
    }
  else if (_M_x[__i] != 0u)
    __zero = false;
       }
   }
        if (__zero)
          _M_x[0] = __detail::_Shift<_UIntType, __w - 1>::__value;
      }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    typename
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::result_type
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    operator()()
    {

      if (_M_p >= state_size)
 {
   const _UIntType __upper_mask = (~_UIntType()) << __r;
   const _UIntType __lower_mask = ~__upper_mask;

   for (size_t __k = 0; __k < (__n - __m); ++__k)
     {
       _UIntType __y = ((_M_x[__k] & __upper_mask)
          | (_M_x[__k + 1] & __lower_mask));
       _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
      ^ ((__y & 0x01) ? __a : 0));
     }

   for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
     {
       _UIntType __y = ((_M_x[__k] & __upper_mask)
          | (_M_x[__k + 1] & __lower_mask));
       _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
      ^ ((__y & 0x01) ? __a : 0));
     }

   _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
      | (_M_x[0] & __lower_mask));
   _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
      ^ ((__y & 0x01) ? __a : 0));
   _M_p = 0;
 }


      result_type __z = _M_x[_M_p++];
      __z ^= (__z >> __u) & __d;
      __z ^= (__z << __s) & __b;
      __z ^= (__z << __t) & __c;
      __z ^= (__z >> __l);

      return __z;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __n - 1; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_x[__n - 1];

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __n; ++__i)
 __is >> __x._M_x[__i];

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::word_size;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::short_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::long_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr _UIntType
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::default_seed;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    void
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    seed(result_type __value)
    {
      std::linear_congruential_engine<result_type, 40014u, 0u, 2147483563u>
 __lcg(__value == 0u ? default_seed : __value);

      const size_t __n = (__w + 31) / 32;

      for (size_t __i = 0; __i < long_lag; ++__i)
 {
   _UIntType __sum = 0u;
   _UIntType __factor = 1u;
   for (size_t __j = 0; __j < __n; ++__j)
     {
       __sum += __detail::__mod<uint_least32_t,
         __detail::_Shift<uint_least32_t, 32>::__value>
    (__lcg()) * __factor;
       __factor *= __detail::_Shift<_UIntType, 32>::__value;
     }
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__sum);
 }
      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
      _M_p = 0;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      seed(_Sseq& __q)
      {
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__r * __k];
 __q.generate(__arr + 0, __arr + __r * __k);

 for (size_t __i = 0; __i < long_lag; ++__i)
   {
     _UIntType __sum = 0u;
     _UIntType __factor = 1u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);
   }
 _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
 _M_p = 0;
      }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    typename subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      result_type
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    operator()()
    {

      long __ps = _M_p - short_lag;
      if (__ps < 0)
 __ps += long_lag;




      _UIntType __xi;
      if (_M_x[__ps] >= _M_x[_M_p] + _M_carry)
 {
   __xi = _M_x[__ps] - _M_x[_M_p] - _M_carry;
   _M_carry = 0;
 }
      else
 {
   __xi = (__detail::_Shift<_UIntType, __w>::__value
    - _M_x[_M_p] - _M_carry + _M_x[__ps]);
   _M_carry = 1;
 }
      _M_x[_M_p] = __xi;


      if (++_M_p >= long_lag)
 _M_p = 0;

      return __xi;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const subtract_with_carry_engine<_UIntType,
      __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __r; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_carry;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        subtract_with_carry_engine<_UIntType, __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __r; ++__i)
 __is >> __x._M_x[__i];
      __is >> __x._M_carry;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::block_size;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::used_block;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    typename discard_block_engine<_RandomNumberEngine,
      __p, __r>::result_type
    discard_block_engine<_RandomNumberEngine, __p, __r>::
    operator()()
    {
      if (_M_n >= used_block)
 {
   _M_b.discard(block_size - _M_n);
   _M_n = 0;
 }
      ++_M_n;
      return _M_b();
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discard_block_engine<_RandomNumberEngine,
        __p, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base() << __space << __x._M_n;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discard_block_engine<_RandomNumberEngine, __p, __r>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b >> __x._M_n;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    typename independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
      result_type
    independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
    operator()()
    {
      const long double __r = static_cast<long double>(_M_b.max())
       - static_cast<long double>(_M_b.min()) + 1.0L;
      const result_type __m = std::log(__r) / std::log(2.0L);
      result_type __n, __n0, __y0, __y1, __s0, __s1;
      for (size_t __i = 0; __i < 2; ++__i)
 {
   __n = (__w + __m - 1) / __m + __i;
   __n0 = __n - __w % __n;
   const result_type __w0 = __w / __n;
   const result_type __w1 = __w0 + 1;
   __s0 = result_type(1) << __w0;
   __s1 = result_type(1) << __w1;
   __y0 = __s0 * (__r / __s0);
   __y1 = __s1 * (__r / __s1);
   if (__r - __y0 <= __y0 / __n)
     break;
 }

      result_type __sum = 0;
      for (size_t __k = 0; __k < __n0; ++__k)
 {
   result_type __u;
   do
     __u = _M_b() - _M_b.min();
   while (__u >= __y0);
   __sum = __s0 * __sum + __u % __s0;
 }
      for (size_t __k = __n0; __k < __n; ++__k)
 {
   result_type __u;
   do
     __u = _M_b() - _M_b.min();
   while (__u >= __y1);
   __sum = __s1 * __sum + __u % __s1;
 }
      return __sum;
    }


  template<typename _RandomNumberEngine, size_t __k>
    constexpr size_t
    shuffle_order_engine<_RandomNumberEngine, __k>::table_size;

  template<typename _RandomNumberEngine, size_t __k>
    typename shuffle_order_engine<_RandomNumberEngine, __k>::result_type
    shuffle_order_engine<_RandomNumberEngine, __k>::
    operator()()
    {
      size_t __j = __k * ((_M_y - _M_b.min())
     / (_M_b.max() - _M_b.min() + 1.0L));
      _M_y = _M_v[__j];
      _M_v[__j] = _M_b();

      return _M_y;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base();
      for (size_t __i = 0; __i < __k; ++__i)
 __os << __space << __x._M_v[__i];
      __os << __space << __x._M_y;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b;
      for (size_t __i = 0; __i < __k; ++__i)
 __is >> __x._M_v[__i];
      __is >> __x._M_y;

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 typedef typename std::make_unsigned<typename
   _UniformRandomNumberGenerator::result_type>::type __urngtype;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::conditional<(sizeof(__urngtype)
        > sizeof(__utype)),
   __urngtype, __utype>::type __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {

     const __uctype __uerange = __urange + 1;
     const __uctype __scaling = __urngrange / __uerange;
     const __uctype __past = __uerange * __scaling;
     do
       __ret = __uctype(__urng()) - __urngmin;
     while (__ret >= __past);
     __ret /= __scaling;
   }
 else if (__urngrange < __urange)
   {
# 884 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
 __uctype __tmp;
     do
       {
  const __uctype __uerngrange = __urngrange + 1;
  __tmp = (__uerngrange * operator()
    (__urng, param_type(0, __urange / __uerngrange)));
  __ret = __tmp + (__uctype(__urng()) - __urngmin);
       }
     while (__ret > __urange || __ret < __tmp);
   }
 else
   __ret = __uctype(__urng()) - __urngmin;

 return __ret + __param.a();
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_int_distribution<_IntType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_real_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const bernoulli_distribution& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename geometric_distribution<_IntType>::result_type
      geometric_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {


 const double __naf =
   (1 - std::numeric_limits<double>::epsilon()) / 2;

 const double __thr =
   std::numeric_limits<_IntType>::max() + __naf;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 double __cand;
 do
   __cand = std::floor(std::log(__aurng()) / __param._M_log_1_p);
 while (__cand >= __thr);

 return result_type(__cand + __naf);
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __p;
      __is >> __p;
      __x.param(typename geometric_distribution<_IntType>::param_type(__p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng)
      {
 const double __y = _M_gd(__urng);


 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 typedef typename std::gamma_distribution<result_type>::param_type
   param_type;

 const double __y =
   _M_gd(__urng, param_type(__p.k(), (1.0 - __p.p()) / __p.p()));

 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.k() << __space << __x.p()
    << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _IntType __k;
      double __p;
      __is >> __k >> __p >> __x._M_gd;
      __x.param(typename negative_binomial_distribution<_IntType>::
  param_type(__k, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    poisson_distribution<_IntType>::param_type::
    _M_initialize()
    {

      if (_M_mean >= 12)
 {
   const double __m = std::floor(_M_mean);
   _M_lm_thr = std::log(_M_mean);
   _M_lfm = std::lgamma(__m + 1);
   _M_sm = std::sqrt(__m);

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __dx = std::sqrt(2 * __m * std::log(32 * __m
             / __pi_4));
   _M_d = std::round(std::max(6.0, std::min(__m, __dx)));
   const double __cx = 2 * __m + _M_d;
   _M_scx = std::sqrt(__cx / 2);
   _M_1cx = 1 / __cx;

   _M_c2b = std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx);
   _M_cb = 2 * __cx * std::exp(-_M_d * _M_1cx * (1 + _M_d / 2))
  / _M_d;
 }
      else

 _M_lm_thr = std::exp(-_M_mean);
      }
# 1198 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
 template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename poisson_distribution<_IntType>::result_type
      poisson_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 if (__param.mean() >= 12)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __m = std::floor(__param.mean());

     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __c1 = __param._M_sm * __spi_2;
     const double __c2 = __param._M_c2b + __c1;
     const double __c3 = __c2 + 1;
     const double __c4 = __c3 + 1;

     const double __e178 = 1.0129030479320018583185514777512983L;
     const double __c5 = __c4 + __e178;
     const double __c = __param._M_cb + __c5;
     const double __2cx = 2 * (2 * __m + __param._M_d);

     bool __reject = true;
     do
       {
  const double __u = __c * __aurng();
  const double __e = -std::log(__aurng());

  double __w = 0.0;

  if (__u <= __c1)
    {
      const double __n = _M_nd(__urng);
      const double __y = -std::abs(__n) * __param._M_sm - 1;
      __x = std::floor(__y);
      __w = -__n * __n / 2;
      if (__x < -__m)
        continue;
    }
  else if (__u <= __c2)
    {
      const double __n = _M_nd(__urng);
      const double __y = 1 + std::abs(__n) * __param._M_scx;
      __x = std::ceil(__y);
      __w = __y * (2 - __y) * __param._M_1cx;
      if (__x > __param._M_d)
        continue;
    }
  else if (__u <= __c3)


    __x = -1;
  else if (__u <= __c4)
    __x = 0;
  else if (__u <= __c5)
    __x = 1;
  else
    {
      const double __v = -std::log(__aurng());
      const double __y = __param._M_d
         + __v * __2cx / __param._M_d;
      __x = std::ceil(__y);
      __w = -__param._M_d * __param._M_1cx * (1 + __y / 2);
    }

  __reject = (__w - __e - __x * __param._M_lm_thr
       > __param._M_lfm - std::lgamma(__x + __m + 1));

  __reject |= __x + __m >= __thr;

       } while (__reject);

     return result_type(__x + __m + __naf);
   }
 else

   {
     _IntType __x = 0;
     double __prod = 1.0;

     do
       {
  __prod *= __aurng();
  __x += 1;
       }
     while (__prod > __param._M_lm_thr);

     return __x - 1;
   }
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.mean() << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __mean;
      __is >> __mean >> __x._M_nd;
      __x.param(typename poisson_distribution<_IntType>::param_type(__mean));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    binomial_distribution<_IntType>::param_type::
    _M_initialize()
    {
      const double __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;

      _M_easy = true;


      if (_M_t * __p12 >= 8)
 {
   _M_easy = false;
   const double __np = std::floor(_M_t * __p12);
   const double __pa = __np / _M_t;
   const double __1p = 1 - __pa;

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __d1x =
     std::sqrt(__np * __1p * std::log(32 * __np
          / (81 * __pi_4 * __1p)));
   _M_d1 = std::round(std::max(1.0, __d1x));
   const double __d2x =
     std::sqrt(__np * __1p * std::log(32 * _M_t * __1p
          / (__pi_4 * __pa)));
   _M_d2 = std::round(std::max(1.0, __d2x));


   const double __spi_2 = 1.2533141373155002512078826424055226L;
   _M_s1 = std::sqrt(__np * __1p) * (1 + _M_d1 / (4 * __np));
   _M_s2 = std::sqrt(__np * __1p) * (1 + _M_d2 / (4 * _M_t * __1p));
   _M_c = 2 * _M_d1 / __np;
   _M_a1 = std::exp(_M_c) * _M_s1 * __spi_2;
   const double __a12 = _M_a1 + _M_s2 * __spi_2;
   const double __s1s = _M_s1 * _M_s1;
   _M_a123 = __a12 + (std::exp(_M_d1 / (_M_t * __1p))
        * 2 * __s1s / _M_d1
        * std::exp(-_M_d1 * _M_d1 / (2 * __s1s)));
   const double __s2s = _M_s2 * _M_s2;
   _M_s = (_M_a123 + 2 * __s2s / _M_d2
    * std::exp(-_M_d2 * _M_d2 / (2 * __s2s)));
   _M_lf = (std::lgamma(__np + 1)
     + std::lgamma(_M_t - __np + 1));
   _M_lp1p = std::log(__pa / __1p);

   _M_q = -std::log(1 - (__p12 - __pa) / __1p);
 }
      else

 _M_q = -std::log(1 - __p12);
    }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t)
      {
 _IntType __x = 0;
 double __sum = 0.0;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 do
   {
     const double __e = -std::log(__aurng());
     __sum += __e / (__t - __x);
     __x += 1;
   }
 while (__sum <= _M_param._M_q);

 return __x - 1;
      }
# 1430 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
 template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 const _IntType __t = __param.t();
 const double __p = __param.p();
 const double __p12 = __p <= 0.5 ? __p : 1.0 - __p;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);


 if (!__param._M_easy)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __np = std::floor(__t * __p12);


     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __a1 = __param._M_a1;
     const double __a12 = __a1 + __param._M_s2 * __spi_2;
     const double __a123 = __param._M_a123;
     const double __s1s = __param._M_s1 * __param._M_s1;
     const double __s2s = __param._M_s2 * __param._M_s2;

     bool __reject;
     do
       {
  const double __u = __param._M_s * __aurng();

  double __v;

  if (__u <= __a1)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s1 * std::abs(__n);
      __reject = __y >= __param._M_d1;
      if (!__reject)
        {
   const double __e = -std::log(__aurng());
   __x = std::floor(__y);
   __v = -__e - __n * __n / 2 + __param._M_c;
        }
    }
  else if (__u <= __a12)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s2 * std::abs(__n);
      __reject = __y >= __param._M_d2;
      if (!__reject)
        {
   const double __e = -std::log(__aurng());
   __x = std::floor(-__y);
   __v = -__e - __n * __n / 2;
        }
    }
  else if (__u <= __a123)
    {
      const double __e1 = -std::log(__aurng());
      const double __e2 = -std::log(__aurng());

      const double __y = __param._M_d1
         + 2 * __s1s * __e1 / __param._M_d1;
      __x = std::floor(__y);
      __v = (-__e2 + __param._M_d1 * (1 / (__t - __np)
          -__y / (2 * __s1s)));
      __reject = false;
    }
  else
    {
      const double __e1 = -std::log(__aurng());
      const double __e2 = -std::log(__aurng());

      const double __y = __param._M_d2
         + 2 * __s2s * __e1 / __param._M_d2;
      __x = std::floor(-__y);
      __v = -__e2 - __param._M_d2 * __y / (2 * __s2s);
      __reject = false;
    }

  __reject = __reject || __x < -__np || __x > __t - __np;
  if (!__reject)
    {
      const double __lfx =
        std::lgamma(__np + __x + 1)
        + std::lgamma(__t - (__np + __x) + 1);
      __reject = __v > __param._M_lf - __lfx
        + __x * __param._M_lp1p;
    }

  __reject |= __x + __np >= __thr;
       }
     while (__reject);

     __x += __np + __naf;

     const _IntType __z = _M_waiting(__urng, __t - _IntType(__x));
     __ret = _IntType(__x) + __z;
   }
 else

   __ret = _M_waiting(__urng, __t);

 if (__p12 != __p)
   __ret = __t - __ret;
 return __ret;
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.t() << __space << __x.p()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __t;
      double __p;
      __is >> __t >> __p >> __x._M_nd;
      __x.param(typename binomial_distribution<_IntType>::
  param_type(__t, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.lambda();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __lambda;
      __is >> __lambda;
      __x.param(typename exponential_distribution<_RealType>::
  param_type(__lambda));

      __is.flags(__flags);
      return __is;
    }
# 1647 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
 template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename normal_distribution<_RealType>::result_type
      normal_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 if (_M_saved_available)
   {
     _M_saved_available = false;
     __ret = _M_saved;
   }
 else
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     _M_saved = __x * __mult;
     _M_saved_available = true;
     __ret = __y * __mult;
   }

 __ret = __ret * __param.stddev() + __param.mean();
 return __ret;
      }

  template<typename _RealType>
    bool
    operator==(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    {
      if (__d1._M_param == __d2._M_param
   && __d1._M_saved_available == __d2._M_saved_available)
 {
   if (__d1._M_saved_available
       && __d1._M_saved == __d2._M_saved)
     return true;
   else if(!__d1._M_saved_available)
     return true;
   else
     return false;
 }
      else
 return false;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const normal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.mean() << __space << __x.stddev()
    << __space << __x._M_saved_available;
      if (__x._M_saved_available)
 __os << __space << __x._M_saved;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        normal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      double __mean, __stddev;
      __is >> __mean >> __stddev
    >> __x._M_saved_available;
      if (__x._M_saved_available)
 __is >> __x._M_saved;
      __x.param(typename normal_distribution<_RealType>::
  param_type(__mean, __stddev));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.s()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __s;
      __is >> __m >> __s >> __x._M_nd;
      __x.param(typename lognormal_distribution<_RealType>::
  param_type(__m, __s));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_gd;
      __x.param(typename chi_squared_distribution<_RealType>::
  param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename cauchy_distribution<_RealType>::result_type
      cauchy_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 _RealType __u;
 do
   __u = __aurng();
 while (__u == 0.5);

 const _RealType __pi = 3.1415926535897932384626433832795029L;
 return __p.a() + __p.b() * std::tan(__pi * __u);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename cauchy_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.n()
    << __space << __x._M_gd_x << __space << __x._M_gd_y;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __n;
      __is >> __m >> __n >> __x._M_gd_x >> __x._M_gd_y;
      __x.param(typename fisher_f_distribution<_RealType>::
  param_type(__m, __n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_nd << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_nd >> __x._M_gd;
      __x.param(typename student_t_distribution<_RealType>::param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    gamma_distribution<_RealType>::param_type::
    _M_initialize()
    {
      _M_malpha = _M_alpha < 1.0 ? _M_alpha + _RealType(1.0) : _M_alpha;

      const _RealType __a1 = _M_malpha - _RealType(1.0) / _RealType(3.0);
      _M_a2 = _RealType(1.0) / std::sqrt(_RealType(9.0) * __a1);
    }






  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename gamma_distribution<_RealType>::result_type
      gamma_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 result_type __u, __v, __n;
 const result_type __a1 = (__param._M_malpha
      - _RealType(1.0) / _RealType(3.0));

 do
   {
     do
       {
  __n = _M_nd(__urng);
  __v = result_type(1.0) + __param._M_a2 * __n;
       }
     while (__v <= 0.0);

     __v = __v * __v * __v;
     __u = __aurng();
   }
 while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
        && (std::log(__u) > (0.5 * __n * __n + __a1
        * (1.0 - __v + std::log(__v)))));

 if (__param.alpha() == __param._M_malpha)
   return __a1 * __v * __param.beta();
 else
   {
     do
       __u = __aurng();
     while (__u == 0.0);

     return (std::pow(__u, result_type(1.0) / __param.alpha())
      * __a1 * __v * __param.beta());
   }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.alpha() << __space << __x.beta()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __alpha_val, __beta_val;
      __is >> __alpha_val >> __beta_val >> __x._M_nd;
      __x.param(typename gamma_distribution<_RealType>::
  param_type(__alpha_val, __beta_val));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename weibull_distribution<_RealType>::result_type
      weibull_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.b() * std::pow(-std::log(__aurng()),
      result_type(1) / __p.a());
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename weibull_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename extreme_value_distribution<_RealType>::result_type
      extreme_value_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.a() - __p.b() * std::log(-std::log(__aurng()));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename extreme_value_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    discrete_distribution<_IntType>::param_type::
    _M_initialize()
    {
      if (_M_prob.size() < 2)
 {
   _M_prob.clear();
   return;
 }

      const double __sum = std::accumulate(_M_prob.begin(),
        _M_prob.end(), 0.0);

      __detail::__transform(_M_prob.begin(), _M_prob.end(), _M_prob.begin(),
     std::bind2nd(std::divides<double>(), __sum));

      _M_cp.reserve(_M_prob.size());
      std::partial_sum(_M_prob.begin(), _M_prob.end(),
         std::back_inserter(_M_cp));

      _M_cp[_M_cp.size() - 1] = 1.0;
    }

  template<typename _IntType>
    template<typename _Func>
      discrete_distribution<_IntType>::param_type::
      param_type(size_t __nw, double __xmin, double __xmax, _Func __fw)
      : _M_prob(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const double __delta = (__xmax - __xmin) / __n;

 _M_prob.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_prob.push_back(__fw(__xmin + __k * __delta + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename discrete_distribution<_IntType>::result_type
      discrete_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 if (__param._M_cp.empty())
   return result_type(0);

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);

 return __pos - __param._M_cp.begin();
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      std::vector<double> __prob = __x.probabilities();
      __os << __prob.size();
      for (auto __dit = __prob.begin(); __dit != __prob.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<double> __prob_vec;
      __prob_vec.reserve(__n);
      for (; __n != 0; --__n)
 {
   double __prob;
   __is >> __prob;
   __prob_vec.push_back(__prob);
 }

      __x.param(typename discrete_distribution<_IntType>::
  param_type(__prob_vec.begin(), __prob_vec.end()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_constant_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      const double __sum = std::accumulate(_M_den.begin(),
        _M_den.end(), 0.0);

      __detail::__transform(_M_den.begin(), _M_den.end(), _M_den.begin(),
       std::bind2nd(std::divides<double>(), __sum));

      _M_cp.reserve(_M_den.size());
      std::partial_sum(_M_den.begin(), _M_den.end(),
         std::back_inserter(_M_cp));


      _M_cp[_M_cp.size() - 1] = 1.0;

      for (size_t __k = 0; __k < _M_den.size(); ++__k)
 _M_den[__k] /= _M_int[__k + 1] - _M_int[__k];
    }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp()
      {
 if (__bbegin != __bend)
   {
     for (;;)
       {
  _M_int.push_back(*__bbegin);
  ++__bbegin;
  if (__bbegin == __bend)
    break;

  _M_den.push_back(*__wbegin);
  ++__wbegin;
       }
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 _M_int.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   _M_int.push_back(*__biter);

 _M_den.reserve(_M_int.size() - 1);
 for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
   _M_den.push_back(__fw(0.5 * (_M_int[__k + 1] + _M_int[__k])));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   _M_int.push_back(__xmin + __k * __delta);

 _M_den.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_den.push_back(__fw(_M_int[__k] + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_constant_distribution<_RealType>::result_type
      piecewise_constant_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 return __param._M_int[__i] + (__p - __pref) / __param._M_den[__i];
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n);
      for (size_t __i = 0; __i < __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_constant_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_linear_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)
       && _M_den[0] == _M_den[1]))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      double __sum = 0.0;
      _M_cp.reserve(_M_int.size() - 1);
      _M_m.reserve(_M_int.size() - 1);
      for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
 {
   const _RealType __delta = _M_int[__k + 1] - _M_int[__k];
   __sum += 0.5 * (_M_den[__k + 1] + _M_den[__k]) * __delta;
   _M_cp.push_back(__sum);
   _M_m.push_back((_M_den[__k + 1] - _M_den[__k]) / __delta);
 }


      __detail::__transform(_M_den.begin(), _M_den.end(), _M_den.begin(),
     std::bind2nd(std::divides<double>(), __sum));

      __detail::__transform(_M_cp.begin(), _M_cp.end(), _M_cp.begin(),
       std::bind2nd(std::divides<double>(), __sum));

      __detail::__transform(_M_m.begin(), _M_m.end(), _M_m.begin(),
       std::bind2nd(std::divides<double>(), __sum));

      _M_cp[_M_cp.size() - 1] = 1.0;
     }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 for (; __bbegin != __bend; ++__bbegin, ++__wbegin)
   {
     _M_int.push_back(*__bbegin);
     _M_den.push_back(*__wbegin);
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 _M_int.reserve(__bl.size());
 _M_den.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   {
     _M_int.push_back(*__biter);
     _M_den.push_back(__fw(*__biter));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 _M_den.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   {
     _M_int.push_back(__xmin + __k * __delta);
     _M_den.push_back(__fw(_M_int[__k] + __delta));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_linear_distribution<_RealType>::result_type
      piecewise_linear_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 const double __a = 0.5 * __param._M_m[__i];
 const double __b = __param._M_den[__i];
 const double __cm = __p - __pref;

 _RealType __x = __param._M_int[__i];
 if (__a == 0)
   __x += __cm / __b;
 else
   {
     const double __d = __b * __b + 4.0 * __a * __cm;
     __x += 0.5 * (std::sqrt(__d) - __b) / __a;
          }

        return __x;
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_linear_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    seed_seq::seed_seq(std::initializer_list<_IntType> __il)
    {
      for (auto __iter = __il.begin(); __iter != __il.end(); ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _InputIterator>
    seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end)
    {
      for (_InputIterator __iter = __begin; __iter != __end; ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _RandomAccessIterator>
    void
    seed_seq::generate(_RandomAccessIterator __begin,
         _RandomAccessIterator __end)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
        _Type;

      if (__begin == __end)
 return;

      std::fill(__begin, __end, _Type(0x8b8b8b8bu));

      const size_t __n = __end - __begin;
      const size_t __s = _M_v.size();
      const size_t __t = (__n >= 623) ? 11
         : (__n >= 68) ? 7
         : (__n >= 39) ? 5
         : (__n >= 7) ? 3
         : (__n - 1) / 2;
      const size_t __p = (__n - __t) / 2;
      const size_t __q = __p + __t;
      const size_t __m = std::max(__s + 1, __n);

      for (size_t __k = 0; __k < __m; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    ^ __begin[(__k + __p) % __n]
    ^ __begin[(__k - 1) % __n]);
   _Type __r1 = __arg ^ (__arg >> 27);
   __r1 = __detail::__mod<_Type,
      __detail::_Shift<_Type, 32>::__value>(1664525u * __r1);
   _Type __r2 = __r1;
   if (__k == 0)
     __r2 += __s;
   else if (__k <= __s)
     __r2 += __k % __n + _M_v[__k - 1];
   else
     __r2 += __k % __n;
   __r2 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r2);
   __begin[(__k + __p) % __n] += __r1;
   __begin[(__k + __q) % __n] += __r2;
   __begin[__k % __n] = __r2;
 }

      for (size_t __k = __m; __k < __m + __n; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    + __begin[(__k + __p) % __n]
    + __begin[(__k - 1) % __n]);
   _Type __r3 = __arg ^ (__arg >> 27);
   __r3 = __detail::__mod<_Type,
     __detail::_Shift<_Type, 32>::__value>(1566083941u * __r3);
   _Type __r4 = __r3 - __k % __n;
   __r4 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r4);
   __begin[(__k + __p) % __n] ^= __r3;
   __begin[(__k + __q) % __n] ^= __r4;
   __begin[__k % __n] = __r4;
 }
    }

  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __urng)
    {
      const size_t __b
 = std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),
                   __bits);
      const long double __r = static_cast<long double>(__urng.max())
       - static_cast<long double>(__urng.min()) + 1.0L;
      const size_t __log2r = std::log(__r) / std::log(2.0L);
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
 {
   __sum += _RealType(__urng() - __urng.min()) * __tmp;
   __tmp *= __r;
 }
      return __sum / __tmp;
    }


}
# 51 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 68 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 1 3
# 47 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
# 47 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3






# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 1 3
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
# 34 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3







#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 82 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const
    { return __name[0] == '*' ? __name + 1 : __name; }
# 117 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
 bool before(const type_info& __arg) const
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 138 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
 bool operator!=(const type_info& __arg) const
    { return !operator==(__arg); }


    size_t hash_code() const throw()
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() throw() { }



    virtual ~bad_cast() throw();


    virtual const char* what() const throw();
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () throw() { }



    virtual ~bad_typeid() throw();


    virtual const char* what() const throw();
  };
}

#pragma GCC visibility pop

}
# 54 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 2 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 1 3
# 32 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 3
# 32 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 3







namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct __add_c_ref
    { typedef const _Tp& type; };

  template<typename _Tp>
    struct __add_c_ref<_Tp&>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct __add_ref
    { typedef _Tp& type; };

  template<typename _Tp>
    struct __add_ref<_Tp&>
    { typedef _Tp& type; };

  template<std::size_t _Idx, typename _Head, bool _IsEmpty>
    struct _Head_base;

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
      : _Head(__h) { }

      template<typename _UHead>
        _Head_base(_UHead&& __h)
 : _Head(std::forward<_UHead>(__h)) { }

      _Head& _M_head() { return *this; }
      const _Head& _M_head() const { return *this; }

      void
      _M_swap_impl(_Head& __h)
      {
 using std::swap;
 swap(__h, _M_head());
      }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      template<typename _UHead>
        _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

      _Head& _M_head() { return _M_head_impl; }
      const _Head& _M_head() const { return _M_head_impl; }

      void
      _M_swap_impl(_Head& __h)
      {
 using std::swap;
 swap(__h, _M_head());
      }

      _Head _M_head_impl;
    };
# 123 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 3
 template<std::size_t _Idx, typename... _Elements>
    struct _Tuple_impl;





  template<std::size_t _Idx>
    struct _Tuple_impl<_Idx>
    {
    protected:
      void _M_swap_impl(_Tuple_impl&) { }
    };






  template<std::size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head, std::is_empty<_Head>::value>
    {
      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, std::is_empty<_Head>::value> _Base;

      _Head& _M_head() { return _Base::_M_head(); }
      const _Head& _M_head() const { return _Base::_M_head(); }

      _Inherited& _M_tail() { return *this; }
      const _Inherited& _M_tail() const { return *this; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail>
        explicit
        _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      _Tuple_impl(_Tuple_impl&& __in)
      : _Inherited(std::move(__in._M_tail())),
 _Base(std::forward<_Head>(__in._M_head())) { }

      template<typename... _UElements>
        _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(__in._M_tail()), _Base(__in._M_head()) { }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move(__in._M_tail())),
   _Base(std::forward<_UHead>(__in._M_head())) { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head() = __in._M_head();
 _M_tail() = __in._M_tail();
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      {
 _M_head() = std::forward<_Head>(__in._M_head());
 _M_tail() = std::move(__in._M_tail());
 return *this;
      }

      template<typename... _UElements>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)
        {
   _M_head() = __in._M_head();
   _M_tail() = __in._M_tail();
   return *this;
 }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
   _M_head() = std::forward<_UHead>(__in._M_head());
   _M_tail() = std::move(__in._M_tail());
   return *this;
 }

    protected:
      void
      _M_swap_impl(_Tuple_impl& __in)
      {
 _Base::_M_swap_impl(__in._M_head());
 _Inherited::_M_swap_impl(__in._M_tail());
      }
    };


  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        explicit
        tuple(_UElements&&... __elements)
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      constexpr tuple(const tuple&) = default;

      tuple(tuple&& __in)
      : _Inherited(static_cast<_Inherited&&>(__in)) { }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple&
        operator=(const tuple<_UElements...>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple&
        operator=(tuple<_UElements...>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      { _Inherited::_M_swap_impl(__in); }
    };

  template<>
    class tuple<>
    {
    public:
      void swap(tuple&) { }
    };


  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _T1& __a1, const _T2& __a2)
      : _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2>
        explicit
        tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      tuple(tuple&& __in)
      : _Inherited(static_cast<_Inherited&&>(__in)) { }

      template<typename _U1, typename _U2>
        tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2>
        tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2>
        tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2>
        tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const tuple<_U1, _U2>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(tuple<_U1, _U2>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const pair<_U1, _U2>& __in)
        {
   this->_M_head() = __in.first;
   this->_M_tail()._M_head() = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(pair<_U1, _U2>&& __in)
        {
   this->_M_head() = std::forward<_U1>(__in.first);
   this->_M_tail()._M_head() = std::forward<_U2>(__in.second);
   return *this;
 }

      void
      swap(tuple& __in)
      {
 using std::swap;
 swap(this->_M_head(), __in._M_head());
 swap(this->_M_tail()._M_head(), __in._M_tail()._M_head());
      }
    };


  template<typename _T1>
    class tuple<_T1> : public _Tuple_impl<0, _T1>
    {
      typedef _Tuple_impl<0, _T1> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _T1& __a1)
      : _Inherited(__a1) { }

      template<typename _U1, typename = typename
        std::enable_if<std::is_convertible<_U1, _T1>::value>::type>
        explicit
        tuple(_U1&& __a1)
 : _Inherited(std::forward<_U1>(__a1)) { }

      constexpr tuple(const tuple&) = default;

      tuple(tuple&& __in)
      : _Inherited(static_cast<_Inherited&&>(__in)) { }

      template<typename _U1>
        tuple(const tuple<_U1>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1>&>(__in)) { }

      template<typename _U1>
        tuple(tuple<_U1>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1>&&>(__in)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1>
        tuple&
        operator=(const tuple<_U1>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1>
        tuple&
        operator=(tuple<_U1>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      { _Inherited::_M_swap_impl(__in); }
    };



  template<std::size_t __i, typename _Tp>
    struct tuple_element;





  template<std::size_t __i, typename _Head, typename... _Tail>
    struct tuple_element<__i, tuple<_Head, _Tail...> >
    : tuple_element<__i - 1, tuple<_Tail...> > { };




  template<typename _Head, typename... _Tail>
    struct tuple_element<0, tuple<_Head, _Tail...> >
    {
      typedef _Head type;
    };


  template<typename _Tp>
    struct tuple_size;


  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...> >
    {
      static const std::size_t value = sizeof...(_Elements);
    };

  template<typename... _Elements>
    const std::size_t tuple_size<tuple<_Elements...> >::value;

  template<std::size_t __i, typename _Head, typename... _Tail>
    inline typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t)
    { return __t._M_head(); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    inline typename __add_c_ref<_Head>::type
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t)
    { return __t._M_head(); }



  template<std::size_t __i, typename... _Elements>
    inline typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...> >::type
                    >::type
    get(tuple<_Elements...>& __t)
    { return __get_helper<__i>(__t); }

  template<std::size_t __i, typename... _Elements>
    inline typename __add_c_ref<
                      typename tuple_element<__i, tuple<_Elements...> >::type
                    >::type
    get(const tuple<_Elements...>& __t)
    { return __get_helper<__i>(__t); }


  template<std::size_t __check_equal_size, std::size_t __i, std::size_t __j,
    typename _Tp, typename _Up>
    struct __tuple_compare;

  template<std::size_t __i, std::size_t __j, typename _Tp, typename _Up>
    struct __tuple_compare<0, __i, __j, _Tp, _Up>
    {
      static bool __eq(const _Tp& __t, const _Up& __u)
      {
 return (get<__i>(__t) == get<__i>(__u) &&
  __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__eq(__t, __u));
      }

      static bool __less(const _Tp& __t, const _Up& __u)
      {
 return ((get<__i>(__t) < get<__i>(__u))
  || !(get<__i>(__u) < get<__i>(__t)) &&
  __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__less(__t, __u));
      }
    };

  template<std::size_t __i, typename _Tp, typename _Up>
    struct __tuple_compare<0, __i, __i, _Tp, _Up>
    {
      static bool __eq(const _Tp&, const _Up&)
      { return true; }

      static bool __less(const _Tp&, const _Up&)
      { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      typedef tuple<_TElements...> _Tp;
      typedef tuple<_UElements...> _Up;
      return (__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,
       0, tuple_size<_Tp>::value, _Tp, _Up>::__eq(__t, __u));
    }

  template<typename... _TElements, typename... _UElements>
    bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      typedef tuple<_TElements...> _Tp;
      typedef tuple<_UElements...> _Up;
      return (__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,
       0, tuple_size<_Tp>::value, _Tp, _Up>::__less(__t, __u));
    }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }


  template<typename... _Elements>
    inline tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }

  template<typename... _Elements>
    inline tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args)
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }

  template<std::size_t...> struct __index_holder { };

  template<std::size_t __i, typename _IdxHolder, typename... _Elements>
    struct __index_holder_impl;

  template<std::size_t __i, std::size_t... _Indexes, typename _IdxHolder,
    typename... _Elements>
    struct __index_holder_impl<__i, __index_holder<_Indexes...>,
          _IdxHolder, _Elements...>
    {
      typedef typename __index_holder_impl<__i + 1,
        __index_holder<_Indexes..., __i>,
        _Elements...>::type type;
    };

  template<std::size_t __i, std::size_t... _Indexes>
    struct __index_holder_impl<__i, __index_holder<_Indexes...> >
    { typedef __index_holder<_Indexes...> type; };

  template<typename... _Elements>
    struct __make_index_holder
    : __index_holder_impl<0, __index_holder<>, _Elements...> { };

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(const tuple<_TElements...>& __t,
         const __index_holder<_TIdx...>&,
                       const tuple<_UElements...>& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>(get<_TIdx>(__t)...,
       get<_UIdx>(__u)...); }

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(tuple<_TElements...>&& __t,
         const __index_holder<_TIdx...>&,
         const tuple<_UElements...>& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>
 (std::forward<_TElements>(get<_TIdx>(__t))..., get<_UIdx>(__u)...); }

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(const tuple<_TElements...>& __t,
         const __index_holder<_TIdx...>&,
         tuple<_UElements...>&& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>
 (get<_TIdx>(__t)..., std::forward<_UElements>(get<_UIdx>(__u))...); }

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(tuple<_TElements...>&& __t,
         const __index_holder<_TIdx...>&,
         tuple<_UElements...>&& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>
 (std::forward<_TElements>(get<_TIdx>(__t))...,
  std::forward<_UElements>(get<_UIdx>(__u))...); }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(const tuple<_TElements...>& __t, const tuple<_UElements...>& __u)
    {
      return __tuple_cat_helper(__t, typename
    __make_index_holder<_TElements...>::type(),
    __u, typename
    __make_index_holder<_UElements...>::type());
    }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(tuple<_TElements...>&& __t, const tuple<_UElements...>& __u)
    {
      return __tuple_cat_helper(std::move(__t), typename
     __make_index_holder<_TElements...>::type(),
     __u, typename
     __make_index_holder<_UElements...>::type());
    }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(const tuple<_TElements...>& __t, tuple<_UElements...>&& __u)
    {
      return __tuple_cat_helper(__t, typename
    __make_index_holder<_TElements...>::type(),
    std::move(__u), typename
    __make_index_holder<_UElements...>::type());
    }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(tuple<_TElements...>&& __t, tuple<_UElements...>&& __u)
    {
      return __tuple_cat_helper(std::move(__t), typename
    __make_index_holder<_TElements...>::type(),
    std::move(__u), typename
    __make_index_holder<_UElements...>::type());
    }

  template<typename... _Elements>
    inline tuple<_Elements&...>
    tie(_Elements&... __args)
    { return tuple<_Elements&...>(__args...); }

  template<typename... _Elements>
    inline void
    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    { __x.swap(__y); }



  struct _Swallow_assign
  {
    template<class _Tp>
      const _Swallow_assign&
      operator=(const _Tp&) const
      { return *this; }
  };

  const _Swallow_assign ignore{};





  template<int... _Indexes>
    struct _Index_tuple
    {
      typedef _Index_tuple<_Indexes..., sizeof...(_Indexes)> __next;
    };


  template<std::size_t _Num>
    struct _Build_index_tuple
    {
      typedef typename _Build_index_tuple<_Num-1>::__type::__next __type;
    };

  template<>
    struct _Build_index_tuple<0>
    {
      typedef _Index_tuple<> __type;
    };


  template<class _T1, class _T2>
    template<typename _Tp, typename... _Args>
      inline _Tp
      pair<_T1, _T2>::
      __cons(tuple<_Args...>&& __tuple)
      {
 typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
   _Indexes;
 return __do_cons<_Tp>(std::move(__tuple), _Indexes());
      }

  template<class _T1, class _T2>
    template<typename _Tp, typename... _Args, int... _Indexes>
      inline _Tp
      pair<_T1, _T2>::
      __do_cons(tuple<_Args...>&& __tuple,
  const _Index_tuple<_Indexes...>&)
      { return _Tp(std::forward<_Args>(get<_Indexes>(__tuple))...); }


}
# 56 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{


template<typename _Tp> class __has_result_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::result_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_result_type : integral_constant<bool, __has_result_type_helper <typename remove_cv<_Tp>::type>::value> { };


  template<bool _Has_result_type, typename _Functor>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<true, _Functor>
    { typedef typename _Functor::result_type result_type; };





  template<typename _Functor>
    struct _Weak_result_type_impl
    : _Maybe_get_result_type<__has_result_type<_Functor>::value, _Functor>
    { };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) const>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)
      const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)
      const volatile>
    { typedef _Res result_type; };





  template<typename _Functor>
    struct _Weak_result_type
    : _Weak_result_type_impl<typename remove_cv<_Functor>::type>
    { };


  template<typename _Tp>
    struct _Derives_from_unary_function : __sfinae_types
    {
    private:
      template<typename _T1, typename _Res>
 static __one __test(const volatile unary_function<_T1, _Res>*);



      static __two __test(...);

    public:
      static const bool value = sizeof(__test((_Tp*)0)) == 1;
    };


  template<typename _Tp>
    struct _Derives_from_binary_function : __sfinae_types
    {
    private:
      template<typename _T1, typename _T2, typename _Res>
 static __one __test(const volatile binary_function<_T1, _T2, _Res>*);



      static __two __test(...);

    public:
      static const bool value = sizeof(__test((_Tp*)0)) == 1;
    };





  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (!is_member_pointer<_Functor>::value
       && !is_function<_Functor>::value
       && !is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor(_Args&&...)>::type
    >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }

  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
             (is_member_pointer<_Functor>::value
              && !is_function<_Functor>::value
              && !is_function<typename remove_pointer<_Functor>::type>::value),
             typename result_of<_Functor(_Args&&...)>::type
           >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return mem_fn(__f)(std::forward<_Args>(__args)...);
    }


  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (is_pointer<_Functor>::value
       && is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor(_Args&&...)>::type
    >::type
    __invoke(_Functor __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }






  template<bool _Unary, bool _Binary, typename _Tp>
    struct _Reference_wrapper_base_impl;


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, false, _Tp>
    : _Weak_result_type<_Tp>
    { };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, false, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
    };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };


   template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };

  template<typename _Tp> class __has_argument_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::argument_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_argument_type : integral_constant<bool, __has_argument_type_helper <typename remove_cv<_Tp>::type>::value> { };
  template<typename _Tp> class __has_first_argument_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::first_argument_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_first_argument_type : integral_constant<bool, __has_first_argument_type_helper <typename remove_cv<_Tp>::type>::value> { };
  template<typename _Tp> class __has_second_argument_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::second_argument_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_second_argument_type : integral_constant<bool, __has_second_argument_type_helper <typename remove_cv<_Tp>::type>::value> { };







  template<typename _Tp>
    struct _Reference_wrapper_base
    : _Reference_wrapper_base_impl<
      __has_argument_type<_Tp>::value,
      __has_first_argument_type<_Tp>::value
      && __has_second_argument_type<_Tp>::value,
      _Tp>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1)>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) volatile>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const volatile>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(*)(_T1)>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(*)(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)()>
    : unary_function<_T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2)>
    : binary_function<_T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const>
    : unary_function<const _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const>
    : binary_function<const _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() volatile>
    : unary_function<volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) volatile>
    : binary_function<volatile _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const volatile>
    : unary_function<const volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const volatile>
    : binary_function<const volatile _T1*, _T2, _Res>
    { };






  template<typename _Tp>
    class reference_wrapper
    : public _Reference_wrapper_base<typename remove_cv<_Tp>::type>
    {
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata)
      : _M_data(std::__addressof(__indata))
      { }

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper<_Tp>& __inref):
      _M_data(__inref._M_data)
      { }

      reference_wrapper&
      operator=(const reference_wrapper<_Tp>& __inref)
      {
 _M_data = __inref._M_data;
 return *this;
      }

      operator _Tp&() const
      { return this->get(); }

      _Tp&
      get() const
      { return *_M_data; }

      template<typename... _Args>
 typename result_of<_Tp&(_Args&&...)>::type
 operator()(_Args&&... __args) const
 {
   return __invoke(get(), std::forward<_Args>(__args)...);
 }
    };



  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t)
    { return reference_wrapper<_Tp>(__t); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(const _Tp& __t)
    { return reference_wrapper<const _Tp>(__t); }

  template<typename _Tp>
    void ref(const _Tp&&) = delete;

  template<typename _Tp>
    void cref(const _Tp&&) = delete;


  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(reference_wrapper<_Tp> __t)
    { return ref(__t.get()); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(reference_wrapper<_Tp> __t)
    { return cref(__t.get()); }



  template<typename _MemberPointer>
    class _Mem_fn;






  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };


  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
    : std::unary_function<_T1, _Res> { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>
    : std::binary_function<_T1, _T2, _Res> { };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...);

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(_Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(_Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res
 operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) const>
    : public _Maybe_unary_or_binary_function<_Res, const _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) const;

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(const _Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(const _Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) volatile>
    : public _Maybe_unary_or_binary_function<_Res, volatile _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) volatile;

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(volatile _Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(volatile _Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res
 operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) const volatile>
    : public _Maybe_unary_or_binary_function<_Res, const volatile _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) const volatile;

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(const volatile _Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(const volatile _Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Tp, bool>
    struct _Mem_fn_const_or_non
    {
      typedef const _Tp& type;
    };

  template<typename _Tp>
    struct _Mem_fn_const_or_non<_Tp, false>
    {
      typedef _Tp& type;
    };

  template<typename _Res, typename _Class>
    class _Mem_fn<_Res _Class::*>
    {


      template<typename _Tp>
 _Res&
 _M_call(_Tp& __object, _Class *) const
 { return __object.*__pm; }

      template<typename _Tp, typename _Up>
 _Res&
 _M_call(_Tp& __object, _Up * const *) const
 { return (*__object).*__pm; }

      template<typename _Tp, typename _Up>
 const _Res&
 _M_call(_Tp& __object, const _Up * const *) const
 { return (*__object).*__pm; }

      template<typename _Tp>
 const _Res&
 _M_call(_Tp& __object, const _Class *) const
 { return __object.*__pm; }

      template<typename _Tp>
 const _Res&
 _M_call(_Tp& __ptr, const volatile void*) const
 { return (*__ptr).*__pm; }

      template<typename _Tp> static _Tp& __get_ref();

      template<typename _Tp>
 static __sfinae_types::__one __check_const(_Tp&, _Class*);
      template<typename _Tp, typename _Up>
 static __sfinae_types::__one __check_const(_Tp&, _Up * const *);
      template<typename _Tp, typename _Up>
 static __sfinae_types::__two __check_const(_Tp&, const _Up * const *);
      template<typename _Tp>
 static __sfinae_types::__two __check_const(_Tp&, const _Class*);
      template<typename _Tp>
 static __sfinae_types::__two __check_const(_Tp&, const volatile void*);

    public:
      template<typename _Tp>
 struct _Result_type
 : _Mem_fn_const_or_non<_Res,
   (sizeof(__sfinae_types::__two)
    == sizeof(__check_const<_Tp>(__get_ref<_Tp>(), (_Tp*)0)))>
 { };

      template<typename _Signature>
 struct result;

      template<typename _CVMem, typename _Tp>
 struct result<_CVMem(_Tp)>
 : public _Result_type<_Tp> { };

      template<typename _CVMem, typename _Tp>
 struct result<_CVMem(_Tp&)>
 : public _Result_type<_Tp> { };

      explicit
      _Mem_fn(_Res _Class::*__pm) : __pm(__pm) { }


      _Res&
      operator()(_Class& __object) const
      { return __object.*__pm; }

      const _Res&
      operator()(const _Class& __object) const
      { return __object.*__pm; }


      _Res&
      operator()(_Class* __object) const
      { return __object->*__pm; }

      const _Res&
      operator()(const _Class* __object) const
      { return __object->*__pm; }


      template<typename _Tp>
 typename _Result_type<_Tp>::type
 operator()(_Tp& __unknown) const
 { return _M_call(__unknown, &__unknown); }

    private:
      _Res _Class::*__pm;
    };






  template<typename _Tp, typename _Class>
    inline _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::* __pm)
    {
      return _Mem_fn<_Tp _Class::*>(__pm);
    }







  template<typename _Tp>
    struct is_bind_expression
    : public false_type { };






  template<typename _Tp>
    struct is_placeholder
    : public integral_constant<int, 0>
    { };


  template<int _Num> struct _Placeholder { };
# 855 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 namespace placeholders
  {

    extern const _Placeholder<1> _1;
    extern const _Placeholder<2> _2;
    extern const _Placeholder<3> _3;
    extern const _Placeholder<4> _4;
    extern const _Placeholder<5> _5;
    extern const _Placeholder<6> _6;
    extern const _Placeholder<7> _7;
    extern const _Placeholder<8> _8;
    extern const _Placeholder<9> _9;
    extern const _Placeholder<10> _10;
    extern const _Placeholder<11> _11;
    extern const _Placeholder<12> _12;
    extern const _Placeholder<13> _13;
    extern const _Placeholder<14> _14;
    extern const _Placeholder<15> _15;
    extern const _Placeholder<16> _16;
    extern const _Placeholder<17> _17;
    extern const _Placeholder<18> _18;
    extern const _Placeholder<19> _19;
    extern const _Placeholder<20> _20;
    extern const _Placeholder<21> _21;
    extern const _Placeholder<22> _22;
    extern const _Placeholder<23> _23;
    extern const _Placeholder<24> _24;
    extern const _Placeholder<25> _25;
    extern const _Placeholder<26> _26;
    extern const _Placeholder<27> _27;
    extern const _Placeholder<28> _28;
    extern const _Placeholder<29> _29;

  }
# 897 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 template<int _Num>
    struct is_placeholder<_Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };





  struct _No_tuple_element;






  template<int __i, typename _Tuple, bool _IsSafe>
    struct _Safe_tuple_element_impl
    : tuple_element<__i, _Tuple> { };






  template<int __i, typename _Tuple>
    struct _Safe_tuple_element_impl<__i, _Tuple, false>
    {
      typedef _No_tuple_element type;
    };





 template<int __i, typename _Tuple>
   struct _Safe_tuple_element
   : _Safe_tuple_element_impl<__i, _Tuple,
         (__i >= 0 && __i < tuple_size<_Tuple>::value)>
   { };
# 949 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 template<typename _Arg,
    bool _IsBindExp = is_bind_expression<_Arg>::value,
    bool _IsPlaceholder = (is_placeholder<_Arg>::value > 0)>
    class _Mu;





  template<typename _Tp>
    class _Mu<reference_wrapper<_Tp>, false, false>
    {
    public:
      typedef _Tp& result_type;





      template<typename _CVRef, typename _Tuple>
 result_type
 operator()(_CVRef& __arg, _Tuple&) const volatile
 { return __arg.get(); }
    };






  template<typename _Arg>
    class _Mu<_Arg, true, false>
    {
    public:
      template<typename _CVArg, typename... _Args>
 auto
 operator()(_CVArg& __arg,
     tuple<_Args...>& __tuple) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {

   typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
     _Indexes;
   return this->__call(__arg, __tuple, _Indexes());
 }

    private:


      template<typename _CVArg, typename... _Args, int... _Indexes>
 auto
 __call(_CVArg& __arg, tuple<_Args...>& __tuple,
        const _Index_tuple<_Indexes...>&) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {
   return __arg(std::forward<_Args>(get<_Indexes>(__tuple))...);
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, true>
    {
    public:
      template<typename _Signature> class result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 class result<_CVMu(_CVArg, _Tuple)>
 {



   typedef typename _Safe_tuple_element<(is_placeholder<_Arg>::value
      - 1), _Tuple>::type
     __base_type;

 public:
   typedef typename add_rvalue_reference<__base_type>::type type;
 };

      template<typename _Tuple>
 typename result<_Mu(_Arg, _Tuple)>::type
 operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 {
   return std::forward<typename result<_Mu(_Arg, _Tuple)>::type>(
       ::std::get<(is_placeholder<_Arg>::value - 1)>(__tuple));
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, false>
    {
    public:
      template<typename _Signature> struct result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 struct result<_CVMu(_CVArg, _Tuple)>
 {
   typedef typename add_lvalue_reference<_CVArg>::type type;
 };


      template<typename _CVArg, typename _Tuple>
 _CVArg&&
 operator()(_CVArg&& __arg, _Tuple&) const volatile
 { return std::forward<_CVArg>(__arg); }
    };






  template<typename _Tp>
    struct _Maybe_wrap_member_pointer
    {
      typedef _Tp type;

      static const _Tp&
      __do_wrap(const _Tp& __x)
      { return __x; }

      static _Tp&&
      __do_wrap(_Tp&& __x)
      { return static_cast<_Tp&&>(__x); }
    };






  template<typename _Tp, typename _Class>
    struct _Maybe_wrap_member_pointer<_Tp _Class::*>
    {
      typedef _Mem_fn<_Tp _Class::*> type;

      static type
      __do_wrap(_Tp _Class::* __pm)
      { return type(__pm); }
    };





  template<>
    struct _Maybe_wrap_member_pointer<void>
    {
      typedef void type;
    };


  template<size_t _Ind, typename... _Tp>
    inline auto
    __volget(volatile tuple<_Tp...>& __tuple)
    -> typename tuple_element<_Ind, tuple<_Tp...>>::type volatile&
    { return std::get<_Ind>(const_cast<tuple<_Tp...>&>(__tuple)); }


  template<size_t _Ind, typename... _Tp>
    inline auto
    __volget(const volatile tuple<_Tp...>& __tuple)
    -> typename tuple_element<_Ind, tuple<_Tp...>>::type const volatile&
    { return std::get<_Ind>(const_cast<const tuple<_Tp...>&>(__tuple)); }


  template<typename _Signature>
    struct _Bind;

   template<typename _Functor, typename... _Bound_args>
    class _Bind<_Functor(_Bound_args...)>
    : public _Weak_result_type<_Functor>
    {
      typedef _Bind __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call_v(tuple<_Args...>&& __args,
   _Index_tuple<_Indexes...>) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call_c_v(tuple<_Args...>&& __args,
     _Index_tuple<_Indexes...>) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

     public:
      template<typename... _Args>
 explicit _Bind(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args, typename _Result
 = decltype( std::declval<_Functor>()(
       _Mu<_Bound_args>()( std::declval<_Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
         typename add_const<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<const _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const
 {
   return this->__call_c<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_volatile<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) volatile
 {
   return this->__call_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_cv<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<const volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const volatile
 {
   return this->__call_c_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };


  template<typename _Result, typename _Signature>
    struct _Bind_result;

  template<typename _Result, typename _Functor, typename... _Bound_args>
    class _Bind_result<_Result, _Functor(_Bound_args...)>
    {
      typedef _Bind_result __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Res>
 struct __enable_if_void : enable_if<is_void<_Res>::value, int> { };
      template<typename _Res>
 struct __disable_if_void : enable_if<!is_void<_Res>::value, int> { };


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0)
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0)
 {
   _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const
 {
   _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args,
        _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

    public:
      typedef _Result result_type;

      template<typename... _Args>
 explicit _Bind_result(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind_result(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind_result(const _Bind_result&) = default;

      _Bind_result(_Bind_result&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };





  template<typename _Signature>
    struct is_bind_expression<_Bind<_Signature> >
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<_Bind_result<_Result, _Signature> >
    : public true_type { };

  template<typename _Functor, typename... _ArgTypes>
    struct _Bind_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Functor>::type>
 __maybe_type;
      typedef typename __maybe_type::type __functor_type;
      typedef _Bind<__functor_type(typename decay<_ArgTypes>::type...)> type;
    };





  template<typename _Functor, typename... _ArgTypes>
    inline
    typename _Bind_helper<_Functor, _ArgTypes...>::type
    bind(_Functor&& __f, _ArgTypes&&... __args)
    {
      typedef _Bind_helper<_Functor, _ArgTypes...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Functor>(__f)),
      std::forward<_ArgTypes>(__args)...);
    }

  template<typename _Result, typename _Functor, typename... _ArgTypes>
    struct _Bindres_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Functor>::type>
 __maybe_type;
      typedef typename __maybe_type::type __functor_type;
      typedef _Bind_result<_Result,
      __functor_type(typename decay<_ArgTypes>::type...)>
 type;
    };





  template<typename _Result, typename _Functor, typename... _ArgTypes>
    inline
    typename _Bindres_helper<_Result, _Functor, _ArgTypes...>::type
    bind(_Functor&& __f, _ArgTypes&&... __args)
    {
      typedef _Bindres_helper<_Result, _Functor, _ArgTypes...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Functor>(__f)),
      std::forward<_ArgTypes>(__args)...);
    }






  class bad_function_call : public std::exception
  {
  public:
    virtual ~bad_function_call() throw();
  };






  template<typename _Tp>
    struct __is_location_invariant
    : integral_constant<bool, (is_pointer<_Tp>::value
          || is_member_pointer<_Tp>::value)>
    { };

  class _Undefined_class;

  union _Nocopy_types
  {
    void* _M_object;
    const void* _M_const_object;
    void (*_M_function_pointer)();
    void (_Undefined_class::*_M_member_pointer)();
  };

  union _Any_data
  {
    void* _M_access() { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const
      { return *static_cast<const _Tp*>(_M_access()); }

    _Nocopy_types _M_unused;
    char _M_pod_data[sizeof(_Nocopy_types)];
  };

  enum _Manager_operation
  {
    __get_type_info,
    __get_functor_ptr,
    __clone_functor,
    __destroy_functor
  };



  template<typename _Tp>
    struct _Simple_type_wrapper
    {
      _Simple_type_wrapper(_Tp __value) : __value(__value) { }

      _Tp __value;
    };

  template<typename _Tp>
    struct __is_location_invariant<_Simple_type_wrapper<_Tp> >
    : __is_location_invariant<_Tp>
    { };



  template<typename _Functor>
    inline _Functor&
    __callable_functor(_Functor& __f)
    { return __f; }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* &__p)
    { return mem_fn(__p); }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* const &__p)
    { return mem_fn(__p); }

  template<typename _Signature>
    class function;


  class _Function_base
  {
  public:
    static const std::size_t _M_max_size = sizeof(_Nocopy_types);
    static const std::size_t _M_max_align = __alignof__(_Nocopy_types);

    template<typename _Functor>
      class _Base_manager
      {
      protected:
 static const bool __stored_locally =
 (__is_location_invariant<_Functor>::value
  && sizeof(_Functor) <= _M_max_size
  && __alignof__(_Functor) <= _M_max_align
  && (_M_max_align % __alignof__(_Functor) == 0));

 typedef integral_constant<bool, __stored_locally> _Local_storage;


 static _Functor*
 _M_get_pointer(const _Any_data& __source)
 {
   const _Functor* __ptr =
     __stored_locally? std::__addressof(__source._M_access<_Functor>())
                                 : __source._M_access<_Functor*>();
   return const_cast<_Functor*>(__ptr);
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 {
   new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 {
   __dest._M_access<_Functor*>() =
     new _Functor(*__source._M_access<_Functor*>());
 }



 static void
 _M_destroy(_Any_data& __victim, true_type)
 {
   __victim._M_access<_Functor>().~_Functor();
 }


 static void
 _M_destroy(_Any_data& __victim, false_type)
 {
   delete __victim._M_access<_Functor*>();
 }

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = _M_get_pointer(__source);
       break;

     case __clone_functor:
       _M_clone(__dest, __source, _Local_storage());
       break;

     case __destroy_functor:
       _M_destroy(__dest, _Local_storage());
       break;
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f)
 { _M_init_functor(__functor, std::move(__f), _Local_storage()); }

 template<typename _Signature>
   static bool
   _M_not_empty_function(const function<_Signature>& __f)
   { return static_cast<bool>(__f); }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp*& __fp)
   { return __fp; }

 template<typename _Class, typename _Tp>
   static bool
   _M_not_empty_function(_Tp _Class::* const& __mp)
   { return __mp; }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp&)
   { return true; }

      private:
 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 { new (__functor._M_access()) _Functor(std::move(__f)); }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    template<typename _Functor>
      class _Ref_manager : public _Base_manager<_Functor*>
      {
 typedef _Function_base::_Base_manager<_Functor*> _Base;

    public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = *_Base::_M_get_pointer(__source);
       return is_const<_Functor>::value;
       break;

     default:
       _Base::_M_manager(__dest, __source, __op);
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, reference_wrapper<_Functor> __f)
 {

   _Base::_M_init_functor(__functor, &__f.get());
 }
      };

    _Function_base() : _M_manager(0) { }

    ~_Function_base()
    {
      if (_M_manager)
 _M_manager(_M_functor, _M_functor, __destroy_functor);
    }


    bool _M_empty() const { return !_M_manager; }

    typedef bool (*_Manager_type)(_Any_data&, const _Any_data&,
      _Manager_operation);

    _Any_data _M_functor;
    _Manager_type _M_manager;
  };

  template<typename _Signature, typename _Functor>
    class _Function_handler;

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return __callable_functor(**_Base::_M_get_pointer(__functor))(
       std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 __callable_functor(**_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename _Res,
    typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Member _Class::*>
    : public _Function_handler<void(_ArgTypes...), _Member _Class::*>
    {
      typedef _Function_handler<void(_ArgTypes...), _Member _Class::*>
 _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Member _Class::*>
    : public _Function_base::_Base_manager<
   _Simple_type_wrapper< _Member _Class::* > >
    {
      typedef _Member _Class::* _Functor;
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

     public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   _Manager_operation __op)
      {
 switch (__op)
   {

   case __get_type_info:
     __dest._M_access<const type_info*>() = &typeid(_Functor);
     break;

   case __get_functor_ptr:
     __dest._M_access<_Functor*>() =
       &_Base::_M_get_pointer(__source)->__value;
     break;

   default:
     _Base::_M_manager(__dest, __source, __op);
   }
 return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };







  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
      private _Function_base
    {
      typedef _Res _Signature_type(_ArgTypes...);

      struct _Useless { };

    public:
      typedef _Res result_type;







      function() : _Function_base() { }





      function(nullptr_t) : _Function_base() { }
# 1909 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 function(const function& __x);
# 1918 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 function(function&& __x) : _Function_base()
      {
 __x.swap(*this);
      }
# 1941 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 template<typename _Functor>
 function(_Functor __f,
   typename enable_if<
      !is_integral<_Functor>::value, _Useless>::type
     = _Useless());
# 1959 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 function&
      operator=(const function& __x)
      {
 function(__x).swap(*this);
 return *this;
      }
# 1977 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 function&
      operator=(function&& __x)
      {
 function(std::move(__x)).swap(*this);
 return *this;
      }
# 1991 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 function&
      operator=(nullptr_t)
      {
 if (_M_manager)
   {
     _M_manager(_M_functor, _M_functor, __destroy_functor);
     _M_manager = 0;
     _M_invoker = 0;
   }
 return *this;
      }
# 2019 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 template<typename _Functor>
 typename enable_if<!is_integral<_Functor>::value, function&>::type
 operator=(_Functor&& __f)
 {
   function(std::forward<_Functor>(__f)).swap(*this);
   return *this;
 }


      template<typename _Functor>
 typename enable_if<!is_integral<_Functor>::value, function&>::type
 operator=(reference_wrapper<_Functor> __f)
 {
   function(__f).swap(*this);
   return *this;
 }
# 2045 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 void swap(function& __x)
      {
 std::swap(_M_functor, __x._M_functor);
 std::swap(_M_manager, __x._M_manager);
 std::swap(_M_invoker, __x._M_invoker);
      }
# 2073 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 explicit operator bool() const
      { return !_M_empty(); }
# 2086 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 _Res operator()(_ArgTypes... __args) const;
# 2099 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 const type_info& target_type() const;
# 2110 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 template<typename _Functor> _Functor* target();


      template<typename _Functor> const _Functor* target() const;


    private:
      typedef _Res (*_Invoker_type)(const _Any_data&, _ArgTypes...);
      _Invoker_type _M_invoker;
  };


  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 {
   _M_invoker = __x._M_invoker;
   _M_manager = __x._M_manager;
   __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 }
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      function<_Res(_ArgTypes...)>::
      function(_Functor __f,
        typename enable_if<
   !is_integral<_Functor>::value, _Useless>::type)
      : _Function_base()
      {
 typedef _Function_handler<_Signature_type, _Functor> _My_handler;

 if (_My_handler::_M_not_empty_function(__f))
   {
     _M_invoker = &_My_handler::_M_invoke;
     _M_manager = &_My_handler::_M_manager;
     _My_handler::_M_init_functor(_M_functor, std::move(__f));
   }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 __throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }


  template<typename _Res, typename... _ArgTypes>
    const type_info&
    function<_Res(_ArgTypes...)>::
    target_type() const
    {
      if (_M_manager)
 {
   _Any_data __typeinfo_result;
   _M_manager(__typeinfo_result, _M_functor, __get_type_info);
   return *__typeinfo_result._M_access<const type_info*>();
 }
      else
 return typeid(void);
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      _Functor*
      function<_Res(_ArgTypes...)>::
      target()
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     if (_M_manager(__ptr, _M_functor, __get_functor_ptr)
  && !is_const<_Functor>::value)
       return 0;
     else
       return __ptr._M_access<_Functor*>();
   }
 else
   return 0;
      }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      const _Functor*
      function<_Res(_ArgTypes...)>::
      target() const
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     _M_manager(__ptr, _M_functor, __get_functor_ptr);
     return __ptr._M_access<const _Functor*>();
   }
 else
   return 0;
      }
# 2224 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t)
    { return !static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator==(nullptr_t, const function<_Res(_Args...)>& __f)
    { return !static_cast<bool>(__f); }
# 2242 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t)
    { return static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator!=(nullptr_t, const function<_Res(_Args...)>& __f)
    { return static_cast<bool>(__f); }
# 2260 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
 template<typename _Res, typename... _Args>
    inline void
    swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y)
    { __x.swap(__y); }


}
# 69 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator>
    void
    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c)
    {




      if (*__a < *__b)
 {
   if (*__b < *__c)
     std::iter_swap(__a, __b);
   else if (*__a < *__c)
     std::iter_swap(__a, __c);
 }
      else if (*__a < *__c)
 return;
      else if (*__b < *__c)
 std::iter_swap(__a, __c);
      else
 std::iter_swap(__a, __b);
    }


  template<typename _Iterator, typename _Compare>
    void
    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c,
   _Compare __comp)
    {





      if (__comp(*__a, *__b))
 {
   if (__comp(*__b, *__c))
     std::iter_swap(__a, __b);
   else if (__comp(*__a, *__c))
     std::iter_swap(__a, __c);
 }
      else if (__comp(*__a, *__c))
 return;
      else if (__comp(*__b, *__c))
 std::iter_swap(__a, __c);
      else
 std::iter_swap(__a, __b);
    }




  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    __find(_InputIterator __first, _InputIterator __last,
    const _Tp& __val, input_iterator_tag)
    {
      while (__first != __last && !(*__first == __val))
 ++__first;
      return __first;
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !bool(__pred(*__first)))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,
    const _Tp& __val, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (*__first == __val)
     return __first;
   ++__first;
 case 2:
   if (*__first == __val)
     return __first;
   ++__first;
 case 1:
   if (*__first == __val)
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }



  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && bool(__pred(*__first)))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if_not(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 2:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 1:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }
# 326 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        std::forward_iterator_tag)
    {
      __first = std::find(__first, __last, __val);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && *__i == __val)
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::find(++__i, __last, __val);
 }
      return __last;
    }






  template<typename _RandomAccessIter, typename _Integer, typename _Tp>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!(*__lookAhead == __val))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        *__backTrack == __val; --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 411 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::forward_iterator_tag)
    {
      while (__first != __last && !bool(__binary_pred(*__first, __val)))
        ++__first;

      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && bool(__binary_pred(*__i, __val)))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = ++__i;
   while (__first != __last
   && !bool(__binary_pred(*__first, __val)))
     ++__first;
 }
      return __last;
    }







  template<typename _RandomAccessIter, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!bool(__binary_pred(*__lookAhead, __val)))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        __binary_pred(*__backTrack, __val); --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2, __last2);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2,
      __last2, __comp);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1),
             __rlast1,
             _RevIterator2(__last2),
             __rlast2);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }

  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1), __rlast1,
         _RevIterator2(__last2), __rlast2,
         __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 649 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2));
    }
# 695 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __comp);
    }
# 730 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _Predicate>
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if_not(__first, __last, __pred); }
# 747 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _Predicate>
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if(__first, __last, __pred); }
# 764 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _Predicate>
    inline bool
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return !std::none_of(__first, __last, __pred); }
# 779 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
  _Predicate __pred)
    {




                                                     ;
      return std::__find_if_not(__first, __last, __pred,
    std::__iterator_category(__first));
    }
# 803 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _Predicate>
    inline bool
    is_partitioned(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      __first = std::find_if_not(__first, __last, __pred);
      return std::none_of(__first, __last, __pred);
    }
# 821 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    partition_point(_ForwardIterator __first, _ForwardIterator __last,
      _Predicate __pred)
    {






                                                     ;

      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__pred(*__middle))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 874 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (!(*__first == __value))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 911 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (!bool(__pred(*__first)))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 950 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }


  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    _OutputIterator
    __copy_n(_InputIterator __first, _Size __n,
      _OutputIterator __result, input_iterator_tag)
    {
      for (; __n > 0; --__n)
 {
   *__result = *__first;
   ++__first;
   ++__result;
 }
      return __result;
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _OutputIterator>
    inline _OutputIterator
    __copy_n(_RandomAccessIterator __first, _Size __n,
      _OutputIterator __result, random_access_iterator_tag)
    { return std::copy(__first, __first + __n, __result); }
# 1008 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _Size, typename _OutputIterator>
    inline _OutputIterator
    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
    {





      return std::__copy_n(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 1036 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _OutputIterator1,
    typename _OutputIterator2, typename _Predicate>
    pair<_OutputIterator1, _OutputIterator2>
    partition_copy(_InputIterator __first, _InputIterator __last,
     _OutputIterator1 __out_true, _OutputIterator2 __out_false,
     _Predicate __pred)
    {
# 1051 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__out_true = *__first;
     ++__out_true;
   }
 else
   {
     *__out_false = *__first;
     ++__out_false;
   }

      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
    }
# 1086 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {





                                                     ;

      __first = std::find(__first, __last, __value);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!(*__first == __value))
          {
            *__result = std::move(*__first);
            ++__result;
          }
      return __result;
    }
# 1129 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      __first = std::find_if(__first, __last, __pred);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!bool(__pred(*__first)))
          {
            *__result = std::move(*__first);
            ++__result;
          }
      return __result;
    }
# 1169 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {





                                                     ;


      __first = std::adjacent_find(__first, __last);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!(*__dest == *__first))
   *++__dest = std::move(*__first);
      return ++__dest;
    }
# 1209 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {






                                                     ;


      __first = std::adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__dest, *__first)))
   *++__dest = std::move(*__first);
      return ++__dest;
    }






  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result,
    forward_iterator_tag, output_iterator_tag)
    {

      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!(*__first == *__next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result,
    input_iterator_tag, output_iterator_tag)
    {

      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!(__value == *__first))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _ForwardIterator>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result,
    input_iterator_tag, forward_iterator_tag)
    {

      *__result = *__first;
      while (++__first != __last)
 if (!(*__result == *__first))
   *++__result = *__first;
      return ++__result;
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {





      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!bool(__binary_pred(*__first, *__next)))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {





      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!bool(__binary_pred(__value, *__first)))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {





      *__result = *__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__result, *__first)))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1437 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {



                                                     ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1464 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {





                                                     ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }


  template<typename _ForwardIterator>
    void
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle || __last == __middle)
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
    }


  template<typename _BidirectionalIterator>
    void
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 std::__reverse(__middle, __last, bidirectional_iterator_tag());
      else
 std::__reverse(__first, __middle, bidirectional_iterator_tag());
    }


  template<typename _RandomAccessIterator>
    void
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return;
 }

      _RandomAccessIterator __p = __first;

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*__p);
    std::move(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = std::move(__t);
    return;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*(__p + __n - 1));
    std::move_backward(__p, __p + __n - 1, __p + __n);
    *__p = std::move(__t);
    return;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
     }
 }
    }
# 1668 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator>
    inline void
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {



                                                       ;
                                                      ;

      typedef typename iterator_traits<_ForwardIterator>::iterator_category
 _IterType;
      std::__rotate(__first, __middle, __last, _IterType());
    }
# 1702 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {




                                                       ;
                                                      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }




  template<typename _ForwardIterator, typename _Predicate, typename _Distance>
    _ForwardIterator
    __inplace_stable_partition(_ForwardIterator __first,
          _ForwardIterator __last,
          _Predicate __pred, _Distance __len)
    {
      if (__len == 1)
 return __pred(*__first) ? __last : __first;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __begin = std::__inplace_stable_partition(__first,
         __middle,
         __pred,
         __len / 2);
      _ForwardIterator __end = std::__inplace_stable_partition(__middle, __last,
              __pred,
              __len
              - __len / 2);
      std::rotate(__begin, __middle, __end);
      std::advance(__begin, std::distance(__middle, __end));
      return __begin;
    }


  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;
   for (; __first != __last; ++__first)
     if (__pred(*__first))
       {
  *__result1 = std::move(*__first);
  ++__result1;
       }
     else
       {
  *__result2 = std::move(*__first);
  ++__result2;
       }
   std::move(__buffer, __result2, __result1);
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std::advance(__middle, __len / 2);
   _ForwardIterator __begin =
     std::__stable_partition_adaptive(__first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size);
   _ForwardIterator __end =
     std::__stable_partition_adaptive(__middle, __last, __pred,
          __len - __len / 2,
          __buffer, __buffer_size);
   std::rotate(__begin, __middle, __end);
   std::advance(__begin, std::distance(__middle, __end));
   return __begin;
 }
    }
# 1860 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      if (__first == __last)
 return __first;
      else
 {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;
   typedef typename iterator_traits<_ForwardIterator>::difference_type
     _DistanceType;

   _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first,
        __last);
 if (__buf.size() > 0)
   return
     std::__stable_partition_adaptive(__first, __last, __pred,
       _DistanceType(__buf.requested_size()),
       __buf.begin(),
       _DistanceType(__buf.size()));
 else
   return
     std::__inplace_stable_partition(__first, __last, __pred,
      _DistanceType(__buf.requested_size()));
 }
    }


  template<typename _RandomAccessIterator>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last)
    {
      std::make_heap(__first, __middle);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (*__i < *__first)
   std::__pop_heap(__first, __middle, __i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(*__i, *__first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }
# 1942 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _RandomAccessIterator>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 1962 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;
                                                                   ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last);
      while (__first != __last)
 {
   if (*__first < *__result_first)
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first));
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last);
      return __result_real_last;
    }
# 2008 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 2032 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;
                                                                   ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(*__first, *__result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first),
          __comp);
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }


  template<typename _RandomAccessIterator>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__val < *__next)
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, *__next))
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last)
    {
      if (__first == __last)
 return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (*__i < *__first)
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i);
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(*__i, *__first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i, __comp);
 }
    }


  template<typename _RandomAccessIterator>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i, __comp);
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold));
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last);
 }
      else
 std::__insertion_sort(__first, __last);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last, const _Tp& __pivot)
    {
      while (true)
 {
   while (*__first < __pivot)
     ++__first;
   --__last;
   while (__pivot < *__last)
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     const _Tp& __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(*__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, *__last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1));
      return std::__unguarded_partition(__first + 1, __last, *__first);
    }



  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1), __comp);
      return std::__unguarded_partition(__first + 1, __last, *__first, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last);
   std::__introsort_loop(__cut, __last, __depth_limit);
   __last = __cut;
 }
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Size>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last);


       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2392 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;






                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2439 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;




                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__val < *__middle)
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2488 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;






                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2541 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Tp>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;





                                                                  ;
                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__val < *__middle)
     __len = __half;
   else
     {
       _ForwardIterator __left = std::lower_bound(__first, __middle,
        __val);
       std::advance(__first, __len);
       _ForwardIterator __right = std::upper_bound(++__middle, __first,
         __val);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2603 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Tp, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;
# 2620 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;

                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       _ForwardIterator __left = std::lower_bound(__first, __middle,
        __val, __comp);
       std::advance(__first, __len);
       _ForwardIterator __right = std::upper_bound(++__middle, __first,
         __val, __comp);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2663 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




                                                                  ;
                                                                  ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val);
      return __i != __last && !(__val < *__i);
    }
# 2696 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

                    ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (*__last2 < *__last1)
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(*__last2, *__last1))
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::move(__middle, __last, __buffer);
       std::move_backward(__first, __middle, __last);
       return std::move(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::move(__first, __middle, __buffer);
       std::move(__middle, __last, __first);
       return std::move_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last,
           *__first_cut);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle,
          *__second_cut);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer, __buffer_size);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last, *__first_cut,
           __comp);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle, *__second_cut,
          __comp);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (*__middle < *__first)
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22);
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (__comp(*__middle, *__first))
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut,
       __comp);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut,
      __comp);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }
# 3120 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _BidirectionalIterator>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;





                                                  ;
                                                 ;

      if (__first == __middle || __middle == __last)
 return;

      _DistanceType __len1 = std::distance(__first, __middle);
      _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1, __len2);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()));
    }
# 3175 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _BidirectionalIterator, typename _Compare>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;






                                                               ;
                                                              ;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1,
        __len2, __comp);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()),
         __comp);
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result));


    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result));


    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result,
        _Distance __step_size)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step, __result);
   __first += __two_step;
 }

      __step_size = std::min(_Distance(__last - __first), __step_size);
      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result);
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first,__first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer, __step_size);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle,
          __buffer, __buffer_size);
   std::__stable_sort_adaptive(__middle, __last,
          __buffer, __buffer_size);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer);
   std::__merge_sort_with_buffer(__middle, __last, __buffer);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size);
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle);
      std::__inplace_stable_sort(__middle, __last);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 3513 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator1, typename _InputIterator2>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;






                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first2 < *__first1)
   return false;
 else if(*__first1 < *__first2)
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3562 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 3581 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first2, *__first1))
   return false;
 else if(__comp(*__first1, *__first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3617 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _BidirectionalIterator>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__i < *__ii)
     {
       _BidirectionalIterator __j = __last;
       while (!(*__i < *--__j))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3674 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _BidirectionalIterator, typename _Compare>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__i, *__ii))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*__i, *--__j)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3730 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _BidirectionalIterator>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__ii < *__i)
     {
       _BidirectionalIterator __j = __last;
       while (!(*--__j < *__i))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3787 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _BidirectionalIterator, typename _Compare>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__ii, *__i))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*--__j, *__i)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3847 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {






                                                     ;

      for (; __first != __last; ++__first, ++__result)
 if (*__first == __old_value)
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3884 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {






                                                     ;

      for (; __first != __last; ++__first, ++__result)
 if (__pred(*__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3915 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last)
    { return std::is_sorted_until(__first, __last) == __last; }
# 3929 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Compare>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    { return std::is_sorted_until(__first, __last, __comp) == __last; }
# 3943 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator>
    _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, ++__next)
 if (*__next < *__first)
   return __next;
      return __next;
    }
# 3972 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
      _Compare __comp)
    {





                                                     ;

      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, ++__next)
 if (__comp(*__next, *__first))
   return __next;
      return __next;
    }
# 4001 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _Tp>
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b)
    {



      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
                : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 4020 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _Tp, typename _Compare>
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
                       : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 4039 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator>
    pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min, __max;
      if (*__next < *__first)
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (*__first < *__min)
  __min = __first;
       else if (!(*__first < *__max))
  __max = __first;
       break;
     }

   if (*__next < *__first)
     {
       if (*__next < *__min)
  __min = __next;
       if (!(*__first < *__max))
  __max = __first;
     }
   else
     {
       if (*__first < *__min)
  __min = __first;
       if (!(*__next < *__max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }
# 4115 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last,
     _Compare __comp)
    {





                                                     ;

      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min, __max;
      if (__comp(*__next, *__first))
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (__comp(*__first, *__min))
  __min = __first;
       else if (!__comp(*__first, *__max))
  __max = __first;
       break;
     }

   if (__comp(*__next, *__first))
     {
       if (__comp(*__next, *__min))
  __min = __next;
       if (!__comp(*__first, *__max))
  __max = __first;
     }
   else
     {
       if (__comp(*__first, *__min))
  __min = __first;
       if (!__comp(*__next, *__max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }


  template<typename _Tp>
    inline _Tp
    min(initializer_list<_Tp> __l)
    { return *std::min_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    inline _Tp
    min(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::min_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    inline _Tp
    max(initializer_list<_Tp> __l)
    { return *std::max_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    inline _Tp
    max(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::max_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end());
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _Tp, typename _Compare>
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l, _Compare __comp)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end(), __comp);
      return std::make_pair(*__p.first, *__p.second);
    }
# 4232 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator1, typename _ForwardIterator2>
    bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {


      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!(*__first1 == *__first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::find(__first1, __scan, *__scan))
     continue;

   auto __matches = std::count(__first2, __last2, *__scan);
   if (0 == __matches
       || std::count(__scan, __last1, *__scan) != __matches)
     return false;
 }
      return true;
    }
# 4276 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__pred(*__first1, *__first2)))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   using std::placeholders::_1;

   if (__scan != std::find_if(__first1, __scan,
      std::bind(__pred, _1, *__scan)))
     continue;

   auto __matches = std::count_if(__first2, __last2,
      std::bind(__pred, _1, *__scan));
   if (0 == __matches
       || std::count_if(__scan, __last1,
          std::bind(__pred, _1, *__scan)) != __matches)
     return false;
 }
      return true;
    }
# 4326 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _RandomAccessIterator,
    typename _UniformRandomNumberGenerator>
    void
    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _UniformRandomNumberGenerator&& __g)
    {



                                                     ;

      if (__first == __last)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      typedef typename __distr_type::param_type __p_type;
      __distr_type __d;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    }
# 4371 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {


                                                     ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return std::move(__f);
    }
# 4392 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {




                                                     ;
      return std::__find(__first, __last, __val,
           std::__iterator_category(__first));
    }
# 4416 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {




                                                     ;
      return std::__find_if(__first, __last, __pred,
       std::__iterator_category(__first));
    }
# 4445 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 4484 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 4516 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (*__first == *__next)
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4548 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {





                                                     ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (__binary_pred(*__first, *__next))
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4580 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _Tp>
    typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {




                                                     ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (*__first == __value)
   ++__n;
      return __n;
    }
# 4605 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {




                                                     ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(*__first))
   ++__n;
      return __n;
    }
# 4645 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::find(__first1, __last1, *__first2);


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 = std::find(__first1, __last1, *__first2);
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (*__current == *__p)
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4716 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {






                                                       ;
                                                       ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   return __first1;
 }


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(*__current, *__p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4790 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {




                                                     ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 return std::find(__first, __last, __val);
      return std::__search_n(__first, __last, __count, __val,
        std::__iterator_category(__first));
    }
# 4826 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 {
   while (__first != __last && !bool(__binary_pred(*__first, __val)))
     ++__first;
   return __first;
 }
      return std::__search_n(__first, __last, __count, __val, __binary_pred,
        std::__iterator_category(__first));
    }
# 4868 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {





                                                     ;

      for (; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4904 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {






                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4937 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4969 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 5001 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {




                                                     ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 5032 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {





      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __gen();
      return __first;
    }
# 5069 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {






                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 5108 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result, __binary_pred,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 5140 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {



                                                     ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   std::iter_swap(__i, __first + (std::rand() % ((__i - __first) + 1)));
    }
# 5168 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,

     _RandomNumberGenerator&& __rand)



    {



                                                     ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __rand((__i - __first) + 1));
    }
# 5204 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 5238 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                       ;
                                                      ;

      std::__heap_select(__first, __middle, __last);
      std::sort_heap(__first, __middle);
    }
# 5277 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                       ;
                                                      ;

      std::__heap_select(__first, __middle, __last, __comp);
      std::sort_heap(__first, __middle, __comp);
    }
# 5315 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2);
    }
# 5354 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2, __comp);
    }
# 5392 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                     ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2);
   std::__final_insertion_sort(__first, __last);
 }
    }
# 5428 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                     ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2, __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }
# 5469 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5489 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5532 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5553 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5592 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;





                                                     ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()));
    }
# 5634 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;







                                                     ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 5680 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5701 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first1 < *__first2)
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5747 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5770 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first1, *__first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5814 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5833 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   ++__first1;
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5871 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5892 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   ++__first1;
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5929 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5948 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5990 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6011 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 6048 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6069 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2, std::copy(__first1,
          __last1, __result));
    }
# 6114 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6138 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 6171 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__first < *__result)
   __result = __first;
      return __result;
    }
# 6199 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__first, *__result))
   __result = __first;
      return __result;
    }
# 6227 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__result < *__first)
   __result = __first;
      return __result;
    }
# 6255 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
 template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__result, *__first))
   __result = __first;
      return __result;
    }


}
# 63 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 2 3
# 6 "firmware/nnet_utils/nnet_helpers.h" 2
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 1 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3



# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 1 3
# 40 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
# 40 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 67 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
 template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 115 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
 result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 154 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
 result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 195 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
 result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 236 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
 virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };
# 275 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
 template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs) { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };



  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };



  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }

    protected:
      virtual
      ~codecvt_byname() { }
    };




  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);




}
# 42 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 43 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 1 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 3
# 38 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 3


# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 1 3
# 36 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 37 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;


}
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _CharT>
    class __basic_file;


  template<>
    class __basic_file<char>
    {

      __c_file* _M_cfile;


      bool _M_cfile_created;

    public:
      __basic_file(__c_lock* __lock = 0) throw ();

      __basic_file*
      open(const char* __name, ios_base::openmode __mode, int __prot = 0664);

      __basic_file*
      sys_open(__c_file* __file, ios_base::openmode);

      __basic_file*
      sys_open(int __fd, ios_base::openmode __mode) throw ();

      __basic_file*
      close();

      __attribute__ ((__pure__)) bool
      is_open() const throw ();

      __attribute__ ((__pure__)) int
      fd() throw ();

      __attribute__ ((__pure__)) __c_file*
      file() throw ();

      ~__basic_file();

      streamsize
      xsputn(const char* __s, streamsize __n);

      streamsize
      xsputn_2(const char* __s1, streamsize __n1,
        const char* __s2, streamsize __n2);

      streamsize
      xsgetn(char* __s, streamsize __n);

      streamoff
      seekoff(streamoff __off, ios_base::seekdir __way) throw ();

      int
      sync();

      streamsize
      showmanyc();
    };


}
# 44 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 67 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 template<typename _CharT, typename _Traits>
    class basic_filebuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef __basic_file<char> __file_type;
      typedef typename traits_type::state_type __state_type;
      typedef codecvt<char_type, char, __state_type> __codecvt_type;

      friend class ios_base;

    protected:


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base::openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type* _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;
# 129 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type* _M_pback_cur_save;
      char_type* _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type* _M_codecvt;






      char* _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char* _M_ext_next;
      char* _M_ext_end;






      void
      _M_create_pback()
      {
 if (!_M_pback_init)
   {
     _M_pback_cur_save = this->gptr();
     _M_pback_end_save = this->egptr();
     this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback() throw()
      {
 if (_M_pback_init)
   {

     _M_pback_cur_save += this->gptr() != this->eback();
     this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
     _M_pback_init = false;
   }
      }

    public:







      basic_filebuf();




      virtual
      ~basic_filebuf()
      { this->close(); }





      bool
      is_open() const throw()
      { return _M_file.is_open(); }
# 265 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 __filebuf_type*
      open(const char* __s, ios_base::openmode __mode);
# 275 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 __filebuf_type*
      open(const std::string& __s, ios_base::openmode __mode)
      { return open(__s.c_str(), __mode); }
# 292 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 __filebuf_type*
      close();

    protected:
      void
      _M_allocate_internal_buffer();

      void
      _M_destroy_internal_buffer() throw();


      virtual streamsize
      showmanyc();






      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = _Traits::eof());
# 324 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 virtual int_type
      overflow(int_type __c = _Traits::eof());



      bool
      _M_convert_to_external(char_type*, streamsize);
# 344 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n);

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __pos,
       ios_base::openmode __mode = ios_base::in | ios_base::out);


      pos_type
      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);

      int
      _M_get_ext_pos(__state_type &__state);

      virtual int
      sync();

      virtual void
      imbue(const locale& __loc);

      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);

      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);


      bool
      _M_terminate_output();
# 390 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 void
      _M_set_buffer(streamsize __off)
      {
  const bool __testin = _M_mode & ios_base::in;
  const bool __testout = _M_mode & ios_base::out;

 if (__testin && __off > 0)
   this->setg(_M_buf, _M_buf, _M_buf + __off);
 else
   this->setg(_M_buf, _M_buf, _M_buf);

 if (__testout && __off == 0 && _M_buf_size > 1 )
   this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 else
   this->setp(0, 0);
      }
    };
# 418 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 template<typename _CharT, typename _Traits>
    class basic_ifstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 445 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 basic_ifstream() : __istream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 458 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 explicit
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 474 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 explicit
      basic_ifstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 490 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 ~basic_ifstream()
      { }
# 500 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 529 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 void
      open(const char* __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 549 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 void
      open(const std::string& __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 567 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 586 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 template<typename _CharT, typename _Traits>
    class basic_ofstream : public basic_ostream<_CharT,_Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 613 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 basic_ofstream(): __ostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 627 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 explicit
      basic_ofstream(const char* __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 645 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 explicit
      basic_ofstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 661 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 ~basic_ofstream()
      { }
# 671 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 700 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 721 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 void
      open(const std::string& __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 740 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 759 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 template<typename _CharT, typename _Traits>
    class basic_fstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ios<char_type, traits_type> __ios_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 787 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 799 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 explicit
      basic_fstream(const char* __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }







      explicit
      basic_fstream(const std::string& __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 830 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 ~basic_fstream()
      { }
# 840 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 869 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 890 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 void
      open(const std::string& __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 909 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
 void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };


}



# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 1 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3
# 39 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_allocate_internal_buffer()
    {


      if (!_M_buf_allocated && !_M_buf)
 {
   _M_buf = new char_type[_M_buf_size];
   _M_buf_allocated = true;
 }
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_destroy_internal_buffer() throw()
    {
      if (_M_buf_allocated)
 {
   delete [] _M_buf;
   _M_buf = 0;
   _M_buf_allocated = false;
 }
      delete [] _M_ext_buf;
      _M_ext_buf = 0;
      _M_ext_buf_size = 0;
      _M_ext_next = 0;
      _M_ext_end = 0;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),
    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),
    _M_state_last(), _M_buf(0), _M_buf_size(8192),
    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(),
    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),
    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),
    _M_ext_end(0)
    {
      if (has_facet<__codecvt_type>(this->_M_buf_locale))
 _M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    open(const char* __s, ios_base::openmode __mode)
    {
      __filebuf_type *__ret = 0;
      if (!this->is_open())
 {
   _M_file.open(__s, __mode);
   if (this->is_open())
     {
       _M_allocate_internal_buffer();
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer(-1);


       _M_state_last = _M_state_cur = _M_state_beg;


       if ((__mode & ios_base::ate)
    && this->seekoff(0, ios_base::end, __mode)
    == pos_type(off_type(-1)))
  this->close();
       else
  __ret = this;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    close()
    {
      if (!this->is_open())
 return 0;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf *__fb;
   __close_sentry (basic_filebuf *__fbi): __fb(__fbi) { }
   ~__close_sentry ()
   {
     __fb->_M_mode = ios_base::openmode(0);
     __fb->_M_pback_init = false;
     __fb->_M_destroy_internal_buffer();
     __fb->_M_reading = false;
     __fb->_M_writing = false;
     __fb->_M_set_buffer(-1);
     __fb->_M_state_last = __fb->_M_state_cur = __fb->_M_state_beg;
   }
 } __cs (this);

 if (true)
   {
     if (!_M_terminate_output())
       __testfail = true;
   }
 if (false)
   {
     _M_file.close();
                            ;
   }
 if (false)
   { __testfail = true; }
      }

      if (!_M_file.close())
 __testfail = true;

      if (__testfail)
 return 0;
      else
 return this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    showmanyc()
    {
      streamsize __ret = -1;
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && this->is_open())
 {


   __ret = this->egptr() - this->gptr();







   if (__check_facet(_M_codecvt).encoding() >= 0)

     __ret += _M_file.showmanyc() / _M_codecvt->max_length();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }



   _M_destroy_pback();

   if (this->gptr() < this->egptr())
     return traits_type::to_int_type(*this->gptr());


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base::result __r = codecvt_base::ok;
   if (__check_facet(_M_codecvt).always_noconv())
     {
       __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()),
          __buflen);
       if (__ilen == 0)
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt->encoding();
       streamsize __blen;
       streamsize __rlen;
       if (__enc > 0)
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt->max_length() - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if (_M_reading && this->egptr() == this->eback() && __remainder)
  __rlen = 0;



       if (_M_ext_buf_size < __blen)
  {
    char* __buf = new char[__blen];
    if (__remainder)
      __builtin_memcpy(__buf, _M_ext_next, __remainder);

    delete [] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if (__remainder)
  __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if (__rlen > 0)
      {



        if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)
   {
     __throw_ios_failure(("basic_filebuf::underflow " "codecvt::max_length() " "is not valid"));


   }
        streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);
        if (__elen == 0)
   __got_eof = true;
        else if (__elen == -1)
   break;
        _M_ext_end += __elen;
      }

    char_type* __iend = this->eback();
    if (_M_ext_next < _M_ext_end)
      __r = _M_codecvt->in(_M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this->eback(),
      this->eback() + __buflen, __iend);
    if (__r == codecvt_base::noconv)
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std::min(__avail, __buflen);
        traits_type::copy(this->eback(),
     reinterpret_cast<char_type*>
     (_M_ext_buf), __ilen);
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this->eback();




    if (__r == codecvt_base::error)
      break;

    __rlen = 1;
  }
       while (__ilen == 0 && !__got_eof);
     }

   if (__ilen > 0)
     {
       _M_set_buffer(__ilen);
       _M_reading = true;
       __ret = traits_type::to_int_type(*this->gptr());
     }
   else if (__got_eof)
     {



       _M_set_buffer(-1);
       _M_reading = false;


       if (__r == codecvt_base::partial)
  __throw_ios_failure(("basic_filebuf::underflow " "incomplete character in file"));

     }
   else if (__r == codecvt_base::error)
     __throw_ios_failure(("basic_filebuf::underflow " "invalid byte sequence in file"));

   else
     __throw_ios_failure(("basic_filebuf::underflow " "error reading the file"));

 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    pbackfail(int_type __i)
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type::eq_int_type(__i, __ret);
   int_type __tmp;
   if (this->eback() < this->gptr())
     {
       this->gbump(-1);
       __tmp = traits_type::to_int_type(*this->gptr());
     }
   else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))
     {
       __tmp = this->underflow();
       if (traits_type::eq_int_type(__tmp, __ret))
  return __ret;
     }
   else
     {





       return __ret;
     }



   if (!__testeof && traits_type::eq_int_type(__i, __tmp))
     __ret = __i;
   else if (__testeof)
     __ret = traits_type::not_eof(__i);
   else if (!__testpb)
     {
       _M_create_pback();
       _M_reading = true;
       *this->gptr() = traits_type::to_char_type(__i);
       __ret = __i;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    overflow(int_type __c)
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(__c, __ret);
      const bool __testout = _M_mode & ios_base::out;
      if (__testout)
 {
          if (_M_reading)
            {
              _M_destroy_pback();
              const int __gptr_off = _M_get_ext_pos(_M_state_last);
              if (_M_seek(__gptr_off, ios_base::cur, _M_state_last)
                  == pos_type(off_type(-1)))
                return __ret;
            }
   if (this->pbase() < this->pptr())
     {

       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }



       if (_M_convert_to_external(this->pbase(),
      this->pptr() - this->pbase()))
  {
    _M_set_buffer(0);
    __ret = traits_type::not_eof(__c);
  }
     }
   else if (_M_buf_size > 1)
     {



       _M_set_buffer(0);
       _M_writing = true;
       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
       __ret = traits_type::not_eof(__c);
     }
   else
     {

       char_type __conv = traits_type::to_char_type(__c);
       if (__testeof || _M_convert_to_external(&__conv, 1))
  {
    _M_writing = true;
    __ret = traits_type::not_eof(__c);
  }
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)
    {

      streamsize __elen;
      streamsize __plen;
      if (__check_facet(_M_codecvt).always_noconv())
 {
   __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt->max_length();
   char* __buf = static_cast<char*>(__builtin_alloca(__blen));

   char* __bend;
   const char_type* __iend;
   codecvt_base::result __r;
   __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend);

   if (__r == codecvt_base::ok || __r == codecvt_base::partial)
     __blen = __bend - __buf;
   else if (__r == codecvt_base::noconv)
     {

       __buf = reinterpret_cast<char*>(__ibuf);
       __blen = __ilen;
     }
   else
     __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));


   __elen = _M_file.xsputn(__buf, __blen);
   __plen = __blen;


   if (__r == codecvt_base::partial && __elen == __plen)
     {
       const char_type* __iresume = __iend;
       streamsize __rlen = this->pptr() - __iend;
       __r = _M_codecvt->out(_M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend);
       if (__r != codecvt_base::error)
  {
    __rlen = __bend - __buf;
    __elen = _M_file.xsputn(__buf, __rlen);
    __plen = __rlen;
  }
       else
  __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));

     }
 }
      return __elen == __plen;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsgetn(_CharT* __s, streamsize __n)
    {

      streamsize __ret = 0;
      if (_M_pback_init)
 {
   if (__n > 0 && this->gptr() == this->eback())
     {
       *__s++ = *this->gptr();
       this->gbump(1);
       __ret = 1;
       --__n;
     }
   _M_destroy_pback();
 }
      else if (_M_writing)
 {
    if (overflow() == traits_type::eof())
      return __ret;
    _M_set_buffer(-1);
    _M_writing = false;
  }




      const bool __testin = _M_mode & ios_base::in;
      const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

      if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()
     && __testin)
   {

     const streamsize __avail = this->egptr() - this->gptr();
     if (__avail != 0)
       {
        traits_type::copy(__s, this->gptr(), __avail);
         __s += __avail;
        this->setg(this->eback(), this->gptr() + __avail,
     this->egptr());
        __ret += __avail;
        __n -= __avail;
       }



     streamsize __len;
     for (;;)
       {
         __len = _M_file.xsgetn(reinterpret_cast<char*>(__s),
           __n);
         if (__len == -1)
    __throw_ios_failure(("basic_filebuf::xsgetn " "error reading the file"));

         if (__len == 0)
    break;

         __n -= __len;
         __ret += __len;
         if (__n == 0)
    break;

         __s += __len;
       }

     if (__n == 0)
       {
         _M_set_buffer(0);
         _M_reading = true;
       }
     else if (__len == 0)
       {



         _M_set_buffer(-1);
         _M_reading = false;
       }
   }
      else
   __ret += __streambuf_type::xsgetn(__s, __n);

      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsputn(const _CharT* __s, streamsize __n)
    {
      streamsize __ret = 0;



      const bool __testout = _M_mode & ios_base::out;
      if (__check_facet(_M_codecvt).always_noconv()
     && __testout && !_M_reading)
 {

   const streamsize __chunk = 1ul << 10;
   streamsize __bufavail = this->epptr() - this->pptr();


   if (!_M_writing && _M_buf_size > 1)
     __bufavail = _M_buf_size - 1;

   const streamsize __limit = std::min(__chunk, __bufavail);
   if (__n >= __limit)
     {
       const streamsize __buffill = this->pptr() - this->pbase();
       const char* __buf = reinterpret_cast<const char*>(this->pbase());
       __ret = _M_file.xsputn_2(__buf, __buffill,
           reinterpret_cast<const char*>(__s),
           __n);
       if (__ret == __buffill + __n)
  {
    _M_set_buffer(0);
    _M_writing = true;
  }
       if (__ret > __buffill)
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type::xsputn(__s, __n);
 }
       else
  __ret = __streambuf_type::xsputn(__s, __n);
       return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__streambuf_type*
    basic_filebuf<_CharT, _Traits>::
    setbuf(char_type* __s, streamsize __n)
    {
      if (!this->is_open())
 {
   if (__s == 0 && __n == 0)
     _M_buf_size = 1;
   else if (__s && __n > 0)
     {
# 701 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3
 _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }




  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)
    {
      int __width = 0;
      if (_M_codecvt)
 __width = _M_codecvt->encoding();
      if (__width < 0)
 __width = 0;

      pos_type __ret = pos_type(off_type(-1));
      const bool __testfail = __off != 0 && __width <= 0;
      if (this->is_open() && !__testfail)
 {




   bool __no_movement = __way == ios_base::cur && __off == 0
     && (!_M_writing || _M_codecvt->always_noconv());


   if (!__no_movement)
     _M_destroy_pback();






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if (_M_reading && __way == ios_base::cur)
     {
       __state = _M_state_last;
       __computed_off += _M_get_ext_pos(__state);
     }
   if (!__no_movement)
     __ret = _M_seek(__computed_off, __way, __state);
   else
     {
       if (_M_writing)
  __computed_off = this->pptr() - this->pbase();

        off_type __file_off = _M_file.seekoff(0, ios_base::cur);
        if (__file_off != off_type(-1))
  {
    __ret = __file_off + __computed_off;
    __ret.state(__state);
  }
     }
 }
      return __ret;
    }





  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekpos(pos_type __pos, ios_base::openmode)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (this->is_open())
 {

   _M_destroy_pback();
   __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (_M_terminate_output())
 {
   off_type __file_off = _M_file.seekoff(__off, __way);
   if (__file_off != off_type(-1))
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer(-1);
       _M_state_cur = __state;
       __ret = __file_off;
       __ret.state(_M_state_cur);
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    int basic_filebuf<_CharT, _Traits>::
    _M_get_ext_pos(__state_type& __state)
    {
      if (_M_codecvt->always_noconv())
        return this->gptr() - this->egptr();
      else
        {



          const int __gptr_off =
            _M_codecvt->length(__state, _M_ext_buf, _M_ext_next,
                               this->gptr() - this->eback());
          return _M_ext_buf + __gptr_off - _M_ext_end;
        }
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_terminate_output()
    {

      bool __testvalid = true;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __testvalid = false;
 }


      if (_M_writing && !__check_facet(_M_codecvt).always_noconv()
   && __testvalid)
 {



   const size_t __blen = 128;
   char __buf[__blen];
   codecvt_base::result __r;
   streamsize __ilen = 0;

   do
     {
       char* __next;
       __r = _M_codecvt->unshift(_M_state_cur, __buf,
     __buf + __blen, __next);
       if (__r == codecvt_base::error)
  __testvalid = false;
       else if (__r == codecvt_base::ok ||
         __r == codecvt_base::partial)
  {
    __ilen = __next - __buf;
    if (__ilen > 0)
      {
        const streamsize __elen = _M_file.xsputn(__buf, __ilen);
        if (__elen != __ilen)
   __testvalid = false;
      }
  }
     }
   while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);

   if (__testvalid)
     {




       const int_type __tmp = this->overflow();
       if (traits_type::eq_int_type(__tmp, traits_type::eof()))
  __testvalid = false;
     }
 }
      return __testvalid;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_filebuf<_CharT, _Traits>::
    sync()
    {


      int __ret = 0;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __ret = -1;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    imbue(const locale& __loc)
    {
      bool __testvalid = true;

      const __codecvt_type* _M_codecvt_tmp = 0;
      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))
 _M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);

      if (this->is_open())
 {

   if ((_M_reading || _M_writing)
       && __check_facet(_M_codecvt).encoding() == -1)
     __testvalid = false;
   else
     {
       if (_M_reading)
  {
    if (__check_facet(_M_codecvt).always_noconv())
      {
        if (_M_codecvt_tmp
     && !__check_facet(_M_codecvt_tmp).always_noconv())
   __testvalid = this->seekoff(0, ios_base::cur, _M_mode)
                 != pos_type(off_type(-1));
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt->length(_M_state_last, _M_ext_buf,
          _M_ext_next,
          this->gptr() - this->eback());
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if (__remainder)
   __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer(-1);
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if (_M_writing && (__testvalid = _M_terminate_output()))
  _M_set_buffer(-1);
     }
 }

      if (__testvalid)
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }




  extern template class basic_filebuf<char>;
  extern template class basic_ifstream<char>;
  extern template class basic_ofstream<char>;
  extern template class basic_fstream<char>;


  extern template class basic_filebuf<wchar_t>;
  extern template class basic_ifstream<wchar_t>;
  extern template class basic_ofstream<wchar_t>;
  extern template class basic_fstream<wchar_t>;




}
# 921 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 7 "firmware/nnet_utils/nnet_helpers.h" 2

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 1 3
# 58 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 3
# 58 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 3

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 1 3
# 68 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 88 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
 enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;
    typedef const _Rb_tree_node_base* _Const_Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Const_Base_ptr
    _S_minimum(_Const_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }

    static _Const_Base_ptr
    _S_maximum(_Const_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;
      _Val _M_value_field;


      template<typename... _Args>
        _Rb_tree_node(_Args&&... __args)
 : _Rb_tree_node_base(),
   _M_value_field(std::forward<_Args>(__args)...) { }

    };

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Link_type __x)
      : _M_node(__x) { }

      reference
      operator*() const
      { return static_cast<_Link_type>(_M_node)->_M_value_field; }

      pointer
      operator->() const
      { return std::__addressof(static_cast<_Link_type>
    (_M_node)->_M_value_field); }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
  };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_const_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Link_type __x)
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it)
      : _M_node(__it._M_node) { }

      iterator
      _M_const_cast() const
      { return iterator(static_cast<typename iterator::_Link_type>
   (const_cast<typename iterator::_Base_ptr>(_M_node))); }

      reference
      operator*() const
      { return static_cast<_Link_type>(_M_node)->_M_value_field; }

      pointer
      operator->() const
      { return std::__addressof(static_cast<_Link_type>
    (_M_node)->_M_value_field); }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node != __y._M_node; }

  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
                                _Rb_tree_node_base* __x,
                                _Rb_tree_node_base* __p,
                                _Rb_tree_node_base& __header) throw ();

  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header) throw ();


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename _Alloc::template rebind<_Rb_tree_node<_Val> >::other
              _Node_allocator;

    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef const _Rb_tree_node_base* _Const_Base_ptr;

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef _Rb_tree_node<_Val>* _Link_type;
      typedef const _Rb_tree_node<_Val>* _Const_Link_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator()
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }

      const _Node_allocator&
      _M_get_Node_allocator() const
      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
      { return _M_impl._Node_allocator::allocate(1); }

      void
      _M_put_node(_Link_type __p)
      { _M_impl._Node_allocator::deallocate(__p, 1); }
# 398 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
 template<typename... _Args>
        _Link_type
        _M_create_node(_Args&&... __args)
 {
   _Link_type __tmp = _M_get_node();
   if (true)
     {
       _M_get_Node_allocator().construct(__tmp,
          std::forward<_Args>(__args)...);
     }
   if (false)
     {
       _M_put_node(__tmp);
                              ;
     }
   return __tmp;
 }

      void
      _M_destroy_node(_Link_type __p)
      {
 _M_get_Node_allocator().destroy(__p);
 _M_put_node(__p);
      }


      _Link_type
      _M_clone_node(_Const_Link_type __x)
      {
 _Link_type __tmp = _M_create_node(__x->_M_value_field);
 __tmp->_M_color = __x->_M_color;
 __tmp->_M_left = 0;
 __tmp->_M_right = 0;
 return __tmp;
      }

    protected:
      template<typename _Key_compare,
        bool _Is_pod_comparator = __is_pod(_Key_compare)>
        struct _Rb_tree_impl : public _Node_allocator
        {
   _Key_compare _M_key_compare;
   _Rb_tree_node_base _M_header;
   size_type _M_node_count;

   _Rb_tree_impl()
   : _Node_allocator(), _M_key_compare(), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

   _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
   : _Node_allocator(__a), _M_key_compare(__comp), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

 private:
   void
   _M_initialize()
   {
     this->_M_header._M_color = _S_red;
     this->_M_header._M_parent = 0;
     this->_M_header._M_left = &this->_M_header;
     this->_M_header._M_right = &this->_M_header;
   }
 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root()
      { return this->_M_impl._M_header._M_parent; }

      _Const_Base_ptr
      _M_root() const
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost()
      { return this->_M_impl._M_header._M_left; }

      _Const_Base_ptr
      _M_leftmost() const
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost()
      { return this->_M_impl._M_header._M_right; }

      _Const_Base_ptr
      _M_rightmost() const
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin()
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }

      _Const_Link_type
      _M_begin() const
      {
 return static_cast<_Const_Link_type>
   (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end()
      { return static_cast<_Link_type>(&this->_M_impl._M_header); }

      _Const_Link_type
      _M_end() const
      { return static_cast<_Const_Link_type>(&this->_M_impl._M_header); }

      static const_reference
      _S_value(_Const_Link_type __x)
      { return __x->_M_value_field; }

      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_left); }

      static _Const_Link_type
      _S_left(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_right); }

      static _Const_Link_type
      _S_right(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x)->_M_value_field; }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Base_ptr
      _S_minimum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Const_Base_ptr
      _S_minimum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Base_ptr
      _S_maximum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

      static _Const_Base_ptr
      _S_maximum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type> iterator;
      typedef _Rb_tree_const_iterator<value_type> const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    private:

      template<typename _Arg>
        iterator
        _M_insert_(_Const_Base_ptr __x, _Const_Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
        iterator
        _M_insert_lower(_Base_ptr __x, _Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
        iterator
        _M_insert_equal_lower(_Arg&& __x);
# 592 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
 _Link_type
      _M_copy(_Const_Link_type __x, _Link_type __p);

      void
      _M_erase(_Link_type __x);

      iterator
      _M_lower_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

      iterator
      _M_upper_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

    public:

      _Rb_tree() { }

      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, __a) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())
      {
 if (__x._M_root() != 0)
   {
     _M_root() = _M_copy(__x._M_begin(), _M_end());
     _M_leftmost() = _S_minimum(_M_root());
     _M_rightmost() = _S_maximum(_M_root());
     _M_impl._M_node_count = __x._M_impl._M_node_count;
   }
      }


      _Rb_tree(_Rb_tree&& __x);


      ~_Rb_tree()
      { _M_erase(_M_begin()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin()
      {
 return iterator(static_cast<_Link_type>
   (this->_M_impl._M_header._M_left));
      }

      const_iterator
      begin() const
      {
 return const_iterator(static_cast<_Const_Link_type>
         (this->_M_impl._M_header._M_left));
      }

      iterator
      end()
      { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }

      const_iterator
      end() const
      {
 return const_iterator(static_cast<_Const_Link_type>
         (&this->_M_impl._M_header));
      }

      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }

      bool
      empty() const
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const
      { return _M_impl._M_node_count; }

      size_type
      max_size() const
      { return _M_get_Node_allocator().max_size(); }

      void
      swap(_Rb_tree& __t);



      template<typename _Arg>
        pair<iterator, bool>
        _M_insert_unique(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_unique_(const_iterator __position, _Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal_(const_iterator __position, _Arg&& __x);
# 736 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
 template<typename _InputIterator>
        void
        _M_insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
        void
        _M_insert_equal(_InputIterator __first, _InputIterator __last);

    private:
      void
      _M_erase_aux(const_iterator __position);

      void
      _M_erase_aux(const_iterator __first, const_iterator __last);

    public:



      iterator
      erase(const_iterator __position)
      {
 const_iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result._M_const_cast();
      }


      iterator
      erase(iterator __position)
      {
 iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result;
      }
# 782 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
 size_type
      erase(const key_type& __x);




      iterator
      erase(const_iterator __first, const_iterator __last)
      {
 _M_erase_aux(__first, __last);
 return __last._M_const_cast();
      }
# 803 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
 void
      erase(const key_type* __first, const key_type* __last);

      void
      clear()
      {
        _M_erase(_M_begin());
        _M_leftmost() = _M_end();
        _M_root() = 0;
        _M_rightmost() = _M_end();
        _M_impl._M_node_count = 0;
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      lower_bound(const key_type& __k) const
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      iterator
      upper_bound(const key_type& __k)
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      upper_bound(const key_type& __k) const
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;


      bool
      __rb_verify() const;
    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _Rb_tree(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&& __x)
    : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())
    {
      if (__x._M_root() != 0)
 {
   _M_root() = __x._M_root();
   _M_leftmost() = __x._M_leftmost();
   _M_rightmost() = __x._M_rightmost();
   _M_root()->_M_parent = _M_end();

   __x._M_root() = 0;
   __x._M_leftmost() = __x._M_end();
   __x._M_rightmost() = __x._M_end();

   this->_M_impl._M_node_count = __x._M_impl._M_node_count;
   __x._M_impl._M_node_count = 0;
 }
    }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
    {
      if (this != &__x)
 {

   clear();
   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root() != 0)
     {
       _M_root() = _M_copy(__x._M_begin(), _M_end());
       _M_leftmost() = _S_minimum(_M_root());
       _M_rightmost() = _S_maximum(_M_root());
       _M_impl._M_node_count = __x._M_impl._M_node_count;
     }
 }
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_(_Const_Base_ptr __x, _Const_Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_KeyOfValue()(__v),
            _S_key(__p)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z,
        const_cast<_Base_ptr>(__p),
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_lower(_Base_ptr __x, _Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_lower(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__x, __y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
    _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
    _M_copy(_Const_Link_type __x, _Link_type __p)
    {

      _Link_type __top = _M_clone_node(__x);
      __top->_M_parent = __p;

      if (true)
 {
   if (__x->_M_right)
     __top->_M_right = _M_copy(_S_right(__x), __top);
   __p = __top;
   __x = _S_left(__x);

   while (__x != 0)
     {
       _Link_type __y = _M_clone_node(__x);
       __p->_M_left = __y;
       __y->_M_parent = __p;
       if (__x->_M_right)
  __y->_M_right = _M_copy(_S_right(__x), __y);
       __p = __y;
       __x = _S_left(__x);
     }
 }
      if (false)
 {
   _M_erase(__top);
                          ;
 }
      return __top;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {

      while (__x != 0)
 {
   _M_erase(_S_right(__x));
   _Link_type __y = _S_left(__x);
   _M_destroy_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<iterator,
            iterator>(_M_lower_bound(__x, __y, __k),
        _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<iterator, iterator>(iterator(__y),
          iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      _Const_Link_type __x = _M_begin();
      _Const_Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Const_Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<const_iterator,
            const_iterator>(_M_lower_bound(__x, __y, __k),
       _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<const_iterator, const_iterator>(const_iterator(__y),
        const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)
    {
      if (_M_root() == 0)
 {
   if (__t._M_root() != 0)
     {
       _M_root() = __t._M_root();
       _M_leftmost() = __t._M_leftmost();
       _M_rightmost() = __t._M_rightmost();
       _M_root()->_M_parent = _M_end();

       __t._M_root() = 0;
       __t._M_leftmost() = __t._M_end();
       __t._M_rightmost() = __t._M_end();
     }
 }
      else if (__t._M_root() == 0)
 {
   __t._M_root() = _M_root();
   __t._M_leftmost() = _M_leftmost();
   __t._M_rightmost() = _M_rightmost();
   __t._M_root()->_M_parent = __t._M_end();

   _M_root() = 0;
   _M_leftmost() = _M_end();
   _M_rightmost() = _M_end();
 }
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
 }

      std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);



      std::__alloc_swap<_Node_allocator>::
 _S_do_it(_M_get_Node_allocator(), __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(_KeyOfValue()(__v), _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return pair<iterator, bool>
       (_M_insert_(__x, __y, std::forward<_Arg>(__v)), true);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), _KeyOfValue()(__v)))
 return pair<iterator, bool>
   (_M_insert_(__x, __y, std::forward<_Arg>(__v)), true);
      return pair<iterator, bool>(__j, false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(_KeyOfValue()(__v), _S_key(__x)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_(__x, __y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique_(const_iterator __position, _Arg&& __v)



    {

      if (__position._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()),
     _KeyOfValue()(__v)))
     return _M_insert_(0, _M_rightmost(), std::forward<_Arg>(__v));
   else
     return _M_insert_unique(std::forward<_Arg>(__v)).first;
 }
      else if (_M_impl._M_key_compare(_KeyOfValue()(__v),
          _S_key(__position._M_node)))
 {

   const_iterator __before = __position;
   if (__position._M_node == _M_leftmost())
     return _M_insert_(_M_leftmost(), _M_leftmost(),
         std::forward<_Arg>(__v));
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node),
       _KeyOfValue()(__v)))
     {
       if (_S_right(__before._M_node) == 0)
  return _M_insert_(0, __before._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__position._M_node,
      __position._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_unique(std::forward<_Arg>(__v)).first;
 }
      else if (_M_impl._M_key_compare(_S_key(__position._M_node),
          _KeyOfValue()(__v)))
 {

   const_iterator __after = __position;
   if (__position._M_node == _M_rightmost())
     return _M_insert_(0, _M_rightmost(),
         std::forward<_Arg>(__v));
   else if (_M_impl._M_key_compare(_KeyOfValue()(__v),
       _S_key((++__after)._M_node)))
     {
       if (_S_right(__position._M_node) == 0)
  return _M_insert_(0, __position._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__after._M_node, __after._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_unique(std::forward<_Arg>(__v)).first;
 }
      else

 return __position._M_const_cast();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_(const_iterator __position, _Arg&& __v)



    {

      if (__position._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(_KeyOfValue()(__v),
      _S_key(_M_rightmost())))
     return _M_insert_(0, _M_rightmost(),
         std::forward<_Arg>(__v));
   else
     return _M_insert_equal(std::forward<_Arg>(__v));
 }
      else if (!_M_impl._M_key_compare(_S_key(__position._M_node),
           _KeyOfValue()(__v)))
 {

   const_iterator __before = __position;
   if (__position._M_node == _M_leftmost())
     return _M_insert_(_M_leftmost(), _M_leftmost(),
         std::forward<_Arg>(__v));
   else if (!_M_impl._M_key_compare(_KeyOfValue()(__v),
        _S_key((--__before)._M_node)))
     {
       if (_S_right(__before._M_node) == 0)
  return _M_insert_(0, __before._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__position._M_node,
      __position._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_equal(std::forward<_Arg>(__v));
 }
      else
 {

   const_iterator __after = __position;
   if (__position._M_node == _M_rightmost())
     return _M_insert_(0, _M_rightmost(),
         std::forward<_Arg>(__v));
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node),
        _KeyOfValue()(__v)))
     {
       if (_S_right(__position._M_node) == 0)
  return _M_insert_(0, __position._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__after._M_node, __after._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_equal_lower(std::forward<_Arg>(__v));
 }
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_unique(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_equal(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (const_cast<_Base_ptr>(__position._M_node),
     this->_M_impl._M_header));
      _M_destroy_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   erase(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      erase(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
 erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  __attribute__ ((__pure__)) unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
                       const _Rb_tree_node_base* __root) throw ();

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
   _Const_Link_type __L = _S_left(__x);
   _Const_Link_type __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }


}
# 60 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 1 3
# 64 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 86 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename _Alloc::template rebind<value_type>::other
        _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

    public:


      typedef typename _Pair_alloc_type::pointer pointer;
      typedef typename _Pair_alloc_type::const_pointer const_pointer;
      typedef typename _Pair_alloc_type::reference reference;
      typedef typename _Pair_alloc_type::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      map()
      : _M_t() { }






      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a) { }
# 172 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 map(const map& __x)
      : _M_t(__x._M_t) { }
# 183 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 map(map&& __x)
      : _M_t(std::move(__x._M_t)) { }
# 197 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 map(initializer_list<value_type> __l,
   const _Compare& __c = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__c, __a)
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }
# 213 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_unique(__first, __last); }
# 229 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, __a)
        { _M_t._M_insert_unique(__first, __last); }
# 252 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 map&
      operator=(const map& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 267 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 map&
      operator=(map&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 288 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 map&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const
      { return _M_t.get_allocator(); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }







      const_iterator
      cbegin() const
      { return _M_t.begin(); }






      const_iterator
      cend() const
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const
      { return _M_t.rend(); }






      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 444 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
          __i = insert(__i, value_type(__k, mapped_type()));
 return (*__i).second;
      }


      mapped_type&
      operator[](key_type&& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
          __i = insert(__i, std::make_pair(std::move(__k), mapped_type()));
 return (*__i).second;
      }
# 481 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 516 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        std::pair<iterator, bool>
        insert(_Pair&& __x)
        { return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }
# 537 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 void
      insert(std::initializer_list<value_type> __list)
      { insert(__list.begin(), __list.end()); }
# 565 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_unique_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_unique_(__position,
     std::forward<_Pair>(__x)); }
# 591 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_unique(__first, __last); }
# 612 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 647 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 666 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 697 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 void
      swap(map& __x)
      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 740 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 755 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 767 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
# 782 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 797 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 836 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 855 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);
    };
# 880 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 897 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
 template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 61 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 2 3
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 1 3
# 63 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 85 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename _Alloc::template rebind<value_type>::other
        _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

    public:


      typedef typename _Pair_alloc_type::pointer pointer;
      typedef typename _Pair_alloc_type::const_pointer const_pointer;
      typedef typename _Pair_alloc_type::reference reference;
      typedef typename _Pair_alloc_type::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;






      multimap()
      : _M_t() { }






      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a) { }
# 170 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 multimap(const multimap& __x)
      : _M_t(__x._M_t) { }
# 181 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 multimap(multimap&& __x)
      : _M_t(std::move(__x._M_t)) { }
# 194 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 multimap(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a)
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }
# 210 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_equal(__first, __last); }
# 226 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
        : _M_t(__comp, __a)
        { _M_t._M_insert_equal(__first, __last); }
# 249 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 multimap&
      operator=(const multimap& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 264 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 multimap&
      operator=(multimap&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 285 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 multimap&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const
      { return _M_t.get_allocator(); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }







      const_iterator
      cbegin() const
      { return _M_t.begin(); }






      const_iterator
      cend() const
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const
      { return _M_t.rend(); }




      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 439 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        iterator
        insert(_Pair&& __x)
        { return _M_t._M_insert_equal(std::forward<_Pair>(__x)); }
# 472 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_equal_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_equal_(__position,
           std::forward<_Pair>(__x)); }
# 499 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_equal(__first, __last); }
# 512 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 533 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 568 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 588 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 622 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 void
      swap(multimap& __x)
      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 665 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 680 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }






      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }
# 704 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 719 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 756 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 773 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);
  };
# 798 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 815 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
 template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
         multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 62 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 2 3
# 9 "firmware/nnet_utils/nnet_helpers.h" 2





namespace nnet {
# 252 "firmware/nnet_utils/nnet_helpers.h"
template <class src_T, class dst_T, size_t OFFSET, size_t SIZE> void copy_data(std::vector<src_T> src, dst_T dst[SIZE]) {
    typename std::vector<src_T>::const_iterator in_begin = src.cbegin() + OFFSET;
    typename std::vector<src_T>::const_iterator in_end = in_begin + SIZE;
    std::copy(in_begin, in_end, dst);
}

template <class src_T, class dst_T, size_t OFFSET, size_t SIZE>
void copy_data(std::vector<src_T> src, hls::stream<dst_T> &dst) {
    typename std::vector<src_T>::const_iterator in_begin = src.cbegin() + OFFSET;
    typename std::vector<src_T>::const_iterator in_end = in_begin + SIZE;

    size_t i_pack = 0;
    dst_T dst_pack;
    for (typename std::vector<src_T>::const_iterator i = in_begin; i != in_end; ++i) {
        dst_pack[i_pack++] = typename dst_T::value_type(*i);
        if (i_pack == dst_T::size) {
            i_pack = 0;
            dst.write(dst_pack);
        }
    }
}

template <class src_T, class dst_T, size_t OFFSET, size_t SIZE> void copy_data_axi(std::vector<src_T> src, dst_T dst[SIZE]) {
    for (auto i = 0; i < SIZE; i++)
        if (i == SIZE - 1) {
            dst[i].data = src[i];
            dst[i].last = 1;
        } else {
            dst[i].data = src[i];
            dst[i].last = 0;
        }
}

template <class res_T, size_t SIZE> void print_result(res_T result[SIZE], std::ostream &out, bool keep = false) {
    for (int i = 0; i < SIZE; i++) {
        out << result[i] << " ";
    }
    out << std::endl;
}

template <class res_T, size_t SIZE> void print_result(hls::stream<res_T> &result, std::ostream &out, bool keep = false) {
    for (int i = 0; i < SIZE / res_T::size; i++) {
        res_T res_pack = result.read();
        for (int j = 0; j < res_T::size; j++) {
            out << res_pack[j] << " ";
        }
        if (keep)
            result.write(res_pack);
    }
    out << std::endl;
}

template <class data_T, size_t SIZE> void fill_zero(data_T data[SIZE]) { std::fill_n(data, SIZE, 0.); }

template <class data_T, size_t SIZE> void fill_zero(hls::stream<data_T> &data) {
    for (int i = 0; i < SIZE / data_T::size; i++) {
        data_T data_pack;
        for (int j = 0; j < data_T::size; j++) {
            data_pack[j] = 0.;
        }
        data.write(data_pack);
    }
}

template <class dataType, unsigned int nrows> int read_file_1D(const char *filename, dataType data[nrows]) {
    FILE *fp;
    fp = fopen(filename, "r");
    if (fp == 0) {
        return -1;
    }

    float newval;
    for (int ii = 0; ii < nrows; ii++) {
        if (fscanf(fp, "%f\n", &newval) != 0) {
            data[ii] = newval;
        } else {
            return -2;
        }
    }
    fclose(fp);
    return 0;
}

template <class dataType, unsigned int nrows, unsigned int ncols>
int read_file_2D(const char *filename, dataType data[nrows][ncols]) {
    FILE *fp;
    fp = fopen(filename, "r");
    if (fp == 0) {
        return -1;
    }

    float newval;
    for (int ii = 0; ii < nrows; ii++) {
        for (int jj = 0; jj < ncols; jj++) {
            if (fscanf(fp, "%f\n", &newval) != 0) {
                data[ii][jj] = newval;
            } else {
                return -2;
            }
        }
    }
    fclose(fp);
    return 0;
}

template <class in_T, class out_T, int N_IN> void change_type(hls::stream<in_T> &in, hls::stream<out_T> &out) {
    in_T datareg;
    hls::stream<out_T> input_trunc;
    for (int ii = 0; ii < N_IN; ii++) {
        out << (out_T)in.read();
    }
}

template <class data_T, int N_IN> void hls_stream_debug(hls::stream<data_T> &data, hls::stream<data_T> &res) {
    data_T datareg;
    for (int ii = 0; ii < N_IN; ii++) {
        datareg = data.read();
        std::cout << "[" << ii << "]: " << datareg << std::endl;
        res << datareg;
    }
}

constexpr int ceillog2(int x) { return (x <= 2) ? 1 : 1 + ceillog2((x + 1) / 2); }

constexpr int floorlog2(int x) { return (x < 2) ? 0 : 1 + floorlog2(x / 2); }

constexpr int pow2(int x) { return x == 0 ? 1 : 2 * pow2(x - 1); }

}
# 5 "firmware/nnet_utils/nnet_code_gen.h" 2


namespace nnet {

template <class data_T, typename CONFIG_T> class FillConv1DBuffer {
  public:
    static void fill_buffer(data_T data[CONFIG_T::in_width * CONFIG_T::n_chan],
                            data_T buffer[CONFIG_T::n_pixels][CONFIG_T::filt_width * CONFIG_T::n_chan],
                            const unsigned partition) {

    }
};

template <class data_T, typename CONFIG_T> class FillConv2DBuffer {
  public:
    static void
    fill_buffer(data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
                data_T buffer[CONFIG_T::n_pixels][CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan],
                const unsigned partition) {

    }
};



}
# 8 "firmware/parameters.h" 2


# 1 "firmware/nnet_utils/nnet_activation.h" 1




# 1 "firmware/nnet_utils/nnet_common.h" 1
# 22 "firmware/nnet_utils/nnet_common.h"
namespace nnet {


enum io_type { io_parallel = 0, io_stream };
enum strategy { latency, resource };
# 36 "firmware/nnet_utils/nnet_common.h"
template <class T, int N, class Op> T reduce(const T *x, Op op) {
    static constexpr int leftN = pow2(floorlog2(N - 1)) > 0 ? pow2(floorlog2(N - 1)) : 0;
_ssdm_SpecConstant(&leftN);
# 37 "firmware/nnet_utils/nnet_common.h"

    static constexpr int rightN = N - leftN > 0 ? N - leftN : 0;
_ssdm_SpecConstant(&rightN);
# 38 "firmware/nnet_utils/nnet_common.h"

    if (N == 1) {
        return x[0];
    }
    if (N == 2) {
        return op(x[0], x[1]);
    }
    return op(reduce<T, leftN, Op>(x, op), reduce<T, rightN, Op>(x + leftN, op));
}

template <class T> class Op_add {
  public:
    T operator()(T a, T b) { return a + b; }
};

template <class T> class Op_and {
  public:
    T operator()(T a, T b) { return a && b; }
};

template <class T> class Op_or {
  public:
    T operator()(T a, T b) { return a || b; }
};

template <class T> class Op_max {
  public:
    T operator()(T a, T b) { return a >= b ? a : b; }
};

template <class T> class Op_min {
  public:
    T operator()(T a, T b) { return a <= b ? a : b; }
};

}
# 6 "firmware/nnet_utils/nnet_activation.h" 2
# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 7 "firmware/nnet_utils/nnet_activation.h" 2

namespace nnet {

struct activ_config {

    static const unsigned n_in = 10;


    static const unsigned table_size = 1024;


    static const unsigned io_type = io_parallel;
    static const unsigned reuse_factor = 1;


    typedef ap_fixed<18, 8> table_t;
};




template <class data_T, class res_T, typename CONFIG_T> void linear(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        res[ii] = data[ii];
    }
}




template <class data_T, class res_T, typename CONFIG_T> void relu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T datareg;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > 0)
            res[ii] = datareg;
        else
            res[ii] = 0;
    }
}

template <class data_T, class res_T, int MAX_INT, typename CONFIG_T>
void relu_max(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T datareg;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg < 0)
            res[ii] = 0;
        else if (datareg > MAX_INT)
            res[ii] = MAX_INT;
        else
            res[ii] = datareg;
    }
}

template <class data_T, class res_T, typename CONFIG_T> void relu6(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
    relu_max<data_T, res_T, 6, CONFIG_T>(data, res);
}

template <class data_T, class res_T, typename CONFIG_T> void relu1(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
    relu_max<data_T, res_T, 1, CONFIG_T>(data, res);
}




inline float sigmoid_fcn_float(float input) { return 1.0 / (1 + std::exp(-input)); }

template <typename CONFIG_T, int N_TABLE> void init_sigmoid_table(typename CONFIG_T::table_t table_out[N_TABLE]) {


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2 * 8.0 * (ii - float(N_TABLE) / 2.0) / float(N_TABLE);

        typename CONFIG_T::table_t real_val = sigmoid_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void sigmoid(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t sigmoid_table[CONFIG_T::table_size];




    if (!initialized) {
        init_sigmoid_table<CONFIG_T, CONFIG_T::table_size>(sigmoid_table);
        initialized = true;
    }

_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");


 int data_round;
    int index;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        data_round = data[ii] * CONFIG_T::table_size / 16;
        index = data_round + 8 * CONFIG_T::table_size / 16;
        if (index < 0)
            index = 0;
        if (index > CONFIG_T::table_size - 1)
            index = CONFIG_T::table_size - 1;
        res[ii] = (res_T)sigmoid_table[index];
    }
}





enum class softmax_implementation { latency = 0, legacy = 1, stable = 2, argmax = 3 };

inline float exp_fcn_float(float input) { return std::exp(input); }

template <class data_T, typename CONFIG_T> inline float softmax_real_val_from_idx(unsigned i) {

    static constexpr int N = ceillog2(CONFIG_T::table_size);
_ssdm_SpecConstant(&N);
# 135 "firmware/nnet_utils/nnet_activation.h"

    data_T x(0);
    x(x.width - 1, x.width - N) = i;
    return (float)x;
}

template <class data_T, typename CONFIG_T> inline unsigned softmax_idx_from_real_val(data_T x) {

    static constexpr int N = ceillog2(CONFIG_T::table_size);
_ssdm_SpecConstant(&N);
# 143 "firmware/nnet_utils/nnet_activation.h"

    ap_uint<N> y = x(x.width - 1, x.width - N);
    return (unsigned)y(N - 1, 0);
}

template <class data_T, typename CONFIG_T>
void init_exp_table(typename CONFIG_T::exp_table_t table_out[CONFIG_T::table_size]) {

    for (unsigned i = 0; i < CONFIG_T::table_size; i++) {

        float x = softmax_real_val_from_idx<data_T, CONFIG_T>(i);
        typename CONFIG_T::exp_table_t exp_x = exp_fcn_float(x);
        table_out[i] = exp_x;
    }
}

template <class data_T, typename CONFIG_T>
void init_invert_table(typename CONFIG_T::inv_table_t table_out[CONFIG_T::table_size]) {

    for (unsigned i = 0; i < CONFIG_T::table_size; i++) {
        float x = softmax_real_val_from_idx<data_T, CONFIG_T>(i);
        typename CONFIG_T::inv_table_t inv_x = 1 / x;
        table_out[i] = inv_x;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_latency(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");


 bool initialized = false;
    typename CONFIG_T::exp_table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::inv_table_t invert_table[CONFIG_T::table_size];






    if (!initialized) {

        init_exp_table<data_T, CONFIG_T>(exp_table);

        init_invert_table<typename CONFIG_T::exp_table_t, CONFIG_T>(invert_table);
        initialized = true;
    }


    typename CONFIG_T::exp_table_t exp_res[CONFIG_T::n_in];
_ssdm_SpecArrayPartition( exp_res, 1, "COMPLETE", 0, "");
 typename CONFIG_T::exp_table_t exp_sum(0);
    for (unsigned i = 0; i < CONFIG_T::n_in; i++) {
_ssdm_Unroll(0,0,0, "");
 unsigned x = softmax_idx_from_real_val<data_T, CONFIG_T>(data[i]);
        exp_res[i] = exp_table[x];
    }



    Op_add<typename CONFIG_T::exp_table_t> op_add;
    exp_sum =
        reduce<typename CONFIG_T::exp_table_t, CONFIG_T::n_in, Op_add<typename CONFIG_T::exp_table_t>>(exp_res, op_add);

    typename CONFIG_T::inv_table_t inv_exp_sum =
        invert_table[softmax_idx_from_real_val<typename CONFIG_T::exp_table_t, CONFIG_T>(exp_sum)];
    for (unsigned i = 0; i < CONFIG_T::n_in; i++) {
_ssdm_Unroll(0,0,0, "");
 res[i] = exp_res[i] * inv_exp_sum;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_stable(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");


 bool initialized = false;
    typename CONFIG_T::exp_table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::inv_table_t invert_table[CONFIG_T::table_size];






    if (!initialized) {

        init_exp_table<data_T, CONFIG_T>(exp_table);

        init_invert_table<typename CONFIG_T::exp_table_t, CONFIG_T>(invert_table);
        initialized = true;
    }


    Op_max<data_T> op_max;
    data_T x_max = reduce<data_T, CONFIG_T::n_in, Op_max<data_T>>(data, op_max);


    ap_fixed<data_T::width, data_T::iwidth, SC_RND, SC_SAT> d_xi_xmax[CONFIG_T::n_in];
    for (unsigned i = 0; i < CONFIG_T::n_in; i++) {
_ssdm_Unroll(0,0,0, "");
 d_xi_xmax[i] = data[i] - x_max;
    }


    typename CONFIG_T::exp_table_t exp_res[CONFIG_T::n_in];
_ssdm_SpecArrayPartition( exp_res, 1, "COMPLETE", 0, "");
 typename CONFIG_T::exp_table_t exp_sum(0);
    for (unsigned i = 0; i < CONFIG_T::n_in; i++) {
_ssdm_Unroll(0,0,0, "");
 unsigned x = softmax_idx_from_real_val<data_T, CONFIG_T>(d_xi_xmax[i]);
        exp_res[i] = exp_table[x];
    }



    Op_add<typename CONFIG_T::exp_table_t> op_add;
    exp_sum =
        reduce<typename CONFIG_T::exp_table_t, CONFIG_T::n_in, Op_add<typename CONFIG_T::exp_table_t>>(exp_res, op_add);

    typename CONFIG_T::inv_table_t inv_exp_sum =
        invert_table[softmax_idx_from_real_val<typename CONFIG_T::exp_table_t, CONFIG_T>(exp_sum)];
    for (unsigned i = 0; i < CONFIG_T::n_in; i++) {
_ssdm_Unroll(0,0,0, "");
 res[i] = exp_res[i] * inv_exp_sum;
    }
}

template <typename CONFIG_T, int N_TABLE> void init_exp_table_legacy(typename CONFIG_T::table_t table_out[N_TABLE]) {
    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2 * 8.0 * (ii - float(N_TABLE) / 2.0) / float(N_TABLE);

        typename CONFIG_T::table_t real_val = exp_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template <typename CONFIG_T, int N_TABLE> void init_invert_table_legacy(typename CONFIG_T::table_t table_out[N_TABLE]) {


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 64.0 * ii / float(N_TABLE);

        if (in_val > 0.0)
            table_out[ii] = 1.0 / in_val;
        else
            table_out[ii] = 0.0;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_legacy(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::table_t invert_table[CONFIG_T::table_size];





    if (!initialized) {
        init_exp_table_legacy<CONFIG_T, CONFIG_T::table_size>(exp_table);
        init_invert_table_legacy<CONFIG_T, CONFIG_T::table_size>(invert_table);
        initialized = true;
    }

_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");


 typename CONFIG_T::table_t exp_res[CONFIG_T::n_in];
    typename CONFIG_T::table_t exp_diff_res;
    data_T data_cache[CONFIG_T::n_in];
    int data_round;
    int index;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        data_cache[ii] = data[ii];
        exp_res[ii] = 0;
    }

    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        for (int jj = 0; jj < CONFIG_T::n_in; jj++) {
            if (ii == jj)
                exp_diff_res = 1;
            else {
                data_round = (data_cache[jj] - data_cache[ii]) * CONFIG_T::table_size / 16;
                index = data_round + 8 * CONFIG_T::table_size / 16;
                if (index < 0)
                    index = 0;
                if (index > CONFIG_T::table_size - 1)
                    index = CONFIG_T::table_size - 1;
                exp_diff_res = exp_table[index];
            }
            exp_res[ii] += exp_diff_res;
        }
    }


    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        int exp_res_index = exp_res[ii] * CONFIG_T::table_size / 64;
        if (exp_res_index < 0)
            exp_res_index = 0;
        if (exp_res_index > CONFIG_T::table_size - 1)
            exp_res_index = CONFIG_T::table_size - 1;

        res[ii] = (res_T)invert_table[exp_res_index];
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_argmax(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
    for (int i = 0; i < CONFIG_T::n_in; i++) {
_ssdm_Unroll(0,0,0, "");
 res[i] = (res_T)0;
    }

    data_T maximum = data[0];
    int idx = 0;

    for (int i = 1; i < CONFIG_T::n_in; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 if (data[i] > maximum) {
            maximum = data[i];
            idx = i;
        }
    }

    res[idx] = (res_T)1;
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
_ssdm_InlineSelf(0, "");
 switch (CONFIG_T::implementation) {
    case softmax_implementation::latency:
        softmax_latency<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::stable:
        softmax_stable<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::legacy:
        softmax_legacy<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::argmax:
        softmax_argmax<data_T, res_T, CONFIG_T>(data, res);
        break;
    }
}




template <typename CONFIG_T, int N_TABLE> void init_tanh_table(typename CONFIG_T::table_t table_out[N_TABLE]) {

    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2 * 4.0 * (ii - float(N_TABLE) / 2.0) / float(N_TABLE);

        typename CONFIG_T::table_t real_val = tanh(in_val);


        table_out[ii] = real_val;
    }
}

template <class data_T, class res_T, typename CONFIG_T> void tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t tanh_table[CONFIG_T::table_size];




    if (!initialized) {
        init_tanh_table<CONFIG_T, CONFIG_T::table_size>(tanh_table);
        initialized = true;
    }

_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");


 int data_round;
    int index;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        data_round = data[ii] * CONFIG_T::table_size / 8;
        index = data_round + 4 * CONFIG_T::table_size / 8;

        if (index < 0)
            index = 0;
        if (index > CONFIG_T::table_size - 1)
            index = CONFIG_T::table_size - 1;
        res[ii] = (res_T)tanh_table[index];
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void hard_sigmoid(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        auto datareg = CONFIG_T::slope * data[ii] + CONFIG_T::shift;
        if (datareg > 1)
            datareg = 1;
        else if (datareg < 0)
            datareg = 0;
        res[ii] = datareg;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void hard_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
    if (CONFIG_T::io_type == io_parallel) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 }

    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        auto sigmoid = CONFIG_T::slope * data[ii] + CONFIG_T::shift;
        if (sigmoid > 1)
            sigmoid = 1;
        else if (sigmoid < 0)
            sigmoid = 0;
        res[ii] = 2 * sigmoid - 1;
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void leaky_relu(data_T data[CONFIG_T::n_in], data_T alpha, res_T res[CONFIG_T::n_in]) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T datareg;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > 0)
            res[ii] = datareg;
        else
            res[ii] = alpha * datareg;
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void thresholded_relu(data_T data[CONFIG_T::n_in], data_T theta, res_T res[CONFIG_T::n_in]) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T datareg;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > theta)
            res[ii] = datareg;
        else
            res[ii] = 0;
    }
}




inline float softplus_fcn_float(float input) { return std::log(std::exp(input) + 1.); }

template <typename CONFIG_T, int N_TABLE> void init_softplus_table(typename CONFIG_T::table_t table_out[N_TABLE]) {


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2 * 8.0 * (ii - float(N_TABLE) / 2.0) / float(N_TABLE);

        typename CONFIG_T::table_t real_val = softplus_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softplus(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t softplus_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softplus_table<CONFIG_T, CONFIG_T::table_size>(softplus_table);
        initialized = true;
    }

_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");


 int data_round;
    int index;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        data_round = data[ii] * CONFIG_T::table_size / 16;
        index = data_round + 8 * CONFIG_T::table_size / 16;
        if (index < 0)
            index = 0;
        if (index > CONFIG_T::table_size - 1)
            index = CONFIG_T::table_size - 1;
        res[ii] = (res_T)softplus_table[index];
    }
}




inline float softsign_fcn_float(float input) { return input / (std::abs(input) + 1.); }

template <typename CONFIG_T, int N_TABLE> void init_softsign_table(typename CONFIG_T::table_t table_out[N_TABLE]) {


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2 * 8.0 * (ii - float(N_TABLE) / 2.0) / float(N_TABLE);

        typename CONFIG_T::table_t real_val = softsign_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softsign(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t softsign_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softsign_table<CONFIG_T, CONFIG_T::table_size>(softsign_table);
        initialized = true;
    }

_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");


 int data_round;
    int index;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        data_round = data[ii] * CONFIG_T::table_size / 16;
        index = data_round + 8 * CONFIG_T::table_size / 16;
        if (index < 0)
            index = 0;
        if (index > CONFIG_T::table_size - 1)
            index = CONFIG_T::table_size - 1;
        res[ii] = (res_T)softsign_table[index];
    }
}




inline float elu_fcn_float(float input) { return std::exp(input) - 1.; }

template <typename CONFIG_T, int N_TABLE> void init_elu_table(typename CONFIG_T::table_t table_out[N_TABLE]) {


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = -8.0 * ii / float(N_TABLE);

        typename CONFIG_T::table_t real_val = elu_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void elu(data_T data[CONFIG_T::n_in], const res_T alpha, res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t elu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_elu_table<CONFIG_T, CONFIG_T::table_size>(elu_table);
        initialized = true;
    }

_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T datareg;

    int index;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg >= 0) {
            res[ii] = datareg;
        } else {
            index = datareg * CONFIG_T::table_size / -8;
            if (index > CONFIG_T::table_size - 1)
                index = CONFIG_T::table_size - 1;
            res[ii] = alpha * elu_table[index];
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T> void elu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
    elu<data_T, res_T, CONFIG_T>(data, 1.0, res);
}




inline float selu_fcn_float(float input) {
    return 1.0507009873554804934193349852946 * (1.6732632423543772848170429916717 * (std::exp(input) - 1.));
}

template <typename CONFIG_T, int N_TABLE> void init_selu_table(typename CONFIG_T::table_t table_out[N_TABLE]) {


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = -8.0 * ii / float(N_TABLE);

        typename CONFIG_T::table_t real_val = selu_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template <class data_T, class res_T, typename CONFIG_T> void selu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {


    bool initialized = false;
    typename CONFIG_T::table_t selu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_selu_table<CONFIG_T, CONFIG_T::table_size>(selu_table);
        initialized = true;
    }

_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T datareg;

    int index;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg >= 0) {
            res[ii] = res_T(1.0507009873554804934193349852946) * datareg;
        } else {
            index = datareg * CONFIG_T::table_size / -8;
            if (index > CONFIG_T::table_size - 1)
                index = CONFIG_T::table_size - 1;
            res[ii] = selu_table[index];
        }
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void prelu(data_T data[CONFIG_T::n_in], data_T alpha[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T datareg;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > 0)
            res[ii] = datareg;
        else
            res[ii] = alpha[ii] * datareg;
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void binary_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T datareg;
    res_T cache;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = data[ii];
        if (datareg > 0)
            cache = 1;
        else
            cache = -1;

        res[ii] = (res_T)cache;
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void ternary_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T datareg;
    res_T cache;
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        datareg = 2 * data[ii];
        if (datareg > 1)
            cache = 1;
        else if (datareg > -1 && datareg <= 1)
            cache = 0;
        else
            cache = -1;

        res[ii] = (res_T)cache;
    }
}

}
# 11 "firmware/parameters.h" 2
# 1 "firmware/nnet_utils/nnet_activation_stream.h" 1







# 1 "firmware/nnet_utils/nnet_stream.h" 1







namespace nnet {

struct broadcast_config {
    static const unsigned in_height = 1;
    static const unsigned in_width = 1;
    static const unsigned in_chan = 3;
    static const unsigned out_height = 2;
    static const unsigned out_width = 2;
    static const unsigned out_chan = 3;
};

template <class data_T, class res_T, int N>
void clone_stream(hls::stream<data_T> &data, hls::stream<res_T> &res1, hls::stream<res_T> &res2) {
CloneLoop:
    for (int i = 0; i < N / data_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data1;
        res_T out_data2;
_ssdm_DataPack( &out_data1, 0, 0, "", "", "");
_ssdm_DataPack( &out_data2, 0, 0, "", "", "");

 ClonePack:
        for (int j = 0; j < data_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 out_data1[j] = in_data[j];
            out_data2[j] = in_data[j];
        }

        res1.write(out_data1);
        res2.write(out_data2);
    }
}

template <class data_T, class res_T, int N>
void clone_stream(hls::stream<data_T> &data, hls::stream<res_T> &res1, hls::stream<res_T> &res2, hls::stream<res_T> &res3) {
CloneLoop:
    for (int i = 0; i < N / data_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data1;
        res_T out_data2;
        res_T out_data3;
_ssdm_DataPack( &out_data1, 0, 0, "", "", "");
_ssdm_DataPack( &out_data2, 0, 0, "", "", "");
_ssdm_DataPack( &out_data3, 0, 0, "", "", "");

 ClonePack:
        for (int j = 0; j < data_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 out_data1[j] = in_data[j];
            out_data2[j] = in_data[j];
            out_data3[j] = in_data[j];
        }

        res1.write(out_data1);
        res2.write(out_data2);
        res3.write(out_data3);
    }
}

template <class data_T, class res_T, int N> void repack_stream(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    if (data_T::size == res_T::size) {
        for (int i = 0; i < N / data_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
            res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 for (int j = 0; j < data_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 out_data[j] = in_data[j];
            }

            res.write(out_data);
        }
    } else if (data_T::size > res_T::size) {
        constexpr unsigned pack_diff = data_T::size / res_T::size;
        for (int i = 0; i < N / data_T::size; i++) {
            if (N / data_T::size > 1) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 }

            data_T in_data = data.read();
            res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 for (int j = 0; j < pack_diff; j++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 res_T out_data;
                for (int k = 0; k < res_T::size; k++) {
_ssdm_Unroll(0,0,0, "");
 out_data[k] = in_data[j * res_T::size + k];
                }
                res.write(out_data);
            }
        }
    } else {
        res_T out_data;
        constexpr unsigned pack_diff = res_T::size / data_T::size;
        unsigned pack_cnt = 0;
        for (int i = 0; i < N / data_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
            for (int j = 0; j < data_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 out_data[pack_cnt * data_T::size + j] = in_data[j];
            }

            if (pack_cnt == pack_diff - 1) {
                res.write(out_data);
                pack_cnt = 0;
            } else {
                pack_cnt++;
            }
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void broadcast_stream_1x1xC(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    (static_cast <bool> (CONFIG_T::in_height == 1 && CONFIG_T::in_width == 1 && CONFIG_T::in_chan == CONFIG_T::out_chan) ? void (0) : __assert_fail ("CONFIG_T::in_height == 1 && CONFIG_T::in_width == 1 && CONFIG_T::in_chan == CONFIG_T::out_chan", "firmware/nnet_utils/nnet_stream.h", 134, __extension__ __PRETTY_FUNCTION__));
    int n_dupl = (CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::out_chan) /
                 (CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::in_chan);
BroadcastLoop:
    for (int i = 0; i < CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::in_chan / data_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 data_T in_data = data.read();
        for (int j = 0; j < n_dupl; j++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");
 for (int k = 0; k < res_T::size; k++) {
_ssdm_Unroll(0,0,0, "");
 out_data[k] = in_data[k];
            }
            res.write(out_data);
        }
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void broadcast_stream_HxWx1(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    (static_cast <bool> (CONFIG_T::in_chan == 1 && CONFIG_T::in_height == CONFIG_T::out_height && CONFIG_T::in_width == CONFIG_T::out_width) ? void (0) : __assert_fail ("CONFIG_T::in_chan == 1 && CONFIG_T::in_height == CONFIG_T::out_height && CONFIG_T::in_width == CONFIG_T::out_width", "firmware/nnet_utils/nnet_stream.h", 157, __extension__ __PRETTY_FUNCTION__));

BroadcastLoop:
    for (int i = 0; i < CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::in_chan / data_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");
 for (int k = 0; k < res_T::size; k++) {
_ssdm_Unroll(0,0,0, "");
 out_data[k] = in_data[0];
        }
        res.write(out_data);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void broadcast_stream(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    if (CONFIG_T::in_height == 1 && CONFIG_T::in_width == 1 && CONFIG_T::in_chan == CONFIG_T::out_chan) {
        broadcast_stream_1x1xC<data_T, res_T, CONFIG_T>(data, res);
    } else if (CONFIG_T::in_chan == 1 && CONFIG_T::in_height == CONFIG_T::out_height &&
               CONFIG_T::in_width == CONFIG_T::out_width) {
        broadcast_stream_HxWx1<data_T, res_T, CONFIG_T>(data, res);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void transpose_2d(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    typename data_T::value_type data_array[CONFIG_T::height * CONFIG_T::width];
_ssdm_SpecArrayPartition( &data_array, 1, "COMPLETE", 0, "");

 for (int i = 0; i < CONFIG_T::height * CONFIG_T::width / data_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 data_T in_data = data.read();
        for (int j = 0; j < data_T::size; j++) {
            data_array[i * data_T::size + j] = typename data_T::value_type(in_data[j]);
        }
    }

    for (int i = 0; i < CONFIG_T::height * CONFIG_T::width / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");
 for (int j = 0; j < res_T::size; j++) {
            out_data[j] = typename res_T::value_type(data_array[j * data_T::size + i]);
        }
        res.write(out_data);
    }
}
}
# 9 "firmware/nnet_utils/nnet_activation_stream.h" 2

# 1 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/home/nitish/Desktop/Vivado/2018.2/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 11 "firmware/nnet_utils/nnet_activation_stream.h" 2

namespace nnet {




template <class data_T, class res_T, typename CONFIG_T> void linear(hls::stream<data_T> &data, hls::stream<res_T> &res) {
LinearActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 LinearPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 out_data[j] = in_data[j];
        }

        res.write(out_data);
    }
}




template <class data_T, class res_T, typename CONFIG_T> void relu(hls::stream<data_T> &data, hls::stream<res_T> &res) {
ReLUActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 ReLUPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 if (in_data[j] > 0)
                out_data[j] = in_data[j];
            else
                out_data[j] = 0;
        }

        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T> void sigmoid(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t sigmoid_table[CONFIG_T::table_size];




    if (!initialized) {
        init_sigmoid_table<CONFIG_T, CONFIG_T::table_size>(sigmoid_table);
        initialized = true;
    }

SigmoidActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 SigmoidPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 int data_round = in_data[j] * CONFIG_T::table_size / 16;
            int index = data_round + 8 * CONFIG_T::table_size / 16;
            if (index < 0)
                index = 0;
            else if (index > CONFIG_T::table_size - 1)
                index = CONFIG_T::table_size - 1;
            out_data[j] = sigmoid_table[index];
        }

        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T>
void softmax_latency(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::exp_table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::inv_table_t invert_table[CONFIG_T::table_size];






    if (!initialized) {

        init_exp_table<typename data_T::value_type, CONFIG_T>(exp_table);

        init_invert_table<typename CONFIG_T::exp_table_t, CONFIG_T>(invert_table);
        initialized = true;
    }

    constexpr unsigned multiplier_limit = ((data_T::size + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    constexpr unsigned ii = data_T::size / multiplier_limit;


    typename CONFIG_T::exp_table_t exp_res[data_T::size];
_ssdm_SpecArrayPartition( &exp_res, 1, "COMPLETE", 0, "");
 typename CONFIG_T::exp_table_t exp_sum(0);
SoftmaxExpLoop:
    for (unsigned i = 0; i < CONFIG_T::n_in / data_T::size; i++) {
_ssdm_op_SpecPipeline(ii, 1, 1, 0, "");

 data_T in_pack = data.read();
    SoftmaxExpPackLoop:
        for (unsigned j = 0; j < data_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 unsigned x = softmax_idx_from_real_val<typename data_T::value_type, CONFIG_T>(in_pack[j]);
            exp_res[j] = exp_table[x];
        }



        Op_add<typename CONFIG_T::exp_table_t> op_add;
        exp_sum =
            reduce<typename CONFIG_T::exp_table_t, data_T::size, Op_add<typename CONFIG_T::exp_table_t>>(exp_res, op_add);

        typename CONFIG_T::inv_table_t inv_exp_sum =
            invert_table[softmax_idx_from_real_val<typename CONFIG_T::exp_table_t, CONFIG_T>(exp_sum)];

        res_T out_pack;
_ssdm_DataPack( &out_pack, 0, 0, "", "", "");

 SoftmaxInvPackLoop:
        for (unsigned j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
_ssdm_op_SpecResourceLimit(multiplier_limit, "mul", "", "", "");
 out_pack[j] = exp_res[j] * inv_exp_sum;
        }
        res.write(out_pack);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_stable(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::exp_table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::inv_table_t invert_table[CONFIG_T::table_size];






    if (!initialized) {

        init_exp_table<typename data_T::value_type, CONFIG_T>(exp_table);

        init_invert_table<typename CONFIG_T::exp_table_t, CONFIG_T>(invert_table);
        initialized = true;
    }

    constexpr unsigned multiplier_limit = ((data_T::size + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    constexpr unsigned ii = data_T::size / multiplier_limit;

    typename data_T::value_type data_array[data_T::size];
_ssdm_SpecArrayPartition( &data_array, 1, "COMPLETE", 0, "");
SoftmaxArrayLoop:
    for (unsigned i = 0; i < CONFIG_T::n_in / data_T::size; i++) {
_ssdm_op_SpecPipeline(ii, 1, 1, 0, "");

 data_T in_pack = data.read();
    SoftmaxArrayPackLoop:
        for (unsigned j = 0; j < data_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 data_array[j] = in_pack[j];
        }


        Op_max<typename data_T::value_type> op_max;
        typename data_T::value_type x_max =
            reduce<typename data_T::value_type, data_T::size, Op_max<typename data_T::value_type>>(data_array, op_max);


        ap_fixed<data_T::value_type::width, data_T::value_type::iwidth, SC_RND, SC_SAT> d_xi_xmax[data_T::size];
        for (unsigned j = 0; j < data_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 d_xi_xmax[j] = data_array[j] - x_max;
        }


        typename CONFIG_T::exp_table_t exp_res[data_T::size];
_ssdm_SpecArrayPartition( &exp_res, 1, "COMPLETE", 0, "");
 typename CONFIG_T::exp_table_t exp_sum(0);
        for (unsigned j = 0; j < data_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 unsigned x = softmax_idx_from_real_val<typename data_T::value_type, CONFIG_T>(d_xi_xmax[j]);
            exp_res[j] = exp_table[x];
        }



        Op_add<typename CONFIG_T::exp_table_t> op_add;
        exp_sum =
            reduce<typename CONFIG_T::exp_table_t, data_T::size, Op_add<typename CONFIG_T::exp_table_t>>(exp_res, op_add);

        typename CONFIG_T::inv_table_t inv_exp_sum =
            invert_table[softmax_idx_from_real_val<typename CONFIG_T::exp_table_t, CONFIG_T>(exp_sum)];

        res_T out_pack;
_ssdm_DataPack( &out_pack, 0, 0, "", "", "");

 SoftmaxInvPackLoop:
        for (unsigned j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
_ssdm_op_SpecResourceLimit(multiplier_limit, "mul", "", "", "");
 out_pack[j] = exp_res[j] * inv_exp_sum;
        }
        res.write(out_pack);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_legacy(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::table_t invert_table[CONFIG_T::table_size];





    if (!initialized) {
        init_exp_table_legacy<CONFIG_T, CONFIG_T::table_size>(exp_table);
        init_invert_table_legacy<CONFIG_T, CONFIG_T::table_size>(invert_table);
        initialized = true;
    }


    typename CONFIG_T::table_t exp_res[data_T::size];
    typename CONFIG_T::table_t exp_diff_res;
    typename data_T::value_type data_cache[data_T::size];

SoftmaxInitLoop:
    for (unsigned s = 0; s < CONFIG_T::n_in / data_T::size; s++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 data_T in_pack = data.read();
    SoftmaxInitPackLoop:
        for (unsigned j = 0; j < data_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 data_cache[j] = in_pack[j];
            exp_res[j] = 0;
        }

    SoftmaxExpLoop:
        for (int i = 0; i < data_T::size; i++) {
_ssdm_Unroll(0,0,0, "");
 SoftmaxExpInner:
            for (int j = 0; j < data_T::size; j++) {
_ssdm_Unroll(0,0,0, "");

 if (i == j) {
                    exp_diff_res = 1;
                } else {
                    int data_round = (data_cache[j] - data_cache[i]) * CONFIG_T::table_size / 16;
                    int index = data_round + 8 * CONFIG_T::table_size / 16;
                    if (index < 0)
                        index = 0;
                    if (index > CONFIG_T::table_size - 1)
                        index = CONFIG_T::table_size - 1;
                    exp_diff_res = exp_table[index];
                }

                exp_res[i] += exp_diff_res;
            }
        }

        res_T out_pack;
_ssdm_DataPack( &out_pack, 0, 0, "", "", "");

 SoftmaxInvPackLoop:
        for (unsigned j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");

 int exp_res_index = exp_res[j] * CONFIG_T::table_size / 64;
            if (exp_res_index < 0)
                exp_res_index = 0;
            if (exp_res_index > CONFIG_T::table_size - 1)
                exp_res_index = CONFIG_T::table_size - 1;

            out_pack[j] = (typename res_T::value_type)invert_table[exp_res_index];
        }
        res.write(out_pack);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax_argmax(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 data_T in_data = data.read();
        res_T out_data;

        for (int i = 0; i < res_T::size; i++) {
_ssdm_Unroll(0,0,0, "");
 out_data[i] = (typename res_T::value_type)0;
        }

        typename data_T::value_type maximum = in_data[0];
        int idx = 0;

        for (int i = 1; i < res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 if (in_data[i] > maximum) {
                maximum = in_data[i];
                idx = i;
            }
        }

        out_data[idx] = (typename res_T::value_type)1;
        res.write(out_data);
    }
}

template <class data_T, class res_T, typename CONFIG_T> void softmax(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    (static_cast <bool> (CONFIG_T::axis == -1) ? void (0) : __assert_fail ("CONFIG_T::axis == -1", "firmware/nnet_utils/nnet_activation_stream.h", 355, __extension__ __PRETTY_FUNCTION__));

    switch (CONFIG_T::implementation) {
    case softmax_implementation::latency:
        softmax_latency<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::stable:
        softmax_stable<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::legacy:
        softmax_legacy<data_T, res_T, CONFIG_T>(data, res);
        break;
    case softmax_implementation::argmax:
        softmax_argmax<data_T, res_T, CONFIG_T>(data, res);
        break;
    }
}





template <class data_T, class res_T, typename CONFIG_T> void tanh(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t tanh_table[CONFIG_T::table_size];




    if (!initialized) {
        init_tanh_table<CONFIG_T, CONFIG_T::table_size>(tanh_table);
        initialized = true;
    }

TanHActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 TanHPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 int data_round = in_data[j] * CONFIG_T::table_size / 8;
            int index = data_round + 4 * CONFIG_T::table_size / 8;
            if (index < 0)
                index = 0;
            else if (index > CONFIG_T::table_size - 1)
                index = CONFIG_T::table_size - 1;
            out_data[j] = tanh_table[index];
        }

        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T>
void hard_sigmoid(hls::stream<data_T> &data, hls::stream<res_T> &res) {

HardSigmoidActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 HardSigmoidPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 auto datareg = CONFIG_T::slope * in_data[j] + CONFIG_T::shift;
            if (datareg > 1)
                datareg = 1;
            else if (datareg < 0)
                datareg = 0;
            out_data[j] = datareg;
        }

        res.write(out_data);
    }
}

template <class data_T, class res_T, typename CONFIG_T> void hard_tanh(hls::stream<data_T> &data, hls::stream<res_T> &res) {

HardSigmoidActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 HardSigmoidPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 auto sigmoid = CONFIG_T::slope * in_data[j] + CONFIG_T::shift;
            if (sigmoid > 1)
                sigmoid = 1;
            else if (sigmoid < 0)
                sigmoid = 0;
            out_data[j] = 2 * sigmoid - 1;
        }

        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T>
void leaky_relu(hls::stream<data_T> &data, typename data_T::value_type alpha, hls::stream<res_T> &res) {
LeakyReLUActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 LeakyReLUPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 if (in_data[j] > 0)
                out_data[j] = in_data[j];
            else
                out_data[j] = alpha * in_data[j];
        }
        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T>
void thresholded_relu(hls::stream<data_T> &data, typename data_T::value_type theta, hls::stream<res_T> &res) {
ThresholdedReLUActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 ThresholdedReLUPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 if (in_data[j] > theta)
                out_data[j] = in_data[j];
            else
                out_data[j] = 0;
        }

        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T> void softplus(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t softplus_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softplus_table<CONFIG_T, CONFIG_T::table_size>(softplus_table);
        initialized = true;
    }

SoftplusActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 SoftplusPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 int data_round = in_data[j] * CONFIG_T::table_size / 16;
            int index = data_round + 8 * CONFIG_T::table_size / 16;
            if (index < 0)
                index = 0;
            else if (index > CONFIG_T::table_size - 1)
                index = CONFIG_T::table_size - 1;
            out_data[j] = softplus_table[index];
        }
        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T> void softsign(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t softsign_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softsign_table<CONFIG_T, CONFIG_T::table_size>(softsign_table);
        initialized = true;
    }

SoftsignActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 SoftsignPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 int data_round = in_data[j] * CONFIG_T::table_size / 16;
            int index = data_round + 8 * CONFIG_T::table_size / 16;
            if (index < 0)
                index = 0;
            else if (index > CONFIG_T::table_size - 1)
                index = CONFIG_T::table_size - 1;
            out_data[j] = softsign_table[index];
        }
        res.write(out_data);
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void elu(hls::stream<data_T> &data, typename data_T::value_type alpha, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t elu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_elu_table<CONFIG_T, CONFIG_T::table_size>(elu_table);
        initialized = true;
    }

EluActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 EluPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");

 typename data_T::value_type datareg = in_data[j];
            if (datareg >= 0) {
                out_data[j] = datareg;
            } else {
                int index = datareg * CONFIG_T::table_size / -8;
                if (index > CONFIG_T::table_size - 1)
                    index = CONFIG_T::table_size - 1;
                out_data[j] = alpha * elu_table[index];
            }
        }
        res.write(out_data);
    }
}

template <class data_T, class res_T, typename CONFIG_T> void elu(hls::stream<data_T> &data, hls::stream<res_T> &res) {
    elu<data_T, res_T, CONFIG_T>(data, 1.0, res);
}





template <class data_T, class res_T, typename CONFIG_T> void selu(hls::stream<data_T> &data, hls::stream<res_T> &res) {


    bool initialized = false;
    typename CONFIG_T::table_t selu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_selu_table<CONFIG_T, CONFIG_T::table_size>(selu_table);
        initialized = true;
    }

SeluActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 SeluPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");

 typename data_T::value_type datareg = in_data[j];
            if (datareg >= 0) {
                out_data[j] = (typename data_T::value_type)1.0507009873554804934193349852946 * datareg;
            } else {
                int index = datareg * CONFIG_T::table_size / -8;
                if (index > CONFIG_T::table_size - 1)
                    index = CONFIG_T::table_size - 1;
                out_data[j] = selu_table[index];
            }
        }
        res.write(out_data);
    }
}





template <class data_T, class res_T, typename CONFIG_T>
void prelu(hls::stream<data_T> &data, typename data_T::value_type alpha[CONFIG_T::n_in], hls::stream<res_T> &res) {
PReLUActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 PReLUPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 if (in_data[j] > 0)
                out_data[j] = in_data[j];
            else
                out_data[j] = alpha[i * res_T::size + j] * in_data[j];
        }
        res.write(out_data);
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void binary_tanh(hls::stream<data_T> &data, hls::stream<res_T> &res) {
PReLUActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 PReLUPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 if (in_data[j] > 0)
                out_data[j] = (typename res_T::value_type)1;
            else
                out_data[j] = (typename res_T::value_type) - 1;
        }
        res.write(out_data);
    }
}




template <class data_T, class res_T, typename CONFIG_T>
void ternary_tanh(hls::stream<data_T> &data, hls::stream<res_T> &res) {
PReLUActLoop:
    for (int i = 0; i < CONFIG_T::n_in / res_T::size; i++) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");

 data_T in_data = data.read();
        res_T out_data;
_ssdm_DataPack( &out_data, 0, 0, "", "", "");

 PReLUPackLoop:
        for (int j = 0; j < res_T::size; j++) {
_ssdm_Unroll(0,0,0, "");
 if (in_data[j] > 1)
                out_data[j] = (typename res_T::value_type)1;
            else if (in_data[j] <= -1)
                out_data[j] = (typename res_T::value_type) - 1;
            else
                out_data[j] = (typename res_T::value_type)0;
        }
        res.write(out_data);
    }
}

}
# 12 "firmware/parameters.h" 2
# 1 "firmware/nnet_utils/nnet_dense.h" 1





# 1 "firmware/nnet_utils/nnet_dense_latency.h" 1






# 1 "firmware/nnet_utils/nnet_mult.h" 1
# 10 "firmware/nnet_utils/nnet_mult.h"
namespace nnet {

namespace product {






class Product {};

template <class x_T, class w_T> class both_binary : public Product {
  public:
    static x_T product(x_T a, w_T w) {

_ssdm_InlineSelf(0, "");
 return a == w;
    }
};

template <class x_T, class w_T> class weight_binary : public Product {
  public:
    static auto product(x_T a, w_T w) -> decltype(-a) {

_ssdm_InlineSelf(0, "");
 if (w == 0)
            return -a;
        else
            return a;
    }
};

template <class x_T, class w_T> class data_binary : public Product {
  public:
    static auto product(x_T a, w_T w) -> decltype(-w) {

_ssdm_InlineSelf(0, "");
 if (a == 0)
            return -w;
        else
            return w;
    }
};

template <class x_T, class w_T> class weight_ternary : public Product {
  public:
    static auto product(x_T a, w_T w) -> decltype(-a) {

_ssdm_InlineSelf(0, "");
 if (w == 0)
            return 0;
        else if (w == -1)
            return -a;
        else
            return a;
    }
};

template <class x_T, class w_T> class mult : public Product {
  public:
    static auto product(x_T a, w_T w) -> decltype(a * w) {

_ssdm_InlineSelf(0, "");
 return a * w;
    }
};

template <class x_T, class w_T> class weight_exponential : public Product {
  public:
    using r_T = ap_fixed<2 * (decltype(w_T::weight)::width + x_T::width), (decltype(w_T::weight)::width + x_T::width)>;
    static r_T product(x_T a, w_T w) {

_ssdm_InlineSelf(0, "");


 r_T y = static_cast<r_T>(a) << w.weight;


        return w.sign == 1 ? y : static_cast<r_T>(-y);
    }
};

}

template <class data_T, class res_T, typename CONFIG_T>
inline typename std::enable_if<std::is_same<data_T, ap_uint<1>>::value &&
                                   std::is_same<typename CONFIG_T::weight_t, ap_uint<1>>::value,
                               ap_int<nnet::ceillog2(CONFIG_T::n_in) + 2>>::type
cast(typename CONFIG_T::accum_t x) {
    return (ap_int<nnet::ceillog2(CONFIG_T::n_in) + 2>)(x - CONFIG_T::n_in / 2) * 2;
}

template <class data_T, class res_T, typename CONFIG_T>
inline typename std::enable_if<
    std::is_same<data_T, ap_uint<1>>::value && !std::is_same<typename CONFIG_T::weight_t, ap_uint<1>>::value, res_T>::type
cast(typename CONFIG_T::accum_t x) {
    return (res_T)x;
}

template <class data_T, class res_T, typename CONFIG_T>
inline typename std::enable_if<(!std::is_same<data_T, ap_uint<1>>::value), res_T>::type cast(typename CONFIG_T::accum_t x) {
    return (res_T)x;
}

}
# 8 "firmware/nnet_utils/nnet_dense_latency.h" 2


namespace nnet {

template <class data_T, class res_T, typename CONFIG_T>
void dense_latency(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                   typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
                   typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {
    data_T cache;
    typename CONFIG_T::accum_t mult[CONFIG_T::n_in * CONFIG_T::n_out];
    typename CONFIG_T::accum_t acc[CONFIG_T::n_out];


_ssdm_SpecFuncInstantiation(weights,biases, "");







_ssdm_SpecArrayPartition( biases, 1, "COMPLETE", 0, "");

_ssdm_SpecArrayPartition( acc, 1, "COMPLETE", 0, "");

_ssdm_op_SpecResourceLimit(CONFIG_T::multiplier_limit, "mul", "", "", "");


Product1:
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
        cache = data[ii];
    Product2:
        for (int jj = 0; jj < CONFIG_T::n_out; jj++) {
            int index = ii * CONFIG_T::n_out + jj;
            mult[index] = CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(cache, weights[index]);
        }
    }


ResetAccum:
    for (int iacc = 0; iacc < CONFIG_T::n_out; iacc++) {
        acc[iacc] = (typename CONFIG_T::accum_t)biases[iacc];
    }


Accum1:
    for (int ii = 0; ii < CONFIG_T::n_in; ii++) {
    Accum2:
        for (int jj = 0; jj < CONFIG_T::n_out; jj++) {
            int index = ii * CONFIG_T::n_out + jj;
            acc[jj] += mult[index];
        }
    }


Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {

        res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

}
# 7 "firmware/nnet_utils/nnet_dense.h" 2
# 1 "firmware/nnet_utils/nnet_dense_resource.h" 1






# 1 "/usr/include/assert.h" 1 3 4
# 8 "firmware/nnet_utils/nnet_dense_resource.h" 2


namespace nnet {

template <class data_T, class res_T, typename CONFIG_T>
void dense_resource_rf_leq_nin(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                               typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
                               typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = CONFIG_T::reuse_factor;
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in * CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in * CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit / CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    (static_cast <bool> ((multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed") ? void (0) : __assert_fail ("(multiplier_limit % nout == 0 || rufactor >= nin) && \"The current Reuse Factor is not allowed\"", "firmware/nnet_utils/nnet_dense_resource.h", 25, __extension__ __PRETTY_FUNCTION__));
    (static_cast <bool> ((multiplier_limit == block_factor) && "This function is correct only for RF <= N_IN") ? void (0) : __assert_fail ("(multiplier_limit == block_factor) && \"This function is correct only for RF <= N_IN\"", "firmware/nnet_utils/nnet_dense_resource.h", 26, __extension__ __PRETTY_FUNCTION__));

_ssdm_SpecFuncInstantiation(weights,biases, "");

_ssdm_SpecArrayReshape( weights, 1, "BLOCK", block_factor, "");
_ssdm_SpecArrayPartition( biases, 1, "COMPLETE", 0, "");

 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];
_ssdm_SpecArrayPartition( acc, 1, "COMPLETE", 0, "");

InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {
_ssdm_Unroll(0,0,0, "");
 acc[iacc] = (typename CONFIG_T::accum_t)biases[iacc];
    }

ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {
_ssdm_op_SpecPipeline(1, 1, 1, 0, ""); _ssdm_SpecLoopRewind(0, "");

 int w_index = ir;
        int in_index = ir;
        int out_index = 0;
        int acc_step = 0;

    MultLoop:
        for (int im = 0; im < block_factor; im++) {
_ssdm_Unroll(0,0,0, "");

 acc[out_index] += static_cast<typename CONFIG_T::accum_t>(
                CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(data[in_index], weights[w_index]));


            w_index += rufactor;

            in_index += rufactor;
            if (in_index >= nin) {
                in_index = ir;
            }

            if (acc_step + 1 >= multscale) {
                acc_step = 0;
                out_index++;
            } else {
                acc_step++;
            }
        }
    }


Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {
_ssdm_Unroll(0,0,0, "");
 res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void dense_resource_rf_gt_nin_rem0(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                                   typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
                                   typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = (CONFIG_T::reuse_factor > CONFIG_T::n_in * CONFIG_T::n_out ? CONFIG_T::n_in * CONFIG_T::n_out : CONFIG_T::reuse_factor);
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in * CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in * CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit / CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    (static_cast <bool> ((multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed") ? void (0) : __assert_fail ("(multiplier_limit % nout == 0 || rufactor >= nin) && \"The current Reuse Factor is not allowed\"", "firmware/nnet_utils/nnet_dense_resource.h", 96, __extension__ __PRETTY_FUNCTION__));
    (static_cast <bool> ((rufactor > nin && rufactor % nin == 0) && "This function is correct only for RF > N_IN && RF % N_IN == 0") ? void (0) : __assert_fail ("(rufactor > nin && rufactor % nin == 0) && \"This function is correct only for RF > N_IN && RF % N_IN == 0\"", "firmware/nnet_utils/nnet_dense_resource.h", 97, __extension__ __PRETTY_FUNCTION__));

_ssdm_SpecFuncInstantiation(weights,biases, "");

_ssdm_SpecArrayReshape( weights, 1, "BLOCK", block_factor, "");
_ssdm_SpecArrayPartition( biases, 1, "COMPLETE", 0, "");

 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];
_ssdm_SpecArrayPartition( acc, 1, "COMPLETE", 0, "");

InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {
_ssdm_Unroll(0,0,0, "");
 acc[iacc] = (typename CONFIG_T::accum_t)biases[iacc];
    }

    int w_index;
    int in_index = 0;
    int out_index;
    int outstep = 0;
    const int outscale = rufactor / nin;

    int outidx[rufactor];
IndexLoop:
    for (int ir = 0; ir < rufactor; ir++) {
        outidx[ir] = outstep;
        if ((ir + 1) % nin == 0) {
            outstep++;
        }
    }

ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {
_ssdm_op_SpecPipeline(1, 1, 1, 0, ""); _ssdm_SpecLoopRewind(0, "");

 w_index = ir;
        out_index = outidx[ir] ;

    MultLoop:
        for (int im = 0; im < block_factor; im++) {
_ssdm_Unroll(0,0,0, "");
 acc[out_index] += static_cast<typename CONFIG_T::accum_t>(
                CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(data[in_index], weights[w_index]));

            w_index += rufactor;
            if (w_index >= CONFIG_T::n_in * CONFIG_T::n_out)
                break;
            out_index += outscale;
        }

        in_index++;
        if (in_index >= nin) {
            in_index = 0;

        }
    }


Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {
_ssdm_Unroll(0,0,0, "");
 res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void dense_resource_rf_gt_nin(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                              typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
                              typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = CONFIG_T::reuse_factor;
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in * CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in * CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit / CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    (static_cast <bool> ((multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed") ? void (0) : __assert_fail ("(multiplier_limit % nout == 0 || rufactor >= nin) && \"The current Reuse Factor is not allowed\"", "firmware/nnet_utils/nnet_dense_resource.h", 175, __extension__ __PRETTY_FUNCTION__));
    (static_cast <bool> ((rufactor > nin) && "This function is correct only for RF > N_IN") ? void (0) : __assert_fail ("(rufactor > nin) && \"This function is correct only for RF > N_IN\"", "firmware/nnet_utils/nnet_dense_resource.h", 176, __extension__ __PRETTY_FUNCTION__));

_ssdm_SpecFuncInstantiation(weights,biases, "");

_ssdm_SpecArrayReshape( weights, 1, "BLOCK", block_factor, "");
_ssdm_SpecArrayPartition( biases, 1, "COMPLETE", 0, "");

 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];
_ssdm_SpecArrayPartition( acc, 1, "COMPLETE", 0, "");

InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {
_ssdm_Unroll(0,0,0, "");
 acc[iacc] = (typename CONFIG_T::accum_t)biases[iacc];
    }

ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {
_ssdm_op_SpecPipeline(1, 1, 1, 0, ""); _ssdm_SpecLoopRewind(0, "");
 typename CONFIG_T::accum_t tmpmult[block_factor];
_ssdm_SpecArrayPartition( tmpmult, 1, "COMPLETE", 0, "");

 MultLoop:
        for (int im = 0; im < block_factor; im++) {
_ssdm_Unroll(0,0,0, "");
 int w_index = ir + rufactor * im;
            int in_index = w_index % nin;
            if (w_index >= CONFIG_T::n_in * CONFIG_T::n_out)
                continue;
            tmpmult[im] =
                CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(data[in_index], weights[w_index]);
        }

        typename CONFIG_T::accum_t mult[multiplier_limit];
_ssdm_SpecArrayPartition( mult, 1, "COMPLETE", 0, "");

 ResetMult:
        for (int imult = 0; imult < multiplier_limit; imult++) {
_ssdm_Unroll(0,0,0, "");
 mult[imult] = 0;
        }

    AccumLoop1:
        for (int im = 0; im < block_factor; im++) {
_ssdm_Unroll(0,0,0, "");
 int w_index = ir + rufactor * im;
            int out_index = w_index / multfactor;
            if (out_index >= multiplier_limit)
                continue;
            mult[out_index] += tmpmult[im];
        }

    AccumLoop2:
        for (int im = 0; im < multiplier_limit; im++) {
_ssdm_Unroll(0,0,0, "");


 acc[im] += mult[im];
        }
    }


Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {
_ssdm_Unroll(0,0,0, "");
 res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void dense_resource(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                    typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
                    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

_ssdm_InlineAll(1, "");

 if (CONFIG_T::reuse_factor <= CONFIG_T::n_in) {
        dense_resource_rf_leq_nin<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else if (CONFIG_T::reuse_factor % CONFIG_T::n_in == 0) {
        dense_resource_rf_gt_nin_rem0<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        dense_resource_rf_gt_nin<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

}
# 8 "firmware/nnet_utils/nnet_dense.h" 2




namespace nnet {

struct dense_config {

    typedef float bias_t;
    typedef float weight_t;
    typedef float accum_t;


    static const unsigned n_in = 10;
    static const unsigned n_out = 10;


    static const unsigned io_type = io_parallel;
    static const unsigned strategy = latency;
    static const unsigned reuse_factor = 1;
    static const bool store_weights_in_bram = false;
    static const unsigned n_zeros = 0;


    template <class x_T, class y_T> using product = nnet::product::mult<x_T, y_T>;
};

template <class data_T, class res_T, typename CONFIG_T>
void dense(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
           typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
           typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {
_ssdm_InlineSelf(0, "");
 if (CONFIG_T::strategy == nnet::latency) {
        dense_latency<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        dense_resource<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

}
# 13 "firmware/parameters.h" 2
# 1 "firmware/nnet_utils/nnet_dense_compressed.h" 1








namespace nnet {

template <typename CONFIG_T>
void fill_mult(typename CONFIG_T::index_t index, typename CONFIG_T::accum_t mult[CONFIG_T::n_out],
               typename CONFIG_T::accum_t weight) {
    for (unsigned k = 0; k < CONFIG_T::n_out; k++) {
_ssdm_Unroll(0,0,0, "");
 if (k == index)
            mult[k] += weight;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void dense_compressed(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                      typename CONFIG_T::weight_t weights[CONFIG_T::n_nonzeros],
                      typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int multiplier_limit = ((CONFIG_T::n_nonzeros + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);

    typename CONFIG_T::accum_t acc[CONFIG_T::n_out];
_ssdm_SpecArrayPartition( &acc, 1, "COMPLETE", 0, "");
_ssdm_SpecArrayPartition( &biases, 1, "COMPLETE", 0, "");
_ssdm_SpecArrayReshape( &weights, 1, "BLOCK", multiplier_limit, "");




_ssdm_DataPack( &weights, 0, 0, "", "struct_level", "");


InitAccum:
    for (unsigned i = 0; i < CONFIG_T::n_out; i++) {
_ssdm_Unroll(0,0,0, "");
 acc[i] = (typename CONFIG_T::accum_t)(biases[i]);
    }


    const int rufactor = CONFIG_T::reuse_factor;
ReuseLoop:
    for (unsigned ir = 0; ir < rufactor; ir++) {
_ssdm_op_SpecPipeline(1, 1, 1, 0, ""); _ssdm_SpecLoopRewind(0, "");

 typename CONFIG_T::accum_t mult[CONFIG_T::n_out];
_ssdm_SpecArrayPartition( &mult, 1, "COMPLETE", 0, "");

 ResetMult:
        for (int imult = 0; imult < CONFIG_T::n_out; imult++) {
_ssdm_Unroll(0,0,0, "");
 mult[imult] = 0;
        }

    CompressedMultLoop:
        for (unsigned im = 0; im < multiplier_limit; im++) {
_ssdm_Unroll(0,0,0, "");
 unsigned w = im * rufactor + ir;
            auto row = weights[w].row_index;
            auto col = weights[w].col_index;
            auto weight_cache = weights[w].weight;
            data_T data_cache = data[row];

            typename CONFIG_T::accum_t prod =
                CONFIG_T::template product<data_T, typename CONFIG_T::weight_t>::product(data_cache, weight_cache);
            fill_mult<CONFIG_T>(col, mult, prod);
        }

        for (int im = 0; im < CONFIG_T::n_out; im++) {
            acc[im] += mult[im];
        }
    }


ResultLoop:
    for (unsigned i = 0; i < CONFIG_T::n_out; i++) {
_ssdm_Unroll(0,0,0, "");

 res[i] = cast<data_T, res_T, CONFIG_T>(acc[i]);
    }
}

}
# 14 "firmware/parameters.h" 2
# 1 "firmware/nnet_utils/nnet_dense_stream.h" 1






# 1 "/usr/include/assert.h" 1 3 4
# 8 "firmware/nnet_utils/nnet_dense_stream.h" 2


namespace nnet {

template <class data_T, class res_T, typename CONFIG_T>
void dense_wrapper(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_out],
                   typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
                   typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {
_ssdm_InlineAll(1, "");
 if (CONFIG_T::strategy == nnet::latency) {
_ssdm_op_SpecPipeline(CONFIG_T::reuse_factor, 1, 1, 0, "");
 dense_latency<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        dense_resource<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void dense(hls::stream<data_T> &data_stream, hls::stream<res_T> &res_stream,
           typename CONFIG_T::weight_t weights[CONFIG_T::n_in * CONFIG_T::n_out],
           typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {
    typename data_T::value_type data[CONFIG_T::n_in];
_ssdm_SpecArrayPartition( &data, 1, "COMPLETE", 0, "");

 typename res_T::value_type res[CONFIG_T::n_out];
_ssdm_SpecArrayPartition( &res, 1, "COMPLETE", 0, "");

DataPrepare:
    for (int i_in = 0; i_in < CONFIG_T::n_in / data_T::size; i_in++) {
        if (CONFIG_T::n_in / data_T::size > 1) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 }
        data_T data_pack = data_stream.read();
    DataPack:
        for (int i_pack = 0; i_pack < data_T::size; i_pack++) {
_ssdm_Unroll(0,0,0, "");
 data[i_in * data_T::size + i_pack] = data_pack[i_pack];
        }
    }

    dense_wrapper<typename data_T::value_type, typename res_T::value_type, CONFIG_T>(data, res, weights, biases);

ResWrite:
    for (unsigned i_out = 0; i_out < CONFIG_T::n_out / res_T::size; i_out++) {
        if (CONFIG_T::n_out / res_T::size > 1) {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
 }
        res_T res_pack;
_ssdm_DataPack( &res_pack, 0, 0, "", "", "");
 ResPack:
        for (int i_pack = 0; i_pack < res_T::size; i_pack++) {
_ssdm_Unroll(0,0,0, "");
 res_pack[i_pack] = res[i_out * res_T::size + i_pack];
        }
        res_stream.write(res_pack);
    }
}

}
# 15 "firmware/parameters.h" 2


# 1 "firmware/weights/w2.h" 1
# 12 "firmware/weights/w2.h"
model_default_t w2[78400] = {-0.0587119758, 0.0169090852, -0.0739825070, -0.0621601418, -0.0561172254, -0.0222886652, -0.0027325228, -0.0188846737, -0.0600070804, 0.0631792992, 0.0201430917, 0.0352143347, -0.0633483157, 0.0061262995, 0.0654459745, 0.0612187535, 0.0233801231, -0.0626265258, 0.0538148284, 0.0146907195, 0.0127213150, -0.0469389074, 0.0553991795, -0.0603408217, 0.0667369813, 0.0049098358, -0.0455535464, -0.0070355162, 0.0630976409, -0.0211992897, 0.0078792423, -0.0171097890, -0.0183739215, 0.0727950186, -0.0494422056, -0.0549449995, -0.0735160112, 0.0026645958, -0.0221895687, 0.0287488550, -0.0007908344, -0.0607586913, -0.0821617320, -0.0021241605, 0.0404308066, -0.0108443871, 0.0540452451, -0.0588228367, -0.0477074087, -0.0575288907, 0.0308425575, 0.0583564490, 0.0703535378, 0.0686523765, -0.0414927602, 0.0525686443, -0.0741762593, -0.0596383810, 0.0694249719, -0.0170125440, 0.0615110695, -0.0153997391, -0.0030313358, 0.0536286384, 0.0515896231, 0.0277423114, -0.0548748001, -0.0804396197, 0.0398096442, -0.0300871581, -0.0115218088, -0.0051722378, -0.0119061023, -0.0285410248, -0.0339377336, -0.0493501425, 0.0200249627, -0.0634892285, -0.0718222260, -0.0135367215, 0.0484826714, -0.0484197699, -0.0583031625, 0.0519445986, 0.0691320002, 0.0653180331, -0.0574414618, 0.0326048136, -0.0491162613, -0.0124479309, 0.0570220053, 0.0144276693, 0.0688743889, 0.0350499898, -0.0142620876, 0.0146972388, 0.0197469667, -0.0636805594, 0.0257401839, -0.0319234468, 0.0050045699, 0.0037620664, 0.0496507883, 0.0279604197, 0.0739204437, 0.0087362304, 0.0255083516, -0.0331496894, 0.0200611800, 0.0304168537, 0.0444561392, -0.0447976366, -0.0174553767, 0.0517281294, 0.0267232209, -0.0230032876, 0.0155741274, 0.0651634485, -0.0300880224, -0.0158007964, -0.0040507838, -0.0513926335, 0.0189004838, 0.0811072737, 0.0517853051, 0.0557515621, -0.0043743551, 0.0198174790, -0.0601711720, -0.0641771406, -0.0357870832, -0.0316871107, -0.0759201348, 0.0243585557, 0.0699853897, 0.0617905408, -0.0396558233, -0.0722246766, -0.0153947324, -0.0348527618, -0.0773324817, 0.0635868460, 0.0699515492, 0.0206389353, 0.0033145994, 0.0423697680, 0.0813729763, -0.0349549986, 0.0455466509, 0.0419193283, 0.0701865256, -0.0709335953, -0.0167600960, 0.0362703949, 0.0801131427, 0.0055654347, -0.0159187093, -0.0250284523, -0.0539695695, -0.0486282334, -0.0484831743, 0.0688169152, -0.0823562816, 0.0585782975, 0.0521295071, 0.0823514909, 0.0222189724, -0.0697418451, -0.0634157881, 0.0044802427, -0.0165046751, -0.0167829245, 0.0291435272, -0.0318249799, -0.0572022796, -0.0738411695, -0.0391730182, -0.0563379042, 0.0627082288, -0.0102763325, 0.0604334325, 0.0114618167, -0.0816547871, 0.0805326402, -0.0738970488, -0.0581787080, 0.0376781523, 0.0641165674, -0.0336935408, 0.0782544017, 0.0648340136, 0.0108143911, -0.0452617407, 0.0001972094, -0.0294947699, -0.0538999587, -0.0167414993, -0.0019947812, 0.0675900429, -0.0615320206, 0.0253634080, -0.0601000115, 0.0740304738, 0.0726097375, -0.0364745371, 0.0594866425, 0.0617556423, 0.0482658744, 0.0080287755, -0.0717175901, -0.0439866893, -0.0798978731, -0.0325297602, 0.0302210376, -0.0396128856, -0.0086871833, -0.0636739656, 0.0170979872, 0.0772604793, 0.0677557588, -0.0682982206, -0.0512396395, -0.0715263337, 0.0396985486, -0.0619792342, -0.0345386043, -0.0169351473, 0.0187298134, -0.0612480342, 0.0142036900, -0.0398440957, 0.0355755165, 0.0655959845, 0.0206854716, -0.0110062361, 0.0049670935, 0.0808062404, 0.0445464700, 0.0184869394, 0.0479494333, 0.0409693718, 0.0312418267, -0.0758960694, 0.0039725155, -0.0220819116, 0.0593980998, -0.0423849672, -0.0331749469, -0.0508180223, -0.0671655163, -0.0336258523, -0.0630061477, -0.0805356503, 0.0613400936, -0.0756309405, 0.0113981217, 0.0142680407, -0.0638832152, -0.0071618333, -0.0153683722, 0.0460546762, 0.0551920831, 0.0055173486, 0.0282900780, -0.0406758040, 0.0782814771, -0.0784310922, 0.0446888953, -0.0098615512, 0.0805285871, -0.0095299929, -0.0034937337, 0.0193403959, -0.0589423589, 0.0497263074, -0.0683823675, -0.0448946096, 0.0467130691, -0.0202865563, 0.0494158864, 0.0178185403, 0.0289904997, 0.0332797393, 0.0328207389, 0.0549914390, 0.0576524734, 0.0521301776, 0.0376506522, -0.0255979002, -0.0794786885, 0.0341511071, -0.0021192133, -0.0608824566, -0.0122355223, 0.0383604243, 0.0404165685, -0.0107544810, 0.0165976211, -0.0660752803, -0.0168240964, 0.0290695727, -0.0057549998, 0.0744355172, 0.0820834488, -0.0797398686, 0.0024336651, -0.0797953382, -0.0287714861, -0.0260446221, -0.0703864992, 0.0515801907, -0.0471180454, -0.0570614859, 0.0148255602, 0.0475267619, -0.0363933370, -0.0742507875, -0.0328163989, 0.0148478374, -0.0175206661, -0.0150062889, 0.0739029348, 0.0642944127, 0.0770254731, -0.0107152984, -0.0815477744, -0.0406510942, -0.0815426484, 0.0169853196, -0.0148332790, -0.0729072765, -0.0255815387, 0.0480836481, 0.0691547245, -0.0805308223, 0.0400967896, 0.0341585502, -0.0772738308, 0.0488340259, 0.0397662520, 0.0116166994, 0.0541484356, 0.0387079343, -0.0747263208, 0.0622688979, -0.0692302212, 0.0509489775, 0.0614998490, 0.0728926659, 0.0398654267, 0.0796939284, -0.0512298420, -0.0226704106, -0.0422084630, -0.0244040079, 0.0319807455, 0.0217909291, -0.0602763779, 0.0694037974, -0.0035193115, 0.0075007156, 0.0317871869, 0.0075458363, 0.0482493937, 0.0527326465, -0.0595109984, 0.0279714987, -0.0117017478, -0.0640981942, 0.0242711306, 0.0550832450, -0.0753329694, 0.0177214667, 0.0381913409, -0.0704291016, -0.0497789681, 0.0667921454, 0.0675922036, -0.0415665582, -0.0737281665, -0.0589025840, 0.0212144330, 0.0255117267, -0.0545492694, 0.0000647828, -0.0758304670, -0.0757060498, 0.0672692657, -0.0614545718, 0.0135613084, -0.0688346326, 0.0293522105, -0.0222724415, 0.0014865622, 0.0786583573, 0.0143295005, 0.0370970741, -0.0376139022, -0.0702951625, 0.0390642211, 0.0542147607, -0.0575212277, -0.0165291429, -0.0168988481, -0.0264160559, -0.0188567415, 0.0052286312, 0.0534393489, 0.0675059110, 0.0006139353, -0.0409416221, -0.0471616089, -0.0540775619, 0.0690146536, 0.0515412092, 0.0047400668, -0.0112147033, -0.0656269863, 0.0015726537, -0.0041123852, 0.0128322914, 0.0271333456, 0.0089861155, -0.0158018395, -0.0538554490, -0.0301793963, -0.0286751203, 0.0411207378, 0.0261829644, 0.0226522386, 0.0305203646, 0.0418694019, -0.0382152684, 0.0507554561, -0.0275311433, -0.0708224177, 0.0275072157, 0.0585489124, -0.0569281727, 0.0014619678, 0.0392563641, 0.0088009685, 0.0227711126, -0.0475299619, 0.0025246665, -0.0740059018, -0.0500882566, -0.0121974349, 0.0229250714, 0.0690049082, -0.0404694825, 0.0496759415, 0.0205148384, 0.0305591598, 0.0299204960, 0.0235233530, -0.0486234799, 0.0428419262, 0.0672091991, -0.0373765677, -0.0064855292, -0.0426499210, 0.0479264706, 0.0003266856, 0.0282756984, -0.0160562024, 0.0219279751, 0.0562264919, -0.0005116016, 0.0094742626, 0.0792835802, -0.0396215878, 0.0378015265, -0.0221545473, -0.0785414428, -0.0762641877, -0.0795243755, 0.0618999153, -0.0110878348, 0.0128054619, 0.0239064693, 0.0196575001, 0.0430168957, -0.0564183965, 0.0815664530, -0.0103399158, -0.0093046948, 0.0344745517, -0.0064735115, 0.0270778388, -0.0715208724, -0.0098103657, -0.0515477881, 0.0621937215, 0.0542264134, -0.0467856787, 0.0356674418, -0.0375211537, -0.0280002765, 0.0143153742, 0.0515880883, -0.0639352649, 0.0170222819, 0.0588078350, -0.0272628106, -0.0034638196, -0.0695654154, 0.0605707020, 0.0737165511, -0.0522813648, -0.0266319625, 0.0430150628, -0.0782816708, -0.0194111466, -0.0668537766, 0.0479746014, 0.0520679504, -0.0090396032, -0.0669383556, 0.0375443101, -0.0124943480, -0.0592423156, 0.0581771433, -0.0820616335, 0.0260800570, 0.0695143044, -0.0063612983, -0.0319604315, -0.0496699549, 0.0075192228, 0.0413982049, -0.0145903230, -0.0219211206, 0.0498270541, -0.0592405871, 0.0601156801, -0.0329676829, -0.0783541948, 0.0341439545, 0.0618072301, 0.0804879218, -0.0619756021, 0.0163438618, 0.0338129252, 0.0098628253, 0.0536802858, -0.0403660461, -0.0488953851, -0.0310472101, 0.0549460202, 0.0238597244, 0.0107201487, 0.0632542223, 0.0808805674, -0.0539269447, 0.0737763196, 0.0047499910, -0.0452404879, 0.0310470909, -0.0775264278, 0.0077550635, -0.0669562519, -0.0739132911, -0.0206040330, 0.0465659052, 0.0821791738, -0.0377930589, 0.0374762490, 0.0620226264, -0.0298873782, -0.0540586635, -0.0408210978, 0.0174541548, -0.0431410149, 0.0745639056, 0.0101027340, 0.0021723062, 0.0258229375, -0.0424948074, 0.0146737248, -0.0367236212, 0.0259163007, -0.0010823607, -0.0294004269, -0.0086990446, -0.0450325161, 0.0665992349, 0.0097579211, -0.0789029747, 0.0315661952, -0.0470675640, 0.0018882975, 0.0445486903, 0.0624741465, -0.0441741534, -0.0132819638, -0.0713202283, 0.0560533851, -0.0087912306, -0.0090856031, -0.0270875804, -0.0525239632, -0.0053996742, -0.0160822496, -0.0220093727, -0.0803304464, 0.0301431566, 0.0514894724, -0.0329024121, -0.0787360966, 0.0676464736, -0.0214805640, 0.0733474344, 0.0425007790, 0.0352329165, -0.0288434960, -0.0356120095, 0.0757631958, -0.0129432082, -0.0051326975, -0.0563807450, -0.0141245350, -0.0355820358, 0.0256516188, -0.0582383052, 0.0234109983, -0.0149497613, 0.0663232952, -0.0612128377, -0.0758839101, 0.0148547664, 0.0770632327, -0.0034450591, 0.0625308305, -0.0793603584, 0.0288201421, 0.0743758231, 0.0378178507, 0.0194990858, 0.0550342947, -0.0022377521, 0.0494643599, 0.0161802396, 0.0568564385, 0.0218659639, 0.0487445891, 0.0086613744, -0.0300382301, 0.0725491047, 0.0097324848, -0.0031400174, -0.0297594480, 0.0421197787, 0.0438281298, -0.0393911451, -0.0416010283, -0.0135487393, 0.0189602375, 0.0448808074, -0.0274262130, 0.0363591239, 0.0186876282, 0.0250549093, 0.0417461842, 0.0768068135, 0.0753899366, -0.0336334147, -0.0327377133, 0.0643838495, -0.0518624932, 0.0378842577, -0.0593314692, -0.0308506899, -0.0127606764, 0.0495793819, 0.0780199021, -0.0264636278, -0.0431983098, -0.0107763261, 0.0551712960, -0.0370707363, -0.0001949668, -0.0086617097, 0.0785333216, 0.0109676793, -0.0761686265, -0.0776867270, -0.0240348130, 0.0682401061, -0.0210287757, 0.0248184949, -0.0788272172, 0.0227519423, 0.0103243962, -0.0402123071, -0.0234480835, -0.0503895283, 0.0482221544, -0.0803268775, -0.0040865764, -0.0212768354, -0.0500141643, 0.0434219986, -0.0312828757, 0.0280111954, -0.0065866858, 0.0600767583, -0.0109994784, -0.0242657065, -0.0064034462, 0.0385981128, 0.0383198783, -0.0421422683, -0.0819328949, 0.0052193776, -0.0119961426, 0.0510011017, -0.0262014270, -0.0414334796, -0.0557995141, -0.0566166863, -0.0393586196, 0.0307704732, 0.0458955765, 0.0493333638, -0.0423332900, -0.0378212258, 0.0384252220, -0.0376620255, 0.0267824978, -0.0251961797, -0.0639153048, 0.0286474675, -0.0252019912, -0.0739977509, 0.0184181556, -0.0101275221, 0.0315055177, 0.0459331870, -0.0001258850, 0.0801957846, 0.0080373064, 0.0711423308, -0.0529006608, -0.0504767373, -0.0694715306, 0.0120224282, 0.0381658673, 0.0652469248, -0.0298109502, -0.0435284972, -0.0106931254, 0.0035798624, 0.0602696836, 0.0366409272, -0.0702108815, 0.0460849106, -0.0593071952, -0.0293712802, 0.0751003325, -0.0268932432, 0.0229634717, -0.0131837875, 0.0363360420, -0.0004244074, -0.0498066656, -0.0384292491, 0.0004073009, 0.0053639412, 0.0460391939, 0.0535475910, -0.0197270885, -0.0660912693, 0.0461136848, -0.0229133256, 0.0370095745, -0.0619524047, -0.0209390894, -0.0121465027, -0.0285942368, 0.0618610680, -0.0060528517, 0.0600976795, 0.0211568847, -0.0602590926, -0.0538501255, -0.0080877468, 0.0307542235, 0.0121286735, -0.0064509436, 0.0008490160, -0.0807173401, -0.0345087498, 0.0584322512, 0.0339447036, -0.0128069147, -0.0013698861, -0.0156769082, 0.0812259316, 0.0779810697, 0.0360110402, -0.0203345418, 0.0593451262, 0.0528384149, -0.0713650957, 0.0437620431, -0.0347301960, -0.0034726560, -0.0495888926, 0.0341380984, 0.0632223040, -0.0132128596, -0.0024417564, -0.0407936946, -0.0559949726, 0.0099699721, -0.0017543212, 0.0375241563, -0.0116477534, 0.0701306760, -0.0213882066, 0.0353769958, -0.0181780681, 0.0631795824, 0.0373705178, 0.0687345862, -0.0605577901, -0.0038358420, 0.0034154430, 0.0790922046, -0.0560974479, -0.0470866561, -0.0729392767, -0.0085361525, 0.0451179445, -0.0142882317, -0.0088357553, -0.0486707985, 0.0730037838, -0.0527128242, -0.0674613118, 0.0712471753, -0.0542572513, 0.0452009290, -0.0582432523, -0.0667194650, 0.0739017874, 0.0630278289, -0.0118954182, 0.0526745170, 0.0174199194, -0.0022563338, -0.0776306540, 0.0429357141, -0.0650520176, -0.0705208108, -0.0289575160, 0.0781098008, 0.0720602870, 0.0614821166, 0.0368689150, -0.0068698898, 0.0617004782, 0.0230680853, -0.0339723006, 0.0454852283, -0.0079038739, -0.0734931231, 0.0121582523, 0.0807938427, -0.0523142815, 0.0597396344, 0.0036742091, 0.0812353492, 0.0525359511, -0.0547707342, -0.0732301772, 0.0101922676, -0.0042722300, 0.0622863472, 0.0537858307, -0.0331161581, 0.0195884556, 0.0326211527, 0.0222337842, -0.0813150704, 0.0394256935, 0.0505663007, -0.0690598860, 0.0756089389, -0.0257618316, -0.0501907095, 0.0798677355, 0.0248373747, -0.0187366158, -0.0296588801, 0.0051034689, 0.0180870667, 0.0324003994, -0.0375069492, -0.0556404702, -0.0337067805, 0.0156028196, -0.0520758480, 0.0275269747, 0.0042828023, -0.0359435715, 0.0201351568, -0.0490810834, 0.0554863811, 0.0315263048, -0.0249081254, 0.0128439218, -0.0593275428, -0.0543962941, -0.0484927222, 0.0291222781, -0.0280656070, 0.0401649103, -0.0548949912, 0.0284783691, -0.0515764654, -0.0574059263, -0.0220456533, 0.0293312296, -0.0597467460, -0.0424476862, 0.0076644346, -0.0759037286, 0.0404319465, 0.0345114395, -0.0801207721, -0.0732185692, 0.0057955608, 0.0507608056, -0.0055794567, -0.0705290437, -0.0679179281, -0.0234700218, 0.0329126492, -0.0772911981, 0.0640410036, 0.0120470747, 0.0711427778, -0.0550600663, 0.0299423784, -0.0011746213, 0.0535802990, 0.0156136081, 0.0138908252, -0.0258671753, -0.0409691185, -0.0446383953, 0.0135352090, 0.0047796890, -0.0263253264, 0.0710254759, -0.0702666268, 0.0673150867, 0.0716370344, 0.0653661788, -0.0651626065, -0.0688262060, -0.0385134742, -0.0608505979, 0.0565573275, -0.0453890823, 0.0515440553, -0.0747165009, -0.0361691229, -0.0820229799, -0.0776984543, -0.0582173094, 0.0117641911, -0.0549317598, 0.0365257487, -0.0024632663, 0.0351824388, -0.0148261115, 0.0578285158, 0.0272050798, 0.0210072845, 0.0332316160, -0.0465358123, -0.0820850655, -0.0240830369, -0.0540532246, 0.0552847534, -0.0392903611, -0.0450802855, 0.0517556816, -0.0625558123, -0.0431613438, 0.0517315269, -0.0553927422, -0.0062919781, 0.0264915004, -0.0546075106, 0.0339348465, 0.0588080287, 0.0541195720, -0.0626250133, -0.0495414361, 0.0698198974, -0.0627193898, 0.0228765383, -0.0541967675, 0.0550461113, -0.0506735519, -0.0260890126, 0.0657317191, -0.0013681576, -0.0346915387, 0.0655152649, -0.0431874469, -0.0295982845, 0.0624127835, -0.0426228717, -0.0441191941, -0.0494093448, -0.0456126891, -0.0124762952, 0.0800669640, -0.0784521103, -0.0088568553, -0.0483809188, 0.0470415056, 0.0116328821, 0.0756193399, 0.0630981922, -0.0774653405, -0.0349871144, 0.0277800858, 0.0706978440, -0.0787935480, -0.0016275868, -0.0339833796, -0.0011945590, 0.0015302449, 0.0036340356, -0.0424194969, 0.0295888782, 0.0742664039, -0.0271490216, 0.0670973808, 0.0237998962, 0.0712967217, 0.0703141838, 0.0151451007, -0.0479515009, 0.0715894848, 0.0340244919, -0.0604719371, -0.0343997739, 0.0029746890, -0.0417227894, -0.0320344642, -0.0133306533, -0.0719042867, -0.0574821979, -0.0661596432, 0.0129172057, -0.0140454099, 0.0045376793, -0.0102148131, -0.0470107794, 0.0265068784, -0.0446917824, 0.0000947341, 0.0769873857, 0.0522277951, -0.0523183718, 0.0352832824, 0.0015241951, -0.0399946906, 0.0165974647, 0.0508206338, -0.0720422193, -0.0352708474, 0.0760115534, 0.0227742791, -0.0122116804, -0.0739597455, 0.0440679491, -0.0640776306, -0.0097868890, -0.0566526316, 0.0150963292, -0.0563202463, 0.0783525258, 0.0026338995, 0.0555812865, -0.0048990324, -0.0244911239, 0.0373238698, -0.0676508397, -0.0434747934, -0.0208345950, -0.0360316262, 0.0444893390, -0.0094925761, -0.0262117758, -0.0775315017, -0.0248149037, -0.0159007758, -0.0149453208, 0.0610197783, -0.0115416646, -0.0325093903, 0.0388253108, -0.0068947598, -0.0406645276, -0.0214415938, 0.0577892065, 0.0219598934, 0.0413581505, 0.0054238513, -0.0002350584, -0.0017211437, 0.0330122486, 0.0080375820, 0.0156842992, -0.0032959804, -0.0118009001, 0.0015582740, -0.0684773177, -0.0587171428, 0.0663878024, -0.0476216301, -0.0570120439, 0.0647425205, -0.0319155715, -0.0648004636, -0.0261742994, -0.0700757205, -0.0640460625, -0.0107812732, 0.0209999010, 0.0503003001, 0.0729328543, 0.0208344534, 0.0543105006, 0.0081974864, -0.0567604080, 0.0043609142, 0.0295596868, -0.0643804148, -0.0523419008, 0.0645463169, 0.0785103291, -0.0460288264, 0.0261492729, -0.0553954914, -0.0271442905, 0.0447751284, -0.0308661684, -0.0114670843, 0.0715778023, -0.0531866327, -0.0823521242, -0.0127309784, -0.0618180931, 0.0003206357, -0.0051409677, 0.0342512429, -0.0748205036, 0.0412629843, 0.0227362886, -0.0721965283, -0.0481023528, 0.0498824716, -0.0767108649, -0.0683265254, 0.0326743051, -0.0179442465, 0.0507739037, -0.0740977153, -0.0229760222, 0.0439986736, -0.0566849634, -0.0041902661, -0.0193683803, 0.0248435810, 0.0657069236, 0.0641351193, 0.0341946334, 0.0619530529, 0.0147229880, -0.0621288493, -0.0316979364, 0.0385228023, -0.0498850979, 0.0581149459, -0.0523912832, 0.0665055960, 0.0397964418, 0.0093969330, -0.0682656169, 0.0449910313, -0.0679865181, -0.0008971652, 0.0312282406, 0.0931643397, 0.0329397134, -0.0410848819, 0.0687950253, 0.0764779598, -0.0620263778, 0.0959254131, 0.0480760895, 0.0157026760, 0.0331302211, 0.0468493924, 0.0113643417, 0.0318113118, -0.0421372764, 0.0306280479, -0.0382423177, -0.0757685825, 0.0549513213, 0.0372070894, -0.0029337460, 0.0237466432, 0.0651995167, -0.0448599309, 0.0052851476, 0.0481407195, 0.0471124314, -0.0368582867, 0.0477766022, 0.0373392403, -0.0521831922, 0.0093399715, 0.0065597435, 0.0364591703, 0.0405171476, -0.1378436983, -0.0522488914, 0.0646852925, -0.0002955227, -0.0712377727, 0.1225448251, 0.1052881628, 0.0126161072, 0.0091643585, 0.0251532923, 0.0753486156, 0.1116252616, -0.0129704466, 0.1254419982, 0.0406608358, -0.0136034470, -0.0394673273, -0.1379603893, -0.0615548678, 0.0086385906, -0.0339716412, -0.0264408737, 0.0706859827, -0.0704131648, 0.1083643362, -0.0176894423, -0.0468120202, -0.0705837607, 0.0737535879, -0.0494244099, 0.1391296685, 0.0786057860, 0.0185293462, -0.0516433269, 0.0225135256, 0.1090501845, -0.0659260973, 0.0530904382, 0.0406695455, -0.0310850777, 0.0854829773, -0.0706137344, 0.1151824594, 0.0862056538, 0.0193372536, -0.0850532204, -0.0799235329, 0.0327737220, 0.0172618777, -0.0683251545, 0.1179681420, -0.1167353615, -0.0054569440, -0.0070757191, -0.0014669941, 0.0174483806, 0.0487863719, 0.0627228767, -0.1277878135, -0.0626935735, -0.1218207330, -0.0694581717, -0.0093014315, 0.0483792946, 0.0001100497, 0.0180320106, 0.0727569833, -0.0741332099, -0.0129544651, 0.0763852745, -0.0203305651, 0.0045265863, 0.1508494765, 0.0711732507, 0.0633110404, 0.0081626372, 0.0253555756, 0.0228514038, 0.0187550560, -0.0058031571, 0.0130904093, -0.0758528411, 0.0079185599, 0.0101220310, 0.1361907423, 0.0330548324, -0.0664516240, 0.0515847653, 0.0661673769, 0.0612611845, 0.0905033574, 0.0421206616, 0.0591729656, -0.0703410506, 0.0124731651, -0.0351952873, -0.0203447025, 0.0063124341, 0.0351758972, -0.0543442369, 0.0127039207, -0.0236395430, -0.0565153435, 0.0436401740, 0.0517390966, 0.1725888103, 0.0855488479, 0.0700877830, -0.0315686241, -0.0298816785, 0.0192321986, 0.1076619253, -0.1162963957, 0.0571870916, 0.0717483908, 0.0919416025, 0.0148714250, -0.1411321312, -0.0114121661, -0.0449558534, -0.0510458499, -0.1080528721, -0.0573125705, -0.0043524778, 0.0035504275, -0.0686076730, -0.0588276088, 0.0300167687, -0.0342315882, -0.0445192903, 0.0988496840, -0.0605727769, -0.0148457475, 0.0395526066, 0.1072995141, 0.0630161986, 0.0382641181, -0.0593905225, 0.0310161393, 0.0325604230, 0.0099784369, 0.0057231346, 0.0114747947, -0.0050582988, 0.1200253144, -0.0928011984, 0.0213682428, -0.0214475468, 0.0256445482, 0.0288275853, 0.0991782025, -0.0905344635, 0.0122306757, -0.0077249403, -0.0313714892, -0.0521496236, 0.0607525110, -0.0004651176, -0.0969628841, -0.1442085803, -0.0458838828, 0.0147633329, -0.0705683455, -0.0591916256, 0.0199005455, 0.0888565928, -0.0106846336, -0.0415079445, -0.0485012308, -0.0232192632, -0.0852781907, 0.0340769142, 0.0777323991, -0.0376865566, -0.0137180965, -0.0904112384, -0.0127486689, -0.0026414895, 0.0667020530, -0.0675068870, -0.0812471509, -0.0761355311, 0.0249215383, 0.0481254235, -0.0514984876, -0.0399489403, 0.0438080430, -0.0426189303, 0.0208526943, 0.0952534601, 0.0945199355, 0.0252385587, -0.0101649845, 0.0302519314, -0.0015632818, 0.0122609856, -0.0691482052, -0.0407352000, -0.0256793089, -0.0820773765, 0.0439735502, -0.0455074161, -0.0679129139, 0.0469511226, 0.0207683593, 0.0672570542, 0.0271694008, -0.0442549624, -0.0495633818, -0.0486588664, 0.0121429944, -0.0733153224, 0.0034517203, 0.0058680153, 0.0100359404, -0.0314351581, -0.0106252292, -0.0332991444, -0.0669352114, -0.0275695436, -0.0564292595, -0.0088107819, 0.0287825838, 0.0907287821, 0.0132733295, 0.0329044722, 0.0072304010, 0.0638069138, -0.0297929514, 0.0873013437, -0.0443064421, -0.0052870288, -0.0179355312, -0.0465304665, 0.0207708403, -0.0703596696, -0.0570433363, 0.0622409284, -0.0449242890, -0.0333230495, 0.0916271731, 0.0333260000, -0.0042644651, 0.0942205042, 0.0237125307, -0.0248931106, -0.0220301133, -0.0133674340, -0.0020365417, 0.0650853515, -0.1068644971, -0.0177585166, -0.0527134314, 0.0022062510, 0.0241170283, 0.0728520602, 0.0649901330, 0.0487863235, 0.0161779020, 0.0001140654, 0.0831878036, 0.0362722799, -0.0716294199, -0.0218172669, -0.0267109424, 0.0948631614, 0.0379910357, -0.0534747839, -0.0619376749, 0.0172538627, -0.0188674890, 0.0521449596, -0.0381281152, -0.0241832882, 0.0538186356, 0.0401265174, 0.0326816812, -0.0397873074, -0.0405879654, -0.0310712419, 0.0092509314, 0.0525708199, -0.0311493501, -0.0678678751, -0.0806381851, -0.0493087210, -0.0632856712, -0.0005688047, 0.0394511037, -0.0300965477, -0.0157114621, -0.0350736305, -0.0822604820, 0.0346657969, 0.0471393056, 0.0452484265, -0.0684822798, -0.0001851842, 0.0171191748, -0.1019454822, 0.0250750836, 0.0505102426, -0.0230494067, 0.0304991603, -0.0033572614, 0.0546463132, -0.1067914143, -0.0226395316, -0.0298635066, 0.0700548142, -0.0694588348, -0.0541187115, -0.0166797023, 0.0410768427, 0.0525927506, 0.0781492293, -0.0587956272, 0.0408855602, -0.0287884176, 0.0713697672, 0.0088628605, -0.0060133529, -0.0358264633, -0.0234616790, -0.0672840625, 0.0768439770, 0.0361347497, 0.0086173294, 0.0771470591, 0.0471608713, 0.0608415604, -0.0087982193, 0.0220423359, -0.0823673010, -0.0082086688, 0.0805669874, 0.0578029305, -0.0811925828, -0.0556937605, 0.0225345641, 0.0562130660, 0.0261139330, 0.1060102805, -0.0483664684, 0.0735113397, -0.0046970467, -0.0709088370, 0.0422375500, 0.0542981029, 0.0483733565, -0.0484594144, -0.0236024838, -0.0668026134, -0.0014344305, -0.0021704899, 0.0449363291, 0.0595535636, 0.0959519073, 0.0113876024, -0.0677748099, 0.0265787132, -0.0766050145, 0.0083046556, 0.0390123390, 0.0719419867, 0.0076051727, -0.0568012819, 0.0136131048, -0.0747613832, 0.0697482526, -0.0753276050, -0.0248204432, -0.0517894626, -0.0335644931, 0.0403728634, 0.0798155516, 0.0284324810, -0.0494152158, 0.0505002141, 0.0595119298, 0.0673207641, -0.0675902963, 0.0677399933, 0.0638167560, -0.0105312094, 0.0364622623, -0.0603592843, -0.0615458898, 0.0326384231, -0.0296579376, 0.0741085112, 0.0326070711, -0.0323678702, -0.0822723508, -0.0154239237, -0.0797782689, 0.0630533695, 0.0483754128, 0.0327816904, -0.0035957918, 0.0361068398, -0.0397659577, 0.0282606706, 0.0073573887, 0.0593813807, -0.0603691489, 0.0026170090, 0.0112202391, 0.0026142970, 0.0227306113, -0.0158353224, 0.0783230513, -0.0457470007, -0.0104252622, -0.0572622456, -0.0524444915, 0.0326443315, 0.0040073544, 0.0617902726, 0.0142450184, 0.0759751648, 0.0238696039, 0.0556412041, -0.0562467277, -0.0674173906, 0.0601261556, -0.0475690886, 0.0638438910, 0.0409066975, -0.0606150255, -0.0109819993, -0.0480275564, 0.0085173547, 0.0370176658, 0.0701512694, -0.0666545257, 0.0103361234, -0.0248819031, 0.0663403422, -0.0109539703, 0.0252993777, 0.0309660509, -0.0720822662, -0.0567653179, 0.0405693650, -0.0181798339, -0.0378382169, 0.0062818006, -0.0273951963, 0.0353609622, 0.0253600329, 0.0709554404, -0.0313738585, 0.0047630891, 0.0472832024, -0.0475266986, -0.0029178262, -0.0124805421, 0.0504411608, 0.0602951199, 0.0433729887, 0.0067836642, -0.0727070868, -0.0418436863, 0.0711339563, -0.0523639768, 0.0724012107, -0.0694429502, -0.0562355891, 0.0199024156, 0.0590324253, 0.0755742341, 0.0617228448, 0.0373306423, 0.0166333467, 0.0705300122, 0.0723564774, 0.0532501787, 0.0324264020, -0.0499747843, 0.0669796020, 0.0020633116, 0.0167707875, 0.0640324354, -0.0661840588, 0.0065336972, -0.0347230844, 0.0472952425, -0.0127881393, 0.0537851155, -0.0467470810, -0.0312284455, 0.0448631644, 0.0504982322, -0.0789220855, 0.0442286432, -0.0203354470, -0.0349277779, -0.0577947870, 0.0690998137, -0.0530395135, 0.0156567618, 0.0765634477, -0.0358221829, -0.0579485632, 0.0591818988, -0.0691425577, -0.0245269090, 0.0715655982, -0.0415784009, -0.0493124872, 0.0269915536, -0.0781215727, -0.0217510760, 0.0521667302, -0.0645509064, 0.0794333667, -0.0430412516, 0.0758659989, -0.0798442066, -0.0620113090, -0.0666955188, -0.0354516320, -0.0559672564, 0.0619096309, 0.0203585848, 0.0140422508, 0.0122497827, -0.0086553469, 0.0477971733, -0.0731169805, -0.0774860829, 0.0082843006, -0.0080341250, 0.0468293577, -0.0072247833, 0.0207136199, -0.0735230595, 0.0763053000, -0.0398300700, -0.0373893715, 0.0778838396, -0.0110961199, -0.0185330808, 0.0172416493, 0.0465039760, 0.0613844097, 0.0374126658, -0.0605403297, -0.0372659825, 0.0427366346, 0.0670830607, 0.0216084570, -0.0588269420, 0.0225220546, -0.0307972431, -0.0479779579, 0.0456976742, -0.0197326466, -0.0333615281, 0.0315614790, -0.0160689726, 0.0122312009, -0.0612235628, -0.0463575795, 0.0062832758, -0.0600542240, 0.0258040428, 0.0648927391, 0.0002706125, -0.0517007411, 0.0109896213, 0.0323591903, -0.0205993988, 0.0204257220, 0.0637924820, -0.0480431318, -0.0554868504, -0.0160553381, 0.0462975353, -0.0484731384, -0.0353319719, -0.0050576255, 0.0476685762, 0.0607178509, 0.0719960183, -0.0499169938, -0.0793285817, -0.0628782958, -0.0241288207, 0.0816129297, 0.0021263063, -0.0368775949, -0.0484604314, -0.0151337087, 0.0551134348, -0.0349589661, -0.0673501119, -0.0132141784, -0.0522229075, 0.0680578798, -0.0776339546, 0.0592788756, -0.0751946867, -0.0001986772, 0.0557413846, 0.0202715322, -0.0264796950, 0.0119843185, 0.0225178078, 0.0751896352, -0.0043273494, 0.0469174385, 0.0383972749, 0.0511306673, -0.0295371003, -0.0123968646, 0.0398256704, 0.0173184872, 0.0031094551, 0.0136429071, 0.0372358859, -0.0686683208, 0.0066055432, 0.0694944263, -0.0096106380, -0.0430320986, 0.0815758407, -0.0657857955, -0.0466453545, -0.0810983032, -0.0553197339, -0.0729344264, 0.0666531473, 0.0685975105, 0.0791897476, 0.0725070834, -0.0341609269, -0.0680390447, 0.0439468026, 0.0686447322, -0.0698522106, -0.0031671599, -0.0693378821, 0.0030192211, -0.0750361532, -0.0370058380, 0.0403219089, -0.0595828705, 0.0212515369, -0.0821643770, -0.0018888339, 0.0364927873, -0.0326450393, 0.0065852180, -0.0736254379, -0.0397602245, -0.0354999937, 0.0136697590, -0.0023621321, 0.0662787259, -0.0139196217, -0.0656808838, -0.0213970654, -0.0496639833, 0.0781241655, 0.0805589259, -0.0442338660, -0.0639859214, -0.0252776928, 0.0481147319, 0.0270067900, 0.0650479943, 0.0183073953, -0.0370407254, -0.0337122977, -0.0203601159, -0.0099735707, -0.0596439391, -0.0733172894, -0.0042692050, 0.0283320323, -0.0484611169, -0.0361857191, -0.0282148644, -0.0316333696, 0.0097191483, 0.0142652839, -0.0142857954, 0.0808841288, -0.0148360133, -0.0086910948, -0.0634569526, 0.0781875402, -0.0168218315, 0.0322144032, 0.0780295134, 0.0066298991, 0.0328978375, 0.0454209447, -0.0205995739, -0.0592745878, -0.0439159386, 0.0445703566, -0.0690568984, 0.0387288108, -0.0823837817, -0.0745736435, 0.0681188703, -0.0733870566, 0.0799216777, -0.0488476753, -0.0217049383, 0.0086596087, -0.0438670292, -0.0457598679, 0.0261373743, -0.0442301147, 0.0019908547, -0.0369065888, 0.0202081054, -0.0575994626, 0.0613961220, 0.0535569787, 0.0576486439, -0.0436884239, 0.0760473311, 0.0575688928, -0.0194318071, 0.0362608880, -0.0326645449, 0.0364494324, -0.0691493750, -0.0791792572, -0.0051975921, -0.0223015286, -0.0258900560, -0.0423824526, -0.0543214977, 0.0479056686, 0.0628029704, 0.0197116509, 0.0707327574, 0.0646994859, -0.0598014072, -0.0016486868, -0.0047745779, 0.0623720437, 0.0416739956, 0.0800243616, 0.0488322973, 0.0397251844, 0.0226949006, 0.0537178516, -0.0445604175, 0.0140903741, 0.0085427761, -0.0610967912, -0.0807954967, 0.0801993757, 0.0484010875, -0.0290901214, 0.0039951429, 0.0153855383, 0.0113592669, 0.0616347492, 0.0662076622, -0.0309931524, -0.0233583190, 0.0256690010, -0.0070489496, -0.0420779809, 0.0789748877, -0.0564326383, 0.0067752525, -0.0090369731, 0.0205044448, -0.0422762074, -0.0202225633, 0.0012788400, 0.0130471364, -0.0702212304, -0.0453756452, -0.0384339243, 0.0817558020, -0.0412017219, -0.0752454996, 0.0012327433, -0.0548654273, -0.0646484941, -0.0641306043, 0.0511285067, 0.0027701184, 0.0545060933, -0.0082341358, 0.0718258917, -0.0400992669, -0.0496146418, 0.0662323982, 0.0449359566, -0.0512230992, 0.0305608064, -0.0215669312, 0.0706309229, 0.0059433654, -0.0653203279, -0.0539643839, -0.0409932621, -0.0268536434, 0.0636332184, 0.0762183964, -0.0712255165, -0.0341250598, 0.0008999854, -0.0092660561, 0.0468616337, -0.0760612190, -0.0486814231, -0.0190542042, -0.0025374964, -0.0259410478, 0.0134707987, -0.0309998319, -0.0700968355, 0.0129428580, -0.0614132658, -0.0006682873, -0.0413477235, -0.0380938016, -0.0493548959, -0.0534275249, 0.0086173341, 0.0374290720, 0.0418412536, 0.0408826172, -0.0461696796, -0.0086067319, -0.0686466172, 0.0573537350, 0.0804616660, -0.0367978700, 0.0099189281, 0.0047865808, -0.0446145721, -0.0613941327, -0.0200925693, 0.0311517641, -0.0503843799, -0.0052545965, 0.0156246647, 0.0420194641, 0.0488263667, -0.0466113761, -0.0581138134, -0.0071253404, -0.0507709570, -0.0171292573, -0.0058406964, -0.0218122452, -0.0335191749, -0.0745328441, 0.0650866032, 0.0175350010, 0.0633958131, 0.0149440616, 0.0308304206, -0.0176582187, -0.0688213930, -0.0065637305, -0.0755166039, -0.0114435479, -0.0143020004, -0.0269095264, -0.0553658530, -0.0604040511, -0.0303996466, -0.0147588551, 0.0544975847, -0.0363072641, 0.0759493411, 0.0561756641, -0.0370140895, 0.0300487205, 0.0758227110, -0.0561796278, 0.0459338576, 0.0361535475, -0.0606374592, 0.0580896288, 0.0800522566, -0.0610272959, 0.0680874437, 0.0625008345, -0.0144778714, -0.0808520839, -0.0729277283, -0.0074235871, -0.0650153309, -0.0518130548, -0.0246244930, 0.0061763823, -0.0400101319, 0.0542507917, 0.0475797802, 0.0334969983, 0.0349929705, 0.0649971813, 0.0224773437, -0.0019495040, 0.0510040671, 0.0107554868, 0.0060915872, -0.0072086230, -0.0005892813, -0.0635996163, 0.0179929957, 0.0056228489, 0.0139692202, 0.0374075025, -0.0299703069, 0.0365647152, 0.0289768875, 0.0489469022, 0.0084806830, 0.0455359817, -0.0018428713, -0.0772848502, 0.0217682868, 0.0080383047, 0.0469195396, -0.0450738817, 0.0750955790, 0.0449366570, 0.0239909366, 0.0617487282, 0.0640519112, 0.0141436830, -0.0124662593, 0.0770165026, 0.0020355955, -0.0347779840, 0.0607841611, 0.0425286666, 0.0068434924, 0.0469474643, 0.0144778714, -0.0298995934, -0.0667432845, -0.0208326690, -0.0675939322, 0.0412078723, 0.0185744241, -0.0663076043, -0.0587228388, 0.0314153060, 0.0499116480, 0.0758116543, -0.0372539982, 0.0608126819, -0.0372029282, 0.0047603026, -0.0536996052, 0.0705597252, 0.0721902549, -0.0634202659, -0.0270098373, -0.0717460364, -0.0540301055, -0.0481634587, -0.0654625818, -0.0089005977, 0.0820355713, -0.0555912070, -0.0316904709, 0.0771208405, 0.0781789571, -0.0252721719, 0.0109764040, 0.0708893985, -0.0692688823, -0.0284002870, 0.0321156457, -0.0424467027, 0.0157281384, 0.0674877465, 0.0255975425, -0.0579717979, 0.0229586959, -0.0422084220, 0.0090569258, 0.0317367092, 0.0472367406, -0.0600918010, -0.0593238883, -0.0310453251, 0.0454757810, -0.0434815511, 0.0660895258, 0.0652908087, -0.0019513145, -0.0570290163, 0.0416118503, -0.0706563219, -0.0558589101, 0.0303649008, -0.0608184822, -0.0722647235, -0.0065184906, 0.0336989984, -0.0017849430, -0.0370947979, 0.0605671853, 0.0766337067, -0.0561306030, 0.0540285408, -0.0589648709, 0.0347295851, 0.0212275758, -0.0441466160, -0.0782516599, -0.0041983798, -0.0794822797, -0.0464272685, -0.0225008987, -0.0343570933, -0.0247059502, 0.0500103384, -0.0348374806, 0.0111185312, -0.0102771223, -0.0398763679, 0.0032932684, -0.0637412369, 0.0089216754, 0.0140623674, -0.0785026476, 0.0698801577, 0.0719717443, -0.0126923397, -0.0551546402, -0.0058352351, 0.0135084316, 0.0036073849, -0.0005560294, 0.0516899973, 0.0770170838, -0.0618864261, 0.0665724576, -0.0326549411, -0.0437353663, -0.0252368376, 0.0050662681, -0.0401358604, 0.0175816119, -0.0692244694, -0.0078097880, 0.0402169824, -0.0409639552, -0.0254060552, 0.0059987381, 0.0595528036, -0.0595275387, 0.0110068843, 0.0498767346, 0.0653623492, -0.0514839105, 0.0391874537, 0.0188253149, 0.0329365283, 0.0394831076, 0.0343751833, 0.0424430072, -0.0511706173, 0.0410363749, 0.0568993390, -0.0163442940, -0.0305145718, 0.0582998693, -0.0365365669, -0.0748544037, -0.0071028695, 0.0607549548, 0.0223226845, 0.0447589606, 0.0056427270, 0.0632022619, -0.0068376362, -0.0027104616, -0.0000152215, -0.0047500655, -0.0396686904, 0.0732114911, -0.0263422206, 0.0219130293, 0.0425505489, -0.0763547942, -0.0388234071, -0.0820928067, -0.0596008226, -0.0744888857, -0.0661531985, 0.0184156969, 0.0551676452, -0.0388777405, -0.0293336250, -0.0393345766, -0.0320619829, -0.0728115439, -0.0269685686, 0.0579254180, 0.0407354981, 0.0110781640, -0.0162386000, -0.0179552287, -0.0505542271, -0.0580400750, -0.0618251041, -0.0670708045, -0.0111229494, -0.0387065187, -0.0265331604, 0.0702117831, 0.0305135325, 0.0060079917, 0.0739702582, -0.0380350687, 0.0778710693, 0.0769772381, -0.0005433038, -0.0707633346, -0.0725038499, 0.0338184461, 0.0665720254, -0.0721996129, -0.0087946877, 0.0221662149, 0.0409541726, 0.0221889019, -0.0090129077, -0.0510812663, -0.0479985438, -0.0710377172, 0.0301110819, 0.0433987528, -0.0207269751, -0.0669208765, -0.0193903446, -0.0102977082, -0.0536777265, -0.0694525763, -0.0110104978, 0.0523076653, -0.0158860832, -0.0569672994, 0.0347262248, -0.0203419477, -0.0536313318, 0.0035645813, 0.0107487664, 0.0552128404, -0.0742291212, -0.0684041530, -0.0683846846, -0.0315962061, 0.0000688657, -0.0407088026, -0.0813825652, -0.0536920056, 0.0101967081, 0.0227860212, 0.0089644119, -0.0126544908, -0.0790062100, -0.0117436051, 0.0726148486, 0.0195049718, -0.0416105948, 0.0017748252, -0.0388180055, 0.0535261035, 0.0696160495, 0.0589098185, 0.0395144597, 0.0227766931, -0.0680646002, -0.0678241402, 0.0532055646, 0.0185943842, -0.0415748656, -0.0514253974, -0.0807389840, -0.0768575519, 0.0490317196, -0.0740136653, 0.0233952478, 0.0523642302, -0.0127960518, 0.0640196502, 0.0542467237, -0.0737804547, -0.0106396377, -0.0446082465, 0.0741681904, -0.0690395981, -0.0374366902, -0.0191250741, 0.0165822953, 0.0259432122, -0.0370434336, -0.0048619881, 0.0102563798, -0.0476038344, -0.0702560171, -0.0008065477, 0.0319730639, -0.0703997985, -0.0799174532, -0.0239398442, 0.0744086802, -0.0288685784, -0.0305958129, -0.0059194863, -0.0725819841, 0.0712394416, -0.0464631170, 0.0049927831, 0.0666256845, 0.0111110657, 0.0399976745, -0.0071242750, 0.0659757555, 0.0728271455, 0.0495906770, 0.0017484054, -0.0048092678, -0.0080283657, 0.0245211571, -0.0428536087, -0.0262868106, 0.0251081586, 0.0012135133, 0.0778762996, -0.0032010674, -0.0653519556, 0.0163156763, -0.0254137926, 0.0254266039, 0.0134788901, 0.0094400719, 0.0342973620, -0.0142772123, 0.0668251216, 0.0292173848, 0.0670098066, -0.0115823224, 0.0423470363, -0.0169983581, -0.0474507846, 0.0333842561, 0.0758281499, 0.0741285533, -0.0208609924, 0.0742793232, 0.0117432103, 0.0218928531, 0.0379151925, 0.0150697157, -0.0039105415, -0.0592011847, -0.0383347124, -0.0518610030, -0.0507705063, -0.0156652257, -0.0051523224, 0.0527409464, 0.0274822712, -0.0693226606, 0.0281695127, -0.0097315982, 0.0211323276, -0.0349067003, 0.0299652368, 0.0271018595, -0.0811277851, -0.0610140972, -0.0440062918, -0.0446516760, -0.0725157112, -0.0741750598, -0.0610906035, 0.0404474810, -0.0271529108, -0.0266335718, 0.0578743219, -0.0057151467, -0.0755659640, -0.0484121703, 0.0793866068, -0.0688382238, -0.0088520050, 0.0458881855, -0.0101027191, -0.0783598125, 0.0425424576, -0.0134865120, -0.0094402656, -0.0125634074, -0.0230308436, 0.0269852430, -0.0035122186, 0.0368325189, 0.0187192112, -0.0774572939, -0.0780659989, 0.0538084805, -0.0215286687, 0.0208088830, 0.0080500692, 0.0199909434, 0.0305868909, 0.0161441788, -0.0697872192, -0.0133523569, -0.0308578797, 0.0811208189, -0.0377414972, 0.0090786740, 0.0521249175, 0.0747404993, 0.0271395370, -0.0387599058, -0.0458156504, 0.0172503665, 0.0295201093, -0.0521600917, 0.0501127541, -0.0519880652, 0.0062494949, -0.0710771978, 0.0479710698, 0.0174621493, 0.0459594131, 0.0674598366, 0.0163699836, 0.0542632341, 0.0155844167, 0.0671965480, 0.0002761483, 0.0694720149, 0.0254216865, 0.0174131021, 0.0177785233, -0.0172219425, -0.0179268643, 0.0733101964, -0.0707457140, -0.0336320996, 0.0394128487, 0.0707989335, 0.0383276194, 0.0483676344, 0.0699023604, 0.0400446430, -0.0797021538, 0.0297380984, -0.0442610905, 0.0048695132, -0.0181441084, -0.0738805681, 0.0534564406, -0.0690698475, 0.0673194677, 0.0663256347, -0.0394692235, -0.0324648060, 0.0480928868, -0.0434548184, -0.0038340166, -0.0211047307, -0.0116813034, 0.0509373099, 0.0535549074, -0.0526486337, -0.0592324361, -0.0060786232, 0.0411230177, -0.0053548291, -0.0795367509, 0.0076964945, 0.0012342781, -0.0063521191, -0.0290688500, -0.0649183542, -0.0585822389, 0.0820103437, -0.0084460750, 0.0571747869, 0.0156825706, -0.0329143927, -0.0241397619, -0.0258858725, -0.0821727291, -0.0467237271, 0.0663520545, -0.0247866400, 0.0454255342, -0.0700050518, 0.0579069555, 0.0589212179, 0.0644634068, -0.0813345388, -0.0593095720, -0.0416207314, -0.0204340890, -0.0578529239, -0.0135944113, 0.0594495237, -0.0401221104, -0.0434837304, 0.0553945750, -0.0173338056, -0.0191553086, -0.0333579741, -0.0323703848, 0.0727295130, 0.0419741496, 0.0230092555, -0.0122940019, 0.0619247556, 0.0367735326, -0.0672547296, 0.0060765222, 0.0733134747, -0.0774701759, 0.0578383505, -0.0017204210, 0.0347380117, 0.0554032177, 0.0418213382, 0.0776960850, -0.0347695984, -0.0559977591, 0.0272849277, 0.0789695084, -0.0668856949, 0.0610852838, 0.0182531178, 0.0530937612, 0.0624670833, 0.0651587397, -0.0330796055, 0.0181691274, 0.0223621875, -0.0158916563, 0.0551705062, -0.0782149881, -0.0181668699, -0.0525307804, 0.0731022805, -0.0074314997, 0.0437848270, -0.0238177888, -0.0478438810, 0.0201205835, 0.0406223163, -0.0187605768, -0.0153762847, -0.0563378483, -0.0281811804, 0.0112810507, 0.0626298785, 0.0629390478, 0.0140945017, 0.0157657936, -0.0540076755, 0.0669669509, -0.0632789209, -0.0134832114, -0.0077221245, 0.0767503530, 0.0022635087, 0.0748792589, 0.0007142872, -0.0313785337, 0.0681887567, -0.0711414665, 0.0211984068, -0.0007163510, 0.0689749271, 0.0031826422, -0.0123149380, -0.0233136900, -0.0540569946, 0.0073977932, -0.0753716230, 0.0103647411, 0.0811477602, 0.0104693994, 0.0496793836, -0.0606497973, 0.0282103866, -0.0417650603, -0.0565143675, -0.0337999798, 0.0420891792, 0.0177164972, -0.0340130404, 0.0452597439, -0.0277573802, -0.0474208668, 0.0337166786, -0.0285261534, 0.0619275719, -0.0212689787, -0.0493481979, 0.0065586790, 0.0721758604, 0.0200591609, 0.0668706298, 0.0374653712, 0.0542106330, 0.0745457709, -0.0305760317, -0.0110805631, -0.0402717628, -0.0662037954, -0.0465139300, 0.0630883723, 0.0376047119, 0.0404072553, -0.0460365079, -0.0188724175, -0.0551595688, 0.0319620073, -0.0806953982, 0.0024292246, -0.0285027996, 0.0450731963, 0.0769952238, -0.0027404949, -0.0608707666, 0.0647323281, 0.0280210748, 0.0554907918, -0.0592762753, 0.0636260808, 0.0157096758, -0.0775393769, 0.0512969047, 0.0153558031, 0.0078339651, 0.0238485709, -0.0262524374, -0.0345007740, 0.0080500096, -0.0223960690, 0.0148691237, 0.0085715875, 0.0284389257, 0.0486554354, -0.0185552165, 0.0602050424, -0.0066425502, -0.0539400652, -0.0292300731, -0.0402524956, -0.0209076442, 0.0578824133, 0.0743259341, 0.0258469433, 0.0639609694, -0.0146628842, 0.0477494150, 0.0784071982, 0.0412761867, -0.0590650663, -0.0653799027, -0.0282963403, 0.0601504743, 0.0025501400, -0.0746246502, 0.0013232157, 0.0568169653, -0.0229192376, 0.0497524142, -0.0559335724, -0.0223986395, -0.0775258988, 0.0495031923, -0.0500848182, 0.0168198124, 0.0629386157, 0.0506316423, -0.0048911199, 0.0593512505, 0.0074014440, 0.0243552551, 0.0331740603, -0.0183540806, 0.0343879536, 0.0165530145, 0.0274259970, 0.0198381692, -0.0260488652, 0.0580039471, -0.0718059018, -0.0078889057, 0.0523776114, 0.0759972334, -0.0325966030, -0.0149575770, 0.0492467582, 0.0502669215, 0.0606562495, 0.0709694922, 0.0319151580, 0.0201142579, 0.0036096200, -0.0053992644, 0.0643112361, 0.0799858272, -0.0098886937, 0.0359343812, -0.0654053390, 0.0021764114, 0.0343765393, 0.0065486804, -0.0737690628, -0.0298303962, 0.0132508874, -0.0782260299, -0.0299297459, 0.0503277332, -0.0295376666, 0.0160377547, -0.0310977660, -0.0806193277, 0.0300961360, -0.0750292838, 0.0112653002, 0.0789862126, -0.0343826860, -0.0812913850, 0.0153317600, -0.0597543083, 0.0319257826, -0.0507443845, -0.0217194520, -0.0024082512, -0.0750969648, -0.0559967384, -0.0448027030, -0.0139558241, -0.0589240119, -0.0077707022, -0.0283440314, -0.0568609983, 0.0148282349, -0.0145110711, -0.0232841112, 0.0355533957, -0.0591940358, 0.0474994183, -0.0724406987, -0.0387161411, 0.0471851081, 0.0646192431, -0.0370235555, -0.0485604890, -0.0352703743, 0.0608912706, 0.0215061605, -0.0586850494, 0.0272705480, -0.0552670136, -0.0441930108, 0.0142856538, 0.0464819372, -0.0439667702, 0.0237170011, -0.0365656987, 0.0179230124, 0.0013302490, -0.0233027898, -0.0769117326, -0.0758114308, -0.0394536071, -0.0358827785, 0.0266113952, 0.0377414003, -0.0487821698, -0.0720826834, 0.0457030982, -0.0079161897, -0.0098366439, -0.0064954683, -0.0185955241, -0.0406234376, 0.0003180057, 0.0755890459, -0.0705549717, -0.0137083754, 0.0618868768, 0.0712831914, -0.0731839612, -0.0349018872, -0.0320105217, 0.0706042796, 0.0584272891, 0.0203296915, -0.0282227211, 0.0343204960, -0.0238027014, -0.0198278725, 0.0737646818, 0.0511665493, 0.0302542970, -0.0709520355, -0.0017853975, 0.0002351776, 0.0790140182, 0.0052081421, 0.0159714073, 0.0249118209, 0.0747007728, 0.0478620380, -0.0487760603, -0.0776099712, 0.0234813392, 0.0491574854, 0.0128302276, 0.0289352983, 0.0424157456, 0.0734268874, -0.0198249072, -0.0307213441, 0.0032091588, -0.0662640408, 0.0675252378, -0.0124264434, 0.0005158633, 0.0077154264, -0.0521550849, -0.0815552995, 0.0371743292, 0.0496840626, -0.0097799972, -0.0414393917, -0.0052590147, -0.0395968594, -0.0522079617, 0.0776100308, 0.0195699707, 0.0109646395, 0.0472289473, -0.0223133564, 0.0158411190, 0.0438155234, 0.0703678727, 0.0066992790, 0.0428005159, 0.0575657785, 0.0040283352, -0.0387178510, 0.0164697319, -0.0395590886, -0.0484169424, 0.0645015836, 0.0266947597, 0.0045460239, 0.0484497994, -0.0024961308, 0.0413632393, 0.0617987067, -0.0498532578, 0.0712562203, -0.0091157407, -0.0482959673, 0.0619981289, -0.0814803839, -0.0566483289, 0.0419173837, 0.0164719895, 0.0138338506, -0.0582868829, -0.0165792704, 0.0280313268, 0.0657407343, 0.0341037065, 0.0412028059, -0.0023076981, -0.0207304098, -0.0188877583, -0.0091324896, 0.0335688889, -0.0030535311, -0.0657258034, 0.0442049354, 0.0432252735, 0.0433748364, -0.0707061738, -0.0544994548, 0.0484282970, -0.0264046825, 0.0622962862, -0.0338487327, 0.0063606501, -0.0273836479, -0.0327153802, -0.0710161477, 0.0463665724, 0.0059469864, -0.0649163723, 0.0005197898, 0.0611685812, -0.0098319724, -0.0192959458, -0.0253803805, -0.0465900041, -0.0173514038, -0.0461603515, -0.0619964227, -0.0391793065, -0.0351383612, 0.0318659544, 0.0642075837, -0.0762514770, 0.0645739287, -0.0072915703, 0.0325692594, 0.0478344709, -0.0315980949, -0.0810875148, -0.0476818942, 0.0640787631, -0.0817669779, 0.0177985579, -0.0815826803, 0.0110992268, 0.0589082837, -0.0060439780, -0.0776629597, -0.0274148993, 0.0077115744, -0.0603934824, -0.0569420382, -0.0541902483, 0.0496075749, -0.0257387720, -0.0647794455, 0.0685009509, -0.0119897574, -0.0012219176, 0.0674338639, -0.0244892351, 0.0783846378, -0.0145741180, 0.0448325127, -0.0401118770, -0.0092860758, 0.0471246690, -0.0541629270, 0.0453784317, 0.0551229715, -0.0261782296, 0.0807175040, 0.0548636466, 0.0739257187, 0.0287255421, 0.0657893121, -0.0196632743, 0.0281704143, -0.0208056793, -0.0245261826, 0.0289857984, 0.0816239715, 0.0121083185, -0.0368799530, -0.0364401452, 0.0430439860, 0.0387609452, 0.0304064006, 0.0412015840, 0.0721991807, -0.0089145601, -0.0069975257, 0.0021204501, 0.0611467659, 0.0559445173, -0.0249555223, -0.0645593554, 0.0022713616, 0.0404987261, -0.0688826963, -0.0244265199, -0.0105286762, -0.0190343112, -0.0141049847, 0.0522840172, -0.0213463120, -0.0156515539, -0.0131223276, -0.0183045045, 0.0314989388, 0.0552490652, 0.0728317797, 0.0482674092, -0.0373618528, 0.0615398735, -0.0346308649, 0.0643365085, -0.0603940152, 0.0023525804, -0.0743597001, -0.0176394954, -0.0093711615, 0.0507785231, -0.0810686424, -0.0698787495, -0.0074616075, -0.0755905211, -0.0682158992, -0.0066316500, 0.0329736173, -0.0090971366, 0.0166675225, 0.0158387050, 0.0715253502, 0.0096144751, 0.0122751445, 0.0054711103, -0.0742738992, -0.0421434082, -0.0064769089, 0.0818372965, 0.0512538254, -0.0504823960, -0.0503107235, -0.0263407454, 0.0049933568, -0.0688672587, -0.0449179634, 0.0353682488, -0.0203591138, 0.0424350947, -0.0633923560, 0.0742323846, -0.0404985137, 0.0756512582, 0.0442566276, 0.0607625395, 0.0710621923, -0.0383199602, -0.0054277256, -0.0074581504, -0.0635105595, 0.0073761120, 0.0620557070, -0.0464723073, 0.0576925427, 0.0526435971, 0.0278625637, -0.0696981400, -0.0573616773, -0.0070771351, -0.0185184982, 0.0347792394, 0.0549374707, -0.0110957911, 0.0844623968, 0.0269419011, -0.0343917906, -0.0599565320, 0.0358520746, -0.0406848788, -0.0315013789, 0.0432123691, -0.0299191456, -0.0742199048, -0.0731293112, 0.0841260776, 0.0792157799, -0.0719337240, 0.0390128940, -0.0517111681, -0.0736774802, 0.0809663683, 0.0412119776, -0.0464269444, 0.0023411314, -0.0184991825, 0.0259095225, 0.0694753826, -0.0324446596, -0.0198198780, -0.0066753929, -0.0638496503, 0.0434141308, 0.0161972493, -0.0406265520, -0.0342415571, -0.0719433352, -0.0148832723, 0.0749480873, -0.0119508132, -0.0125309397, -0.0413941555, -0.0294764359, 0.0596326813, 0.0726953149, -0.0046029803, -0.0387110859, -0.0725688487, 0.0029272735, -0.0103358459, -0.0239683483, -0.0263041686, 0.0827085227, 0.0489626974, -0.0776290819, -0.0154510066, -0.0209640339, -0.0565871075, -0.0304671451, -0.0078574121, -0.0498827621, -0.0020333976, 0.0711665973, -0.0088943830, -0.0253557153, 0.0311655216, 0.0524438769, -0.0410210155, -0.0490110591, -0.0591600873, -0.0611169487, -0.0666733012, -0.0286586098, -0.0282905325, 0.0205161944, 0.0705896169, -0.0301439054, -0.0330404527, 0.0015235987, -0.0311573818, 0.0432406329, 0.0569413491, 0.0315768570, -0.0260192342, 0.0636322051, -0.0106939850, -0.0827412233, -0.0077777910, -0.0589683652, -0.0306981448, 0.0295387879, -0.0461194664, 0.0244598184, -0.0518833064, -0.0361413732, -0.0557861738, -0.0289017148, 0.0462682955, 0.0762928277, -0.0822908729, -0.0771885961, -0.0500328727, 0.0024990214, 0.0658946335, -0.0154040828, 0.0865943357, 0.0344273634, 0.1075041294, 0.0886874497, 0.0183702856, 0.0349283926, -0.0625825301, -0.0089986995, 0.0532899946, -0.0403561667, -0.0604362488, 0.0296503752, 0.0037368990, -0.0395581573, -0.0467100851, 0.0574835613, -0.0721754879, 0.0657456666, -0.0367763042, 0.0042707329, 0.0115506137, 0.0865033641, -0.0168845505, 0.0369791016, 0.0229383260, -0.0143800238, 0.0502469055, 0.0501895174, 0.0255982392, 0.0820034370, 0.0108708031, 0.0358119756, -0.0775532201, 0.0617522188, -0.0560553335, 0.0220599864, 0.0263646673, -0.0433738939, 0.0143379355, -0.0097688753, -0.0823926553, -0.0776825547, -0.0553722978, 0.0867657363, 0.0754525065, -0.0362850204, -0.0694892332, -0.0375327244, -0.0480879173, -0.0785468295, -0.0895862430, -0.0485338531, 0.0719236135, 0.0053344872, -0.0067251096, 0.0857499912, 0.0335309431, -0.0832140893, 0.0313808955, -0.0423565395, -0.0026521664, -0.0156603754, 0.0104456693, -0.0137126148, 0.0765926763, -0.0181998704, -0.0288007930, 0.0332679898, -0.0689943731, 0.0664118081, 0.0623147078, -0.0198056996, 0.0175914913, -0.0500270799, -0.0532046035, 0.0398739092, -0.0524134971, 0.0462510586, -0.0599676035, -0.0717767924, -0.0592902452, 0.0197349917, -0.0825489312, 0.0672637820, -0.0794047788, -0.0755822659, -0.0481121652, -0.0369443931, -0.0670126453, 0.0046016723, -0.0255479999, -0.0312829167, -0.0275858697, -0.0666366741, -0.1143117473, 0.1134635359, 0.0599075146, 0.0170879327, -0.0213468857, 0.0768263489, 0.0825475007, 0.0536116846, 0.2037308067, 0.1238924414, -0.0197049752, 0.0584454313, -0.0169047639, 0.0573298261, -0.0343863182, 0.0605365932, 0.0634578392, -0.1020934358, -0.1090274528, -0.0789009556, -0.0764620006, -0.0281415377, 0.0047024544, -0.0432202257, -0.1446401626, 0.0595607087, 0.1893080920, -0.0432906933, 0.0475544035, -0.0592105053, 0.0525173098, -0.0031608888, 0.0788003355, 0.1261064410, 0.0467130542, 0.0608814135, -0.0277517177, 0.0397590250, -0.0247334205, -0.0290701278, -0.0395779237, 0.0485199913, 0.1084216386, 0.0432133339, 0.0481705554, 0.0993063375, -0.0614765584, 0.0886057466, -0.1762160361, 0.1602776945, 0.1745161265, 0.1086008474, -0.0947628394, -0.1817264408, -0.0306095406, -0.1060475335, -0.0408933163, -0.1388993561, 0.0744261444, -0.1280734241, 0.0693447962, 0.0870099515, -0.0440543368, -0.0501352139, -0.0695801899, 0.0251655523, 0.0922731161, 0.0343923122, -0.0300411768, -0.0149970204, 0.1061810404, 0.0813849717, -0.0006550699, -0.1501114964, 0.0426817425, -0.0449456722, -0.0944009051, 0.0286803097, 0.1499166042, -0.0755567327, 0.0068846047, -0.0961492732, -0.0527666323, 0.0396301895, 0.1217861846, 0.0104301721, 0.1194821745, 0.0786573291, -0.0449490547, -0.0441529788, -0.1461153626, -0.0535050109, -0.1003010496, 0.0916474387, -0.2044408917, -0.0259649716, 0.0434556492, 0.0416001640, 0.1139841005, -0.1119210050, -0.1676962674, 0.0362935774, 0.0172091983, -0.0064903856, 0.0832026824, -0.0961878672, 0.1044455916, -0.0493876375, 0.0755323023, 0.0698135942, 0.0030210277, 0.0178957880, 0.0771113783, -0.0382506140, -0.0226568058, 0.0459163189, -0.0392388813, 0.0355544649, -0.1214371100, -0.1577292234, 0.0121929105, -0.0557935610, -0.0162582938, -0.0359659605, -0.0030072869, 0.1583621949, 0.0248065256, 0.1249241680, 0.0948260576, -0.0923690870, -0.0084257247, 0.0176219232, 0.1490593106, 0.0075381873, 0.1620449722, 0.1180042848, -0.0783437192, 0.0644893572, -0.0528946631, -0.0529773273, 0.0656097680, 0.0726396441, 0.1545113772, 0.0819778815, -0.0225344561, 0.0203437246, -0.0324082822, 0.0189342611, -0.1087010577, 0.0912605077, 0.1526564658, 0.0529370420, -0.1189253479, -0.0602010153, -0.0075105429, -0.0285576936, -0.1130799651, -0.1323243678, -0.0579805672, -0.0429385751, 0.1583517641, -0.0145885786, -0.0289924759, -0.0075320248, 0.0399564020, 0.0476043411, 0.1821000427, -0.0712758973, -0.0432112589, -0.0349027142, 0.0345396921, -0.0544762649, -0.0657545626, -0.0888668895, 0.0599641725, -0.0779506937, -0.1624959111, -0.0609623604, 0.1914062351, 0.0878897831, -0.0337631106, 0.0500018001, -0.0232038219, -0.0558685362, 0.0319130309, 0.0735845566, 0.0872052461, -0.0606396869, 0.0074070850, -0.0337394811, -0.1770063341, 0.0478946716, -0.1304105967, 0.0235364903, -0.0938499048, -0.0756005272, 0.0079858573, -0.1007145941, -0.0035214734, -0.0467812344, -0.0983627439, 0.0515750945, 0.0650477111, -0.1418473423, 0.0531147942, -0.0477723107, 0.1166195571, -0.0167471357, 0.0296872389, 0.0729254484, -0.0191114172, -0.0430995710, 0.0933799148, 0.0592995696, 0.0846011117, -0.0366088897, 0.0709962770, 0.0095147602, -0.0354756974, -0.1076491103, 0.1162412539, -0.0654063597, -0.0294634625, -0.1236390918, -0.0846012682, 0.0685555562, -0.0167256761, -0.0432473458, 0.0357955433, -0.0458721370, 0.0481652729, -0.0197661780, 0.1097859144, -0.0072203251, 0.0867690444, -0.0264592450, -0.0300718825, 0.0299335774, 0.1044754162, -0.0033188292, 0.0270690303, 0.0491878353, 0.0189181510, 0.0707382038, 0.0206542686, 0.0797542557, -0.0453527905, 0.1874352843, -0.0803470463, -0.0232398845, 0.0800189078, 0.0037654594, 0.0722274184, -0.1001383811, -0.0216349550, -0.1059655920, 0.0289941002, -0.0364673324, 0.0288846307, -0.0218886416, 0.0130691575, 0.0850021690, 0.0436601117, -0.0305209495, -0.0365284160, -0.0037350864, 0.0131030446, 0.0116734654, -0.0140499957, 0.0738667846, 0.0298636518, -0.1172261238, 0.0013727695, 0.0297530573, 0.0540352091, -0.0142121222, -0.0240503903, -0.0144146457, 0.0416859947, -0.0420816019, -0.0697081313, 0.0537930392, 0.0542522259, 0.0011716336, -0.0219640844, -0.0007575824, 0.1021988541, -0.0068612401, -0.1103632003, 0.0509475358, -0.0443199351, 0.0721788630, -0.0033257795, 0.0660120249, -0.1320181191, 0.0413023606, 0.1027715504, -0.0511912890, 0.0668458417, -0.1072151288, -0.0563419759, 0.1505449116, 0.1842794120, -0.1858589798, -0.0393489562, -0.0987044424, 0.1989742815, -0.0023007318, 0.1673754305, 0.0907005370, 0.0123599237, 0.0730835050, 0.0494623631, 0.1245533302, -0.0560349412, -0.0826530159, 0.0348523669, 0.0543897152, -0.0006288078, -0.1262250692, 0.2155204862, -0.0169209074, -0.0911219195, 0.0003430199, 0.0002790593, 0.1395512968, 0.0695423856, 0.0945344865, 0.0807235539, -0.0415492840, 0.0188306868, 0.0159107056, 0.0955505297, 0.1141417772, 0.1366332620, -0.0473689586, -0.0367677920, 0.0268337019, -0.0570943877, 0.0165306907, -0.0284074936, 0.1890051961, 0.1254937053, 0.0038358513, 0.0963744074, -0.0905977711, 0.0242667664, 0.2025433779, -0.0792295337, -0.0808557421, 0.0144364880, 0.1040189862, -0.0063997335, -0.0597342327, 0.0642543435, -0.0836428106, -0.0058183987, 0.1211940870, 0.0313730128, 0.0088250889, 0.1902690679, 0.0905387774, -0.0616736114, -0.0277483258, -0.1116042510, 0.0000985973, 0.0279033557, 0.0200906694, -0.0116879176, -0.0073637515, 0.1502020806, -0.0211725086, -0.0030302554, -0.1150727496, -0.0036460275, -0.1307630390, -0.0793697983, -0.0336282998, 0.1135068089, 0.0237211101, -0.0736971051, 0.0439938381, -0.0157078803, -0.0649696440, 0.0015930514, 0.0550664142, 0.0452560596, -0.0375761017, -0.0806078315, 0.0593576394, -0.1668918133, 0.0657795221, 0.0332049876, 0.0213701203, -0.0656906068, -0.0874605924, 0.0181891825, 0.0002410220, 0.0310363509, -0.1265402585, -0.1267360449, 0.0522093736, 0.1372930557, -0.0270147957, 0.0079199011, -0.0331308022, 0.2158353180, -0.1031205282, 0.0644214898, 0.0197053961, -0.0736667439, 0.0483175404, 0.0942865908, 0.0455750003, -0.0311420839, -0.0935031027, 0.0141935097, -0.0217557102, 0.0084035601, -0.0995042250, 0.0816799253, 0.0427661501, -0.0827806070, 0.0352457054, 0.1388034821, -0.0086527793, 0.0538945049, 0.1230603382, -0.0173687749, -0.1048947126, -0.1084511653, 0.0434016176, 0.0405433662, -0.0275168754, 0.0770925656, -0.0187787991, -0.1289812475, -0.0237161499, 0.0148710739, -0.0702909976, -0.0190693289, 0.2282844633, -0.0053595393, 0.1246847659, -0.0530155599, -0.0003401692, -0.0455675200, 0.0930921361, -0.1100871861, 0.0275228657, 0.0892541632, 0.0789585635, 0.0968516842, -0.1202752963, -0.0817764103, 0.0067838305, -0.0313137174, 0.0633927882, -0.0729614869, 0.0031495262, 0.1690743864, -0.0225343499, 0.0002521567, -0.0652243048, -0.0591755249, -0.0662925616, -0.0246131122, -0.0379375853, 0.0298131853, -0.0734909028, 0.1416955292, 0.0481738336, -0.0425932780, 0.0358889401, 0.1281710118, -0.0745004788, -0.0731726512, -0.0495629087, 0.1000901088, 0.0806615800, -0.0552157648, -0.0555272922, 0.0017923581, -0.0250043906, -0.0486715958, -0.0699077472, 0.0669352263, -0.0463592336, -0.0129597578, 0.0523020513, -0.0959172696, -0.0580388308, -0.1010987535, 0.1013205275, -0.2030761093, -0.1843499243, -0.1244289055, 0.0438599102, 0.0861108303, -0.0355816111, -0.1236487031, -0.0188207217, -0.0431329161, -0.1040173173, 0.0784004033, -0.0026908889, -0.0094104903, -0.0634583756, 0.0465001389, -0.0546622388, 0.0472821556, 0.0997260585, -0.0869599581, -0.0012352121, 0.0467400961, 0.0376181081, -0.0074271876, -0.1729672551, -0.1061911881, -0.0651135147, 0.0955690667, 0.0639452115, -0.0110921543, 0.0108070616, -0.0148359612, 0.0624175109, 0.0035649715, 0.1298396736, -0.0945287347, -0.0236795675, 0.0330572948, -0.0363880396, 0.1315949857, 0.0177239198, 0.0964391232, -0.0792166516, -0.0199868586, -0.0334093273, 0.0235163569, -0.0151501456, 0.0893407464, 0.0606632270, 0.0287084356, 0.0234479103, 0.0623594373, 0.1326493770, -0.0473550037, -0.0381052494, 0.0372950584, 0.0828791261, 0.0061232327, 0.1112307459, 0.0225302186, -0.0533482432, -0.0803849548, -0.0184804127, 0.0352995656, 0.0446829610, 0.0094250888, -0.0196472872, 0.0274772178, -0.0112002296, 0.0701394379, -0.0137001984, -0.0093315719, -0.0170929581, -0.0269685779, -0.1832362562, 0.0046895524, -0.0448117182, -0.0044649383, 0.0285872221, -0.0120404679, -0.0184986871, 0.1576304734, 0.0021681245, 0.0548543632, -0.1231357008, 0.0353847519, -0.0380101502, -0.0164671503, -0.1018596068, 0.0727649108, -0.0039877146, 0.0805451870, -0.0857245475, 0.0504184552, -0.0902129859, 0.0434677340, 0.0388809592, 0.0097018583, -0.1193849891, 0.0613185503, -0.0086496901, 0.0703642666, -0.0517226495, 0.0600633211, 0.0873121768, 0.0589274280, -0.1076078936, -0.0068811351, 0.1043888777, 0.0260655470, -0.1076110899, 0.0310210232, -0.0163978636, 0.0205349289, -0.1192347929, 0.1340292692, 0.0129425162, 0.0266576018, 0.1372353286, -0.1122276634, 0.1952614933, 0.0776426047, -0.0585496724, 0.0764726847, -0.0231737327, 0.0017756871, -0.2322577387, 0.1508748829, -0.0366346985, -0.0363036767, -0.0400699154, -0.0208553430, -0.0580137819, 0.0765702128, 0.0508124195, 0.0756741986, -0.1124229655, -0.0854415521, -0.0979418159, 0.1822199374, 0.0312827118, 0.0831800997, 0.0431583561, -0.2084619552, 0.0172246415, -0.0750658736, -0.0572943538, 0.0090383897, 0.0384099036, 0.0528255031, 0.1605650634, -0.0955987647, 0.2000823170, -0.0722120777, 0.1597894430, -0.1144198403, 0.1531117111, 0.1263626814, 0.0528894886, 0.2064644098, -0.0926975757, 0.0388377681, 0.0103343427, -0.0790809318, 0.0827138051, -0.0940471068, -0.0257286280, 0.1974520087, -0.1383767873, -0.0488379896, -0.0163802244, 0.0654864758, -0.1805358678, 0.3138584197, -0.1776795387, 0.0402682200, -0.0601166859, 0.0362262949, 0.0519770607, 0.0614438504, 0.0256671868, 0.1668282002, -0.1806341112, -0.1088679135, -0.0765619949, 0.1851286590, -0.0241493043, 0.0946959779, 0.0118937176, -0.0473416001, 0.0268359035, -0.0372421034, 0.0328127556, 0.1005493551, -0.0978593454, -0.0456579663, -0.0895470381, 0.0270568803, -0.0137335081, -0.0339883603, 0.0992638767, -0.0222418383, -0.2160341740, -0.0768403560, 0.0062803412, 0.0335091874, -0.0428019427, -0.0456785150, -0.0411394723, -0.0134054041, 0.0083699953, -0.0368878096, 0.0746243447, 0.1057353690, 0.0648928061, 0.0089297593, -0.0064012436, 0.0081108585, 0.2736240923, -0.1097843647, 0.0326073878, -0.0187035389, 0.0087271119, 0.0716456398, -0.0571375825, -0.0210655220, -0.1549058408, 0.1348437518, 0.0282815900, -0.0276529435, -0.0421754345, -0.0173324980, 0.0553641729, 0.1175888032, 0.1831803024, 0.0393574312, -0.0538921691, 0.0686618760, -0.0469053946, 0.0951814279, -0.0840203911, 0.1530086696, -0.0106018083, 0.0214767400, 0.0325513147, -0.0519888178, 0.0334410816, 0.0794619992, -0.0568394996, 0.0752069429, 0.2421229035, -0.1272628307, 0.0831823573, -0.0285618044, 0.0773773491, 0.0692049414, 0.1369193941, 0.0029382354, 0.1322385967, 0.1914999783, -0.2249172330, -0.0634344667, -0.0630141869, -0.0074412660, 0.0957823992, -0.0775707513, -0.0215258151, 0.2040132582, -0.0757305250, -0.0055002207, -0.0931238905, 0.1277887970, -0.0510371663, 0.1925536245, -0.1197878718, 0.0370086543, 0.0052712336, 0.0810300559, 0.0806932971, 0.0136368349, -0.0795751289, 0.2001199722, -0.2958916128, 0.0585521497, -0.0506673828, 0.0916187242, -0.0261569377, 0.1395976841, -0.0409095585, 0.0471191891, -0.1104081944, 0.0689286664, -0.1060969681, 0.1302905828, 0.1013396680, -0.1369321942, 0.0394037329, 0.0408139639, -0.0197114535, -0.0316177048, -0.0065748254, 0.0234185923, -0.1158730164, 0.0361868106, -0.0447803587, -0.0343192630, 0.0870041400, -0.1571153253, 0.0033479095, -0.0462814681, -0.0639618412, 0.0363235846, 0.1228333116, -0.1401669383, 0.0682606399, 0.0214009508, -0.0727965757, 0.0269702245, 0.3449139893, -0.0623077750, -0.0633584112, -0.0050956868, -0.0183922593, 0.0655283406, 0.1231906191, 0.1471206099, 0.0717743710, 0.1087221652, -0.0908320993, 0.0637967363, -0.0247147027, -0.0220542103, -0.0101689408, -0.0503271669, 0.0785371810, -0.1391628236, 0.0965158939, 0.0071150172, -0.0634773746, -0.0241869316, -0.0280800629, -0.0842660442, -0.0632961839, -0.0464727804, -0.0759558007, -0.0180483740, 0.0467085950, -0.0724850222, 0.0230799653, -0.0533259772, 0.0641096458, -0.0681618080, 0.0936998725, 0.0355487056, -0.2232858986, -0.0338886604, -0.0609636270, -0.1022423282, 0.0206105001, -0.0571956150, -0.2055787295, 0.0382734090, -0.0064001945, -0.1445334405, -0.0293882675, -0.0730451792, 0.0170142259, 0.2060537040, -0.0420392416, 0.0936191082, 0.1206545457, 0.0314724557, 0.0080547528, 0.0297017284, 0.0482133329, -0.0909639001, -0.0148141906, -0.1256099790, -0.0154896807, -0.1006521434, -0.0712620094, 0.2544967830, -0.2883450985, -0.0460583977, -0.1199840903, 0.0350938253, 0.0775496438, -0.0497961864, 0.0663009882, 0.0860381946, 0.1077160239, 0.0222247820, 0.1327423602, 0.0555859990, 0.0431551002, 0.0521232560, 0.1311748922, 0.1398206204, -0.0775704682, -0.0465808623, -0.0579481721, 0.1143709868, -0.0547724366, 0.0752456263, 0.0527525246, -0.0733859390, 0.0582915694, -0.0842784643, -0.1218063831, 0.0179587789, -0.0204046275, 0.0739590526, 0.0336396173, -0.0805740133, 0.0358585492, 0.1733936369, -0.0054716705, 0.0063649151, 0.2240536958, -0.0743047148, 0.0717552155, -0.0488128215, 0.1155517027, 0.0358126834, 0.1351652443, 0.1961879879, -0.1494933218, -0.0599765293, -0.0997661278, 0.0734372884, -0.0117982104, -0.1082819477, -0.1021422073, 0.1331479698, 0.0622196794, 0.1524774879, 0.0703876615, -0.0453491770, -0.0613149628, 0.2020825893, 0.0906879082, -0.0558010899, -0.0527521558, 0.1253236383, 0.0694441795, -0.0200514626, -0.1214656755, 0.0246034171, 0.0495901406, -0.0471451059, 0.1923401952, -0.2237069160, 0.0904885828, 0.0252128690, -0.1306330562, -0.1057537720, 0.0931553096, 0.0593949929, 0.0196359977, -0.0108237201, -0.1627635211, -0.0086362362, -0.0525681004, -0.1535233855, -0.0902504995, -0.0472730100, -0.1229430065, 0.3566538393, 0.0605157465, -0.0669702217, 0.0601056963, -0.1104942262, -0.0137110548, 0.2677376866, 0.0817800015, -0.0371801779, 0.0551538244, -0.1295221299, -0.0247934144, -0.0150499083, -0.0959175229, 0.1137331873, -0.1330019087, -0.1720596999, -0.1418183297, 0.2284650207, -0.0031805115, 0.1384007931, 0.0268820208, 0.1597640663, 0.1372063607, 0.0515516065, 0.1843557805, 0.0710138530, 0.0493229628, -0.0850634202, 0.0595295466, -0.1768005490, -0.0504241288, -0.0586424805, 0.0051915352, -0.1064936668, -0.1771490127, 0.0515518226, -0.0545469671, 0.0659350827, -0.1754443198, -0.0298190322, 0.0160711240, -0.1057085395, -0.1406643838, -0.0761139616, -0.0000230418, -0.1485125721, 0.0780424550, 0.1945722103, 0.0785005763, -0.0130992578, 0.1944613010, -0.0201043487, 0.0889549404, -0.0075511918, -0.0040059877, 0.0080789272, 0.0459525362, 0.0332857706, -0.1353373826, -0.0496821143, 0.1585941464, 0.0363673270, 0.0345481411, 0.0123719322, 0.1038736477, 0.2009414732, -0.0058953660, 0.1198043451, 0.1556328982, -0.1386939436, -0.0584708229, 0.1921182871, -0.0115695093, -0.1744292825, -0.2287557423, 0.0335406512, -0.0411366895, -0.0013686822, -0.1551889330, -0.0158694796, -0.0739677399, -0.1083141640, 0.0265466608, -0.0605464205, 0.0786026642, -0.1274161339, -0.0762749538, -0.1386573017, 0.1335147321, 0.1818257868, 0.0651597455, 0.0052528414, -0.0906010345, -0.0580975860, -0.1027345657, -0.0899772123, -0.0509025529, 0.0699388608, 0.0348414779, 0.1365129799, 0.1994741708, -0.0304337908, 0.1525041759, 0.0654200092, 0.1296716183, 0.1603178084, 0.0742599368, -0.1024164483, 0.1247763559, 0.0148663539, 0.0807797909, -0.0753382668, -0.1377978176, 0.1285240948, -0.1513480693, -0.1453492939, -0.1124443337, 0.1630872339, 0.0264729299, 0.1550894082, 0.0740805939, 0.0806843191, -0.0572989881, 0.0000425222, 0.1684761643, -0.0181828830, 0.0840248466, -0.1620124131, 0.0146475770, -0.2265573889, -0.1541295797, -0.1432280391, 0.1173199937, -0.1295532435, 0.0396930426, 0.2334142327, 0.0529264100, 0.1870821267, -0.0994652584, -0.1887449771, -0.1695207208, -0.0052737580, -0.1596493870, -0.0895451009, 0.0015230783, -0.1115497723, 0.0030830880, 0.2455522269, 0.1941512823, -0.0221121255, 0.3127695620, 0.0331111997, 0.3116741776, -0.0344130024, 0.0580204315, 0.1077288166, -0.1585332155, 0.0387261435, -0.1724141240, 0.0541592725, 0.1058802456, 0.0958791897, 0.0817660838, -0.0187763087, 0.1092435122, 0.2896749675, 0.0837858766, 0.1603708714, 0.1154577360, -0.0272189584, 0.0607479475, 0.1914802790, 0.2102391273, -0.1031559706, -0.0943236798, 0.0523079596, 0.0050801500, 0.0361929052, -0.0343624838, 0.0433236100, 0.0241377540, 0.0845338479, 0.1326245815, -0.1923898458, 0.1848933548, 0.0499574170, 0.0389897116, -0.1772292554, 0.3091286123, 0.2096469402, 0.2795493901, -0.0022789231, -0.1549050212, -0.0818009824, -0.1105853766, -0.1854339838, -0.0848299935, 0.1439971030, -0.0065466934, 0.2079484314, 0.2426653057, -0.0644314066, -0.0240904391, -0.0490482822, 0.0680132359, 0.0954053178, -0.0137283811, -0.0720348433, 0.0323958844, 0.0751096681, 0.0736869425, 0.0133244479, -0.1186098605, 0.1401340067, -0.1652992219, -0.1274558008, -0.0338744409, 0.2056500465, 0.0727945045, 0.0212360919, -0.0580232702, 0.0119599989, -0.1608003974, -0.0182241760, -0.0992520675, 0.2122309804, 0.1539355069, -0.0380750299, -0.1182557344, -0.2166678756, -0.0542857237, -0.0727340952, 0.3033770621, -0.1386091858, -0.0969132334, 0.0713397339, -0.0899588987, 0.1983574182, -0.0732322708, -0.0057815616, 0.0220470577, 0.0818651095, 0.0151898833, 0.0188330766, 0.0802167132, 0.1504439414, -0.0138557917, 0.1651338935, 0.2436905056, -0.0278736074, 0.2757711112, 0.0317401662, 0.1987781972, 0.0987371951, -0.0813051164, -0.0063886340, -0.1722831279, -0.0277527757, -0.0668072999, 0.1545417905, 0.0062252418, 0.0587347820, -0.0726433545, -0.0674057081, -0.0295427237, 0.1814178377, 0.1556059122, 0.1288757026, -0.1653214246, -0.1069619060, -0.0481208041, 0.2352157682, 0.1032615378, 0.1480052620, 0.0198058952, -0.2375519574, -0.0393460393, -0.0316677801, -0.0260186493, -0.0036273631, -0.0168075617, 0.0982417986, 0.0218711831, -0.0924678594, 0.1940780580, 0.0804407299, 0.2211135626, -0.1640043706, 0.1500644386, 0.1745989174, 0.0618363880, 0.0281409863, -0.1245569438, 0.0454122126, 0.0033948128, -0.0780562237, -0.0614214204, 0.0196376331, -0.0502917580, 0.0755210146, 0.0323094949, 0.0323093422, -0.1278984100, -0.0942056328, -0.1101210043, 0.1891793162, 0.1061706245, 0.0350607000, -0.0019105971, 0.0653380379, -0.0669161156, -0.0260833371, -0.0503203049, 0.0914392769, -0.2068102509, -0.1039842516, -0.0420198441, 0.1952716857, 0.1217997745, -0.0265662912, -0.0376009010, 0.1080949605, -0.0609639958, -0.0091379788, -0.0074793524, 0.0618047491, -0.0328075364, 0.0420715995, -0.0909576491, -0.1325349212, -0.1149462983, -0.0094493441, 0.2498992682, -0.1277420372, -0.0933866352, 0.0433710665, -0.0040542358, 0.1224505231, -0.1593780965, -0.1153337657, -0.0636661723, 0.0866329819, -0.0651366338, -0.0592102073, 0.1213818192, 0.1378244460, 0.0144796520, 0.2325886637, 0.2413488179, -0.1357480884, 0.1320124120, 0.0431360379, 0.1734754145, 0.0359462947, -0.0381970182, 0.0065871263, 0.0418776311, -0.1244672611, -0.2147802263, 0.1259676367, -0.1220892295, -0.0476870090, -0.1006435454, -0.1115100309, -0.0877144337, 0.1256307960, 0.0424264483, 0.2526847720, -0.1182965711, -0.0461833626, -0.0540564731, 0.1674697548, 0.1342345476, 0.1664018035, 0.1541347951, -0.1511096209, 0.0529682338, -0.1196292043, -0.0333590023, 0.0283377524, -0.0538262688, 0.1803734452, -0.0215993840, 0.0192079842, 0.2069839984, -0.0642054081, 0.1106386781, -0.1955913752, 0.1713325828, 0.1574465334, 0.2162161171, -0.0644912422, -0.0269682836, -0.0674965233, -0.1123502478, -0.0622076914, -0.1869595051, -0.0583051927, -0.0861330554, 0.0286015254, 0.0773262903, -0.0750719979, -0.0969101116, -0.1455578655, -0.0471188687, 0.1459799856, 0.2340165228, 0.1436719149, -0.0655338392, 0.2411893159, -0.0082117524, -0.1162058413, -0.0366203561, -0.0312215313, -0.0913126990, -0.1232124344, -0.1334098727, 0.1448086798, 0.1001360193, -0.0731549487, -0.0948856398, 0.0109021012, 0.0270654913, -0.0344146453, 0.0239247400, 0.0670394599, -0.1263466179, -0.0326837674, -0.0038509346, -0.0112170931, -0.1059174910, -0.0464227311, 0.1981319934, -0.1080547422, -0.1309804171, 0.0193737447, -0.0203026365, 0.0917822272, -0.2124380618, -0.1376357228, -0.1249578968, 0.1567119956, -0.0304004755, 0.0429024473, 0.2014421225, 0.1209051684, 0.1239616573, 0.2050190568, 0.2065164149, -0.1266907305, 0.0974119678, 0.0760435611, 0.1669121236, 0.0172537956, 0.0517693721, 0.1636156738, -0.1095471308, -0.1365978718, -0.0534768067, 0.1129542142, -0.0831993148, -0.0048750951, -0.0288281124, -0.0391203091, -0.1195749268, 0.1669069231, 0.1458368599, 0.2242244035, -0.0932009816, -0.0729438737, 0.0035517244, 0.1649627686, 0.0622989833, 0.1032157466, 0.0120058795, -0.0098956469, 0.0812822357, -0.0949070305, -0.0835262835, -0.0780340210, -0.0924990997, 0.0146970525, 0.0386153199, 0.0338923298, 0.0716421828, -0.0281231608, 0.0912167504, -0.0866010636, 0.0913351104, 0.0033324186, 0.0637660772, -0.0127223236, -0.1390474588, -0.0664318427, 0.0224821717, -0.0662488714, -0.1640071124, -0.1265762448, -0.1910212040, -0.0213064980, 0.1171460375, -0.1107553840, -0.0679856911, -0.1401123106, 0.0128148701, 0.0843455046, 0.1529996097, 0.0462727994, -0.0256946385, 0.0667962283, -0.0765123516, -0.0440638177, -0.0702783540, -0.0053615565, -0.1476208568, -0.1179926023, -0.0987493917, 0.0395216346, 0.0546544865, 0.0672652125, -0.1078767478, 0.1220229566, -0.0214552488, -0.0702920631, 0.0364462510, 0.0466840193, -0.1119651943, -0.0890490785, -0.0613238066, -0.0646908805, -0.0649213344, 0.0617319942, 0.1105645597, -0.0556560755, -0.1155187786, -0.0110954512, 0.0507623293, 0.1635354608, -0.1123352796, -0.0899195746, -0.0850601494, 0.1230355129, -0.0162731428, -0.0433245786, 0.1630477905, 0.0369489454, 0.0944570005, 0.0742663890, 0.1242820099, -0.0537233800, 0.0840199664, 0.0587527864, 0.0374109447, 0.1061224490, 0.0402023122, 0.0950004309, -0.1217957512, -0.2153832167, -0.0762783438, 0.0238683093, -0.0519496948, -0.0861198008, 0.0088737225, -0.0929598063, -0.0718365610, 0.0233895220, 0.0357227027, 0.1678269804, -0.0659231916, 0.0411861837, -0.0758114308, 0.0684320033, 0.0049446425, 0.0915329903, -0.0671316832, -0.1788123399, 0.0663985461, 0.0363713317, 0.0881068334, 0.0699895918, -0.0411749631, 0.1456680447, 0.0638674274, 0.0682714358, 0.1296726763, -0.0346621759, 0.0163934082, -0.1273503751, 0.1582172215, 0.1561924517, 0.1297507733, -0.0543752089, -0.0838491246, 0.0557394922, -0.0692622140, -0.0816831887, -0.1197797433, 0.0249308627, -0.0699346364, 0.0386140794, 0.1233808547, -0.0189778898, -0.0180862453, -0.1403540373, 0.0090476051, 0.0344890766, 0.0853538588, 0.1020306796, 0.0808490366, 0.0690869093, -0.0049949507, -0.0547177643, 0.0148975253, -0.0164657291, -0.0060714786, -0.1384259313, 0.0078785801, 0.0783175528, 0.0974761024, 0.0263224021, -0.1010071337, 0.1159906164, 0.0649086833, 0.0102353618, 0.0583506823, 0.0072833458, -0.0740873814, -0.0060285013, -0.0708758160, -0.0804644600, -0.0751635134, -0.0865232795, 0.0862247199, -0.1621398777, -0.1647340804, -0.0995920971, -0.0546450801, 0.0439595096, -0.1510619223, 0.0080713155, -0.1018356159, 0.0941230208, -0.0666719079, -0.0731617659, 0.1062632799, 0.0087020462, 0.0193042271, 0.0167765971, 0.0242234152, -0.0169016123, 0.0195676759, 0.0246875770, 0.0675651804, 0.0627415627, -0.0305405799, 0.0137888985, -0.0058942507, -0.0459847078, -0.0244440958, 0.0478095487, 0.0645680726, 0.0560096093, 0.0251000039, -0.0113202259, 0.0287845116, 0.0949594378, 0.0890787765, 0.1274374425, -0.1194543019, -0.0440922454, -0.0256458856, 0.0552342013, 0.1249451414, 0.0156905223, 0.0193728637, -0.1088260189, 0.0441351570, 0.0273369942, 0.0801706091, 0.0593952984, 0.0520097390, 0.0546664782, 0.0743289590, 0.0308373831, 0.0117359618, -0.0069049736, 0.0678975657, -0.0765757337, 0.0801783279, 0.0723846406, 0.0507620126, 0.0022813042, -0.0361861363, 0.0687596798, -0.0680426210, 0.0297924355, -0.0797542259, 0.0597823113, -0.0744890943, 0.0121310623, 0.0820048004, -0.0781929046, 0.0322552025, -0.0336687602, 0.0692452937, 0.1272244155, 0.0291929841, 0.0332647748, 0.0807412118, 0.1188400090, 0.0556275733, -0.0049807443, -0.0657404587, 0.0827262551, -0.0668119863, -0.0533126779, 0.0002133540, 0.1072248518, 0.0537422188, -0.0120861381, -0.0426878929, 0.0156692397, -0.0232770052, -0.0102576902, -0.0154284760, 0.0908751413, -0.0512375496, 0.0191597659, -0.0601859316, 0.0074068415, 0.0311556738, -0.0813876912, -0.0248925053, -0.0522041656, -0.0001564858, -0.0104255164, 0.0272946134, -0.0035955003, -0.1218861490, -0.1149402410, -0.0254769996, 0.1091318354, -0.0301672202, 0.0546847321, 0.0079008220, 0.0351460688, 0.0645157099, 0.0096736709, 0.1348212361, 0.0231273323, 0.0551252551, 0.0400539786, 0.0925164148, -0.0112215728, -0.0369251110, 0.0286142379, 0.0113963112, 0.0328186937, -0.0686514899, -0.0002451813, -0.0080807675, 0.0010794668, -0.0802709386, -0.0531861596, -0.0519561209, -0.0132121649, 0.0363012291, 0.0977405161, -0.0200635344, -0.0674356148, -0.0676250085, 0.0831004009, 0.0392825305, 0.1187837124, -0.0739351511, -0.0545311868, 0.0117420107, 0.0501573384, -0.0660621896, -0.0365715101, 0.0266334303, 0.0286421850, 0.0319624506, 0.0226533618, 0.0390797593, -0.0708518997, 0.1091249883, -0.0960089266, 0.1182106435, 0.0231640451, 0.0881359056, -0.1052101776, 0.0039018323, -0.0106204227, -0.0806186274, -0.0139652276, -0.0299291164, -0.0541393757, -0.0020615528, 0.0808937326, 0.1086496040, -0.0255966410, -0.1004523486, 0.0131225288, 0.0016225555, 0.1417634636, 0.0474333167, 0.0168732535, -0.0377243124, 0.0397736318, 0.1032659486, 0.0305551197, -0.0967276469, -0.0435371995, -0.0916897878, -0.0147646619, -0.0769431964, 0.0437508523, -0.0437771231, -0.0040811300, -0.0637614354, 0.0707863495, 0.0718691051, -0.0185583346, -0.0179791674, 0.0862960890, 0.0430725217, 0.0354236215, 0.0283226334, -0.1316549182, -0.0120861353, -0.0330198929, 0.0711339414, -0.1122517809, 0.0043460531, -0.0548449382, 0.0213210285, -0.0154173281, -0.0932849050, -0.0128895491, 0.0236988366, -0.0159393921, -0.0363222323, -0.0739671290, 0.0613429248, 0.0777162164, -0.0499024391, 0.0010018125, 0.0211534053, -0.0004510805, -0.0614784211, 0.0341523066, -0.0761078149, -0.0259117819, -0.0450582467, 0.0145025849, 0.0210217834, 0.0027850270, 0.0647576749, 0.0712111145, -0.0136010647, 0.0661434382, -0.0194355398, -0.0710251853, 0.0627988130, -0.0049407557, -0.0682076737, -0.0207519382, 0.0547486395, 0.0141949505, -0.0287132673, 0.0092678294, 0.0590524375, 0.0342024863, -0.0817642286, -0.0076147392, 0.0194662586, -0.0616573766, -0.0767373443, -0.0292902365, 0.0578944087, 0.0165681168, 0.0594261140, 0.0609077215, -0.0737031028, 0.0563044697, 0.0259870291, -0.0618274212, 0.0814755857, -0.0294972435, 0.0702821612, -0.0462558903, 0.0332973376, 0.0403472260, 0.0425651819, -0.0281048492, -0.0560657009, 0.0269292668, -0.0182812512, 0.0211507156, -0.0417430215, 0.0514054447, -0.0031009465, 0.0374668986, -0.0799707249, -0.0791606605, -0.0102345720, -0.0615870580, 0.0803956836, -0.0686114132, 0.0776499957, -0.0429963879, 0.0790123791, 0.0564436018, -0.0428318679, -0.0467023775, 0.0129048079, 0.0466386378, -0.0596521124, -0.0038539320, 0.0219243988, -0.0063621178, -0.0545379557, -0.0241729580, 0.0206412524, -0.0774039626, -0.0328909606, -0.0533675775, -0.0226813294, -0.0571334735, -0.0160235167, 0.0544704646, 0.0172460824, -0.0170056298, -0.0354517698, -0.0761224106, -0.0354011320, 0.0338805318, -0.0189900324, -0.0596580207, 0.0534934998, -0.0038833544, -0.0809348002, -0.0173768848, -0.0113753304, 0.0293787047, -0.0029718429, -0.0273693688, 0.0609329492, 0.0002428740, 0.0741933733, -0.0642289370, -0.0559946969, -0.0185670033, -0.0218207687, 0.0804022253, -0.0306455083, 0.0058096871, -0.0330080688, 0.0741147846, 0.0043104962, 0.0373171121, 0.0684469342, 0.0051913261, -0.0092461258, 0.0278269500, -0.0423776396, -0.0289808698, 0.0046743453, 0.0664425641, 0.0692739934, -0.0454265177, 0.0207460076, 0.0551559180, 0.0257631913, -0.0170769468, 0.0610046685, 0.0251569897, -0.0818451196, 0.0435076952, -0.0266386010, 0.0710123330, -0.0079756677, 0.0744035989, 0.0299521983, -0.0692622811, -0.0666091889, 0.0428183079, 0.0362410918, 0.0589295477, -0.0343775190, -0.0326453559, 0.0609008074, 0.0122360960, -0.0193745345, 0.0436248332, -0.0674382448, 0.0199993849, -0.0613882430, 0.0430822670, 0.0615670830, -0.0304776430, -0.0648658127, -0.0816162229, -0.0542660281, 0.0041659698, -0.0222994275, 0.0020674989, 0.0652419925, -0.0434095040, 0.0795184076, 0.0210588500, -0.0742231458, -0.0655039251, -0.0371874310, 0.0564277023, -0.0653863251, 0.0615326166, 0.0754770786, -0.0031968802, 0.0796212256, -0.0465703011, -0.0167699233, 0.0320404917, -0.0378964953, 0.0404995531, 0.0383033454, 0.0032455921, 0.0467764884, -0.0145765394, 0.0741692036, 0.0564951450, -0.0197456107, 0.0104138702, 0.0619409978, -0.0230359510, 0.0648618639, 0.0458872914, -0.0284507088, 0.0144856721, -0.0344198495, 0.0230379328, -0.0820295960, 0.0437177122, -0.0355478004, -0.0149067789, 0.0747944862, 0.0318816453, -0.0055963919, -0.0769379511, -0.0585167110, 0.0690473169, -0.0767769068, 0.0254667848, -0.0182831138, -0.0162039697, 0.0001523644, -0.0463450253, -0.0207895935, 0.0075618252, -0.0742835477, -0.0043687895, 0.0108106583, -0.0683907345, 0.0462613702, -0.0621191673, -0.0425691903, -0.0218881592, 0.0320128798, 0.0385050476, 0.0124056041, -0.0142912716, 0.0228526890, -0.0529055335, -0.0612422414, 0.0273634791, 0.0689319521, -0.0785970464, -0.0625919551, -0.0463786162, -0.0739703923, 0.0050352886, 0.0618709922, 0.0518745482, 0.0822925270, 0.0520137399, -0.0509019718, 0.0256077424, -0.0485530049, -0.0772851035, -0.0092773512, -0.0527839884, 0.0297175124, 0.0717428774, -0.0488196835, -0.0390031338, 0.0138948783, -0.0728763193, 0.0421683341, 0.0258537978, 0.0384841710, 0.0612447709, 0.0518756360, 0.0264404714, -0.0183626860, 0.0355820954, 0.0318640471, -0.0280344523, 0.0229464620, -0.0755554959, -0.0099929944, -0.0647823140, 0.0198737606, -0.0544978455, -0.0078049153, -0.0272243321, 0.0240617618, 0.0748955905, -0.0154249594, -0.0708348900, -0.0030495077, -0.0280780196, 0.0089172348, -0.0268610679, -0.0727718621, 0.0755495429, -0.0539263375, 0.0487194657, 0.0248758122, -0.0169916004, -0.0588040389, 0.0737312287, -0.0450275093, -0.0259866975, -0.0441137552, -0.0309240520, 0.0127028525, -0.0708269775, 0.0431596339, -0.0060727894, 0.0790329427, 0.0170120522, -0.0096259415, -0.0670262948, -0.0432142615, 0.0392236561, 0.0589168221, 0.0424906835, -0.0732073933, 0.0756897479, -0.0224515945, -0.0584487692, 0.0434666574, -0.0420397967, 0.0254539996, -0.0085508078, 0.0091161281, -0.0663028136, 0.0785615593, -0.0416264050, -0.0158344582, -0.0591338314, 0.0306745991, -0.0192451254, 0.0262016207, -0.0026661083, 0.0586884469, -0.0278878435, 0.0143434852, -0.0760255754, 0.0223924369, 0.0080415457, 0.0581632704, -0.0659513921, -0.0262348577, -0.0580954850, 0.0711223334, 0.0580812097, 0.0384697542, -0.0170987919, 0.0793189704, -0.0278607570, -0.0275952518, -0.0477600284, 0.0791248381, -0.0823704079, 0.0437048674, 0.0204974338, 0.0724452138, 0.0761323422, 0.0692427009, -0.0119389445, 0.0645544082, 0.0483124852, 0.0569469482, 0.0309705064, -0.0155477226, -0.0052369386, 0.0115923584, 0.0554922372, -0.0421834402, 0.0785961300, -0.0183898136, 0.0552949309, -0.0697634295, -0.0386474542, -0.0129143968, -0.0549003147, 0.0365253165, -0.0797082260, -0.0178179070, 0.0670171380, -0.0243853889, 0.0091352612, -0.0101527497, 0.0057282671, -0.0550242960, -0.0408379510, 0.0099747702, -0.0414374694, 0.0323649794, -0.0459131524, 0.0655273646, -0.0387877598, -0.0586729497, -0.0395819694, -0.0060474128, -0.0319962613, 0.0136247575, -0.0641281307, 0.0094462931, -0.0544062927, -0.0670327917, -0.0249683075, -0.0334018543, -0.0019675940, 0.0083699822, -0.0807223096, 0.0684528053, 0.0455645770, 0.0454018116, -0.0413606279, -0.0813845843, 0.0770586282, -0.0429163687, 0.0037937313, 0.0071991310, 0.0743745863, -0.0393364839, -0.0061030984, 0.0624251366, -0.0484845303, 0.0526344478, -0.0296097174, -0.0596767813, 0.0815627575, -0.0401341915, 0.0016396493, 0.0729995817, 0.0200765058, 0.0121102631, -0.0222057551, 0.0665734559, 0.0345429480, 0.0124801248, 0.0620210767, 0.0136369765, 0.0122239366, -0.0167028829, -0.0514229611, -0.0703827292, -0.0327756219, 0.0570130646, 0.0169309825, 0.0122962371, -0.0228084363, 0.0696216077, -0.0032917336, 0.0078349859, 0.0718709230, -0.0822048411, 0.0218046606, -0.0817842633, -0.0190205202, -0.0394940525, -0.0368630029, -0.0119831786, -0.0399434827, -0.0258531682, -0.0465514474, -0.0661534369, -0.0032496378, 0.0233050063, 0.0670360327, -0.0557305105, 0.0783344060, -0.0364643037, 0.0376087204, -0.0626415461, -0.0701000541, -0.0605356172, -0.0028909966, 0.0056899861, -0.0063120499, 0.0664048195, -0.0164534450, 0.0697556138, -0.0421608314, 0.0630080104, -0.0419459641, -0.0339603983, -0.0669016987, -0.0747574717, 0.0219365358, -0.0153761134, 0.0803641826, -0.0598884225, -0.0418993942, -0.0317320339, -0.0531333834, 0.0439445525, -0.0328674875, 0.0513162315, 0.0288039744, 0.0526290238, -0.0166893080, -0.0128652155, 0.0253678709, 0.0460974127, -0.0189587846, -0.0091333538, 0.0445706844, -0.0681220889, 0.0220131427, 0.0008325949, 0.0087305382, 0.0651098639, -0.0022529587, 0.0713451207, -0.0086472332, -0.0496684425, 0.0000709444, 0.0275679082, 0.0449431986, -0.0376541875, -0.0146537498, 0.0580115765, -0.0644151419, -0.0136852562, -0.0369310044, 0.0607573986, -0.0077262297, 0.0520828217, -0.0512690060, 0.0787829012, 0.0337439254, 0.0130709633, -0.0241289586, 0.0547479689, 0.0660989434, 0.0056865439, 0.0595713854, 0.0465265214, -0.0055773929, 0.0421525985, -0.0533731356, 0.0732682049, 0.0173248872, -0.0328037702, -0.0314580239, 0.0655937940, 0.0717786551, -0.0518410653, -0.0023096874, -0.0649568886, 0.0365791693, 0.0109582320, -0.0287972353, -0.0767799094, 0.0692143291, 0.0635493696, -0.0028753206, 0.0391626507, 0.0802977383, -0.0085599646, 0.0248291641, 0.0754399598, 0.0599333048, 0.0100918338, -0.0562338382, -0.0252645314, 0.0009433329, -0.0298688337, -0.0467361622, 0.0113154277, 0.0531528741, 0.0175608322, -0.0251451470, -0.0072279051, 0.0116537064, 0.0567445010, -0.0556392148, -0.0128985047, -0.0734185874, -0.0421980731, -0.0625123829, 0.0261036679, 0.0703411698, 0.0787213445, -0.0713631883, 0.0400559381, 0.0793196261, 0.0816779584, 0.0798275769, -0.0231684372, 0.0809577554, 0.0007911101, -0.0765328482, -0.0134291798, 0.0422499105, 0.0246911570, 0.0301286057, -0.0312532559, 0.0325484425, -0.0798480734, 0.0035672933, 0.0549773872, -0.0623009168, 0.0532136261, -0.0776534155, 0.0596733391, 0.0609103441, -0.0207145028, 0.0083970129, -0.0323305689, -0.0054225773, -0.0629977435, 0.0572166443, 0.0005856305, -0.0395909846, -0.0089429542, 0.0002638280, -0.0172249302, 0.0694563165, 0.0379031710, -0.0689240098, 0.0337514356, -0.0124949208, -0.0773558915, -0.0489361845, 0.0215400737, -0.0354166515, 0.0405628607, 0.0557861030, -0.0231817141, 0.0000853240, -0.0788986832, 0.0110703530, -0.0831873864, -0.0638201684, -0.0507149622, -0.0379908942, 0.0268790200, 0.0262615327, 0.0436599068, -0.0475766845, 0.0682294667, 0.0090925843, 0.0116063282, 0.0476027727, -0.0592441149, 0.0410636142, 0.0591510348, 0.0775093883, -0.0611178055, 0.0410658233, 0.0011808649, -0.0320694260, 0.0741332099, -0.0768137351, -0.0213836096, -0.0732433200, 0.0554747880, -0.0489905737, 0.0536702201, -0.0590199754, 0.0397582129, -0.0666516498, -0.0045714634, -0.0052505317, -0.0449660718, -0.0475868210, -0.0122431219, 0.0691499412, 0.0052095577, -0.0038207397, -0.0601404421, -0.0156107396, -0.0186749175, 0.0158280358, 0.0368220285, -0.0379890092, 0.0812613368, -0.0675209314, 0.0632879958, 0.0581714809, 0.0742132515, 0.0504429005, 0.0497873127, -0.0509409532, -0.0510117225, 0.0453909338, -0.0580907725, 0.0231252704, 0.0514684767, -0.0778782815, 0.0187714770, 0.0093641244, 0.0082819238, 0.0788267553, -0.0409744829, -0.0365708619, 0.0059787631, 0.0614560246, -0.0741189420, 0.0012930840, 0.0024395213, 0.0657477230, -0.0624778718, -0.0691570640, -0.0720461830, 0.0496803820, -0.0527366810, -0.0119563090, 0.0444668345, -0.0284622200, 0.0800623000, -0.0112671256, -0.0052425223, -0.0188621972, -0.0908047333, -0.0974846110, 0.0450593829, 0.0351091251, -0.0242472626, -0.0640623420, -0.0673587695, 0.0571677685, -0.0366091877, -0.0353707708, -0.0113113774, 0.0900081694, 0.1344084144, -0.0068303798, 0.1459534019, 0.0890240222, -0.0416133106, -0.0485707186, -0.0362756178, -0.0892350525, 0.0568853356, -0.0444877744, -0.0386843830, -0.0183628742, 0.0281140469, 0.0201463774, -0.0398079045, 0.0961025357, 0.0104513746, 0.0123428106, 0.0355899110, 0.0478014164, 0.0647823885, -0.1234783456, 0.1370485425, 0.0199797023, -0.0400050879, 0.0562443137, 0.0026246277, 0.1795202196, 0.0812780261, 0.1558381766, 0.0023456025, -0.0479804017, 0.0065283552, -0.0561591126, -0.0340779833, -0.0775820687, 0.0190669522, 0.1646132469, 0.1493196785, -0.1302980036, -0.0698417947, -0.0592480898, -0.1314449012, 0.0006380942, -0.0748778284, -0.0304649752, -0.0214740708, -0.0383867845, 0.0809153169, 0.0111994455, -0.1005641595, 0.0591393150, 0.0820598826, 0.0755346715, -0.0170432609, -0.0569220632, -0.0171377361, 0.0973356366, 0.1135799736, -0.0454717763, 0.0300337318, -0.0231361408, -0.0329105817, -0.0492881499, -0.0103517128, 0.0434958339, -0.0381482728, 0.1266809404, -0.0421619266, 0.0067901141, -0.0616252050, -0.0074480549, -0.0578554012, 0.0989403725, -0.0215789713, -0.0112602254, 0.0135102421, -0.0582834557, -0.0838589892, 0.0568636842, 0.0265913773, 0.1522193402, 0.0135115860, 0.0323539078, -0.0521664955, 0.1625284106, -0.0898505598, -0.0628884137, -0.0644819885, 0.0638063028, -0.1251916438, -0.0404363871, -0.0781561211, -0.0214921124, 0.0231906082, 0.0487717278, -0.0331561491, -0.1454997510, 0.0766581967, -0.0249818638, 0.1758755296, -0.0202400889, 0.0301003959, 0.1029767916, -0.0565554053, -0.1010871455, -0.0751157850, 0.0132518159, -0.0372478738, -0.0391591415, -0.0823791102, -0.0854031518, 0.0679637790, 0.1040279940, 0.0727526546, 0.1599933505, -0.0419037491, -0.0128265172, -0.0689509138, 0.1596796215, 0.0234448668, -0.0810014158, 0.0858144686, 0.0415330119, 0.0747569352, -0.0446887910, 0.0057781748, 0.0563624091, 0.0884935260, 0.2002990842, 0.1041089371, -0.0405468829, 0.0985282362, -0.0491455421, -0.0566471964, -0.1167134941, -0.0410001725, 0.1625284106, 0.1558582932, -0.0329888053, -0.0658496618, 0.0670309663, -0.1294647306, 0.0066928603, -0.1836903840, -0.0025812373, -0.0709116384, 0.1483431309, 0.0002427919, 0.0234756507, -0.0539330617, 0.0065792901, 0.0340156667, 0.0512967780, 0.1128209233, 0.0520556346, -0.0179908574, 0.1626347601, 0.1550187469, 0.0171418972, 0.0154927168, -0.0310525019, -0.0282940362, -0.1072127968, 0.0093721673, 0.1213294864, -0.0235812590, 0.1158299074, -0.0362558663, 0.0210987553, -0.0568258949, 0.0868366286, -0.0159833282, 0.0439851917, -0.0596875362, 0.1169618666, 0.0249822773, -0.0921028256, -0.0515832379, 0.0339081958, 0.0321820043, 0.0824911445, -0.0107873911, -0.0805520937, 0.0083557321, 0.1905764788, -0.0559469052, -0.0959677696, 0.0100424038, 0.1924906969, -0.0649863705, -0.0431528315, 0.0551252961, 0.0634008348, 0.0517198853, 0.1392263025, 0.1275848299, -0.0813754275, -0.0362670682, -0.0549763814, -0.0167513285, 0.0225735437, -0.0507204384, -0.0233713519, 0.0213116426, -0.1563494354, -0.0603655465, 0.0333172269, 0.0776972845, 0.0024595850, 0.0130053973, 0.0127488766, 0.0881069675, 0.0124954926, 0.1235206053, -0.0267679617, -0.0892630368, -0.0039786999, -0.0783857629, -0.0250297114, 0.0607764274, 0.1387803406, 0.0144190015, -0.1244370341, -0.0413624607, -0.0317981169, -0.0340015963, 0.0235205125, 0.0203952882, 0.0276168138, 0.0003592172, -0.0404631272, -0.0002560742, -0.1075145900, 0.1617464423, -0.1297270656, 0.0640449524, 0.0155156516, 0.1089399084, 0.0200021807, -0.0338095911, -0.0582127720, -0.0456036367, -0.0472661741, 0.0062425402, -0.0392316133, -0.0224258937, 0.1536819190, -0.0665853247, 0.0244135000, -0.1370076686, -0.0349443741, 0.1111961156, 0.1234617010, 0.0801651031, -0.0582384057, 0.0302530527, 0.1867454648, -0.0128649753, 0.0132399146, -0.0472423732, -0.0637206063, -0.0501829982, -0.1307903379, 0.0338441692, 0.1947988421, -0.0300397258, -0.0654712394, -0.1079582050, 0.0755442679, 0.0447919928, -0.0195919406, 0.0093378350, 0.0497980267, 0.0457185954, -0.0092392555, -0.0454470403, -0.1091521457, 0.0643811226, -0.1063760519, 0.0836723819, -0.1384070665, 0.0663622692, -0.0239290800, -0.0485233851, 0.0238411706, -0.0415481403, -0.0710389987, 0.1435374916, 0.0876038373, -0.0964550078, 0.0713133365, 0.0091983192, 0.0507192351, 0.0066614621, 0.1256382763, 0.1521171778, -0.0286879987, 0.0302210581, 0.0193491243, 0.0103248162, 0.0177946240, -0.0230141357, 0.0324349441, -0.0318579786, -0.0639241263, -0.0840890184, 0.0216557570, 0.0362429507, -0.0072122039, 0.0408639275, 0.0260979515, 0.1030316055, 0.1735192537, 0.0566837862, 0.0361836590, -0.1132735461, -0.0618324727, -0.0963650569, -0.0441568233, 0.1285897791, 0.1054714173, 0.0649158359, -0.1651434302, -0.0756767169, 0.1176033393, -0.0747118816, 0.0349488668, 0.1272494644, 0.1243677139, 0.0877605379, 0.0230901614, 0.0074277255, -0.1213370934, 0.1626584232, -0.0971396938, 0.1544763893, 0.0862482041, 0.0330242999, 0.0556783639, -0.0369773954, -0.0772596523, -0.0364986658, 0.0066161347, 0.0751153678, -0.0939745232, -0.1106629893, 0.1131957769, -0.0183877423, 0.0741677880, -0.1466744095, 0.0142159257, 0.0079533504, 0.1622899324, -0.0261555500, -0.0954800993, 0.0009260337, 0.0845459923, -0.0487258136, 0.0271503739, 0.0151009727, -0.0273765977, -0.0594905950, -0.0810963064, 0.0057187853, 0.1398757994, -0.0710287765, -0.0918596461, 0.0500714667, 0.0092616444, 0.1293081045, 0.0462898649, 0.0032555908, 0.0387347415, 0.0923068598, -0.0856690258, -0.0078206090, -0.1076127067, 0.0212794542, -0.0114792753, 0.2181332558, -0.0849938169, -0.0718459710, 0.0040898430, -0.0457169563, 0.0483730435, -0.1494912952, -0.1631926894, 0.0572173409, 0.0235338025, -0.0925814882, -0.0663637146, -0.0056404565, 0.1333587468, -0.1275516599, 0.0318612829, 0.1264791340, -0.0412213057, 0.1270408332, -0.0090321610, 0.0020181981, -0.0095876371, -0.0682684630, 0.0358525887, -0.0489968583, 0.0342788324, -0.1922750622, 0.0691986606, 0.0550377443, -0.0627092347, -0.0736835524, -0.0389399640, 0.2069558054, 0.1696816236, 0.1554611921, 0.0254588947, -0.0935265720, -0.0705439672, -0.0985451266, 0.1731984168, 0.0184018165, 0.1386037618, 0.0139490105, -0.0673576966, 0.0220428500, 0.0049679675, -0.1496327072, 0.0801239088, 0.0721398294, 0.1119979843, 0.1747637540, 0.0501865968, 0.0790653080, 0.0226556230, 0.1102007627, -0.0840942413, 0.2177898735, 0.0524229594, 0.0641298220, 0.1056733131, -0.1593226939, 0.0281207189, -0.0419120118, -0.0130087286, -0.0597991943, 0.0451032147, -0.0968903229, 0.2518797219, 0.0866708532, -0.0387783125, -0.0736796558, -0.0366469063, 0.0431079157, 0.2401782423, -0.0383227803, -0.0249722023, 0.0330444500, 0.1627749354, 0.0157123264, 0.0216743164, -0.0852243453, 0.1721717268, -0.1149693429, -0.0457951576, -0.0971562341, 0.2020018101, 0.0548408888, -0.0490256287, -0.1154989749, 0.0169766154, -0.0248449184, -0.0201416723, -0.0634107366, 0.1834552586, -0.0821000636, 0.0331691727, 0.0514798090, -0.0975872800, -0.0560967252, -0.0064697387, 0.2288219929, -0.1776856631, -0.0971300602, -0.0706473142, -0.0256367307, 0.0503264107, -0.1160805225, -0.0557560995, 0.1952167749, 0.3474821746, 0.0083454540, 0.0658740178, -0.0293302201, 0.0812806115, -0.0114130471, 0.0356315225, 0.3949308395, -0.0803865790, -0.0646500513, 0.0162528697, 0.0099517638, -0.0532943420, -0.0221501421, -0.0637436807, -0.1061128005, -0.0695321783, -0.2405200005, 0.0697548985, 0.1700181961, -0.1114240140, -0.0282458290, 0.1182173863, 0.2629835308, 0.1653651148, 0.0775937662, -0.0119296405, -0.1376920789, 0.0074622883, -0.0229694191, -0.0980474651, 0.0036829337, 0.1181339175, 0.0431601629, -0.1468153596, 0.0723282769, 0.0967468768, -0.1389300525, 0.0731900036, 0.2666138709, 0.1278413534, 0.0460682884, 0.1522531807, 0.1998966485, -0.0820414126, 0.2693880498, -0.0885381326, 0.2956036925, 0.2173051834, 0.2164744735, 0.0470564254, -0.2318673581, 0.0256304294, -0.0543383211, 0.0274792425, -0.0423126183, 0.0256327018, -0.1320591271, 0.1882808208, -0.0225670654, 0.0086557604, -0.0957790688, -0.0517491773, 0.0110465288, 0.0297552068, 0.0466863066, 0.0827345476, 0.0780419260, 0.2523477376, -0.1591656655, -0.1579889804, -0.0119031062, 0.0760224313, -0.1094341129, -0.2876636386, -0.0705659911, 0.1245433837, 0.0492911227, -0.1042050421, -0.0015263329, -0.0648625344, -0.0488320701, -0.0083882464, -0.0668267235, 0.1021652147, 0.1615711302, -0.0229726303, 0.0752592757, -0.0879360363, 0.0094035855, -0.0194296595, 0.3616742492, -0.0460521057, -0.0741533190, -0.0036704049, -0.0599337853, 0.0927093551, -0.0607664362, -0.0488424264, 0.1188035980, 0.2680751085, -0.0492925495, 0.1251112074, -0.1097359136, -0.0017621563, -0.0806757063, 0.0075120656, 0.2903155982, -0.1858409494, -0.0372786671, -0.0544501506, 0.0293518975, -0.0678183883, -0.0410043709, -0.1578646898, -0.1439111978, -0.0565425754, -0.2811073959, -0.1016322672, 0.1631522924, 0.1216001585, 0.0081748031, 0.1499322802, 0.1821232736, 0.3351167738, 0.1426413208, -0.0106853992, -0.2043698579, -0.0680271462, 0.0123244654, -0.0691826716, -0.0043966821, -0.0388732441, -0.0018936712, -0.2802532613, 0.0494011343, 0.2376433760, 0.0051079993, 0.0076536806, 0.1900110245, 0.1475102156, -0.0213674866, 0.1277021021, 0.0290062968, -0.1616769880, 0.1777258664, 0.1284044683, 0.2938593626, 0.3197135925, 0.1388717890, 0.0993431285, -0.1617686301, -0.0191000700, -0.0823685974, -0.1007340327, -0.0362444706, -0.0620736629, 0.0318328179, 0.2136237770, -0.0168843865, 0.1088420153, -0.0831221119, -0.1419164389, 0.2601062357, -0.1070177332, -0.1517506391, 0.1063631624, 0.0672743320, 0.2627153695, -0.2157707959, -0.1288383603, -0.1227758899, -0.0447373502, 0.0240297522, -0.1757095754, 0.0009058216, -0.0110803079, -0.0189175438, -0.1966523379, 0.0320128761, 0.0044503310, -0.0788721591, -0.0054079671, -0.1516272724, -0.0257882699, 0.1466006190, -0.0657473952, 0.1541357040, -0.0064957161, -0.1294033676, -0.2111022025, 0.3965588808, 0.1644961238, 0.0392743349, 0.1303859353, -0.1587730050, 0.1034742147, -0.1389244944, -0.0436072536, 0.2165956944, 0.2444936633, -0.0743491799, 0.1563670635, -0.1284439266, -0.0015390895, 0.1590470672, 0.1081684455, 0.3236950040, -0.1112914830, -0.0049007460, 0.0085606612, 0.0483716540, -0.0536978655, -0.0699931905, -0.0535360835, -0.1303297877, 0.0849235877, -0.1005464718, -0.0293059479, 0.2109802216, -0.0288477968, -0.0702143610, 0.1079621986, 0.2340805233, 0.2906528711, 0.1136968955, -0.1420660317, -0.2501019537, -0.1141614094, 0.1809620261, 0.1137869060, -0.0257981922, -0.0466932766, -0.0666543096, -0.1785200387, -0.0064525241, 0.1832589656, 0.0569000430, -0.0610175803, 0.3456118107, 0.0062506786, 0.1413462758, 0.0015566141, 0.1805560887, -0.1963797212, 0.2028559148, -0.0662919730, 0.4003448784, 0.3973796964, 0.2651696205, -0.1014228314, -0.2221738994, -0.0502258874, -0.1386427134, -0.1796451658, 0.0705929622, 0.0808200464, -0.0335621871, 0.2081028521, -0.0533666313, -0.0129763521, -0.0023321577, -0.1698588282, 0.1562398672, 0.0187153947, -0.1458918005, 0.2123866081, -0.0428265594, 0.1798209399, -0.0334435366, 0.0261936188, -0.1852865964, -0.0738157481, -0.1187186316, -0.1530708969, -0.0013868023, 0.0608594902, 0.1143718734, -0.0017120026, -0.0395980626, 0.0724556893, 0.0202737469, -0.1222879663, 0.0283810012, 0.0935841948, 0.0814475566, -0.1131915450, 0.0811605379, -0.0040305862, 0.0015961975, -0.2768664658, 0.3316343129, 0.0538212396, 0.1116749868, 0.2091265470, -0.0296014287, -0.0288907513, -0.1699673682, -0.0801164955, 0.1763708889, 0.2977472246, -0.0470789596, 0.0790793747, -0.1417638063, 0.1213897318, 0.2123604715, 0.1264056563, 0.3021964729, -0.1175669134, 0.0364394225, 0.0118253455, 0.0354268514, -0.0965883061, -0.1114299297, -0.0298660602, 0.0804173127, 0.0115889683, -0.2613263428, 0.1358837187, 0.2260808945, 0.0250359233, -0.0602195784, 0.2040536255, -0.0107114390, 0.2441933453, 0.0722104013, -0.1863540560, -0.1780838370, 0.0118716974, -0.0087058963, 0.1893160939, 0.1080612093, 0.0675447434, -0.0214986652, -0.1950513721, -0.0033027558, -0.0378975831, -0.0197212379, 0.0675792396, 0.3361450136, 0.1303436309, 0.3097771704, -0.1467205584, 0.0308616012, -0.1359979808, 0.1541519016, -0.2337719202, 0.2519890666, 0.3375808597, 0.0880389884, -0.1497536153, -0.2417870313, -0.0696111992, -0.1690980792, -0.1895518452, 0.1117256582, -0.0003814616, -0.1342955083, 0.3090553284, -0.0152442809, -0.1598341167, 0.0299691055, -0.1958127171, 0.1938635856, 0.2223266661, -0.0246828645, 0.1001386344, 0.0788060576, 0.3082740903, -0.0713232681, -0.0465554520, -0.0884466842, -0.0118233543, -0.0733550712, -0.0731606036, 0.0592060238, 0.3249944150, 0.1000780687, 0.0469107665, -0.1235548258, 0.1546992958, 0.0897119418, -0.0537841283, 0.0987469777, 0.2620726526, 0.0239923447, -0.0664492100, 0.1536464542, -0.0184107348, -0.0315073542, -0.1476617903, 0.2535565495, -0.1133702546, -0.1295254678, 0.0701367110, -0.0951590464, 0.0095723318, -0.0902458280, -0.1149823517, 0.0387176014, 0.1313490421, -0.1459527165, 0.1531913877, -0.1378544420, 0.0632354394, 0.1035604551, 0.0464041941, 0.1666986495, -0.1179462746, 0.0023266070, -0.0102822520, 0.0777202696, -0.0341533646, -0.1459758431, -0.1230858043, -0.0969813094, -0.1321319789, -0.1229002550, 0.0507114120, 0.0565368459, -0.0372556150, -0.1258042306, 0.0979154557, -0.0538789593, 0.0887037516, -0.0947270244, -0.3687282205, -0.2383491099, -0.0691272095, 0.0175164212, 0.1862181127, 0.1384927034, 0.0711332634, -0.0958841294, -0.0438774340, 0.0405896567, 0.1236115694, -0.1181256250, -0.0698019639, 0.2084428668, 0.1417229325, 0.1066814661, -0.1334432811, 0.1186198741, -0.1049644575, 0.0657433718, -0.0618077666, 0.0476235338, 0.2808654308, 0.0428702086, -0.1103729606, -0.0947226807, 0.0184310507, -0.1279757470, -0.0821418539, 0.0402831621, 0.0258706436, -0.0443315580, 0.2065188140, 0.0084158471, -0.0268409178, -0.0060614781, 0.0164112523, 0.1721524149, 0.0712472796, -0.1205143183, 0.1248117909, 0.0106686316, 0.1666383296, 0.0296632592, -0.0858570337, -0.1332288235, -0.1260818392, -0.2817766070, -0.1018844023, -0.0316419415, 0.1405336112, 0.0184552874, 0.0254584718, -0.0992054269, 0.1783568561, 0.0843388513, -0.0886997804, 0.0183361322, 0.0781407952, 0.0482649282, -0.1177814379, 0.0835342184, -0.0257369820, -0.1321885288, -0.2886686027, 0.2984925210, -0.1456178278, -0.0834550485, 0.2043096125, -0.1644904315, 0.0789725557, -0.1474206448, -0.1704787910, -0.0990868285, 0.0667738914, -0.0588192865, 0.1844958365, 0.0734118000, 0.0613585785, 0.0905685276, 0.2035379708, -0.0879176408, -0.1828536540, 0.1057842970, 0.0778351724, 0.0112501029, 0.0441080593, -0.0374311469, -0.0347768180, -0.0566928685, -0.1321502775, -0.0492731445, 0.1297219098, 0.0172162913, -0.0580399148, -0.1711475402, -0.0854865313, -0.2106547058, 0.1606341451, -0.0536537655, -0.3048537672, -0.1873922497, -0.1220586821, 0.0722746924, 0.0853543878, -0.0127925603, -0.0156053100, -0.1950749755, -0.0171008259, -0.0555167533, 0.0892796293, -0.0586894155, 0.0123218745, 0.0758102536, -0.0309514664, 0.0196492374, -0.0199654140, 0.2095691860, -0.1373472065, -0.0940708295, -0.0263729524, -0.1042368263, 0.2669772506, 0.0558923110, -0.2097790539, 0.0132485209, 0.0150997993, -0.1771648824, -0.1823447645, 0.0555030890, 0.0453922339, -0.1956568360, 0.0723982081, 0.1464688331, 0.0382863320, 0.0738993436, 0.0916468203, 0.1765926629, 0.0760078877, -0.0525314212, -0.0988183394, 0.0576819293, 0.2086698711, -0.1258897632, -0.1445665807, -0.0271370113, -0.1485708207, -0.3889172673, -0.0568552539, -0.0713552237, 0.1995070726, 0.0440900549, -0.0731298923, -0.0860416740, 0.2842859030, -0.0815545171, -0.2109429240, -0.1150208116, 0.1804994792, 0.0200032722, -0.1650058329, 0.0833539739, -0.0827426687, -0.3021250367, -0.2911975086, 0.1076470837, -0.1293644607, -0.0520936027, 0.0673120022, -0.1793196946, 0.0754469335, -0.1077701747, -0.2663125396, 0.0357727967, 0.1839183271, -0.1415782273, 0.2036642730, 0.0282573998, 0.1471466124, 0.1063066348, 0.0569617637, 0.0451416932, -0.2767749131, -0.0074207163, -0.0752649307, 0.0396557711, 0.0185236447, -0.0844817907, 0.1418937147, 0.0247640256, -0.1369416416, 0.0050657126, 0.1757784188, 0.1125489697, -0.0283085816, -0.0427587442, 0.0967207626, -0.0724227503, 0.1040382013, 0.0317061394, -0.1371965557, -0.1570409387, -0.1272783428, 0.1173661500, -0.0117674544, 0.1329954863, 0.0914202034, -0.2424588054, 0.0006184152, -0.0190171674, 0.0476646423, 0.0186091233, -0.1131710410, -0.0920523703, -0.0340099111, 0.0412649885, 0.0581400916, 0.1944050342, -0.1065854058, 0.0791849047, -0.0124464137, -0.0144474376, 0.1998298168, -0.0659347773, -0.0400899686, -0.0307831764, 0.0607709587, -0.2468057573, -0.2071664333, 0.2161718607, 0.0187325496, -0.0445953682, 0.2220893502, 0.1109195277, -0.0374991670, 0.0888190120, -0.0140442532, 0.1714217812, 0.2290662974, -0.1651989520, -0.1335021853, 0.0589613095, 0.1572235525, -0.1511742324, -0.0898583233, -0.1336356401, -0.2062919140, -0.3119414449, 0.0694748312, -0.1444740593, 0.0409961715, -0.0073520821, -0.0627701432, -0.2229953110, 0.2492776215, 0.0608385503, -0.0786898658, -0.0976612419, 0.0562687479, 0.0013790142, -0.0276058130, 0.0844886005, -0.0195948575, -0.2190904170, -0.2034660876, 0.1610706002, -0.1736038178, 0.0170126278, -0.0591653362, -0.2339949161, -0.0048004617, 0.0490066335, -0.0241790321, -0.0569221266, 0.0392819457, -0.0842706189, 0.0884527266, 0.1989281327, 0.0398831889, 0.1347069144, 0.2202328295, -0.0399693102, -0.2628160119, 0.1952606291, 0.0674912184, 0.0425863825, -0.1104265824, -0.0864809528, 0.1704980284, 0.1754866540, -0.1517730355, -0.2476959527, 0.1889687032, 0.1808117926, -0.0200088825, -0.0616351962, 0.0371635146, -0.1672198921, 0.0662190840, 0.0992701873, -0.1344374269, -0.0404756628, -0.1064823493, -0.0701152682, -0.0010106812, 0.2212393582, 0.0835525021, -0.1390987784, -0.0286789294, -0.0939303413, -0.0867123306, -0.0944444761, 0.0534754843, -0.0443594083, 0.0220769960, 0.0995587185, -0.1686109453, 0.0879736617, -0.0140798539, 0.1967955679, -0.1440390646, -0.0374902822, 0.0712901726, -0.0793423131, 0.0629553869, -0.0682093576, -0.0356248692, -0.1941925436, -0.1859984249, 0.1745415777, -0.1020168662, -0.1128809527, 0.0448840074, 0.1031851098, 0.0142679131, -0.0883795768, -0.1508515924, 0.0321176276, 0.2106705904, 0.0013897709, -0.2103624642, 0.1157990396, 0.1076132655, -0.0724738017, -0.1652726829, -0.1924847662, -0.1035343334, -0.2883971930, 0.0163092352, -0.0404923186, 0.2244791538, -0.0631629005, -0.1172771528, -0.0944865718, 0.2152835876, -0.0523069464, -0.1424504519, -0.0285535585, -0.0556389317, 0.0840571746, -0.0807270184, 0.0178693607, 0.0874320492, -0.2526963055, -0.0465873703, 0.0860096812, -0.1244348586, -0.0570370816, -0.1236176416, -0.1923652589, -0.0311805587, -0.0149672413, -0.0758896768, 0.0935792401, -0.0489521809, -0.0715815872, 0.0236342419, 0.1337459087, -0.0540267415, 0.0371269472, 0.2397059500, -0.0736684129, -0.2682482600, 0.3697394729, 0.0129601676, 0.1186943427, -0.1416303962, -0.0085589569, 0.2294583917, 0.1697054058, -0.1110453606, -0.0069036316, 0.0731451362, 0.2608245611, 0.0563585609, 0.0265986808, 0.0110347047, -0.0803360417, 0.0925760716, 0.0620208792, 0.0182227865, 0.0802808478, -0.1207360327, -0.0413706787, 0.1059896126, 0.1887321025, 0.0132019548, -0.1753621697, 0.0017375794, -0.2282624990, 0.0385844894, -0.0934436992, 0.0236668456, 0.0253547803, 0.1047094017, 0.1212666556, -0.1903213859, 0.1885541230, -0.0213727597, 0.2327895463, -0.2018118054, 0.1150692552, 0.2091412097, -0.1558140814, 0.1331529766, -0.1534146219, 0.0079673426, -0.2120085359, -0.2263102084, 0.1300033778, 0.0666537285, -0.0555930436, -0.0323917642, 0.2638469040, -0.0777343884, -0.0316186808, -0.1082709506, 0.0475349799, 0.1313993335, -0.0097073689, -0.2285232097, 0.0822662860, 0.1870680302, 0.1404369771, -0.1195256487, -0.1716839671, -0.0433468260, -0.1072973087, -0.2117782980, 0.0228534099, 0.0621308163, -0.0769332498, -0.0019204491, -0.0183465201, 0.2939613163, -0.1117716208, -0.1299216598, -0.0431664921, 0.1354366690, 0.1587603092, -0.0252605304, -0.0147975441, 0.1129260436, -0.2358215600, 0.0118130911, 0.1763879955, -0.1697208881, -0.0223315917, -0.2670108378, -0.1508747339, 0.0898298323, 0.0082175005, -0.0086027188, 0.0136602651, -0.0803380981, -0.0747140348, 0.0264313947, 0.0616082512, -0.1584873199, 0.0997266546, 0.1809829175, -0.0322661027, -0.2092975974, 0.3086953461, 0.0803970918, 0.0249113943, -0.0886617675, -0.0028046924, 0.0598424301, 0.0268259738, -0.0333439708, 0.0015548457, 0.0416254625, 0.1934373379, 0.1391184926, 0.0236591622, 0.1221233830, 0.0721841380, 0.1553555876, 0.2034175992, 0.0318194218, 0.1626049727, -0.0372780524, -0.1096272096, 0.0568138137, 0.1586751044, -0.0302695017, -0.1912316680, 0.0169056971, -0.0837000534, 0.0506306067, -0.0487412401, 0.0658036247, -0.0633102506, -0.0802972689, -0.0626914501, -0.1223000959, 0.1847897321, -0.0707629845, 0.2233803421, -0.1023039669, 0.1719315946, 0.1957100779, -0.0297665410, 0.0580760241, 0.0956654251, -0.0726177022, 0.1329741925, 0.0000785094, 0.2256993204, 0.1420181990, -0.0177401137, 0.0961315483, 0.2966060936, -0.0655575320, -0.1943844259, -0.0590480044, 0.0234815031, 0.0918506309, -0.0243547540, 0.0050105811, -0.0065982579, 0.0943656862, 0.0237034634, -0.1035997570, -0.1172858626, 0.0690441430, 0.0045040054, -0.0468850471, -0.0617158189, 0.0983104110, -0.1576261818, -0.0728806332, -0.0888952911, 0.2327795178, -0.0372217745, 0.0118658207, 0.0242220461, 0.1620116830, 0.1797681600, -0.0213637874, -0.1212396845, -0.0357351936, -0.0609017536, -0.0496646948, 0.1154520139, -0.0761260688, -0.1082412526, -0.1308431476, 0.0895589292, 0.0513230339, -0.0846577659, 0.0017143629, -0.1034122482, -0.0565547198, -0.2052788287, -0.0542972125, 0.0872160196, -0.1449799091, 0.2063536942, 0.0567695834, 0.1273562163, -0.0491425879, 0.1567976475, 0.0777994841, 0.1757389158, 0.0471788086, 0.0217531621, 0.1402649730, 0.0224776231, 0.0628000125, -0.1287414283, -0.0164657906, 0.1651934385, 0.2371690720, 0.0840757489, 0.0528839752, -0.0094099492, 0.2866517007, 0.2837581336, 0.0923923850, -0.0179682653, -0.1282641590, 0.0079151895, 0.1678873003, 0.1281916201, 0.0276419986, -0.0104561327, -0.0384781733, -0.0132131912, 0.0430945307, -0.1023297533, 0.0754920319, 0.1844292879, -0.0402111895, -0.1059397012, -0.0410041064, 0.1950831562, 0.1411411017, 0.0694708377, -0.1828737706, 0.0602085516, 0.0968799368, -0.0159627888, -0.0341784991, -0.1083188727, -0.0081191706, 0.0159724802, 0.0873155743, 0.0125772245, 0.1233461127, -0.1763499826, -0.0177865811, 0.1369093657, -0.2758408487, -0.0640113056, -0.1873299927, -0.0507278368, 0.1310057044, 0.0917181298, 0.0263352990, -0.0388480090, 0.1144195497, -0.0083315177, -0.1238957793, -0.0807723626, 0.0618524998, -0.1328196377, 0.0926742107, 0.0350317098, 0.3038548529, -0.0747510567, -0.0097823022, -0.0992217362, 0.2008904964, -0.0816947073, 0.0660482645, 0.0008785079, -0.0474431962, 0.0673619807, 0.1489340663, -0.1763441414, -0.1637579501, 0.0353583135, -0.0184112974, 0.0540677719, -0.1246967912, -0.1332267076, -0.1499820203, 0.1566330940, 0.0662567988, -0.0184464473, -0.0371630751, -0.2151722014, 0.0937165543, 0.0058358572, -0.0214887802, 0.1568790823, -0.0072866036, 0.1431061476, 0.1198967472, 0.0231593195, -0.1907722950, 0.4050638080, 0.0306104887, 0.0618491583, 0.0272524972, -0.0650347769, 0.0982288197, 0.1418178827, 0.0259716660, -0.2030982226, -0.0707607195, -0.0955747664, 0.1650879681, -0.0659194812, -0.1657294631, -0.0728076994, 0.1678840667, 0.2320515215, 0.1640075296, -0.1112571433, -0.0570597611, -0.0215461254, 0.1108123735, 0.0745805204, 0.0828864202, 0.2201949358, -0.3230158091, 0.0699114501, -0.0864951983, -0.0244514681, 0.0136743337, 0.2230859399, -0.0301734917, -0.0547951572, 0.0731586963, 0.1906099916, 0.0281980336, 0.1335913688, -0.1513234824, -0.1294431686, -0.0536092073, -0.0595162436, -0.0233903527, -0.0626462549, -0.0233324151, -0.0351727530, 0.0626957938, -0.0983217135, 0.0903144255, -0.1280057877, 0.0855448321, -0.1066301242, -0.3383575678, -0.0581566803, -0.2213910520, -0.0516945422, 0.0421461910, 0.0608956963, 0.1993482709, 0.0300772917, 0.0829778984, -0.0627937913, -0.1495734900, -0.0104378611, 0.0773503780, -0.1234211922, 0.0405750722, 0.0263736155, 0.2672175467, -0.0212761406, -0.2939057946, 0.0093866652, 0.1452669501, -0.0942528546, 0.0893345773, -0.0089412387, -0.1060224026, -0.0423562750, 0.2241641879, -0.0664178953, 0.0146966642, 0.0117900865, -0.0432563238, 0.0377836637, -0.2745764852, -0.1084085703, -0.1558374166, 0.1316655278, 0.0601223670, -0.2315714508, -0.1148139164, -0.0869362205, 0.0345950164, -0.0357803144, -0.0499897599, 0.2203346044, 0.1133676618, 0.1171839610, 0.1674217880, 0.1559747607, -0.1133039147, 0.4371047318, -0.0269595701, 0.1067378074, 0.0558751933, -0.0672184229, 0.0146340970, 0.1179158092, -0.0883895159, -0.0690291747, 0.0575106554, -0.1020772532, 0.0075796675, -0.0147059429, 0.0228720177, -0.2466900498, 0.2159948349, 0.1079761237, 0.2046749741, -0.1221348643, -0.1364238709, -0.0775774121, 0.1450464427, -0.0286308564, 0.0782237276, 0.1805341542, -0.2086361796, 0.0434167795, -0.0315562710, -0.0021290197, -0.0369125120, -0.0232140329, 0.0124333678, -0.0065357997, 0.0081626568, 0.2351064235, 0.0718404651, 0.1914566010, -0.1275819391, -0.1363243163, 0.0844045877, 0.1245368198, -0.0526455231, -0.0424637310, 0.0043081841, -0.1601017565, -0.0739867687, -0.0137436036, -0.0262138955, -0.1287899315, 0.0517521501, -0.0301743485, -0.3218827844, -0.0479629561, -0.2825708389, -0.1163381562, 0.0140168872, 0.0400289074, 0.2711619735, 0.0101207606, 0.1656628698, -0.1291189492, -0.1826532185, -0.0051287422, 0.0048458888, -0.0436718091, -0.0460838974, -0.0560214818, 0.0639105961, 0.0459292792, -0.0934673175, -0.0525101386, 0.0729709566, 0.0250800680, 0.0495197214, 0.0230830852, -0.0439468287, -0.0534668826, 0.1736810207, -0.0155627299, -0.0815375373, -0.0474819168, -0.0822805986, 0.0818325505, -0.2823820412, -0.1256341338, -0.1918715686, 0.1223350838, -0.0403894894, -0.2278428525, -0.0135703823, -0.0488428101, 0.1304152906, -0.0643497035, 0.0184710119, 0.1723423898, 0.1462379545, 0.0120700654, 0.1916177720, 0.1653341800, -0.0162856523, 0.2933521867, -0.0926151127, 0.2488632798, 0.0903444961, -0.1064773649, 0.0607833527, -0.0395557359, -0.2416002601, -0.1349374652, 0.0479725525, -0.1100530475, -0.0452091955, 0.0560759641, -0.0423903763, -0.0949386358, 0.2309570462, 0.1164099500, 0.2082949430, -0.0821481422, 0.0368819684, 0.0281384923, 0.0774563029, 0.0264868382, 0.0997035950, 0.1485265940, -0.2838393748, 0.0602927431, -0.0396860838, 0.1196880341, -0.0241495688, -0.0412816331, -0.0029396457, 0.1218654513, 0.0538752973, 0.1004289389, -0.0272143371, 0.1306815296, -0.1281687021, -0.0211307630, 0.0912169293, 0.0750151947, -0.0643905103, -0.0370680764, 0.0127698565, -0.2123762518, -0.1159668192, -0.0265816860, -0.0125062792, -0.1303894669, -0.0305538904, 0.0587140322, -0.2168075144, -0.0029579494, -0.2872703373, 0.0105068553, -0.0094785569, 0.1195079014, 0.2223890126, 0.0503377169, 0.2864719629, -0.1804266572, -0.1472859383, -0.0117665026, 0.0372020677, -0.0537690111, -0.0204029884, -0.0384849273, 0.0866256207, 0.1191983819, 0.0207044519, -0.1067429408, 0.0100268666, 0.0563237593, -0.0348198600, 0.0288322642, -0.0797111690, 0.0263611786, 0.0500320159, -0.1263929456, -0.1248091012, -0.1268990189, 0.1102076396, 0.1460534334, -0.1635517925, 0.0055787652, -0.1155453846, -0.0024697164, 0.0052614561, -0.1763096750, -0.1504587531, -0.0172061268, 0.1502175033, -0.0350587144, 0.0393571705, 0.0762553662, 0.1212513670, -0.0530862473, 0.1050054580, 0.1387660205, -0.0557212271, 0.1793485731, 0.0018219192, 0.1789838821, 0.0545362122, -0.0318684243, 0.0129189901, -0.1272169799, -0.2003613561, -0.0307742208, 0.1352786720, 0.0079257134, 0.0172001030, 0.0050780936, -0.0272649843, -0.0169544648, 0.2919782102, 0.0294014905, 0.3303329945, -0.0891870186, -0.0291936137, 0.0637144074, 0.1429925710, -0.0178673007, 0.0153530100, 0.0455301963, -0.2793816030, 0.1065527722, 0.0090865027, 0.1480686218, 0.0805925652, 0.0935832411, -0.0122654308, 0.0401128605, 0.0256962422, 0.1628450155, -0.0232376605, 0.1778132170, -0.1617250293, 0.0669895932, 0.1021605134, 0.0319592506, -0.0705780387, -0.1190363765, -0.0245303977, -0.0164799783, -0.1448728144, -0.1030901819, -0.0868764669, -0.0581231266, 0.0169572774, -0.0328368098, -0.1982316077, -0.0311409235, -0.3354461491, -0.0028779940, 0.0207587350, 0.1120258272, 0.2627639771, -0.0216455013, 0.0915610865, -0.1366324425, -0.0806308985, 0.0253642239, -0.0173826236, 0.0430602580, 0.0299531873, 0.0425676033, 0.1423256397, 0.0968212485, 0.0147413155, -0.0401441120, -0.0061516860, 0.1079254746, 0.0280931164, 0.1037662774, -0.0305799283, -0.1912004054, 0.0555036403, -0.1549843997, -0.0853252485, -0.1005718783, 0.0509261675, 0.1404868960, -0.2294166833, -0.1545785964, -0.1179498881, 0.0251092389, 0.0219045896, -0.2218226045, -0.0862962082, 0.0160781480, 0.0614940152, -0.0546260364, 0.0242983215, 0.1522644609, -0.0104200142, 0.0367474779, 0.0486093014, 0.1701317579, -0.0216380190, 0.1345772147, 0.0079553686, 0.1687480509, 0.1439526230, -0.0474594310, 0.0578001589, -0.1441419572, -0.1467940807, -0.2176437229, 0.0049784505, -0.0880649984, 0.0920423642, -0.0227547679, -0.1493353546, -0.1228310838, 0.2481700182, 0.1420502961, 0.3353453279, -0.1179809272, -0.0291267838, 0.0125243049, 0.1357290298, 0.0237750113, -0.0358130783, 0.1125408337, -0.1688379645, 0.0298329424, 0.0180037227, -0.0462601818, 0.0806726888, 0.0750051141, 0.0967338681, 0.1372731626, -0.0443784818, 0.1687667668, -0.0788915977, 0.1890485287, -0.1565869004, 0.0712755471, 0.0896579549, -0.0063345926, -0.0811182633, -0.0093910536, -0.0600752234, 0.0135895237, -0.1121279374, -0.1340206861, 0.0047764177, -0.0301885922, -0.0203548875, 0.1374555677, -0.0765764862, -0.0224919654, -0.2407390922, 0.0794785321, -0.0451179333, 0.1280338615, 0.2153804004, 0.0464962274, 0.1383296400, -0.0981331542, -0.0148941437, -0.0364238769, -0.0707031116, -0.0520531982, -0.0646810532, 0.0500771329, 0.0351664647, 0.1600914598, 0.0938312933, -0.0235145111, -0.0798032209, -0.0965648443, 0.0974839181, 0.0066389120, -0.0073966235, 0.0393694378, 0.0089029502, -0.1125968918, -0.1827050447, -0.0610524118, -0.0001645561, 0.0992813855, -0.1719402224, -0.0494072139, 0.0093900068, -0.0700428858, -0.0005069184, -0.1551405489, -0.0806264803, -0.0113805970, 0.1878358722, 0.0251266882, 0.1563140750, 0.0192157179, 0.1014550328, -0.0669163615, 0.1239607260, 0.2837055326, 0.0203148574, 0.1193183362, 0.0494756177, 0.2366446108, -0.0081657926, -0.1536630690, 0.0107930154, -0.0382086225, -0.1430409253, -0.0052803108, 0.0415277220, 0.0389276445, -0.1598115116, -0.0863159299, -0.0721217692, -0.0207769647, 0.2179238200, 0.1496845186, 0.1377051324, -0.0878416076, 0.0390158854, 0.0845305845, 0.0727600977, 0.0506443977, 0.1258752793, 0.0574731119, -0.0361677334, 0.0342258587, 0.0200563520, -0.1202293932, -0.1620222330, 0.0923935696, 0.1630844921, 0.0277448650, 0.1336083561, 0.2471137643, -0.0923642069, 0.1192748845, -0.0399300717, 0.1725839823, 0.2564461231, 0.1462378800, 0.0027861602, 0.0807052180, -0.0405101627, -0.1009790152, -0.2629256248, -0.1218716353, -0.0679832995, -0.0289206319, -0.0080970051, 0.0731613487, -0.0481226929, -0.0015447678, -0.1065715104, 0.0958189964, 0.0245391447, 0.0335979015, 0.2354301661, 0.0361811295, 0.1319430023, -0.1208549738, -0.0563060604, -0.0501887538, 0.0001123327, -0.1610813141, -0.1186446249, -0.2049986869, 0.0973622650, 0.0152198244, 0.0472163521, -0.0022271140, 0.1849577129, -0.0987961516, 0.0030329803, -0.0820332095, 0.0802952722, 0.0996161699, -0.0087117599, -0.0645200908, -0.0640202239, -0.0528932139, -0.0774818063, 0.2634665370, -0.0768604800, 0.1009205356, -0.0725331530, -0.0030313954, 0.1621222794, -0.2090880722, -0.0729190409, -0.0966393054, 0.0595618412, -0.0287682842, 0.0377024636, -0.0117258336, -0.0385965593, 0.0445919447, -0.0129629513, 0.1498696208, 0.0589701682, -0.0061088065, 0.0100459307, 0.0358761661, -0.0509575680, -0.0934744999, -0.0393593349, 0.0414161570, -0.0602038950, -0.0641896501, -0.0356241688, 0.0653411746, -0.0750948638, -0.0029915546, -0.0623567700, -0.0862906948, 0.1702282578, -0.0237574112, -0.0167466924, -0.0596750565, -0.0344810598, -0.0066082287, 0.1017687693, 0.0850687921, 0.0908444375, -0.0288040359, -0.0294281617, -0.0299584307, -0.0044812905, -0.0493093766, -0.1701824963, -0.0475827120, 0.1365737319, -0.0680887103, -0.0243116748, 0.0634848550, -0.0883995444, 0.1257278919, -0.1050142348, 0.1179807708, 0.1378529519, 0.0410174914, -0.0981703773, 0.0701019615, -0.0227902085, -0.1611793935, -0.1159191206, -0.0733632818, 0.0798305124, -0.0170476120, 0.0476102978, 0.0384265482, 0.0878319964, -0.0041307230, -0.0846265480, 0.0526720136, -0.0214230958, 0.0419017486, 0.0847143531, 0.0670365989, 0.1622694880, -0.0948309973, 0.0175364260, 0.0003137699, -0.0456756949, -0.1111133546, -0.0107966755, 0.0855101272, 0.0244666133, 0.1815077513, 0.1330419481, 0.0282749943, 0.0666040704, -0.0766467825, -0.0139823630, -0.0273397304, -0.0856461301, -0.0327502564, -0.0988817587, -0.0097374218, -0.1744976938, -0.0727514774, -0.0176989026, 0.1664903462, -0.0867864788, 0.1172256842, 0.0783379525, 0.0412386879, 0.1000624076, -0.0719542801, 0.0010926723, -0.0684108734, -0.0809696093, -0.0568096712, 0.0623147637, -0.0533270352, -0.0258871913, -0.0027642399, -0.0677801594, -0.0522448868, 0.0421910807, 0.0211621821, 0.0004165098, -0.0466777049, 0.0129526183, -0.0114389956, -0.0776850209, 0.0006331280, -0.0407177396, 0.0685534477, 0.0674998462, 0.0152482986, -0.0634124652, -0.0185084715, -0.0686873347, -0.0520272106, -0.0226102471, -0.0136706978, 0.0424412191, -0.0256906115, -0.0235159062, -0.0675179735, 0.0596999973, -0.0267072916, -0.0418941081, -0.0812051520, 0.0193234235, 0.0094904676, 0.0643940121, -0.0041805804, 0.0038832203, -0.0552613176, 0.0053519011, 0.0625346154, 0.0020487756, -0.0097843558, -0.0634989887, -0.0383483246, 0.0339991748, 0.0058818460, -0.0539181828, 0.0573640168, -0.0456872694, 0.0793902576, -0.0462059975, 0.0299934223, 0.0612679869, 0.0466363430, -0.0576023310, -0.0509650819, 0.0035507381, 0.0494457930, 0.0069019496, 0.0079927519, -0.0656667948, 0.0207353607, -0.0381196700, -0.0524806306, -0.0766581297, -0.0143235624, -0.0633543432, 0.0652001202, 0.0751081407, -0.0453860760, -0.0719591528, 0.0173496008, 0.0069318041, 0.0346885324, -0.0627124608, -0.0351745784, -0.0242435895, -0.0136107281, 0.0240788162, -0.0068303123, -0.0365273766, 0.0514715314, -0.0271881893, 0.0748483539, 0.0142698810, 0.0108207762, -0.0821851790, -0.0123581886, -0.0488593429, -0.0002626926, -0.0654684752, 0.0527764857, -0.0533350855, -0.0310758650, -0.0495002680, 0.0015455037, -0.0016853958, -0.0509021282, -0.0462708175, 0.0528281033, -0.0607485548, -0.0556671023, 0.0037624389, -0.0283320323, 0.0532700717, 0.0695321113, -0.0428211428, 0.0007880852, -0.0526953042, 0.0631106496, -0.0769047737, -0.0614798330, 0.0260443687, 0.0285587385, 0.0659022927, -0.0687053874, -0.0058859140, -0.0493118986, 0.0412447751, -0.0286887549, -0.0274457783, -0.0425576605, 0.0071574301, -0.0242065452, -0.0165134147, -0.0524255373, -0.0394751169, -0.0764552802, 0.0407291725, 0.0094183832, -0.0649290830, 0.0159595609, -0.0619505197, -0.0611653626, 0.0120373368, -0.0296924077, -0.0349798463, 0.0174311325, -0.0397706926, 0.0231557861, 0.0790139884, -0.0039903671, -0.0802428052, 0.0491369069, 0.0009032488, 0.0511033833, 0.0817678124, 0.0208658651, -0.0772519112, -0.0009254217, -0.0496374294, -0.0645429343, -0.0638747439, 0.0192663223, -0.0248507299, 0.0311304554, 0.0126551613, 0.0235434249, 0.0407676697, -0.0100539625, 0.0678797513, -0.0264529437, 0.0298714489, 0.0067947358, 0.0026119351, -0.0199469849, 0.0707945079, -0.0198472813, 0.0753198862, -0.0597411841, -0.0477506593, 0.0012853220, -0.0549260452, -0.0234526396, -0.0494737700, -0.0420172475, 0.0614788085, -0.0113951340, 0.0819026530, 0.0542193800, -0.0605726019, 0.0560578257, -0.0735338852, 0.0695248991, -0.0306948684, 0.0820058435, -0.0614724085, 0.0569392890, 0.0089015812, 0.0656538606, -0.0790948570, -0.0197691247, -0.0610318929, 0.0588805079, 0.0318023488, -0.0359471664, 0.0502459258, 0.0004111081, 0.0335831493, 0.0657015294, 0.0268458426, 0.0219255611, -0.0203851797, -0.0302549824, 0.0359586775, -0.0290322937, 0.0660968274, -0.0386049487, 0.0324919894, -0.0675421730, 0.0565103292, 0.0024244562, 0.0619979203, -0.0059212744, 0.0639999658, -0.0055206120, 0.0182005614, -0.0525828116, -0.0748932958, 0.0077883601, 0.0801498592, -0.0353159048, 0.0289396644, 0.0001311079, 0.0373780429, -0.0112452060, 0.0363013148, 0.0612339079, 0.0046581253, 0.0175143182, 0.0054873005, 0.0605908930, -0.0067371055, 0.0584849119, -0.0777171776, 0.0660356134, 0.0408917889, -0.0657898933, 0.0076934099, -0.0567189455, 0.0447043926, -0.0775982216, 0.0004197136, 0.0566111058, 0.0457805544, -0.0520993397, 0.0746820718, 0.0572519302, -0.0186787471, 0.0787798911, -0.0543082207, -0.0064710975, 0.0392942876, -0.0467671566, -0.0548217446, 0.0701101869, -0.0024965629, 0.0624091178, -0.0047098622, 0.0198812187, -0.0089829937, 0.0136857033, -0.0069833621, 0.0340832621, 0.0155115053, 0.0418529212, 0.0740973651, 0.0650623888, -0.0077109858, 0.0480333269, 0.0270224884, -0.0313962698, -0.0398262218, 0.0198949128, 0.0072664469, 0.0312481076, -0.0520107932, 0.0500026792, -0.0185890198, 0.0425716043, -0.0788725913, -0.0714485943, -0.0638989434, -0.0073458031, 0.0554628670, -0.0111817569, 0.0224421099, 0.0267657042, -0.0217327513, 0.0299519598, -0.0682358220, -0.0599666797, -0.0245230012, 0.0588085353, 0.0413277075, 0.0112156793, -0.0708411932, -0.0412659347, -0.0467016101, -0.0653685108, 0.0070940256, 0.0448672622, -0.0290608555, -0.0178473741, 0.0564654619, 0.0375341773, -0.0736010820, 0.0283826664, -0.0168457404, 0.0137189627, 0.0247953609, 0.0781272203, -0.0753712729, 0.0435222536, -0.0182344019, -0.0260029808, 0.0043711886, -0.0023674518, 0.0373866409, 0.0473932326, -0.0419457667, 0.0351563096, -0.0239082389, -0.0674771965, -0.0421734601, 0.0219217315, -0.0177339986, -0.0566299036, -0.0792759210, 0.0486887246, -0.0260406733, 0.0204773396, 0.0818295628, -0.0421950668, 0.0243921876, 0.0184515044, -0.0607317239, -0.0339956582, -0.0622945502, -0.0547831506, -0.0208054036, -0.0151753277, -0.0077007115, 0.0455003679, 0.0578872859, 0.0729156137, 0.0414378047, -0.0621367656, 0.0260028616, 0.0740021914, 0.0286029205, 0.0156766921, -0.0700120032, 0.0710934997, -0.0615722910, -0.0739201903, -0.0335111022, 0.0083438382, 0.0217176303, -0.0607426614, 0.0427857786, -0.0522791818, -0.0309502743, -0.0711045563, -0.0388796851, 0.0076272339, -0.0350260250, -0.0788396075, 0.0730499327, 0.0803147554, 0.0485830605, -0.0217863955, -0.0386861116, 0.0574598461, -0.0147585794, 0.0641411692, 0.0035549775, -0.0818977803, -0.0565248206, 0.0531500131, 0.0475781262, -0.0819744244, 0.0504547954, 0.0405179411, 0.0128806308, 0.0118343309, 0.0239651650, -0.0706599355, 0.0505425185, 0.0099076480, -0.0479054600, 0.0277516618, 0.0720908940, 0.0380012244, -0.0256811827, 0.0148087293, 0.0075872988, -0.0395449623, 0.0146451620, 0.0112081589, 0.0396388806, 0.1194104254, -0.0166331045, 0.1074933782, 0.1015635133, 0.1269198954, 0.0091643110, 0.0885151029, 0.0681274012, -0.0409890935, -0.0142503055, 0.0069714785, 0.1115249619, 0.1624456644, 0.1713383794, -0.0899288729, 0.0531526953, -0.0807909667, -0.0791900158, -0.0590263978, -0.1615405828, -0.1176644638, -0.1882773787, 0.0871603265, -0.0950098857, -0.0390691720, 0.0872321054, 0.1617406756, 0.0868298486, 0.0474010333, -0.0991587415, -0.0590807013, -0.0535037629, 0.0081240237, 0.1364901364, -0.0322916619, 0.0521706939, 0.0223224126, -0.1229021922, -0.0346759558, -0.0067060911, 0.1803907305, 0.0215324573, -0.1399292499, -0.1010655388, -0.0189836398, 0.0050394204, -0.1646851748, -0.1277222782, 0.1046351045, -0.0088063926, -0.0122809792, -0.1595862806, -0.0323729217, -0.0343483500, -0.0103828618, -0.0442744642, 0.0716024935, 0.0229933970, 0.0331071690, -0.0086263260, 0.1968302727, 0.1503557265, -0.0948671252, 0.1873742640, 0.0729286820, -0.0525683723, 0.0191137902, 0.1289431900, -0.0022343926, -0.1537775248, 0.0361493230, -0.0372148789, -0.0736289397, 0.0201709680, 0.0989299789, 0.0914979279, -0.0905406326, 0.0733619928, 0.1524011940, -0.0699930638, 0.0470754541, 0.0169971343, 0.1083918214, 0.0218844824, 0.1127271131, 0.1901785731, -0.0031591747, -0.0631916672, -0.0632743314, 0.0188700650, 0.0640381053, 0.0528289564, -0.0502054989, 0.0520320982, -0.0625084117, 0.0279676616, -0.1758639067, 0.0159203075, -0.0378669500, 0.0373037793, 0.2037940919, -0.0477746651, -0.0225606896, 0.0607530326, 0.0347537920, -0.1052796096, 0.0668750554, 0.0712793693, 0.0799141154, -0.0761837512, 0.0964432433, 0.0441240817, 0.1363047510, 0.0023038667, -0.0595264211, -0.1269887090, -0.0564558953, 0.0154921981, -0.0808203891, -0.0892881304, -0.0306068212, 0.0092387963, 0.0686068833, -0.0287883412, 0.0681253821, 0.0747652650, 0.0729926303, 0.0954217464, -0.0517013296, -0.0441541485, 0.1293497235, -0.0246650744, -0.0368281752, 0.0286315251, 0.0150691019, 0.1085540280, 0.0256593432, 0.0412139781, 0.0495844670, -0.0791085809, 0.1635206938, 0.0120134819, -0.1726936102, -0.0732910633, 0.0338443890, 0.1512484550, 0.1570228338, -0.1244768724, 0.0211391672, 0.0157549847, -0.0715576410, -0.0536677353, -0.1378515214, -0.1041581482, 0.0073394012, -0.0069177123, -0.0100708976, -0.0633030757, 0.0055898549, 0.0021444988, 0.0821822137, 0.0655573681, -0.0959020033, 0.0951600447, -0.0669511184, 0.0628822744, 0.0636688769, 0.0259136371, -0.1067362502, -0.0108943656, -0.0308663696, -0.2055129856, 0.0687304586, 0.1662736982, 0.1255328208, 0.0930396318, 0.0859633610, 0.0904555470, 0.0725177675, -0.0355740637, 0.0705280006, -0.0070324577, 0.0435925722, 0.0459150821, 0.1702358723, 0.0748781189, -0.0156047465, 0.0894571468, -0.0749727339, 0.0442371927, -0.0536463670, -0.1423284411, -0.0056552622, 0.0475493371, -0.1547901332, -0.1203725189, 0.0284205563, 0.0645273551, -0.0333357900, -0.0477707013, 0.0603342988, 0.1288508773, -0.0368130654, -0.0105947210, 0.1160701960, -0.0097109079, 0.0221214294, 0.0490637012, 0.1657366604, 0.0549565703, 0.1558014154, 0.0332032628, -0.0178511124, -0.1520646363, 0.0022385060, 0.0235744864, -0.1191101670, 0.1208539978, 0.0335390940, 0.0320955403, 0.0708134398, 0.0123975566, 0.0474869870, 0.1004664525, 0.0751750991, -0.0736657977, -0.0121765602, 0.0137487985, 0.1052749604, 0.1391573399, 0.1905129850, -0.0518597029, 0.1031147316, -0.1094679683, -0.0020844419, 0.0586118363, 0.1506522298, 0.0271847695, 0.0706970766, -0.0254504047, -0.0044101826, -0.0865230262, -0.0860253572, -0.1396991909, 0.0275368467, 0.0606027171, 0.0554912277, -0.0982936919, -0.0978263989, -0.0373781770, -0.1482123733, -0.1139975935, -0.0604331531, -0.1197203025, -0.0659567714, 0.1313941032, -0.1049610749, 0.0009860102, -0.0208253618, 0.0155684175, -0.0458524078, -0.0385785736, 0.0669807196, 0.0137199648, -0.0281487387, 0.2184982449, 0.1655745208, -0.0015965144, -0.0112332096, 0.0707147717, -0.0523762256, -0.0378225558, 0.0997752920, 0.0857150704, -0.0494501479, -0.0429744050, 0.0394317620, -0.0432467572, 0.0150594367, 0.1101046801, 0.0168521404, 0.0701868013, -0.0204140358, -0.0282255821, -0.0616185591, -0.1996885538, -0.0826889873, 0.0098898420, 0.0240740012, -0.1083073393, -0.1499455571, -0.0906906947, -0.0255142115, 0.1008529291, 0.0842429921, -0.0541800037, -0.0278325789, 0.0798532516, -0.0228116997, 0.1058320403, -0.0550547801, -0.0040374743, 0.1144746393, 0.0111685712, 0.1208539456, -0.1400206238, -0.1328968853, 0.0485211834, -0.0996526629, 0.1054016799, -0.0815252289, 0.0274654962, 0.0932813957, -0.0180279873, -0.0630427450, -0.0145856561, 0.0013526295, 0.2439495027, -0.0240385868, 0.0582793877, 0.0641404837, 0.1120500565, -0.0288317911, 0.0708104968, 0.0045638140, -0.1770071238, -0.0039242660, 0.1337251961, -0.0138059836, -0.0477935635, 0.1045570374, -0.1713226885, 0.0765604302, -0.0447156169, 0.0255241096, -0.0921479613, 0.0188794360, 0.0525414459, -0.0843324438, -0.0497630052, 0.0479879826, -0.0751373693, -0.0107282791, -0.0499448478, 0.0991267487, 0.0993089452, 0.0851627961, -0.0607013851, -0.1934220642, -0.0518283546, -0.0588717833, 0.0092700236, 0.0056916052, -0.1498732716, -0.0409239195, 0.0207455177, -0.0586645640, 0.0020692318, 0.0210569873, -0.0012841035, 0.1671977639, -0.0239543151, 0.1076469719, 0.0691302493, 0.0402848125, 0.1331236362, 0.1037562713, -0.0800095350, -0.0613174997, -0.0965128615, -0.0875784308, -0.0418778248, 0.0698286593, 0.1302383244, 0.1396010965, 0.0889846906, 0.0905528292, -0.1047132984, -0.1653806120, 0.1769057065, -0.0925741121, 0.0405300632, -0.0076174298, -0.0511199683, -0.0350361802, -0.1675746143, 0.0097632855, -0.1152377650, 0.0814060420, -0.0753959864, -0.0579284020, 0.1039206162, -0.0543771125, 0.1161160842, 0.0031435501, -0.1104844585, -0.0123556713, 0.1546988934, -0.0298842546, -0.0645662993, -0.0562388152, 0.0700205192, 0.1199985370, 0.2366264611, 0.1361713409, -0.1202074513, -0.0182012916, 0.0226289034, 0.0944321454, 0.0230328944, 0.0670763850, 0.1058558300, -0.0727813914, 0.0266380981, -0.2330392301, -0.0677940249, 0.0392882712, -0.0248652175, -0.0518803000, 0.0230260175, -0.0601569265, 0.0069733569, -0.0571605489, -0.0381956324, 0.0081213778, -0.2060388029, 0.0377392918, 0.1378913373, 0.0139636407, -0.0690518692, 0.1619816124, -0.1001320779, -0.1028914303, -0.0431632698, 0.0097684665, -0.0233727656, 0.0745507553, 0.0457285196, -0.0028972598, 0.0592655949, -0.0602436699, -0.2347933650, 0.1397660375, -0.1058464423, 0.1073538288, 0.1804596633, 0.0981434733, -0.0209698211, -0.2934453189, -0.0424716286, -0.0016980151, -0.0876533762, -0.0560214035, -0.0452656597, 0.0211954191, 0.1841744483, -0.0888055265, 0.0036836199, -0.0689931437, -0.0362834297, 0.1883168519, -0.0403944440, 0.0569232255, 0.0553231947, 0.0398091488, 0.0765501931, -0.0680920258, 0.0410924442, -0.0956295580, 0.0452748351, -0.0817451701, -0.1462571621, -0.0167288221, 0.2104568332, 0.0517749600, -0.0561450906, 0.0889840424, -0.0314397849, -0.0016074844, 0.0929157287, -0.0725841969, 0.1089032292, 0.0254479256, -0.1186411679, 0.0671608895, -0.1032657847, 0.0642616972, -0.1274813563, 0.0653910115, -0.0927608237, -0.0937919170, 0.1437660754, -0.0992428586, 0.1215234026, -0.1156848520, -0.1146472842, 0.0138181588, 0.0969530940, 0.0969784707, -0.0745367035, -0.0542625040, 0.0425063446, 0.2070593089, 0.3217163682, 0.1346667856, 0.0273005720, -0.0410804860, -0.0088677825, 0.0337245762, -0.0979922414, -0.0228047129, 0.0257012472, -0.0177321285, 0.1313879788, -0.3755793869, 0.0425890535, 0.0511116087, -0.0730287507, -0.0950520262, -0.0080730924, -0.1812811941, -0.0767806023, 0.0363217033, 0.0312269684, 0.0087969182, -0.0606467687, 0.1057915986, 0.2153831124, 0.1818343103, 0.0052260351, 0.0827930942, 0.0199520979, 0.0198323131, -0.0374957211, -0.1723811477, -0.1431711465, 0.1132790521, 0.0394359678, -0.0632317886, -0.0909897834, -0.1531599313, -0.2398894429, 0.1183486581, -0.1187287644, 0.0716069564, 0.2082694769, 0.2634208202, 0.0686209276, -0.1529391110, -0.0072643459, -0.1937539130, -0.1087762192, -0.1394909322, -0.1695757806, 0.1434157342, 0.0914546177, -0.0259483997, -0.1152073890, -0.0822326094, -0.0071134032, 0.2346270680, -0.0713957548, 0.0249918345, 0.0187142938, -0.0389448851, 0.1679212749, -0.0234203879, -0.1038425863, -0.0839950442, 0.0073416131, -0.1823354214, -0.0212325584, 0.0194378141, 0.1473467499, 0.0970467553, -0.0251201447, -0.0932103172, -0.0209371615, 0.0109021356, -0.0702976584, 0.1363979131, 0.0218298584, 0.1138288230, 0.1290373653, 0.0956109464, -0.1456029862, -0.0114067020, -0.1228438839, 0.1277368218, -0.0236244928, 0.0444350839, 0.2299440354, 0.0413730107, 0.0794703662, -0.0064249816, -0.2532836795, 0.2526952326, 0.1893175989, 0.0256894398, -0.1143766195, -0.1728739887, 0.0780808255, 0.2119898349, 0.0409804769, 0.2297093868, -0.1564577520, -0.0147755602, -0.1466982961, -0.0960370004, 0.0014098467, -0.2083515823, -0.1726602316, 0.1071018204, 0.0490266569, -0.3145069182, -0.0929361507, 0.0931786969, -0.1206860915, -0.0837500021, 0.1777838022, 0.1292707771, -0.0323905125, -0.0229352377, -0.0531471521, -0.2668905556, -0.1164140850, 0.0328241885, 0.0475578606, 0.1145743951, 0.0407215618, 0.0007793977, -0.0147605911, 0.1606730223, 0.0305608492, -0.2101633549, -0.2236014754, 0.1330823600, 0.1446942985, -0.1277460307, -0.2009657472, -0.1370033622, -0.2353229523, 0.1012162045, -0.0188456923, 0.3128118515, 0.2635512054, 0.2725036740, 0.1054530218, -0.0709785745, -0.0246239044, -0.1746776849, -0.0999235511, -0.0137335062, -0.0566216633, 0.0844497904, 0.1096938327, -0.0655801892, -0.0605809763, 0.0976803899, -0.0298947301, 0.1039495170, 0.0026064976, -0.1959637851, 0.0386693217, 0.0067950706, 0.1733149886, 0.0931029916, -0.1002336144, -0.1217760444, -0.1605846733, -0.1625771075, -0.1871551126, 0.1159787774, 0.0538713038, 0.0878901035, 0.0041977107, -0.0481282473, -0.0214813855, -0.1424234957, 0.0061172782, 0.0414552912, 0.0100398762, 0.2586253285, -0.1046171635, 0.2447128594, -0.0412154645, -0.0558544137, -0.0504878499, 0.1360642910, 0.0157225132, -0.0649534240, 0.2244930714, 0.0172109790, -0.0297102369, 0.0394088104, -0.0537725762, 0.2515813708, 0.3567943871, -0.0426813886, -0.0903830901, -0.0840623826, 0.1151367277, -0.0167762581, 0.1195596606, 0.3369543552, -0.1015328467, 0.0557126291, -0.0419308431, -0.0236431342, -0.0630987585, -0.1442599595, -0.2530855834, 0.0103785675, -0.0253398214, -0.2391599268, -0.2511124611, 0.0755745098, -0.0158141199, -0.0715776905, 0.1767781973, 0.0730541870, 0.0035231272, 0.0483015440, -0.0600030869, -0.2560469806, -0.1353982538, 0.0685730428, 0.0826789141, 0.0364030488, -0.1158835143, -0.0614808947, -0.1782813817, 0.0731220990, 0.1508965492, -0.1135874167, -0.1892700046, 0.2726354897, 0.1419110149, -0.1325656027, 0.0271812994, 0.0346351676, -0.1322875172, 0.2963604331, -0.0749280676, 0.3849645853, 0.3253977299, 0.1572532952, 0.1217973307, -0.1997048259, 0.0444291234, -0.1082915515, -0.2882560194, -0.0663800985, -0.1214356422, 0.0142174140, 0.2044970542, -0.0817235932, 0.0972366035, -0.0785045773, -0.1410484016, 0.1401542723, 0.0517342612, -0.2111965716, 0.1563896835, -0.0290297102, 0.2222326994, 0.0892344564, -0.1198386252, -0.2015234232, -0.1014384627, -0.1336555481, -0.1775502861, 0.1995480508, 0.0039680423, 0.0418950692, -0.0683839545, -0.0099232765, -0.1741117388, -0.0342633426, -0.1020032242, 0.0943517536, 0.1643419862, 0.2452832013, -0.0514135398, 0.0649119467, -0.0923852697, -0.1603262573, -0.0742603689, 0.2687647939, 0.0140459370, 0.0356377475, 0.2801314592, -0.2143356502, -0.0359033272, -0.2229096591, -0.0323639810, 0.0628537759, 0.0861260965, -0.0380177498, 0.0116995443, -0.1602983028, -0.0143688181, 0.1695204973, 0.0865223929, 0.3012461662, 0.0266493578, -0.0018783880, -0.0520103537, -0.0443877317, 0.1158683896, -0.1698382944, -0.2170682549, 0.0923691094, -0.0384913757, -0.1993581504, -0.1950012743, 0.0623556226, -0.1046229526, -0.0960331112, -0.0042780666, 0.1210186407, 0.0584137514, -0.0040989295, -0.2357487381, -0.2447264940, -0.1991358101, 0.0756438524, 0.0915227234, -0.0216262136, -0.0782144517, -0.1292336285, -0.1496781856, 0.0541052185, 0.0155628212, -0.1164676026, -0.1579498500, 0.1166248247, 0.0953060165, -0.0338618457, 0.1272439808, 0.0293183532, -0.1351359040, 0.1136740893, 0.0125354193, 0.2823250592, 0.1761406958, 0.3063329160, 0.1097410619, 0.0539848357, 0.0298829358, -0.0520955101, -0.2662417889, -0.0509286635, -0.1698736250, 0.0329514705, 0.1643933654, -0.1007638425, -0.1295488775, -0.0251666866, 0.0189808179, 0.1259656698, -0.0463556722, -0.3641588092, 0.2264582515, -0.0009174843, 0.0762025565, 0.1761202216, -0.0110904956, -0.0205145087, -0.1707922518, -0.0677280203, -0.0595617108, 0.3061783314, -0.0379862413, 0.0835080221, -0.0147423726, 0.1487969607, -0.1012352034, -0.0798185244, -0.1118285507, -0.0140611613, 0.0688304305, 0.1541645378, 0.0681224465, 0.1259301156, -0.0990274772, -0.0778051093, 0.1372048259, 0.3087348342, -0.0313841589, 0.0151965134, 0.2973600626, -0.2032253444, -0.1092950180, -0.2222597748, 0.0464042760, 0.1553028375, 0.2586023510, -0.0361532606, -0.0959382877, -0.4214978516, 0.0941750035, -0.0379221253, 0.1091518700, 0.1576017588, -0.1179528385, -0.1014198661, 0.0584740788, 0.0334891565, 0.0068423036, -0.0505621471, -0.2689576149, -0.0444179177, -0.0414319336, -0.1363584101, 0.0342628956, -0.0554016344, -0.0971932039, -0.0501594692, 0.2121233195, -0.0228985399, 0.1689583808, -0.1310214698, -0.1912147999, -0.0474190935, -0.1525483578, 0.0258351546, 0.1321544200, 0.0040405341, 0.0028697946, 0.0295683425, -0.1535216421, -0.0184663199, 0.0465097539, -0.1008772999, -0.1486900002, 0.2381284386, 0.0360957496, 0.0404663794, 0.1086473316, -0.1278440505, -0.1062696949, 0.1844936460, -0.0282311849, 0.2494706362, 0.2403258532, 0.2641423345, 0.0994412825, -0.0257178117, 0.0576110110, -0.0596887805, -0.1315921098, 0.0378892943, -0.1260037124, -0.0430981927, 0.0293535553, -0.0939923897, -0.1159703583, 0.0136720520, 0.0632791892, 0.1060219035, -0.1078920439, -0.2434223741, 0.0489168167, 0.0183965731, 0.1023496464, 0.0996970013, -0.1134892777, 0.0217608269, -0.3167852163, -0.1733846217, -0.1942829341, 0.1823869050, 0.0300008021, 0.0758159608, 0.1549994797, -0.1099280715, -0.2665757537, -0.1860312223, -0.1043857485, 0.0204932410, 0.2127430737, 0.1306878924, -0.0708864480, -0.0129719600, -0.1315052360, -0.0747395083, 0.1456892639, 0.2657330334, -0.1066748500, 0.0157551710, 0.3259038031, -0.1605192125, -0.0348542221, -0.1440592259, -0.2371900231, 0.0745529681, 0.1902670562, -0.2134097219, 0.0237133838, -0.3038327694, -0.0904297382, 0.0561643392, 0.2132987231, 0.0198761262, -0.1539555937, -0.1062080264, 0.0806140453, -0.1329876482, 0.1159514785, -0.1100995541, 0.0096831545, -0.1296788305, -0.1197364107, -0.2924467027, 0.0354065150, -0.0688730702, -0.1644406766, 0.0645954609, 0.0972044915, -0.0562820211, 0.1328487843, -0.0424749628, -0.4468340874, -0.2535200715, -0.1861066371, 0.0014936764, 0.1309493333, 0.1156376973, -0.0799446180, -0.1892808080, -0.1113635302, -0.0370567515, 0.0872708559, -0.0142957121, -0.1802611351, 0.0697414428, 0.0252624527, 0.1206849813, -0.0461023562, 0.0905328840, -0.1041980386, -0.0113239819, -0.0636201799, -0.0068271603, 0.2905539870, 0.2214965671, -0.2683354020, -0.0037487517, 0.0661805198, -0.3316065967, -0.2775029838, 0.0498751700, -0.0263164248, 0.0137499440, -0.0983179882, 0.1757737547, -0.0850285515, 0.0487692915, -0.0442583412, 0.0938109308, 0.0403275900, 0.0595514774, -0.2133994251, 0.0556659102, -0.0285790432, 0.1058665216, -0.1001689956, -0.0035534047, -0.1844210327, -0.2957201600, -0.1208079457, 0.1283372641, 0.1269566417, 0.1214978248, 0.0922682360, 0.0131780859, -0.1066269279, -0.1804267764, 0.0171670821, -0.2819812298, 0.0486601591, 0.0949813277, -0.2987904847, 0.0136968847, 0.0087139690, -0.2440963537, -0.0921041518, 0.1151476502, -0.2309236228, -0.1472077072, 0.2602142394, -0.3012077808, 0.0774960816, -0.2100859135, -0.2855849266, 0.0151955457, 0.1202230752, -0.1194357648, 0.0855668709, -0.0796155483, -0.0232063979, -0.0914755613, 0.1881186962, 0.0777821243, -0.2682501376, -0.0591561459, 0.1080124900, -0.0265089218, 0.1858377755, -0.1612676531, -0.0758887306, -0.2251280248, -0.0669172034, -0.4278909862, 0.0118306810, 0.0727453455, -0.2167150974, 0.0854982883, -0.0474832319, -0.1008418202, 0.0947393849, 0.0773023441, -0.2499949634, -0.1270732135, -0.0423399992, 0.0364832580, 0.2267292291, 0.0583563969, -0.0397073962, -0.3458026350, -0.1502793729, -0.0888275504, 0.0011384364, 0.1207375154, -0.1344849467, -0.0185382795, 0.0964396968, 0.1189408302, 0.0413084663, -0.0122498535, -0.2158688158, 0.0398484170, 0.0130050639, -0.0379818231, 0.1169982925, -0.0505447723, -0.0963308737, -0.1283928454, 0.0182712916, -0.3309182823, -0.2853110731, 0.1161749363, 0.0092438059, -0.0778341517, 0.0491622165, 0.1916108727, 0.0027579919, 0.0198771562, -0.0465954915, 0.1408686936, 0.0486141630, -0.0491740741, -0.3570086658, -0.0254154690, -0.0579417795, 0.0323248729, -0.2199595273, -0.0177049637, -0.0831366926, -0.3874031305, -0.1268953234, 0.0769165084, 0.0927395895, 0.0024691627, 0.1294177920, 0.0039487369, 0.0862756073, -0.3076976836, -0.0589391515, -0.3095647097, 0.1540832520, 0.0600916147, -0.0078889774, -0.1025980860, -0.0315012932, -0.2555951476, 0.0171993859, 0.1031342968, -0.3135898113, -0.0785870850, 0.2804669142, -0.3019407988, 0.0412906036, -0.1470919400, -0.2487819493, 0.0807942227, 0.0455507338, -0.1110139787, -0.0347323641, -0.0366144963, -0.0442740731, 0.0144230835, 0.1315470636, -0.0599348769, -0.3892543614, 0.1778290272, 0.0919941813, -0.0943502411, 0.0120867435, -0.1422619820, 0.0059483973, -0.0944885463, -0.0802893490, -0.2809728086, -0.0072779949, 0.0203854293, -0.1204893589, 0.1529939920, -0.0035882858, -0.1691115201, 0.0138412593, 0.0870087296, -0.1237348840, -0.1837358773, -0.0608956255, -0.0414947905, 0.0453574322, 0.0551276766, 0.1043316498, -0.1706384271, -0.2206499130, -0.1675128192, 0.0039784554, 0.0863347501, -0.0116261225, -0.0810320750, 0.0315764621, 0.2203199565, -0.0830646753, -0.0903008953, -0.0148506463, 0.2475206852, 0.0448618867, -0.1856962591, 0.0768501088, 0.1241651177, 0.0771640018, -0.0936385244, 0.0154485023, -0.1608821750, -0.1613248736, 0.1386458725, -0.1136621460, -0.1101963669, 0.0084482739, 0.0853909329, 0.0800008327, -0.1655520350, 0.0736634508, 0.0803279355, 0.0523910485, -0.0769527927, -0.3471691012, 0.0151292365, -0.0259685218, -0.0472116843, -0.4144596457, -0.1620469093, 0.0397815816, -0.2238730937, 0.0083070053, 0.1500238478, 0.0634962618, -0.0500281975, 0.2785566151, -0.0027198943, 0.0673668534, -0.2657948434, -0.0587218888, -0.3436168432, 0.1813431829, 0.0867832005, -0.0196910091, -0.1628495455, 0.1068755388, -0.1556526423, -0.0453309193, 0.1330706179, -0.2034902722, -0.0879053921, 0.1058126092, -0.2773106098, 0.0391298309, 0.0453360677, -0.2449370325, 0.1249759272, 0.0449882858, -0.0990956128, -0.1059748605, -0.0654343069, -0.1275894344, 0.2444404066, 0.1786770970, 0.0557372719, -0.1123923063, 0.1450294256, 0.0376526043, -0.0147381322, 0.0555630475, -0.1091936454, 0.0503731966, 0.0899371207, 0.0245576147, -0.2492855340, -0.1264102012, 0.1111307666, 0.0176021475, 0.2175583988, 0.1870105863, -0.1003160775, -0.0177427530, 0.0516500659, -0.0997573286, -0.0733811185, 0.0391883738, 0.1281855702, 0.1102984473, 0.0209940691, 0.1156848297, -0.2069897503, -0.1271366030, -0.1651623994, 0.0690439641, 0.2165512145, 0.0298099015, -0.0809426010, 0.0037654510, 0.1490319222, -0.0644169524, -0.0062609063, -0.0185456406, 0.1265631616, -0.0394959524, -0.0855435506, 0.0617554076, 0.0701417774, -0.0205538273, -0.1310051978, -0.0223551728, -0.1281711012, 0.0403138660, 0.0909023136, -0.2271441966, -0.0945543945, -0.1294198930, 0.1774410754, -0.0395746604, -0.1485380232, 0.0280064084, 0.1090986952, -0.1094961166, 0.0153922457, -0.3832927346, 0.0128954304, 0.0394620933, -0.0369507186, -0.2698603868, -0.2397667319, 0.1513825357, -0.2035564184, 0.1393914819, 0.1614153534, -0.0263190251, 0.0178206861, 0.1592816710, -0.0497162379, -0.0162788443, -0.1277633160, 0.0094901472, -0.2179223895, -0.0510342717, 0.0350411050, 0.0551747866, -0.2637257576, 0.0653757900, -0.0501125231, 0.0735404268, 0.0734368265, 0.0057049948, 0.1234184131, -0.1711023748, -0.0741151720, 0.0075032581, 0.1800232828, -0.0203402899, 0.1546506882, 0.0065837940, -0.1456545591, -0.1380453706, -0.0716538429, -0.0180677641, 0.0754595324, 0.1038947031, -0.0221359320, -0.2000291049, 0.1049705893, 0.1470800787, 0.0528248288, -0.1250964850, -0.1395199299, 0.0944526419, 0.1409450769, -0.0150209162, -0.1553357989, -0.1019259840, 0.2604952753, 0.0423549116, 0.0288920347, 0.1976922601, -0.0975993052, 0.1566100568, -0.1508228034, -0.1406283677, -0.0099245571, 0.0183334872, 0.1006222740, 0.0156552773, 0.1119865552, 0.0672022551, -0.2826184630, -0.0735561177, -0.3153808117, 0.1505678147, 0.2487521619, -0.0948083773, -0.0520571806, 0.0473330468, 0.0804873928, -0.0914836675, 0.0383396968, 0.0588256977, 0.0847143978, -0.0696020201, -0.0037225701, 0.2606896162, 0.0401539356, 0.0250654351, -0.2533701658, -0.0619481951, -0.1792264879, -0.0874742419, 0.1760600507, -0.1653014570, -0.1937335730, -0.0996553525, 0.2438176274, -0.0009506088, -0.0747843906, 0.1870130450, 0.2004555017, 0.0211699437, -0.0021586712, -0.4045548737, -0.0137954531, 0.1533608288, -0.0255439859, -0.1435042471, -0.2128318250, -0.0607984662, -0.1453235000, 0.0437624305, 0.0184161961, 0.0265525877, -0.0186958127, 0.1773453951, -0.0828218684, 0.0943468213, -0.1849565655, -0.0298944749, -0.1821982563, 0.1143773869, 0.1776603609, 0.2507537007, -0.1071726531, 0.1983100921, -0.2477903366, 0.2134548724, 0.1824171841, 0.0411399268, -0.0473543294, -0.2073003203, -0.0260144714, 0.0251297913, 0.0145438677, 0.0097928895, 0.0811555758, -0.1572036594, -0.2173754722, -0.1507914215, -0.0546796955, 0.0482567623, 0.1146561876, 0.2051566839, -0.0647529885, -0.0928948522, 0.0577615835, 0.2093928009, -0.1189767495, 0.0247567073, -0.0899679512, 0.0028962395, 0.1888239980, 0.0696014687, 0.1056413427, -0.1220486313, 0.2229629159, 0.0599468164, 0.0512033924, 0.0712938532, -0.0905502886, 0.0297511034, -0.1119146124, -0.0599546097, 0.1086716652, -0.0860748515, 0.0346931554, 0.0041448991, 0.1061115637, 0.0415111966, -0.2648621202, 0.0179111529, -0.2825633585, -0.0449537151, 0.1603686064, 0.0518392250, 0.0176806226, 0.0739285648, 0.0223945491, -0.1542089134, 0.0462351851, 0.0712492689, 0.0361643471, -0.1167613864, -0.1366934180, 0.2372959852, -0.0345972516, 0.0292357821, -0.0784099177, -0.0167427864, -0.1807772517, -0.1166047230, 0.0992966220, 0.0397129618, -0.1920159608, 0.0539478734, 0.1691248864, -0.1187123880, -0.1146791056, 0.1113031879, 0.0951137021, 0.0451241508, 0.1018873453, -0.1687646210, 0.0834927857, 0.0024815132, -0.0613007359, -0.0430143774, -0.1039142758, 0.0081107505, -0.1139495298, 0.0768982321, 0.1048002392, -0.1233179644, 0.0112333028, 0.2183131725, -0.0006215182, 0.1150006875, -0.1398936063, -0.1245183721, -0.0866602585, 0.1396589726, 0.2285717279, 0.1284987330, -0.1560261697, 0.2130728364, -0.0131909912, 0.0796535760, 0.0789508298, -0.1243571788, -0.1476696730, -0.0822823346, 0.0287097525, 0.1044108719, 0.0687034503, -0.1520743668, 0.0044375383, -0.2372555882, -0.0063525219, -0.0949139595, -0.0709524900, 0.0617890358, 0.0619552322, 0.1815607399, -0.0871591792, -0.1134509742, 0.2219883502, 0.0791455358, 0.1006946191, -0.0252377782, 0.0027831949, 0.0735496059, 0.1370054781, 0.0741065070, 0.0866632909, -0.0640053079, 0.0492841452, 0.0122318882, 0.1848903447, -0.1121198758, -0.1400227845, 0.0267170928, -0.0622545481, 0.0892933011, 0.0450183675, 0.1346274912, 0.0291986950, 0.0009374380, 0.0386944227, 0.0888163969, -0.3232164681, 0.1178567261, -0.0772573054, -0.0613120310, 0.0954889879, 0.0621354356, 0.1783358306, -0.0500151441, 0.0178111680, -0.1396834999, 0.1103451476, 0.0563489757, -0.0374108627, -0.3397857845, -0.1931479126, 0.1857056469, 0.0446273945, 0.0255400743, -0.0046962136, 0.0398507714, -0.1562532634, 0.0268986337, -0.0732403174, 0.1124768183, -0.2065772861, 0.0709825456, 0.0220551845, -0.1030554771, -0.2055285722, 0.0207626000, -0.1322371066, -0.0078618694, 0.0820309147, 0.0142992241, -0.0243283547, 0.0727877691, 0.0574039109, 0.1000398099, -0.2043153495, 0.1561526209, -0.0208161678, -0.0775528997, 0.0874067396, 0.0068983585, -0.0660143718, 0.1485930383, 0.0967103764, 0.0985891968, -0.1550871432, 0.0109661706, -0.1686593741, 0.0527362712, 0.1102435291, -0.0026241343, -0.1840794086, -0.0140111381, -0.1004336253, -0.0105450358, -0.1083471328, -0.2231454551, -0.1589209586, -0.2675870359, -0.0352874212, 0.0402154513, 0.0211526901, -0.0605012141, -0.1601150781, -0.1391277164, 0.0275315326, -0.0159603432, -0.1313704699, 0.0306476131, 0.0215728153, 0.0962454677, -0.1070154309, -0.2341286391, 0.2900951207, 0.0145776290, 0.2075993121, 0.0975799263, -0.0274664462, -0.0870610327, 0.0930933580, 0.0377557091, 0.1038278639, 0.1000787914, -0.1086307094, -0.0040091537, 0.1183482781, -0.2469244599, -0.1454726309, -0.0009104777, -0.0024361161, 0.1823066771, 0.1412837505, 0.0105806421, -0.1184998751, -0.0463158712, 0.2117529660, 0.1956276447, -0.0810915828, 0.0275733694, -0.0146294851, -0.0124458633, 0.1962684989, 0.0005167401, 0.0607333668, 0.0484090298, -0.0596964322, 0.0216047391, 0.0089313714, -0.0145317726, 0.0217575338, -0.2286245972, -0.2355024815, 0.0632984266, 0.1592007279, 0.0187424794, -0.1757523417, -0.0639974773, -0.1713258326, -0.0394676886, -0.0964261219, -0.0542359240, -0.1826126575, 0.0222786274, -0.0736260787, -0.0526195690, -0.1890353560, 0.0488339029, -0.0879134610, -0.1075917706, 0.0597829223, 0.1481274515, -0.0559778102, 0.0417754203, -0.0171588622, 0.0133499904, -0.0564554110, 0.0955503583, 0.0494539179, -0.0273976289, 0.1092973650, 0.0672165453, 0.0617265962, 0.0474460348, 0.0031841418, 0.0593901984, -0.1220018715, -0.0139781544, -0.0329919644, -0.0245698914, 0.0328203812, 0.0464336053, -0.1505583972, 0.0209528524, -0.0715000480, 0.0204304941, 0.0328475051, -0.2310784757, -0.1681738347, -0.2827952802, -0.1484786570, 0.1192876771, -0.0289448798, -0.1309741735, -0.0988314450, -0.0805705488, -0.1105830297, -0.1182137057, -0.0693819746, 0.1802936941, 0.1357584149, 0.1884457320, -0.1172955781, -0.1441426426, 0.2795208097, 0.0260953102, -0.0438864529, -0.0186234247, 0.0402452871, 0.0109633971, 0.1220364347, 0.0112352362, 0.0352859534, 0.0833056793, -0.2016838491, 0.0840781108, 0.0929071978, -0.1128550693, -0.1996711940, -0.0926290751, -0.0840239450, 0.0679621994, 0.0621566288, -0.0254042763, 0.0254481062, 0.2209927291, 0.0618025661, 0.1100853831, 0.0943221748, -0.2172020078, -0.0638270676, -0.2005967945, 0.0401804447, -0.0378085375, 0.0246463921, -0.0213663410, -0.1319507807, 0.0514730290, -0.0615360104, 0.0387858860, -0.1050660834, -0.1761852950, -0.0326771662, -0.0880275443, 0.1259251833, 0.1226555705, -0.1350789070, 0.0361708663, -0.0231303629, 0.0420311056, 0.0222492386, -0.0219135955, -0.1327600330, -0.0306948815, -0.1988156438, -0.1979749799, -0.1270520538, 0.2272161245, -0.1665734947, -0.0425456353, 0.0193295721, 0.0704730526, -0.1473846287, 0.0907007903, 0.0080645103, -0.0076767090, -0.1321925670, 0.1808235049, 0.0509755649, -0.0166451484, 0.1643003821, 0.0142631186, 0.1005711854, 0.2071360201, -0.1882502884, 0.0034095480, -0.0915933773, -0.0178735144, 0.0567887574, -0.1457350254, -0.0067044739, 0.1090381816, -0.1405188143, 0.0060078464, -0.0572449528, 0.0965607315, 0.0020520971, -0.3040398359, -0.1639004648, -0.0949893221, -0.0665522665, 0.0634581298, 0.0784654543, 0.0344094522, 0.0337588936, 0.0314891562, -0.1499569863, -0.1830877811, 0.1257505715, 0.2287882715, 0.0051711751, 0.2473105341, 0.0900915191, -0.1511677206, 0.2669644356, 0.2044407725, 0.1645007133, -0.2025270313, 0.2456977516, -0.0091223652, -0.0033184029, -0.0291424729, -0.0607708693, 0.0558113903, -0.1124914736, 0.0044332263, -0.0015860965, 0.1831795126, 0.0226580873, 0.1253110021, 0.0007098902, 0.2474892437, 0.0458183028, -0.1160357893, -0.0554341525, 0.1314173639, 0.0131488089, 0.1032202691, 0.1735126227, -0.1643915772, -0.1881474555, -0.1502299607, -0.0069653350, 0.0588670038, 0.0481056497, 0.0911236703, -0.1468855143, 0.0773048103, -0.0581868626, -0.1240402609, 0.1248152182, -0.1476709396, 0.1101476103, -0.0887686536, 0.0497350395, 0.0165826194, -0.1187746599, -0.0472210534, 0.0474867560, 0.0017153922, -0.0427635685, -0.1859807670, -0.0963081196, -0.0883196071, -0.1875794530, -0.1058751494, -0.0821704939, -0.0577862002, -0.2212997526, -0.0419276059, 0.0479259714, 0.0031562636, -0.1220114455, 0.1239727587, 0.0772133917, 0.0427436717, -0.0112736830, 0.0506963581, 0.0422960259, -0.0715907589, 0.1372284740, 0.1227732152, 0.0240334142, -0.0312733799, -0.0197774339, 0.0304226149, -0.1378310174, -0.0874253735, -0.0230968725, 0.1306224167, -0.0569596030, 0.0399303921, -0.1211364344, -0.0645831525, 0.0268268902, 0.1489375234, -0.0471003205, -0.4077481627, -0.0979301929, -0.1471074224, -0.1272061914, -0.0019841443, 0.0252315756, -0.0711699203, 0.0375186205, 0.0307295583, -0.0876194313, -0.1066862047, 0.1369586438, 0.1439716965, -0.1175619736, 0.1681087911, 0.1897463351, -0.0144042168, 0.1407483518, 0.0894671977, 0.1139927804, -0.0716543347, 0.1672886908, -0.0590327792, -0.0350618288, 0.0748351514, -0.0191517752, 0.1774661988, 0.0219686404, -0.0198809467, -0.0012826737, 0.2092995495, 0.0853927806, 0.0427734740, -0.0545050800, 0.0738557503, -0.0078228712, -0.1475967318, -0.1404937059, 0.1910494715, -0.0145434635, -0.0187096950, 0.0837960541, -0.1011561081, -0.0573255047, -0.1255930364, -0.1478964090, 0.0109742191, 0.1242985949, 0.0937599614, 0.0896405280, 0.0360492356, 0.0628367886, -0.0707943141, 0.0387074053, -0.1092847660, 0.1332312673, -0.0544961058, -0.0447606221, 0.1275409013, -0.1811911613, 0.0661414787, 0.0427466519, -0.0751415342, 0.1553694010, -0.0313223191, -0.2202009708, -0.1083977222, -0.1626341641, -0.0414897799, -0.1482285410, -0.2195137888, -0.0691655353, 0.0319922604, -0.1478352249, 0.0569353923, -0.0705939606, 0.1182640120, 0.0219442379, 0.0484434254, 0.0570772812, 0.1841210574, -0.0455521643, -0.1809953302, -0.0380928665, 0.0918029174, 0.0255646966, -0.1363551170, -0.0275565181, -0.0078692222, 0.1039116830, 0.0062061385, 0.0611507408, 0.0214700047, -0.1410126090, 0.1836640537, -0.0417289138, -0.0258388668, 0.0371336788, 0.1448519975, -0.0372190438, -0.3064683080, -0.2574665546, 0.0047207321, -0.0962861925, 0.0337206908, -0.0202668123, -0.1076767445, 0.1840911955, 0.2014259100, 0.1105309129, -0.0443494730, 0.0672621503, 0.1252344102, -0.1476763934, 0.0709734261, 0.2560059726, -0.0096108355, 0.0430465713, 0.1897703409, 0.1556416899, 0.0051350975, 0.0212476961, -0.0385023318, -0.0894565359, -0.0303371008, 0.0183910336, 0.0805555806, 0.0366735682, -0.1060664132, -0.0684153289, 0.1976820081, 0.0241564382, 0.2675122321, -0.1315275580, 0.0435195900, -0.1123176739, -0.0175142940, -0.0139786322, 0.1261756122, 0.0174102895, -0.0141025735, 0.0349863246, -0.1831277013, 0.0316036791, -0.2518900037, 0.0515208095, 0.1923926175, 0.0429990031, 0.1837141663, -0.0843867213, 0.0348366760, -0.0679310933, -0.0447225571, 0.0944874361, -0.0751144662, 0.0734118819, 0.0716137588, -0.0546301827, 0.1161737889, -0.1882790178, -0.0684596151, -0.0583901368, -0.1550524235, -0.0126792779, -0.0338483863, -0.2099965662, -0.1203862429, -0.0784527361, 0.0065225586, 0.0255094636, -0.2328110784, 0.0892770439, -0.1008727923, -0.0350040570, 0.2497770637, 0.0994500294, 0.2927137911, 0.0529780909, 0.2025183588, 0.0273617636, 0.0975238681, -0.2041707635, -0.1462926269, 0.0711949915, -0.0526838042, -0.0076255109, -0.0254193973, -0.0189004615, -0.0759624392, 0.0039210920, -0.1483571976, 0.1312407851, 0.0146172456, -0.1568691432, 0.1902211308, -0.1767917275, 0.0105272448, -0.0183605365, 0.2288548946, -0.0507849492, -0.3213404715, -0.1930804402, 0.0117226327, -0.1369544715, 0.0339874700, -0.0437580943, 0.0114341173, 0.1111298576, 0.2961289883, 0.0407099277, -0.0720846057, 0.1147759855, 0.1583075374, -0.0603914931, -0.1066291481, 0.1722766757, 0.0277479272, 0.0474052466, 0.0258060768, 0.0588623881, 0.0962811187, -0.0820570812, -0.1357456297, -0.0156992711, -0.0717937797, 0.1020849198, -0.1091553271, 0.0519911982, -0.0270268470, -0.2027952969, -0.0018835681, 0.0264899153, 0.1449514776, -0.0892460123, 0.1799986362, -0.0763271526, -0.1207182035, 0.0224435832, -0.0146224517, 0.0982759073, -0.0659645200, -0.1143675223, -0.0803242326, -0.0468013175, -0.1513895541, -0.0376168527, 0.2008022964, 0.0749771148, 0.0496293455, -0.0224198550, -0.0006818149, -0.1312653571, -0.1480924785, 0.1550551355, -0.0732110068, 0.1122987270, 0.0259995926, 0.0823296681, 0.0809280500, -0.0336873494, -0.0703938305, 0.0495750196, -0.1910961866, -0.1792727113, -0.0822333395, -0.1263849288, 0.0452632420, 0.0965941772, 0.0132158743, -0.0491508283, -0.1535658240, 0.0172983427, 0.0954226032, 0.0573563911, 0.1746739894, -0.0095796622, 0.0833584964, 0.0491334274, 0.1295892000, -0.0151832961, 0.2102521509, -0.1463698149, 0.0158908665, 0.1053881869, -0.0358338133, 0.0562456250, -0.0674455911, 0.1288228333, -0.1844156682, -0.1149570197, -0.1744440347, 0.1252753139, 0.0896460414, -0.1148201525, 0.1400851607, -0.1443307996, 0.0009947817, -0.0595394522, 0.1172238812, 0.0190474112, -0.1190110296, -0.1172860786, -0.0437979475, -0.0933585465, -0.0000195256, -0.1544362903, -0.0683215782, 0.2659341693, 0.2406473309, 0.0405866504, -0.0010515585, -0.1053624153, 0.0391434692, -0.1086022854, 0.0143046398, 0.0530723743, 0.0859419480, -0.1271858662, -0.0391710177, 0.0276439190, -0.0395857692, -0.0318474658, -0.1191376820, -0.0354535580, -0.0375048295, -0.0456590988, 0.1410373002, 0.0232670996, 0.0521907732, -0.1399967819, 0.0008118993, 0.0440806374, -0.0354903191, 0.1471515298, 0.0768477246, -0.0306958575, -0.0598527677, -0.1319929063, 0.0543652400, 0.0611259378, 0.0695170909, -0.0442444123, 0.0517848954, -0.0593928210, -0.0761998892, -0.0317105092, 0.1291355640, -0.0153617626, -0.0865313709, 0.0625277981, 0.1246232912, -0.0821169391, -0.0491695553, 0.0535860248, -0.0874753818, 0.0259568039, -0.0361733399, -0.1220069751, 0.2684740424, -0.0335805826, 0.0378133282, 0.0686970055, -0.0481497869, -0.0673614144, -0.0625251681, -0.0558309667, -0.0598662980, 0.0496021956, -0.0704731420, 0.0478679352, 0.0628501400, 0.0701524615, 0.0554260723, 0.0074269967, -0.0704763010, 0.0118319737, -0.1373456568, 0.0966159105, 0.1926106960, 0.0004059882, -0.0182216875, -0.1417667419, -0.0295975953, 0.1414963901, -0.0867773816, -0.0277285539, 0.0235085730, -0.0925199613, -0.2002464831, 0.0980558842, -0.1042704731, 0.0614632666, 0.0252521373, -0.1399421841, 0.0678848028, -0.0900619924, -0.0429140776, -0.1027244851, 0.0541652925, -0.0086085843, -0.0488872156, -0.2161348611, 0.0392044894, -0.0326436572, -0.0927652270, 0.0645847693, -0.1005474553, 0.1072576493, 0.0605013035, 0.0266805142, -0.0769398436, -0.1309968084, 0.0325266458, -0.0160594974, 0.0320753790, -0.0693007708, 0.0987861603, -0.0355978906, 0.0324752703, -0.0083831428, -0.0442171320, 0.0454105586, 0.0759683847, 0.0900688320, -0.1078464910, 0.0421171039, 0.0518146530, -0.0933825225, 0.1541348249, -0.0772486851, 0.0815617889, -0.1288596094, -0.0219070315, 0.0842546448, 0.0343146324, -0.1132451892, 0.0473515615, -0.0229722708, -0.0572583042, -0.0466089025, -0.0724701881, 0.1190353334, 0.0235018414, 0.0691965371, -0.1027124375, -0.0714391097, 0.0533100329, 0.0587504208, -0.0132659283, 0.1756954044, -0.0305232145, 0.0172745306, -0.0160662308, 0.0699103624, -0.0830703825, -0.0472811013, -0.0716914311, 0.0340620875, 0.0123173064, 0.0088823661, 0.0403805003, -0.1110096499, 0.0647393391, 0.0298033841, 0.0476952046, 0.0236891601, 0.0059935972, -0.0452686362, 0.0487651788, 0.0883019343, 0.0804317370, 0.0085983248, -0.0574638732, 0.0991221666, -0.1130419225, 0.0130649628, 0.0228110515, -0.0245935563, -0.0620658584, -0.0707842931, 0.0639367551, -0.0096205622, -0.0409275591, 0.0360694230, -0.0268587917, 0.0141678657, 0.2265837342, -0.0651074648, -0.0957362205, 0.0054305862, 0.0820936263, 0.0383303910, -0.0107096517, -0.0088545755, -0.0087636765, -0.1511777639, -0.1442810744, -0.1072915718, -0.0631481856, 0.0461163968, -0.0992861092, 0.1005514413, 0.0618130118, -0.0582170114, -0.0570969358, -0.0062107830, 0.0713893324, -0.0674930513, 0.0310966298, 0.0147398040, -0.0621392205, -0.0731807947, -0.0374660753, 0.0466009080, 0.0643453449, -0.0626157969, 0.0094918460, -0.0595457666, 0.0280402899, 0.0418642163, 0.0218658894, 0.0786092430, -0.0177956522, 0.0748209804, -0.0103458911, 0.0349427462, 0.0277943462, -0.0447010174, -0.0751029402, 0.0574448854, 0.0530371219, 0.0423678234, -0.0733440444, 0.0728174746, 0.0020142645, -0.0405816175, -0.0386096425, -0.0465172678, 0.0485820174, -0.0339746401, -0.0361730307, 0.0581840277, -0.0053142086, 0.0558556318, -0.0642099604, -0.0337229632, 0.0201787427, 0.0533544123, -0.0327384211, -0.0134168640, 0.0459857732, -0.0544490367, -0.0390590355, -0.0082164779, -0.0139698461, 0.0134662613, 0.0442695171, -0.0481939651, -0.0634881705, 0.0466692150, 0.0390806422, 0.0071374327, 0.0626256019, 0.0085522458, -0.0214629471, -0.0223592594, -0.0632463545, -0.0794348270, 0.0604715198, 0.0252734274, 0.0125832856, -0.0366157256, 0.0731232017, -0.0477945209, 0.0805836171, 0.0657264143, -0.0191285536, -0.0528821982, 0.0144622028, -0.0676376969, 0.0578582734, 0.0349775702, -0.0158538893, -0.0483083017, 0.0283477083, 0.0461220294, 0.0025813133, -0.0624468774, -0.0120870844, 0.0319431275, 0.0000205636, -0.0797669366, -0.0493936688, 0.0000045747, -0.0575123131, -0.0211376511, 0.0760584176, 0.0105948299, -0.0029324815, -0.0211473964, 0.0153648332, -0.0371999443, 0.0626260340, -0.0144995973, -0.0113763362, -0.0523442551, -0.0264603682, 0.0327212885, -0.0079644099, 0.0564791560, -0.0326393843, -0.0672725290, 0.0699951649, 0.0529086888, -0.0655956939, 0.0610915720, -0.0287553407, 0.0822127014, -0.0030556768, -0.0327879786, -0.0288472660, 0.0669011921, -0.0151742473, 0.0639223754, -0.0630866587, 0.0453983843, 0.0813532919, 0.0487959832, -0.0807360634, 0.0229879841, -0.0208141059, -0.0221697502, 0.0198385790, -0.0032052472, 0.0343600586, 0.0595287234, -0.0607221760, 0.0087382570, -0.0783240572, 0.0076324791, 0.0457226783, 0.0763886720, -0.0144154504, 0.0570040494, 0.0401688814, -0.0453519784, -0.0732805207, 0.0111575425, 0.0715410113, 0.0381938368, -0.0383916944, 0.0262410641, -0.0815922469, 0.0198402256, 0.0103325695, 0.0154291615, -0.0020453781, -0.0293442719, 0.0605191588, -0.0318235084, -0.0479776859, 0.0652942657, -0.0371543728, 0.0798388124, 0.0636451095, 0.0105452389, 0.0452699512, 0.0270606950, -0.0692485720, 0.0049695894, -0.0304963626, 0.0245779976, 0.0341220722, 0.0758883059, -0.0676526055, -0.0035525039, 0.0658977926, -0.0105099231, -0.0468719490, 0.0575417876, -0.0024824366, -0.0667318180, -0.0619018860, 0.0611718595, 0.0190884247, 0.0088150129, -0.0365471169, 0.0200536028, 0.0328237265, 0.0115628988, -0.0284358226, 0.0542666912, -0.0400943160, 0.0554303974, -0.0603742748, 0.0815078616, 0.0623667240, -0.0256281681, -0.0294847712, 0.0648568571, 0.0767218322, 0.0080836564, 0.0810673386, 0.0487879068, -0.0768555105, -0.0138682574, 0.0287312660, 0.0923637897, -0.0110902535, 0.0103265950, 0.0098693240, 0.0620436072, -0.0212565064, -0.0497462638, 0.0090602711, 0.0644181520, 0.0806634873, -0.0888539478, 0.0775510967, -0.0299989562, 0.0431871302, -0.0852795541, -0.0602843836, 0.0341576301, 0.0535378456, -0.0049256310, 0.0236224681, -0.0490450375, 0.0255427435, -0.0197239947, 0.0254404191, 0.0698908269, -0.0370070189, -0.0129572935, 0.0214628875, 0.0415190831, 0.0464165360, 0.0143665187, 0.0391083546, -0.0665089712, -0.0499073751, -0.0732633919, -0.0688725784, 0.0256720707, -0.0813600719, 0.0440399423, 0.0091932947, 0.0377131812, -0.0910303146, 0.0588912405, -0.0302748159, -0.0115468074, 0.0579411536, 0.0264521446, -0.0295282062, 0.0241698753, 0.0182381831, 0.0576174669, -0.0713103116, -0.0639905781, -0.0038938075, -0.0475134663, 0.0917663798, 0.0596759804, 0.0018568560, 0.0429025739, 0.0550776571, -0.0582175218, 0.0060072215, 0.0314914100, 0.0712158158, 0.0715654865, 0.0784119070, 0.0244856030, 0.0219154060, 0.0137656853, 0.0185605176, -0.0637077466, -0.0110591101, 0.0274086390, -0.0663628802, -0.0623367056, 0.0386532210, -0.0686816424, 0.0418391749, 0.0417482182, -0.0012628649, 0.0732005760, -0.0352834575, 0.0082527995, -0.0226411764, -0.0404818952, -0.0135057047, 0.0088719074, -0.0605242625, -0.0035710351, -0.0018248176, -0.0448885225, 0.0669661686, -0.0097386334, 0.0605045483, -0.0792334750, -0.0200563334, -0.0638258979, -0.0300265439, -0.0366877466, -0.0151022812, -0.1394220293, 0.0028046423, 0.1425195485, 0.0270139556, 0.1092874259, -0.0376901515, 0.0247850642, 0.2094777226, 0.1920795292, -0.0887563005, 0.0441155508, -0.0486831069, -0.1490648538, -0.0832880065, -0.0435517170, -0.0202313364, 0.0864169970, 0.1455874294, -0.1274879873, -0.0254688542, -0.0253232941, -0.1562992781, -0.0480838902, -0.1580689847, 0.0503795370, -0.1466440558, -0.0436057299, -0.0536162369, -0.0799856186, 0.1697609723, 0.1951880604, 0.0778909475, 0.0683727711, -0.0709172934, -0.1749988943, -0.1393165737, -0.0474583656, 0.1229826435, -0.0625827312, -0.0241316129, 0.0719664469, -0.1451382935, -0.0518781990, -0.0261934921, 0.0481048226, -0.0130394427, -0.0922311246, -0.0921115652, 0.0751197934, 0.0842247307, 0.0290192366, -0.1248679608, 0.1023719311, 0.0049559548, 0.0159726031, -0.1261060685, -0.1240192503, 0.0175813213, 0.0835932493, -0.0471187420, 0.0058661089, 0.0171559639, 0.0332642570, 0.0440278798, 0.1018950418, 0.1526413411, -0.1661892682, 0.1402045339, 0.0493637696, -0.0607520975, -0.0315818526, 0.1395733654, -0.0895695910, -0.0646192953, 0.0056908410, 0.0702318922, -0.0688188076, 0.0098285815, 0.1666476727, 0.1508662552, 0.0157960374, 0.1009388492, 0.1373969316, -0.0836152807, 0.1939436197, 0.0308618154, 0.0189301986, 0.1115406826, 0.1937173307, 0.1896066666, 0.0697583705, -0.0402718298, -0.0908495411, 0.0542862900, -0.0345611908, 0.0069921850, 0.0319433361, 0.0560477711, -0.0368251093, 0.0628834963, -0.0472029597, -0.0413201153, 0.1179046631, 0.1045023352, -0.0290706027, 0.0907990783, 0.1004012600, -0.0035411785, 0.1640348881, 0.0790875107, 0.1016085520, 0.0030799930, -0.1174646020, 0.0258681681, -0.0544736348, -0.0690217987, 0.2355594486, 0.1182518750, 0.0869917199, -0.0253126640, -0.0721785650, -0.1052727401, 0.0126988711, -0.2240218520, -0.0894504562, -0.0627394989, 0.0399701670, -0.0879462808, 0.1112422943, 0.0957394838, 0.0856139138, 0.1172641441, 0.0337730013, -0.0311345086, -0.0543010347, 0.0562450625, 0.0706796050, 0.1043471545, 0.0927703381, -0.0655482411, 0.0338867083, -0.1756044626, 0.0477611981, -0.0426334478, -0.0365209021, 0.0873498693, -0.1841839254, -0.2123932093, 0.0358355977, -0.0256366450, 0.1701074094, -0.1241915002, 0.1210080683, 0.0556927994, 0.0594972521, -0.0666126236, -0.1060678661, -0.0173184555, 0.1134046391, -0.0501233265, 0.0490839556, 0.0136939073, 0.0729296356, 0.0638772249, 0.0843926296, 0.0361146741, -0.0191538204, 0.0692984909, -0.0193213932, -0.1501299590, 0.0214270968, 0.0537260324, -0.0681390390, -0.0583196767, -0.0028802138, 0.0366253629, 0.0664011016, 0.0926777348, 0.1299019158, 0.0621414930, -0.0716860592, -0.0813260600, 0.1081816778, 0.0894566998, 0.0707355887, 0.0657590628, 0.0605019517, -0.0348990932, 0.1075591296, 0.1679687351, 0.0254037417, 0.0311756115, -0.0899030268, 0.0661790147, -0.1602335870, 0.0482506193, 0.1132141054, 0.1032226682, -0.0174755920, -0.0223519318, 0.1714343429, 0.0587027706, 0.0819455087, -0.1093038246, 0.0073604519, 0.1240599975, 0.0009218410, 0.1300113946, -0.0347418003, -0.0364429131, -0.0558829829, -0.1247099936, -0.0949032605, 0.0126833450, 0.0400045477, 0.1665142626, 0.0920036882, 0.1208518222, -0.0760725364, 0.0337102264, 0.0498448722, -0.1046902314, -0.1483326852, 0.0712417290, -0.0533966608, -0.0174645074, -0.0481067486, 0.0675105304, -0.0663987994, 0.0580160320, -0.0093012815, 0.0489391051, 0.2022563815, 0.0485981852, 0.0059822458, -0.1778357774, 0.1087537482, -0.0682650283, -0.1386012137, -0.0256784055, 0.1334399581, 0.0635864064, 0.0064770407, -0.0135570541, 0.0520595051, -0.0771142095, 0.1311423481, -0.1495157033, -0.1132462248, 0.0216830652, 0.1332960278, 0.0814774260, 0.1125119478, 0.0765978992, -0.1251455694, 0.0877525806, -0.0197129827, 0.0817142576, 0.0014333269, -0.0198797807, -0.0875352994, -0.0270900298, 0.0050180526, -0.1342256516, 0.0186594687, 0.0886835158, -0.1419018507, -0.0562338531, -0.0837512761, 0.1581088901, -0.0903181732, 0.0277138930, 0.0033250428, -0.1590355635, -0.0329588689, -0.0509204268, 0.0203055497, 0.1864107251, 0.1056165174, 0.0193984415, -0.0937122703, 0.0131194741, 0.0153510440, 0.0393074155, -0.0261094198, -0.0670234933, 0.0144305471, -0.1215198189, 0.1483831555, 0.0982619151, -0.0041677882, -0.1316909790, 0.1164964586, -0.1385422498, -0.0001302048, 0.1334966421, -0.0631997809, 0.1050505564, 0.0014009664, 0.0440008193, 0.0704870075, -0.0011744981, 0.0584818050, -0.1255675107, -0.1654842496, -0.0510807000, 0.1502241194, 0.1069550365, -0.0586900525, -0.0397255830, -0.0656074733, -0.0194892567, -0.0315041654, 0.1295467168, -0.0818161890, 0.2334861308, 0.2074610442, 0.0883415490, -0.0155136380, 0.0793976188, -0.0759405792, -0.0568905324, -0.0208767522, -0.0060734376, -0.1122117266, -0.0628091022, -0.1558252573, 0.1001194045, 0.0887948275, 0.0271672644, 0.0386900343, 0.1946842819, 0.2206793576, 0.0155254724, 0.0359861664, -0.0518020689, -0.0460124090, -0.0895171836, -0.1222423092, -0.0204595868, 0.1043246165, -0.0848154575, -0.1338818818, -0.0145774689, 0.0296768900, -0.0408773087, 0.0454196967, -0.1075250953, -0.1585662067, 0.1445058137, 0.1615843624, 0.0119945034, 0.1407293826, 0.0393716246, -0.0734410733, -0.0485576168, -0.1605538279, -0.0367922373, -0.0188581366, 0.1144429073, 0.0702029094, -0.1654958427, -0.0843209699, -0.3568030298, 0.1274602562, 0.1064718515, 0.1311507374, 0.0068065217, -0.0829400867, 0.0555965640, -0.0130083095, -0.0223309174, 0.1236072779, 0.0246032663, -0.0283188336, -0.1111779213, -0.1150589064, 0.0034752847, 0.0413848348, 0.0873193890, 0.0331207775, 0.0298587829, -0.2137148678, -0.0895789117, 0.0106396554, -0.0515732914, 0.0454999283, -0.1626937538, -0.0221268293, -0.0297475364, -0.0305235442, -0.0984047726, 0.2311082482, -0.2784433365, -0.1155994833, 0.2000880539, -0.0916270614, 0.0647187382, -0.1253472269, 0.0029946784, 0.1392799020, -0.0172923319, 0.0426659770, -0.1383368075, -0.2126626819, -0.1010475308, 0.0442636088, 0.2228944004, 0.0664396137, -0.0511748940, -0.1227129847, -0.1097674295, -0.0937186182, -0.0213671327, -0.1311417222, 0.2674555480, -0.0170616545, -0.0090946173, -0.1193736717, 0.0644759089, -0.0715189874, -0.0004459827, -0.1635421216, 0.0352240466, -0.1524906605, -0.0503182188, -0.0792277083, -0.0656857714, -0.0480228737, -0.1672906727, 0.2221495956, 0.0931622908, 0.0807321221, -0.1467340887, -0.1044902727, -0.1863431782, -0.0214364715, 0.0777027160, -0.0063596382, 0.0136683444, 0.1973596215, 0.0240722913, -0.1970226914, 0.0733305216, -0.1916192770, -0.1270068437, -0.0032627271, -0.1421259940, -0.0609308258, 0.2443057001, 0.1834273636, -0.1438209414, 0.0643761158, -0.0104416460, -0.0308157317, -0.0481663272, -0.1028460562, -0.2048582137, -0.0101196729, 0.0242270939, 0.0481690131, -0.2380915880, -0.0491168946, -0.2073869109, 0.2529753745, 0.0353637002, 0.0470636636, 0.0234626140, -0.0168014206, 0.0406285599, 0.0808162242, -0.2390637845, -0.0434702784, -0.0938665643, -0.1245570630, 0.0216466580, -0.1049597561, 0.1366001666, 0.1037388146, 0.0696837530, 0.0683730841, 0.0341827050, -0.1248557419, -0.0990812182, 0.0323825255, -0.0564857647, 0.0601786524, -0.1514687538, 0.0269655939, -0.0868308842, 0.0938993320, -0.2036518753, 0.1918263733, -0.1479452103, 0.1054584235, 0.1532388330, 0.0041985777, 0.0003601597, -0.0318842307, -0.0259999447, 0.0986220390, 0.0670655221, -0.1440695077, -0.1238583252, -0.1414926797, 0.0541870408, 0.1645467132, 0.1602887660, 0.1268500239, 0.0333347768, -0.0635013953, -0.0948601961, -0.0431262031, -0.0418985374, -0.1620006859, 0.1383013874, -0.0077437302, 0.0178009458, -0.2508159876, 0.0407406911, -0.0666800588, -0.0655352175, -0.1207651421, 0.1372222006, -0.2194031328, -0.0891366899, -0.1853412241, -0.0154716773, 0.0606715195, -0.1186102927, 0.2145038843, -0.0536833480, 0.0706568658, -0.2497556806, -0.1522753835, -0.0749616474, -0.0600894019, 0.1122395396, -0.1656943858, -0.0192114208, 0.3516788781, 0.0238788221, -0.1864463687, 0.0541619286, -0.1201132908, -0.0845761970, 0.1841647178, -0.0744923204, -0.0646944717, 0.0916071013, 0.2034515291, -0.0893194452, 0.0226589739, 0.0761154816, -0.0300784502, -0.1115972400, -0.1809819490, -0.2808313966, 0.1146224439, 0.1051619723, -0.1045507342, -0.2174656242, -0.1022676528, -0.0448095761, 0.1948743463, -0.0464409813, -0.1581137180, -0.0818228275, 0.0037969900, 0.0563945733, 0.0111650592, -0.2179415822, -0.0432146005, -0.0838529170, -0.1835908443, 0.1201777831, 0.0824690536, -0.1491456628, 0.0861353949, 0.0809679627, 0.0890228972, -0.0225783251, -0.2124624699, 0.0405904166, 0.2059487998, -0.1065395698, 0.0035000942, 0.0338699333, 0.0093338564, -0.0292428415, -0.1028681546, -0.0953208879, 0.1053689569, 0.0164271053, 0.0954767168, 0.2320944369, -0.0811165571, -0.0652060732, -0.1036569700, -0.0686439797, 0.0935367718, 0.0673496127, -0.1079722568, -0.0845067725, -0.0582014322, 0.1102923453, 0.2832010090, 0.0724395961, 0.0532341115, -0.1055174395, -0.0922155231, 0.0487127602, -0.0847927555, 0.0333209895, -0.1507700235, 0.0207142122, 0.1329824328, 0.0730529204, -0.2619722784, -0.0359451994, 0.0915475637, -0.1169810519, -0.1897422075, 0.0816815123, 0.0386224948, -0.1207277849, -0.2160135359, -0.2623224556, -0.0344774127, -0.0953567699, 0.2050016671, 0.0673745722, -0.0468887612, -0.1724930555, -0.1011198536, -0.3319979012, 0.0792831779, -0.0359596759, -0.0501540564, -0.1364242584, 0.2247049510, 0.0649472103, -0.1872959286, 0.0281432196, -0.1314057410, -0.1043312773, 0.1273361295, 0.0495072231, 0.1053806618, 0.1953968406, 0.0627150089, -0.0425076298, -0.1256848276, 0.0013391343, -0.0617615245, -0.0895311460, -0.2216300666, -0.2877134383, 0.1134298816, 0.1209834367, -0.0893004313, -0.2561912835, -0.0309459269, -0.0072224401, 0.2059879005, 0.0035031023, -0.2123064995, -0.0237332955, 0.0158488117, 0.1533726901, -0.1479969919, -0.0848298520, -0.1757359356, -0.1470938623, -0.1340796500, 0.0364505351, 0.0911189914, -0.0076791923, 0.0680466741, 0.0627477616, 0.0341119058, -0.0886324942, -0.0772276148, -0.0679392889, 0.0909222290, 0.0436790586, 0.1241943166, 0.0092935963, 0.2061480880, -0.0125931408, -0.2047497034, -0.1078311056, -0.0093444819, 0.0843113959, 0.0332063586, 0.3086935580, -0.1220168546, -0.0058983932, -0.1608949006, -0.0778129473, 0.0422957949, 0.1165773198, -0.2582358122, -0.1032513306, 0.1240832284, 0.1306554973, 0.1419993639, -0.0417682789, 0.1559093446, 0.0074413852, -0.0910220221, 0.0960692391, 0.0077819959, 0.0302388240, -0.2793532610, -0.0343405493, 0.0924117342, 0.0599980205, -0.3265084624, -0.1327460408, 0.2055020332, 0.0379066095, -0.0368883349, 0.1868143827, 0.0430974774, -0.0461046435, -0.0238953214, -0.0685813650, -0.0650657788, -0.1836912334, 0.2130362689, 0.0509154201, 0.0407801010, -0.2259310484, -0.1378684640, -0.2238419652, -0.0383287221, 0.0048510353, 0.0610742792, -0.1692590266, 0.1571147442, 0.2185515314, -0.0196059290, 0.1434949636, -0.0388490967, -0.1623115093, 0.1040749401, 0.0482954942, 0.0856949240, 0.2584275007, 0.1720924526, 0.0812303945, -0.2741748989, -0.0588507317, -0.2636091411, -0.2035391927, -0.1551697850, -0.3716523051, 0.0077517312, 0.0900394097, -0.1396182925, -0.2751942575, -0.1573415697, 0.1143158749, 0.2088539451, 0.1140359640, -0.1849060357, 0.1062149554, -0.1411116570, 0.0877015740, -0.0117713455, 0.0992190316, -0.0400331505, 0.0533608720, -0.2434009612, 0.0306880455, 0.0880954266, -0.0494493172, 0.1350920051, -0.0014789134, 0.0176419728, -0.0414176285, -0.1787076443, 0.0413753316, -0.0610737838, 0.1109270975, 0.0658948794, 0.0340249799, -0.0019317602, -0.0522575676, -0.1117099002, 0.0670974925, 0.1596398056, 0.0747509152, 0.0382160470, 0.2041250318, -0.0499420464, -0.1879691482, -0.0373075828, 0.0614859946, 0.0646541119, 0.1764891297, -0.1315792650, 0.0605864301, -0.0798155516, 0.0306066126, 0.2025403082, 0.0930998698, 0.1878425181, -0.2219506502, -0.0090002241, -0.0647981316, -0.0511097014, 0.1950690746, -0.2091481090, -0.0292832181, 0.1652741432, 0.0813992843, -0.3374095559, -0.0922206044, 0.1224531606, -0.0468054786, -0.0481547154, 0.0958236828, -0.0546727963, 0.0897836164, -0.0976599082, -0.2991731763, -0.1275121123, -0.0581708848, 0.2989759743, 0.1297714710, -0.0355183668, -0.2133531868, -0.1770487279, -0.2967040241, -0.0817147791, 0.0159648675, -0.0235107578, -0.1874309927, 0.0181773491, -0.0088689225, -0.0293612313, 0.0591091216, 0.1037802696, -0.2014370263, 0.0424881130, 0.1310247928, 0.0796403140, 0.1778143048, 0.1800390482, 0.0089344308, -0.1510274261, -0.0218282137, -0.0973849371, -0.1751316786, -0.0021865366, -0.3509322703, 0.0977651477, 0.0348740071, -0.0751350299, -0.2449659556, -0.0272606481, 0.0779561177, 0.2440929562, 0.0528273173, -0.2248310000, 0.1152608991, -0.0339047424, 0.0743574128, -0.1125851050, -0.0195375215, -0.1455778927, 0.0484498926, -0.1123040020, -0.0002533582, 0.1012369916, 0.0756764859, 0.2014521956, 0.0807299912, 0.1585587263, -0.0636839718, -0.0983622149, 0.1100621894, -0.1068424061, 0.0680689812, 0.3227160275, -0.0554030612, 0.0739642978, 0.0046729557, -0.1866150796, 0.1103515923, 0.1314609796, 0.0689023510, 0.1200016662, 0.1989167929, -0.0384741351, -0.1755942255, -0.0640641153, 0.0144770183, 0.0846731067, 0.0240209214, 0.0113232508, -0.0912499279, -0.2370692044, -0.0520436689, 0.0428852886, 0.0308175273, 0.1585357189, -0.0904669687, -0.0799398199, 0.0187037624, -0.2069162577, 0.0840659514, -0.1968930066, 0.0347880647, -0.0401451103, 0.1072284281, -0.3205135167, -0.0038688735, 0.1370373219, 0.0440513119, 0.0685382336, 0.0931327417, -0.0473906659, 0.0870561004, -0.1979454607, -0.4098889232, 0.0553290844, 0.0614905767, 0.2426389009, 0.0859469399, 0.0572687909, -0.1210565493, -0.1130096912, -0.3138166666, -0.0439751111, 0.0502516255, 0.0644905865, -0.2011315525, -0.0256059133, 0.0078621451, 0.0457423031, -0.0402086712, 0.0240313224, -0.0969583467, 0.1509714723, 0.0348343477, 0.0307922922, 0.1278530508, 0.1127976403, -0.0135141108, -0.0967185348, -0.0778170675, -0.1875235438, -0.1363710016, 0.0657032356, -0.2357746363, 0.0804924443, -0.1042109728, 0.0239093080, -0.2130254507, 0.0328714512, 0.0453197509, 0.1010031551, -0.0848450065, -0.1275672615, -0.1140702367, -0.1636214554, 0.0715349093, 0.0757279918, -0.1109393239, 0.0030713168, 0.0779942349, -0.0018982315, -0.0126017332, 0.1873060763, 0.0750807822, 0.1844696105, 0.1271646470, 0.0946218818, 0.0475699566, -0.1583133489, 0.0111570898, -0.1713610142, 0.0064452938, 0.2026336491, 0.0377130099, -0.0229723584, -0.1382128298, -0.1234611943, 0.0581583232, 0.1096451283, -0.0741460919, 0.1075360924, 0.1872362196, 0.0543037094, -0.1063577235, -0.0586673617, 0.0112207336, 0.1209507957, 0.0802293643, 0.0439087376, 0.0663505271, -0.1550091207, -0.1045230329, -0.0217425674, 0.1505188793, 0.0403245799, -0.1004322469, -0.0770679489, -0.0353854522, -0.1853601485, 0.1627674252, -0.2442913800, 0.0866611302, -0.1095281169, 0.1089261025, -0.4499465227, 0.0850798935, -0.0141775468, -0.1989413500, 0.1636390686, -0.0046523158, 0.0363324173, 0.0170238856, -0.0133781806, -0.4328727126, 0.1361994892, 0.0988393575, 0.1781989783, 0.1421626806, -0.0253459625, -0.0423108526, -0.0598411635, -0.2598647475, -0.0587696657, 0.0806161165, 0.0008356267, -0.4088504016, -0.1138131693, 0.0569646023, 0.1968589872, 0.0258507207, -0.0234693214, -0.1263988018, 0.1046812460, 0.0604510568, -0.0165055897, 0.0838806927, 0.0555825643, -0.0776575059, -0.0350430347, -0.0672813579, -0.1354458630, -0.1674253494, 0.0699058101, -0.0274654087, -0.0085774213, -0.0922913477, 0.0264609195, -0.0217077546, 0.0584494844, 0.0296783149, 0.0731110424, -0.0993896872, -0.0035894618, -0.2136978060, -0.0963402614, 0.0516050905, 0.1374948621, 0.0743445903, 0.0603548512, 0.0379774645, 0.1230813116, -0.0421146154, 0.0683863834, 0.0333692543, 0.0911155641, 0.1682822257, 0.0526677556, 0.0166041330, -0.0933672190, -0.0399782024, -0.2599860430, 0.1348115504, 0.1953840852, 0.0465457812, 0.0397001952, -0.0403826423, -0.0118780779, -0.0634737760, 0.1004294902, -0.2007770836, -0.0153162079, 0.1592401564, -0.0003829071, -0.0477119274, -0.0883678943, -0.1432353705, 0.0334818065, 0.0806663781, -0.0443044603, 0.1245203912, 0.0098897927, 0.0281546004, -0.1159075797, 0.2299991399, 0.0761496872, -0.1383419633, -0.1174024343, -0.0261754077, -0.1240200326, 0.0365902223, -0.2481372654, 0.1261672527, -0.0500298515, 0.1188231111, -0.2546189725, -0.0486878119, -0.0045133848, -0.1085138768, 0.1394836158, -0.0948643982, -0.0874275714, -0.0163294133, -0.0940151066, -0.2159119248, -0.0375369489, 0.0177399553, 0.1194004044, 0.1574934125, 0.1219982207, -0.1419174373, -0.0204356574, -0.3045397401, -0.3106970489, 0.1004324257, 0.0313032456, -0.4743082225, -0.0942863598, 0.0158279110, 0.1163288131, 0.0455072671, -0.0575366579, 0.0383507982, -0.0423039272, 0.0607079230, -0.1687875241, -0.0297678038, -0.0111095216, -0.1361056715, 0.0887105912, 0.0455583595, -0.2436574996, -0.1573033780, -0.0366584696, -0.1948172450, -0.0994528010, 0.0287472662, -0.1441262215, 0.0489690453, 0.0615787767, 0.0842107311, 0.0319777802, 0.0959689319, 0.0582103953, -0.2537744641, 0.1055679396, -0.0457937904, 0.0885950997, -0.0160167497, -0.0943733752, 0.0404541083, 0.0830880478, 0.0807891414, 0.0711104199, 0.0425514020, 0.0477612801, 0.3303694725, 0.0988467187, 0.0535034463, -0.0556958318, 0.0451894999, -0.1611098349, -0.0196983740, 0.0579192042, 0.0215730388, 0.1285074949, 0.0710659847, -0.2281890512, -0.0763423070, -0.1072160974, -0.1964951754, 0.0613888465, 0.2744584084, -0.1178756058, -0.1144250706, -0.0842296556, -0.2898825109, 0.0105558410, 0.0113607645, 0.1205688864, -0.0691986382, 0.0910436586, -0.0478195436, 0.0095095364, 0.2228064835, 0.1053544059, -0.2499880493, -0.0225633644, 0.0243201833, -0.1054531485, 0.0012738368, 0.0046754265, 0.1809415668, -0.0481280424, 0.0277073588, -0.1692648679, -0.0060131936, 0.1514693499, -0.1426894367, 0.1636477858, -0.0452663563, -0.1043261290, -0.1365134120, 0.1138835698, -0.1261049658, -0.0833797082, 0.1308521628, 0.0772401690, 0.0701006502, 0.1077907979, 0.0591905713, -0.1661372036, -0.3121938407, -0.1614702940, 0.0107537862, 0.0542921759, -0.1682124883, -0.2232585400, 0.0028946050, 0.1627360135, -0.0497634560, -0.0395537354, 0.0063338792, 0.0146069517, -0.0540145785, -0.1125108674, 0.0413052104, -0.0532927923, -0.0327911712, -0.2056703269, -0.0319671445, -0.1384554207, -0.0571351983, 0.0912808776, -0.1224249080, -0.2053089738, 0.0143888462, -0.0615065992, 0.0052865879, 0.0427243859, 0.0027996341, 0.0715667382, -0.0595041513, 0.0501556247, -0.2599699497, -0.0034860254, 0.0011115060, -0.0128258662, -0.0638724864, -0.0574723072, 0.0729329735, 0.0676220730, 0.0461565107, 0.0623072349, 0.1894266456, 0.0898943543, 0.2813234925, 0.0650355071, 0.1951914728, -0.0246742386, 0.0055436511, 0.0456491895, 0.0701503232, 0.0658750907, 0.0850344673, 0.0897215009, 0.0338796191, -0.2110652030, -0.0729886964, -0.0123319272, -0.1184555888, 0.1095603034, 0.1761845052, -0.0867833123, -0.0234904829, 0.0869130045, -0.1427934617, 0.0009705067, -0.0127551137, 0.0089856731, 0.0076375604, 0.0327373445, -0.1986971349, 0.0556675605, -0.0054202238, 0.0177346356, -0.0678056106, 0.0367347933, 0.1073905528, -0.0640520826, -0.0490312316, 0.0622065254, 0.1413906962, 0.0986977816, 0.1758669168, -0.1488760710, -0.1318137646, 0.1017954871, -0.1266958714, 0.2283759564, 0.0796541050, -0.1638330072, -0.1332049519, 0.1045184880, -0.1024704129, -0.0149957556, 0.1667072773, 0.0858273506, -0.0114922272, 0.0302525610, 0.1396434009, -0.0286216047, -0.2015983313, -0.2187897563, -0.0742502809, 0.1493642628, -0.0019981586, -0.1498741806, -0.0532356761, 0.1562438607, -0.1881775856, -0.0533511601, 0.0766293705, 0.0238487534, -0.0707648993, -0.1667419374, 0.0772134289, 0.0088640293, -0.1144257784, -0.1629554182, 0.0549217910, -0.1458066255, -0.0476386994, 0.0468210392, -0.2656731009, -0.1230292767, -0.0511982404, 0.0775703341, 0.0570947751, -0.0438932255, 0.1160064265, 0.0116548389, -0.1034777910, -0.0629535839, -0.1779972911, 0.0949766412, -0.0589148775, -0.0657542497, -0.0726123154, -0.0289162733, 0.1665696502, 0.1632534564, 0.1138130724, -0.0111762183, -0.0423860103, 0.1265705377, 0.2169241309, -0.0016919099, 0.1230285391, 0.0387442410, 0.1120941266, 0.1687527299, 0.0689238384, 0.0528578907, 0.1608559489, 0.0280617718, -0.0000643952, -0.0396240056, 0.0405435190, -0.0223494451, -0.0366371386, -0.0710636601, 0.0796917081, -0.0026152194, -0.1755203903, 0.1735469997, -0.0536459610, 0.0113815423, 0.0171911810, 0.0337014385, -0.0491766334, -0.0055692615, -0.0939962417, 0.0930517465, -0.0818300247, 0.1244779900, -0.1478788853, 0.0149926655, 0.1676971614, -0.0091414666, 0.1301323771, 0.0678615496, 0.0952981412, 0.1329152435, 0.2065051496, -0.1289790720, -0.0074314838, 0.2678128183, 0.0358875096, 0.1575365663, -0.0418772809, -0.0003846007, 0.0519736595, -0.0840575844, -0.1099749953, 0.0303807687, 0.0512149669, 0.0915068090, -0.0916261598, -0.0018349317, 0.1264929920, -0.1206611395, -0.2321379483, -0.1477045119, -0.1036825851, 0.0591136515, -0.0815575272, -0.1441758871, 0.0802460685, 0.1086475700, -0.0090510827, 0.1391288340, 0.0785693899, 0.0332337879, -0.1149975210, -0.0752512962, 0.0678866431, -0.0192453749, -0.0521019250, -0.2058891505, -0.0751797706, -0.0985620767, -0.0790021941, 0.2188560963, -0.3338946700, -0.0404608250, 0.0380482301, 0.0711335167, -0.0280465968, -0.1448091865, 0.0758350417, 0.1305395812, -0.0565398559, -0.0180603024, -0.0853821412, 0.0514621250, 0.1021794900, -0.0041148332, -0.0557415225, 0.0609216616, 0.1459722817, -0.0079746610, 0.0288335308, 0.0474333130, -0.1290284693, 0.1002044007, 0.1398842186, 0.0639550462, 0.1193806529, 0.0151376808, 0.0034122872, 0.1931892931, 0.0328541882, 0.1156658754, 0.0451123454, 0.0399770066, 0.1533887684, -0.1176071167, 0.1298442781, 0.1099430174, -0.0073206392, -0.0787227005, -0.0598901547, -0.0152836926, -0.0887771994, 0.1305964291, -0.1166574061, 0.1305410862, -0.0494502895, 0.0022724331, -0.0442365631, 0.0192733984, 0.0000175210, -0.0440026559, -0.0878647044, 0.1121177226, -0.0824874267, 0.1017917842, 0.1093133762, -0.0353665687, -0.0405922048, -0.0936494246, -0.1408663839, 0.1057516783, 0.0311058406, -0.0099334074, -0.1102220640, 0.2095370591, 0.0307247136, 0.1612374634, 0.0514899343, 0.0922425240, 0.0582622960, -0.0534243956, -0.0237624813, 0.1019332260, -0.0335946940, 0.0216443539, -0.0087733781, -0.0116646616, 0.0362107977, -0.1849421859, -0.1737417132, -0.2180545926, -0.0763253719, 0.1234279200, 0.0375901200, -0.0134670101, 0.0138704535, 0.1330569088, 0.0291062668, 0.0069291145, -0.0344297923, 0.0313864537, -0.0587100945, -0.0712200031, 0.0722103715, -0.0205006916, 0.0704447553, -0.1890735924, 0.0345520973, 0.0218852554, -0.0472461544, 0.0906535238, -0.3566182852, -0.1590350270, 0.0245045852, -0.0373671912, 0.0501136631, -0.2164823264, 0.1012307853, -0.0741077587, -0.0825650468, -0.0243021473, -0.0731913969, 0.1028422564, 0.1980528235, 0.0575938262, 0.0097758137, 0.0580800325, 0.0655246675, -0.1617509425, 0.0111993747, 0.0454948358, -0.1171584278, 0.0550157055, 0.1237516403, 0.3492843807, 0.1955813915, 0.0405612513, 0.0212754328, 0.1064914539, -0.0044721267, 0.0100346012, 0.1467191428, -0.0599477403, 0.0033625169, 0.0913862959, 0.0907522812, 0.1711927801, -0.0333302617, -0.1051694602, -0.1939392239, -0.0696680099, -0.1507186294, 0.0764424577, -0.0639847964, 0.0494074412, -0.1338132620, 0.0140968841, -0.1902775317, 0.0178785101, -0.0587164573, -0.0344837271, -0.0283805020, 0.1580733210, -0.1287265271, 0.1016428545, 0.1749459356, -0.0059605991, 0.0311952177, -0.0001378041, -0.1229101717, 0.1231739372, 0.0711951330, 0.1342352778, -0.0726412907, 0.0616776124, 0.0622183681, 0.0832438022, -0.1283597350, 0.0587306507, 0.0117456494, -0.1468358487, -0.0176464561, 0.0326069631, -0.0059179720, 0.0579832420, -0.0537364855, -0.0572767705, 0.0228249785, -0.2259901017, -0.2365776598, -0.2309169024, 0.0876812264, 0.0002179760, 0.0205124132, 0.1382192969, -0.0360024273, -0.0601405278, 0.0392276421, 0.1117698401, -0.0375233479, 0.0803031847, 0.0139051815, 0.0184764080, 0.0418684483, 0.1523159593, -0.0257452540, -0.1903070956, 0.0342528857, 0.0568083711, -0.0316184163, -0.0152493222, -0.1183539405, -0.0736193433, 0.1265037358, -0.0373471901, -0.0365697704, -0.1982161254, 0.0881896615, -0.0523807332, -0.1352683008, -0.1060383841, -0.0553962477, 0.1667454690, 0.1610894203, 0.0060326890, 0.0999528617, 0.0160675179, 0.0745487511, -0.0437945351, 0.1440270841, 0.1818386912, -0.1167867035, 0.0640875027, 0.0881752670, 0.1429420859, 0.0762522221, 0.0073921005, 0.0900528803, 0.0885170102, 0.0456260219, 0.1180213839, 0.1644066423, -0.0517113283, 0.0828704014, 0.1095088571, 0.1044740975, -0.0902843177, 0.0402691327, -0.1107527912, -0.1300721765, -0.0548467338, -0.1622359157, 0.0588999949, 0.0454263203, 0.0664408356, -0.1071984991, 0.0371372439, -0.1269181222, 0.1446386129, 0.1269650608, -0.0317262709, 0.0432887934, 0.2074804157, -0.2635964453, 0.1826712936, 0.1222370192, 0.0499813519, -0.0320895799, 0.0903702900, -0.0127329510, 0.1421745867, 0.1486816704, 0.0647993013, -0.0116619561, -0.0740162432, 0.0465629883, 0.2479190677, -0.1878054440, -0.0685486645, 0.0315978415, -0.1139578596, 0.1152848676, 0.0668987930, 0.1041563526, 0.1364648640, 0.1063641682, -0.0649006665, 0.1122636646, -0.0412474275, -0.1158124059, -0.0618173331, -0.0414193943, -0.0567074567, -0.1850701720, 0.0338881239, -0.0342709646, -0.1629699618, 0.0576105937, 0.1121066883, 0.0931046158, 0.1050844565, -0.1021742672, -0.0280227698, 0.0363671035, -0.0009762512, -0.0017563972, -0.2937035263, 0.0660483465, -0.0442656763, -0.0626351461, -0.0601266623, -0.0788615942, -0.1108063012, -0.0959291980, 0.1639221460, -0.0787710994, -0.2921903133, -0.0382917374, -0.0523044840, -0.0350173712, -0.1227211058, 0.1247247830, 0.1405925453, 0.2148029357, 0.1853861660, -0.0020379273, 0.0397952348, 0.1348179579, -0.1846770793, -0.0883152485, 0.0508009158, -0.0826687142, 0.0363220721, -0.0043208250, 0.1072617769, 0.0999918878, 0.0136958398, 0.0397788808, 0.1646790206, 0.1113992408, 0.0468010865, 0.0649535432, -0.0947875082, 0.1209252849, -0.0649162903, 0.2098540515, 0.0243246742, -0.1054110676, 0.0307362992, -0.1538754404, 0.0408250876, -0.0101555819, -0.0339436717, -0.0505435131, -0.0793138742, -0.1522356570, 0.1202827841, -0.2087783515, 0.1504778564, 0.1937350333, -0.1139161885, -0.1023582146, 0.1683996171, -0.2390167713, 0.1031599939, 0.0830986500, 0.0996249691, 0.0018395617, 0.0337108932, -0.2025366277, 0.0192474090, 0.0516170152, 0.0693168566, -0.0155131100, -0.0664028227, -0.0534859151, 0.2370544672, -0.0651239976, -0.0453190058, 0.0188795589, -0.1963050067, 0.0823138878, 0.1469411552, -0.1320157051, -0.0246702228, 0.1181314066, -0.1045003980, -0.0317231342, 0.0378650650, -0.1190329716, -0.1545614302, -0.0755082071, 0.0527265966, -0.0775098354, 0.0612813830, 0.0230679717, -0.1197382659, 0.0846412629, -0.0756786689, -0.0608430952, -0.0039393534, -0.0625303239, 0.0167084299, -0.0749197602, 0.0447001942, -0.0181231033, -0.3114972115, 0.0301033575, 0.0516160280, -0.1147685796, -0.0823560655, -0.0641397163, -0.0245615412, -0.1833447218, 0.0147960419, -0.0796634704, -0.2296791524, 0.0508347861, 0.0980189070, 0.0017358188, -0.0391166769, 0.0809231624, 0.0906589329, 0.0979547501, 0.0296048913, -0.0277824961, -0.0678506345, 0.1204040274, -0.1549572945, -0.1216789857, -0.0033736269, -0.0402543284, 0.0934247971, 0.0314518847, -0.1330739558, 0.1120363101, -0.1427334994, -0.0454857461, 0.1318109334, -0.0406250171, 0.0827013180, 0.0453569964, -0.0368393697, 0.2268582135, 0.0632837936, 0.1844406575, 0.0097709000, -0.0943027884, -0.0583232902, -0.2371084094, -0.0895927250, -0.0638928190, -0.0685752258, 0.1697502881, -0.0840215683, -0.1094305888, 0.0214981064, -0.2783429027, 0.0801855400, 0.1610464752, -0.0320712738, 0.0339729860, 0.1219316572, -0.1587262154, 0.2526628971, -0.0111322505, 0.0736930296, 0.0414341129, 0.0250750370, 0.0383238457, 0.1790224761, -0.1504079998, 0.1884361506, 0.0791961998, -0.2387113124, -0.0198469218, 0.1509436667, 0.0980096757, -0.0483890250, -0.1066465825, -0.1512177140, 0.0716256648, 0.1783666760, -0.0501488708, -0.0963048935, 0.1094395444, -0.1428965777, -0.0856374204, -0.0177157596, -0.0507803746, -0.1593382061, -0.0872958153, -0.0093279453, 0.0672045574, -0.0933464989, 0.0600683093, -0.1760980189, 0.0295559075, -0.1203069612, 0.0377810523, -0.0628300235, -0.0951890647, 0.0920312330, -0.1316997707, -0.0882935226, 0.0737858415, -0.0527779721, -0.0045367102, 0.0299020018, -0.0112203658, -0.1240999848, -0.1033098251, -0.1265589148, -0.1692928523, -0.0339661725, -0.0823688582, -0.0573712327, -0.0680171251, -0.1225884780, -0.2268873602, 0.0212829616, 0.0543498173, -0.0870935693, 0.0416950732, 0.1378109753, 0.0267304610, -0.0532895029, 0.2296795100, 0.0796998069, -0.1257625222, 0.1277805269, -0.1191647351, -0.0146407001, -0.0925973877, -0.0952779129, -0.0257897247, -0.0037786318, 0.1322659850, -0.0188271608, -0.1015511230, 0.0850964189, 0.0636773407, -0.0225725491, 0.0402776189, 0.1387457997, 0.3130016029, -0.0734031498, -0.1790105999, -0.1253461093, -0.2477929741, -0.1083743721, -0.0684343278, 0.0435179025, 0.0256488491, 0.0457232334, -0.0609063096, -0.0356685556, -0.2620221674, 0.0300103407, 0.1862244904, 0.0196372680, -0.1603809297, -0.0772900432, -0.0911007002, -0.0393208265, -0.0828250870, 0.0956967324, 0.1515852064, -0.1282863915, -0.0291951820, 0.1192156747, -0.0365044028, 0.0855423287, 0.0027294306, -0.2005911767, -0.1045414954, 0.0165502466, 0.0433259383, -0.1806676537, -0.0967753232, 0.0093849227, 0.0927084461, 0.1541526467, 0.0256329626, -0.0610139444, -0.1077927947, -0.1830567122, 0.0817483366, -0.0303256419, -0.0738307908, -0.1275693476, -0.0503721833, -0.0423707590, 0.0315269455, -0.0375798084, 0.0125842756, -0.1014126465, 0.0471085235, -0.1114007086, -0.0016339279, -0.0329574347, 0.0753752515, -0.0453937240, -0.0946622714, -0.1124216095, 0.0010740907, -0.0580290817, -0.0674353689, 0.0568478405, 0.0152407186, 0.0268225875, -0.1542716771, -0.1324772984, -0.3210163414, -0.1299642771, -0.0408928692, -0.1473958343, -0.0141364131, -0.0839333907, -0.2987258136, 0.0436317362, 0.1550544500, 0.0037037053, 0.0987264886, 0.0321576633, 0.0776399076, -0.0259977914, 0.1694663167, 0.0972954035, -0.0529868342, 0.0193095077, -0.1414551139, -0.0015830258, -0.0230934862, 0.0154035045, -0.0134870559, -0.0157298725, 0.0946958289, -0.1104486510, -0.0314616039, 0.0567947812, 0.0474488996, -0.0389798619, 0.0464774892, 0.0076739583, 0.2591556609, -0.1760671139, 0.0118847545, -0.1261778027, -0.2629833221, 0.0432375185, -0.0103338389, 0.0393197313, 0.0933536887, 0.0140933925, 0.1593533158, 0.0907349512, -0.2680881619, 0.0806381926, 0.0412820913, -0.1946950406, -0.0946677104, -0.1351171434, 0.1093745008, -0.0245822798, -0.1605606526, -0.0267418828, -0.0737582445, -0.0715381727, -0.1202424839, -0.0142981904, -0.0575211719, 0.1388532072, 0.0636010394, -0.1524742991, -0.0336502343, -0.0209386405, 0.1311348528, -0.1184475124, -0.0547313727, 0.0339507647, 0.0456546694, 0.1230167821, -0.0776046067, 0.0047641881, -0.0386696532, -0.0364797115, 0.0298205893, 0.1073535979, -0.2043727338, 0.0097771743, -0.0500212871, -0.0547149815, 0.2053415477, -0.0619545281, -0.0394971743, -0.1598170847, 0.1320906132, 0.0287093539, -0.1211603880, 0.1202192307, 0.0437510610, 0.0215018578, -0.2288490832, -0.1731565297, 0.1745953560, -0.0929608718, 0.0125875482, 0.0449218228, 0.0622236878, -0.0008676165, -0.0534917749, -0.1154821441, -0.1818781793, -0.1024611816, 0.0493954420, -0.0971624479, -0.2193335146, 0.0265609100, -0.0716359466, 0.1173691452, 0.0414727964, 0.0703300163, 0.1853314489, -0.0645221919, 0.2069793046, -0.0933962241, 0.2719095647, 0.0684995055, 0.0799310133, -0.0063231480, -0.1323490292, -0.1150359511, -0.1593843549, -0.0371181071, -0.0866324529, 0.1667510569, 0.0653531328, -0.1739708781, -0.0778811872, -0.0858573541, 0.0465682521, -0.1283871830, -0.0165678952, 0.0048831413, 0.1842632145, -0.2259394825, -0.1417694390, -0.0629874095, -0.2134393305, -0.0155694271, -0.0690148696, 0.0326981470, 0.1420231014, 0.2149544209, 0.1226883680, -0.0181306116, -0.1176053658, -0.0140195331, 0.0572864190, 0.0350041203, -0.1431033760, -0.1129768118, 0.1079861894, -0.1279785484, -0.1661207229, -0.0215219855, -0.0990757272, -0.0187712107, -0.0182011947, 0.0635462180, -0.0021656705, 0.1433230937, 0.1487530172, -0.1885136068, -0.0486666039, -0.0373081304, 0.1328295320, -0.0596534126, 0.0802224353, -0.0317076892, -0.0674278140, 0.1057301313, -0.1153055653, 0.0872726515, -0.1265426129, -0.0189411081, -0.0433161967, 0.1173798889, -0.0694588348, 0.0145512419, -0.1137025282, -0.1533247828, 0.0787425190, 0.1452488005, -0.1040220559, -0.1452259868, 0.0351325013, -0.0752036572, -0.0784249827, 0.0175010264, 0.0930145606, 0.0930048525, -0.1659815609, -0.1211744249, 0.0154094789, -0.0597028360, 0.0050412710, 0.0303018931, 0.0443701148, 0.0173770897, -0.1298601180, -0.0278963204, -0.1687526405, -0.0863577798, -0.1496783197, -0.0247847997, -0.1351233870, -0.1098672897, -0.1251491904, 0.1672114134, -0.0242413282, -0.1286416501, 0.2795446813, -0.0767049044, 0.0736570656, -0.0412751287, 0.2633911967, -0.0217289068, 0.0426488295, 0.1131793708, -0.0152090853, -0.1229424030, -0.1144120619, -0.0963512063, 0.0098808585, 0.0373742059, 0.0581551641, -0.0462557599, -0.0346345007, -0.2361959219, -0.0529593751, -0.2207929045, -0.0584091693, 0.0908613577, 0.0259551015, -0.2166300267, -0.0744934902, 0.0793112591, -0.0672374666, 0.0725901872, -0.1176957190, 0.1857870519, 0.0332309492, 0.0591878556, 0.1211112291, 0.0391218849, -0.1409840435, -0.0898345113, -0.0642065331, 0.1097103730, -0.0799285620, -0.0339761898, 0.1721064746, 0.1384280473, -0.0415394194, -0.0137875052, -0.0706905946, -0.0049664690, 0.1160695255, 0.0624103844, 0.0900988877, 0.1859814376, 0.2201098502, -0.0222799294, 0.1624205559, -0.0208810214, -0.0533486530, 0.0629537627, 0.1110973209, 0.0582513995, -0.0192154031, 0.0465798229, -0.0127612548, 0.0242106542, -0.0458250046, -0.0613033660, 0.0231013652, -0.0845248476, 0.1421668530, -0.0328640603, 0.0036266332, -0.1801332682, 0.0977124944, 0.0703081414, -0.2622722685, 0.1270612478, 0.2081462145, 0.1032258347, -0.0157629307, -0.1064840555, 0.0343067795, 0.0329486206, -0.1618195921, -0.2544648051, 0.0368034281, -0.0959796533, -0.0592936799, 0.1944071203, 0.0066602384, 0.0962570310, -0.0853144526, -0.0941619426, -0.0163945425, -0.0452365316, -0.0615155697, -0.0043675983, 0.0237230640, 0.0238784160, -0.0260198899, 0.1990073025, -0.1175677776, -0.1495448500, 0.2801100314, -0.0019452664, 0.0426452495, 0.0088350335, 0.1946421415, -0.0084061036, -0.0721992776, 0.1120675504, -0.0616397709, 0.0792037547, 0.0038113212, -0.1018819064, 0.1042925715, -0.0507871993, 0.0821331516, 0.0195813272, -0.0045776255, -0.1021706536, -0.0439167470, -0.2505111992, -0.0887723640, 0.1398713440, 0.0214537773, -0.0812198073, -0.0304218344, -0.0547589436, -0.0390787460, 0.2213269621, -0.1203066036, 0.2063913196, 0.0496423431, 0.2422999740, 0.0103671448, 0.1292077005, -0.1844848394, 0.0707495585, -0.1531220824, 0.1194449514, 0.0808151364, 0.1427518427, 0.1241987646, 0.0352225266, -0.0858862177, 0.0440944023, 0.0735567138, 0.0671282187, -0.0281055067, -0.0482958257, 0.0065446962, 0.0686511174, 0.1059082821, 0.1199968755, 0.1936042607, -0.0828090385, -0.0287659001, 0.1143751666, 0.1443257630, 0.1044398025, 0.0061615761, -0.0525869541, 0.0276228935, 0.1334975958, 0.1190240756, 0.0889354423, -0.0850929767, -0.1650214791, 0.0823233351, -0.0003248036, -0.0850582272, -0.1101444289, 0.1276522279, -0.0179659426, 0.0224476401, 0.1451524943, -0.0686396286, 0.1784886718, -0.1232558265, -0.0193037409, 0.1328306645, -0.0812952220, -0.0604692139, -0.1708082259, 0.1568792462, -0.1256406158, -0.0369237959, 0.1180760041, -0.0882203281, 0.1853696108, -0.0310108420, -0.0734904110, 0.1313232183, -0.0193328895, 0.0056164013, -0.0277735554, 0.0250172075, -0.1024869531, 0.0485318601, 0.0521824434, -0.0484291464, 0.0267643034, 0.1696313173, -0.1383273304, 0.1567212343, -0.0630406439, 0.1204462498, -0.0281751025, -0.0795274302, 0.1095045879, -0.0746477321, 0.0305290110, 0.1266280711, 0.0701859146, 0.1945212036, 0.0388784334, 0.2329240739, 0.0437530577, 0.0232636388, -0.0929651856, -0.0824264586, -0.0296035875, -0.0679075867, 0.0174215641, 0.0623631291, 0.0642164499, 0.0886037499, -0.1091017351, 0.0081098955, 0.1033439264, 0.0188072510, 0.2338082790, 0.0186187942, 0.1698430777, 0.1266627163, -0.0607377142, -0.0060960278, -0.0171618555, 0.0453026108, -0.0361257344, 0.0676084906, 0.0747169182, -0.0385531709, 0.0724742711, 0.0579657257, 0.0733918920, 0.1426182240, -0.0028636593, -0.0082440590, -0.0326556042, -0.0160761066, 0.0478418320, 0.0545815639, -0.0257061645, 0.0471141487, -0.0212057941, -0.0476748124, -0.0926811248, 0.1388729960, -0.0388153084, 0.1859555990, -0.0902218819, 0.0344922394, -0.0162258707, -0.0699487999, -0.0039843302, -0.0000992069, 0.1099331304, 0.0533984043, 0.0043667783, -0.1039758921, 0.0377560109, 0.0075982730, -0.0085802963, 0.1135596856, 0.0283052307, -0.0622686222, -0.0215051956, -0.0170604736, 0.1302845329, -0.0031546201, 0.0559846796, 0.1160592884, 0.0420057885, 0.0115744276, -0.0411785319, -0.0114275441, -0.0129215503, -0.0825745389, 0.1012844741, 0.0305893272, -0.0760793835, -0.0459650084, -0.0313047804, 0.0151924826, -0.0793053433, -0.0131145986, 0.1033217311, 0.0142696649, -0.0011031583, 0.0868598074, -0.0047509624, 0.0613638870, -0.0425857492, 0.0043613086, -0.0482008196, 0.0027312413, 0.0109917466, -0.0671365038, -0.0293168351, 0.0794155598, -0.0811659619, 0.0446824096, -0.0521122888, 0.0805996060, -0.0347293206, -0.0360054038, -0.0355870277, -0.0348550603, -0.0338187590, -0.0232703555, 0.0025124631, -0.1177007258, 0.0072376067, 0.0180334449, 0.0475387089, 0.0552191921, 0.0335325114, 0.0097790956, 0.0117585510, -0.0123938369, -0.0560588650, 0.0571581423, 0.0301275253, -0.0043671057, 0.0124517828, 0.0448391736, 0.0644865930, -0.0177414790, 0.0756560117, -0.0016183406, -0.0074167848, -0.0803704038, 0.0208146796, -0.0037675276, -0.0572312512, 0.0250178874, -0.0635719225, -0.0032015964, 0.0006754920, -0.0405836217, 0.0739876777, 0.0514238626, 0.0065307692, -0.0593957379, 0.0794533938, 0.0533614904, 0.0798924118, 0.0432514101, 0.0635866076, -0.0798730627, 0.0667767227, 0.0335833877, 0.0035872310, 0.0672122389, -0.0765259564, 0.0541529059, 0.0126834661, -0.0632713959, 0.0822745413, 0.0494996756, 0.0633681715, -0.0134035274, 0.0539549738, 0.0138603821, -0.0766963512, -0.0504589230, 0.0724096000, 0.0781895667, -0.0453763716, -0.0726860911, -0.0713274777, 0.0109185949, 0.0528892130, -0.0257180519, -0.0006578341, -0.0357436128, 0.0655437410, 0.0467033833, -0.0052172765, -0.0681253672, -0.0395466127, 0.0439970046, 0.0299700499, -0.0533959195, -0.0579972565, 0.0680922419, -0.0764295161, -0.0218801871, -0.0784375146, -0.0075557381, 0.0800331384, -0.0795549154, -0.0234972686, -0.0004014298, 0.0077745467, 0.0576153100, 0.0711099952, 0.0025472790, -0.0119845718, 0.0096692368, -0.0220539421, 0.0331715494, -0.0665993094, -0.0570837967, -0.0761868358, -0.0207698345, -0.0273428708, 0.0524958372, -0.0258360431, 0.0264733508, -0.0568544939, 0.0245842263, 0.0657488257, -0.0198717937, 0.0012339056, -0.0354874991, -0.0555689111, 0.0569051504, 0.0446649343, 0.0554196686, -0.0693301037, 0.0062017590, -0.0656334460, 0.0655346513, -0.0149509981, 0.0311495215, 0.0095668212, -0.0051864609, -0.0183997080, -0.0219593830, -0.0374536999, -0.0701872483, 0.0292348638, -0.0459879301, -0.0631777421, -0.0165405571, -0.0318726711, 0.0704405904, 0.0062811747, -0.0090005919, 0.0403909758, 0.0013532639, 0.0506674647, -0.0671522394, 0.0501746982, -0.0025338829, -0.0301795751, -0.0686438084, -0.0308591761, -0.0155898184, -0.0792675912, 0.0187729299, -0.0514612421, 0.0137462616, -0.0645613968, 0.0713155121, 0.0534633249, -0.0319560133, -0.0572498515, 0.0068773180, 0.0292283595, 0.0481522977, -0.0344564244, -0.0008613691, -0.0505451523, -0.0234782919, 0.0380228311, 0.0272181258, -0.0157084987, 0.0665452629, -0.0521707982, -0.0347478949, 0.0780915022, 0.0235257894, 0.0677374452, 0.0115106702, -0.0362468660, -0.0507799946, -0.0350017883, 0.0394688323, 0.0390111655, 0.0778897256, 0.0233472586, -0.0251461491, 0.0816221535, -0.0515602008, 0.0680934787, -0.0407285616, 0.0422787815, -0.0327554122, -0.0342256650, -0.0205358751, 0.0076263100, -0.0730199814, 0.0236000940, 0.0498116910, 0.0726054162, -0.0257104486, -0.0756270736, -0.0138218254, -0.0316321328, 0.0509008467, 0.0480277985, 0.0472186655, -0.0302493051, -0.0109438151, 0.0695811361, 0.0253345370, -0.0295832381, -0.0416752957, -0.0626544580, 0.0502451956, -0.0311584808, -0.0267533511, 0.0567869842, 0.0134908780, 0.0768502951, 0.0566027761, -0.0138023421, 0.0526349694, 0.0387336463, -0.1293688416, -0.1685697436, 0.0302868951, -0.0230297782, 0.0601932332, 0.1555027366, 0.0321631394, -0.0187235940, 0.1371853501, 0.2023444325, -0.1055999026, 0.0843816549, -0.0559869893, -0.0108388970, -0.1077889875, -0.0888425261, 0.1398567706, 0.0372356474, 0.1652104259, -0.0897333398, -0.0787747130, -0.0739824027, -0.1408130229, 0.0944251195, -0.1092580631, -0.1446375996, -0.0569961742, 0.0324769355, -0.0116482675, 0.0162954759, 0.0859224945, 0.0495550931, 0.0209118836, 0.0957364365, -0.0685609728, -0.0127526158, -0.1303288341, 0.1152677834, 0.0566897653, -0.0430015698, -0.0667221993, 0.0874835178, -0.0898814127, 0.1283292621, 0.0533754751, 0.2135628313, 0.0221428704, -0.1990697682, -0.1410015523, -0.0539584942, 0.2614494562, 0.0066438871, -0.2314084023, 0.0412711613, -0.0258364752, 0.1158080548, -0.1007106528, -0.2063004822, -0.1322452128, 0.0101744961, -0.0877058804, 0.0670093670, -0.0339303613, 0.1254297942, -0.1146226600, 0.2115340084, 0.0804577544, -0.1435401589, 0.1423999071, 0.1099178046, 0.0310868844, -0.0092962477, 0.0727853999, 0.0663857684, -0.1326656938, 0.0016786160, 0.0666706562, -0.0095652118, 0.1358422488, 0.2133245766, 0.0722547621, -0.0387508497, 0.1462807208, 0.1875540912, 0.0596735589, 0.1005214825, 0.0411460064, 0.1399647892, 0.0660843104, 0.1086240113, 0.0673688874, 0.0244088620, -0.0191699248, -0.0350866951, -0.0822245777, 0.0274089612, -0.0259877946, 0.0202197749, 0.0666996762, -0.1780530810, 0.0529134870, 0.0379542485, -0.0519289747, 0.0621644594, 0.0012857802, -0.0063250465, 0.0626416653, 0.1660180688, -0.1840205342, -0.0067049554, 0.0073495251, -0.0760178044, -0.0018933102, -0.0830874592, 0.0440698788, -0.0685331896, -0.0782420188, 0.0699080229, 0.0998473391, 0.0373615175, -0.1226351783, -0.1297558099, -0.0035765297, 0.0767080113, -0.1450397670, -0.0674097613, 0.0428486764, -0.0363098718, 0.0895880759, 0.1202420741, 0.0996829197, 0.1729173511, -0.1156777814, -0.0541066416, 0.0790499523, 0.1212211922, 0.1070175543, 0.1169436052, 0.0135533195, -0.0509701371, 0.0635214746, 0.0598179214, -0.0855082572, -0.0268915724, 0.0135633452, 0.0172387324, 0.0788125098, -0.1718832850, 0.0744311735, 0.0629621297, -0.0202916395, 0.0065965327, -0.2202626765, 0.1837553382, -0.0622315183, 0.0188362859, -0.0803160593, -0.1716708392, -0.0667470917, 0.0630759746, 0.0000451673, -0.0743648782, 0.0239515789, -0.0029772941, 0.0324612185, 0.1206771284, 0.0858299360, 0.0067407223, 0.0741828531, -0.0684890226, -0.0660404339, 0.0576248541, 0.0368893705, -0.0422328562, -0.0557726398, -0.0229422115, 0.0833666474, 0.1471477300, 0.0883424282, 0.1154076979, 0.0277806874, 0.0403444022, 0.0129934335, 0.0593217649, -0.0149575463, 0.2268932313, -0.1639112830, 0.0443734117, -0.1491502821, 0.2301926017, -0.1071459353, -0.0703440979, -0.0405476205, -0.0305737909, 0.0073730866, -0.0686746910, 0.0116894161, 0.0590927936, 0.0398852341, 0.0106639452, -0.1033415198, 0.0674914271, 0.1542194635, 0.1194197312, -0.1054666415, -0.1592136621, 0.0947188959, -0.0150713455, -0.1063804775, 0.1539809853, 0.1039805710, -0.1671665758, -0.0287817512, -0.0595782548, 0.0543881655, -0.0435042530, 0.0841314271, -0.0024429241, 0.0243785102, -0.2388270199, -0.0957634971, 0.0313370377, -0.1135652438, -0.0080623366, 0.0651914030, -0.0371921100, -0.1232477352, -0.1262859106, 0.0884714872, -0.0798477754, 0.0982638597, 0.1546344459, -0.0646641254, 0.1283548623, -0.0710939616, 0.0333615281, -0.1514890045, 0.1776600331, 0.0129939290, -0.1308039427, 0.0669550076, 0.0764885023, -0.0350856632, -0.0634222329, 0.0545608923, 0.0429859869, -0.1302805394, 0.0674430057, -0.0573364682, 0.0741633996, 0.1457311064, 0.2654174864, 0.0390963294, 0.0434933230, 0.0217065886, 0.0210910030, -0.0325770862, -0.1553039849, -0.0737065151, 0.0339861512, 0.1727558076, -0.1487118006, -0.1857478917, 0.0416028537, -0.0703997910, -0.0730959922, 0.2180316001, 0.0955622941, 0.1713284999, -0.0514780805, 0.2826822996, -0.0466553457, -0.0560433529, -0.1809090972, -0.1573524326, -0.1916604787, -0.0686248094, -0.0651635453, 0.2383095175, 0.0769384727, -0.0381203406, 0.0796523839, 0.0468372218, -0.0780856535, 0.0411401764, 0.0599048473, -0.0785814524, -0.1316469461, -0.0534145571, 0.2539668977, -0.0937745273, -0.0823718831, -0.1103963032, 0.2480560392, 0.0161928125, -0.1416465342, 0.3434793949, 0.0313334577, -0.0711086094, -0.1882963926, -0.0864658803, -0.0483431257, -0.0884312168, 0.2507577538, -0.1399012059, -0.1796888262, 0.0397819541, 0.0761365071, 0.0137749026, -0.1446831971, -0.1004465371, -0.0521077402, -0.0213135201, -0.0569977351, 0.0133143486, -0.0939792991, 0.3434009850, -0.0123707009, 0.1305416971, -0.0425002947, -0.0588247031, -0.2523080111, 0.0232232176, -0.1616239250, -0.1662400514, -0.1833721250, 0.0056434120, -0.0799496695, 0.0352300815, 0.1208473369, 0.2091832310, 0.1501999795, 0.0024714123, 0.2077106535, 0.0040148282, 0.1394148022, -0.0781530887, 0.1448321640, -0.0375278927, -0.1464378387, -0.0105412127, 0.0023155878, -0.1396629959, -0.1509154439, 0.1273658723, -0.0498398282, 0.0626846179, -0.0637669936, -0.1142461002, -0.2424538434, 0.1684511602, 0.2337897718, 0.0725423470, 0.0959778652, 0.0240260474, -0.0621121936, -0.1731852740, -0.1157968491, 0.1774355173, 0.1181744710, 0.0043448308, 0.0308998395, -0.3542582095, 0.0141882617, -0.1287023127, -0.0030902806, 0.1578804553, 0.1179869995, 0.1440501511, -0.1392035335, 0.0934463218, -0.1019169912, -0.1189633384, 0.1041829437, -0.1528737098, -0.1128586158, 0.0644182637, -0.1388013959, 0.1653207392, -0.0000036502, 0.0688064620, -0.1755500734, 0.0873800665, 0.0140058203, -0.0268040281, -0.0270965733, -0.0399120040, -0.1126404926, 0.0808077827, 0.1490410119, -0.0283364654, -0.1013043150, -0.2216440439, 0.0893544331, 0.0360169187, -0.0354561284, 0.1860199273, 0.0118520325, -0.0195420366, -0.2992612422, -0.1528631896, -0.1083843410, -0.0124649163, 0.0184776206, -0.1073172465, -0.2354257703, -0.0067240903, 0.0540995076, 0.1842313558, -0.1172060668, -0.0838309154, -0.1150356680, 0.0350117758, -0.1589331925, -0.0668724626, -0.0621212423, 0.2241831571, 0.0294673778, 0.2149270177, -0.1851960868, 0.0402880907, -0.1266350746, -0.0805946663, -0.0278655775, -0.0265889671, -0.0337521546, -0.0931150094, -0.2762310505, 0.0152609376, 0.1499750614, 0.1913509220, 0.2426614463, 0.0265586879, 0.3040438890, -0.1405586153, 0.0307230484, -0.1285854578, 0.1145394593, 0.0021244306, -0.1297246218, -0.1193313077, 0.0716519356, -0.0828901008, -0.3594684303, 0.1639302522, -0.0918971077, 0.0142550925, 0.0308466833, -0.0230135396, -0.1164117157, 0.0089337183, 0.2549957335, 0.0011305253, 0.1025958881, 0.0258596763, -0.0502061918, -0.0398516357, -0.2124607712, 0.2890515029, 0.0850920975, -0.0302592590, 0.1433737427, -0.3007672131, -0.2433453202, -0.1498441994, 0.1186011657, -0.0237953924, 0.0493651479, 0.0892379358, -0.1587666273, 0.1072576568, -0.1350353956, -0.0936831534, 0.0511815511, -0.1563677788, -0.1462428272, 0.0820612758, -0.0595179796, 0.1833436340, 0.1048956513, 0.0158851277, -0.1534413546, 0.1418486238, -0.0302468799, 0.0698599815, 0.0199534222, -0.1460774988, -0.0626350045, 0.0315407850, 0.1392847449, 0.0450438038, 0.0017789395, -0.0946656987, 0.0209909044, 0.0058736093, 0.0369293466, 0.1924972385, -0.0965769663, -0.2122706771, -0.2360825539, -0.1590719223, 0.1154749915, 0.0994239077, 0.0211878512, -0.0341055840, -0.2437194735, 0.1188187525, 0.0116456551, 0.1405083537, -0.0393917486, -0.0356390215, -0.0579979382, 0.0931878760, -0.0998081341, 0.1073578522, -0.0109207015, 0.0507040359, -0.1335878074, 0.1075912490, 0.0018092806, -0.0129519757, -0.0447792709, -0.0058329441, -0.0824844912, 0.0971945226, 0.0802537128, -0.0712515563, -0.2997786105, 0.0227262396, 0.1787892729, -0.0133388396, 0.1815972328, -0.0295292735, 0.0843420699, -0.1381641179, -0.1647811681, -0.0271492098, 0.1048447564, 0.0461132973, -0.1043063626, -0.0730153695, 0.1599281728, -0.1660887301, -0.2574717104, 0.1162344590, -0.0517552122, -0.0838053897, 0.0158949047, 0.0354787894, 0.0088010561, -0.0766886100, 0.1031100154, 0.0620139576, 0.1270760447, -0.0728011951, 0.0095140897, 0.0123851923, -0.2868937254, 0.1560147554, 0.0798727125, -0.0900024623, -0.0481518134, -0.0873049498, -0.1142601743, -0.2227306217, 0.0663734227, 0.0496966876, -0.1983396709, 0.0928796008, 0.0210131630, 0.0775456429, -0.0148505988, -0.0863185599, 0.0521610640, -0.1518245935, 0.1050717086, 0.1197766662, 0.1458034068, 0.0514629669, 0.1534058303, -0.0936265066, -0.0183748938, -0.1452970654, -0.1076274291, 0.0244466625, -0.0220739450, -0.0495903082, 0.0891386494, -0.0202396326, 0.0352577157, 0.0199615005, -0.1847122312, -0.0894968286, -0.0457964614, 0.0155799184, -0.0285357051, 0.0129391029, -0.1671440303, -0.1480718106, -0.1726315618, 0.0926186293, 0.1219488159, 0.0646398664, -0.1125751510, 0.0675209016, -0.0938871726, 0.0384552255, 0.0116080232, -0.0670424700, -0.1523626745, -0.0729890540, 0.0054575368, 0.1973588467, -0.1917601526, 0.0844533071, -0.0711926371, 0.0649051145, -0.0768879130, -0.0421708450, 0.0908536166, 0.0053622727, -0.0413476154, -0.0832636058, -0.1040163487, 0.0152792493, 0.2693369091, -0.1269885600, -0.2427110672, -0.1185055673, -0.0150400857, -0.1839088649, 0.0164789669, 0.0223065298, 0.0209335350, -0.2021291405, -0.0745864138, -0.2176585197, 0.0701915100, 0.0622380115, 0.1497525871, 0.0649749115, 0.0964939073, -0.0853973776, -0.2233912498, 0.1336764991, -0.1573103368, 0.0066826539, 0.1458300948, 0.1294670701, 0.1776114106, -0.0693906471, 0.0772707388, 0.0697298050, 0.1142598018, -0.0274340473, -0.0228243358, -0.0536586046, -0.1033392772, 0.1709034741, 0.0513433106, 0.0498495623, -0.1825487912, -0.1482934505, -0.1752720028, 0.0069834148, 0.0071129207, 0.0017877195, -0.3262603581, -0.0310100503, -0.0007539646, -0.0409991778, 0.0046419939, 0.0814940855, -0.0342450514, -0.0241257809, 0.0258079823, 0.2312541902, 0.0251239780, 0.2458833605, -0.0921727195, -0.1868433058, -0.0341072939, -0.1054653451, -0.2339897305, 0.0665622279, -0.2486728430, 0.0007874047, 0.0982865319, 0.0656204596, 0.0647153258, -0.1365812570, -0.0439653471, -0.0632242188, -0.0549911521, 0.0175130423, -0.1555536538, 0.1272281706, -0.0451234989, -0.0441746376, -0.2166233361, 0.0789028034, 0.0423215926, -0.0406689793, -0.0481087901, -0.0390968472, -0.0712545812, 0.0615359619, 0.0029952347, -0.0692992210, -0.1253137439, -0.0292602070, 0.0290162340, 0.0222078338, -0.2240649313, 0.0264670290, -0.0772587955, -0.0649274141, 0.0232799649, -0.0318876728, -0.0049267560, 0.2148932368, -0.0539395660, -0.0446665026, -0.0663182139, -0.0655695647, 0.2515368164, -0.1715253145, -0.1885789484, -0.1802000850, 0.0409103744, -0.1645042449, 0.0629002675, 0.1013850793, -0.0701316297, -0.2391245365, 0.0238624942, -0.1784681827, 0.1433188021, 0.0336645506, -0.0001977574, -0.0877787843, 0.0707074627, -0.0903454646, 0.0088743931, 0.1874929518, 0.0241199266, 0.1148898453, 0.0013949064, 0.0948522016, 0.0597707815, -0.1413254291, 0.1146463156, -0.0273821019, 0.0522215068, -0.0027634585, -0.0676556006, 0.0444671959, -0.0045392262, 0.0143476380, 0.0718071014, -0.0538943782, 0.0154146207, -0.2163799554, -0.1033844724, 0.0602257922, 0.0164495427, -0.0807336867, -0.3399335444, 0.1715817899, -0.0204978213, -0.0279065687, 0.0511022098, 0.0755942240, -0.0680098832, 0.1172379255, -0.1254265010, 0.1072202176, -0.0131931230, 0.2316404283, -0.0830352902, -0.1555501819, -0.0303904023, -0.2390948385, -0.2601616085, 0.0818484202, -0.1901072562, 0.0616351999, 0.1338716745, -0.0488421395, 0.0290852711, -0.0232084263, -0.2190187573, 0.0049695633, -0.0621500872, -0.0458466336, -0.0307449102, 0.0449636430, -0.0258583426, -0.1760651767, 0.0593475662, 0.1012911126, -0.0360743478, 0.0629667565, -0.0517640859, -0.1113732532, -0.1594330221, -0.0148024317, 0.0227574371, 0.0651043728, -0.0599325001, -0.0727965534, -0.0553253815, 0.0876777619, -0.1085375324, 0.1076654047, -0.1676211655, -0.0479806140, 0.0136070922, -0.0088840947, -0.0592358820, 0.1042602584, -0.0605340563, 0.0301992185, -0.1512057930, 0.0829727799, 0.0826218352, -0.0769303292, -0.2674937844, -0.2338657081, 0.0998835191, -0.0432353355, 0.0867525116, 0.0171777681, -0.0352455452, -0.1869759113, -0.1717734635, -0.2728193998, 0.0033021357, -0.0439843312, 0.0972038582, -0.1120555550, 0.0936207697, -0.0692307651, 0.0082042953, 0.0730767101, 0.0535479076, 0.0156718194, 0.0391577184, 0.0180607829, 0.0789221451, -0.1107758656, 0.0712027550, -0.0118304305, 0.0969703123, 0.0415225364, -0.0602314584, 0.0322471708, 0.0877582654, -0.1061997265, -0.0045184945, -0.0062266034, -0.1138573363, 0.0466865078, -0.0437310189, 0.1244168356, 0.0225159619, 0.0015085897, -0.1159044430, 0.0345023684, 0.1171652526, 0.0453005433, 0.0609784499, -0.0439441688, -0.0114714829, 0.1090882570, -0.1851198524, -0.0543763489, -0.0707364604, 0.1835752428, 0.0754960030, -0.1182877049, -0.0339321829, -0.1224716753, -0.2496732920, -0.0040335516, -0.3151688576, 0.1211971492, 0.0618914068, -0.0188853443, 0.1201205775, -0.1747048199, -0.0935992301, 0.0008726114, 0.0224542357, -0.0567095652, 0.0201695599, 0.0914418921, -0.0026984359, -0.2496208400, -0.0378986076, -0.0418802351, 0.0351698808, 0.0018964744, 0.0856803730, -0.0707869977, -0.1440258026, -0.0193228666, 0.0177589338, 0.1135030985, -0.0092114136, 0.0118185254, -0.1115747765, -0.0587285347, -0.1245829910, 0.0329105742, -0.0164885297, 0.0538678803, -0.1551904976, 0.0348497964, -0.1218345836, 0.1808989495, 0.0584274642, 0.0213399120, -0.2068714797, 0.1191152856, 0.0336210877, -0.1164507046, -0.0527021140, -0.3524331450, 0.1193943471, -0.0904661417, 0.1978490353, -0.0456874408, -0.0112089617, -0.0603831373, -0.1280118525, -0.2523852289, -0.1627314538, 0.1226248965, -0.0689464733, -0.1559640020, 0.0539877564, -0.0119268810, 0.1546572894, 0.0296184234, 0.0056992895, 0.0017540082, 0.0248517916, 0.1486985832, 0.0199884176, -0.2082806826, 0.0932836533, -0.1055170745, 0.1167759523, 0.0446428098, 0.0953668505, 0.0174338818, 0.2409221083, -0.1617135853, 0.0370780714, -0.1255150288, -0.1361760646, 0.0894884393, -0.1002167761, 0.1584830582, 0.1313672066, -0.0888948143, -0.0703644678, -0.1380727589, 0.0886691883, -0.0474381298, 0.0914976671, 0.0540828221, -0.1135305837, 0.1437778473, -0.0241994709, -0.1165328249, -0.0839719996, 0.1745927781, 0.0230197180, -0.0564365387, 0.0895486772, -0.0190894324, -0.3580896258, -0.0368040912, -0.4161022007, 0.0238236077, 0.0431311913, -0.0354194269, 0.1090685502, -0.1196217239, 0.0939077362, -0.0587103814, -0.1545935124, -0.1544939280, -0.0416604169, 0.1724306792, -0.0204523280, -0.1878690571, 0.1728807986, -0.0654734671, 0.1106546968, 0.1044352055, 0.0273292605, -0.1638799310, -0.0864992365, -0.0022045565, 0.0438436419, 0.2442015857, 0.1111224890, -0.0369237438, -0.0934005678, -0.0620226264, -0.1306565106, 0.0478181131, 0.0288063828, 0.0781372190, -0.0895233229, 0.0954823643, -0.1873112768, 0.0725755319, 0.1728560925, -0.0067118746, -0.0678475797, 0.0863999873, 0.0927469134, -0.0885071978, 0.0314981267, -0.2785332501, -0.0224880632, -0.0099387588, 0.0240355954, -0.0228468738, 0.0239915177, -0.0719203204, 0.0028452391, -0.4485574365, -0.0209287386, 0.1376068592, 0.0363860428, -0.3326314986, 0.1220393553, -0.0939498842, 0.1352904439, -0.0383405946, 0.0274546519, -0.1454773247, 0.1429903060, 0.1360266060, 0.0488029234, -0.0925361142, 0.0753578916, -0.0794240087, 0.0057789558, -0.0020803090, 0.1250830442, 0.0721022114, 0.1158630848, -0.0528724156, 0.0281318929, 0.0637946129, -0.2758112252, 0.0428911895, 0.0514913239, 0.0736180395, 0.0108065419, -0.0638045371, 0.0164729711, -0.2325093150, 0.0310731046, -0.0450958610, 0.0900470912, 0.0981443301, 0.0641283318, -0.0839875787, 0.1318912208, 0.0370516703, -0.1238009036, 0.2360102385, 0.0737194046, -0.0095394170, 0.0798340514, 0.0121062053, -0.2586319447, -0.0016291079, -0.4890282452, 0.0602868386, 0.0938977078, -0.0345177315, 0.0932366028, -0.0698292404, 0.2262919247, -0.0298675802, -0.1134410724, -0.1464578658, 0.0150955711, 0.1769239157, -0.0115235420, -0.1580050439, 0.0830395296, -0.2095754445, 0.0946480855, -0.0169910565, 0.0356862321, -0.1738060415, -0.0707757846, -0.1332214475, 0.1186113656, 0.0914484113, -0.0179789346, 0.0325177722, -0.0332853459, -0.0108652972, -0.0711146668, 0.0131926788, -0.0816873461, 0.1279392391, -0.0419243388, 0.0621528104, -0.0475577526, -0.0793469176, 0.1497757286, 0.0358351432, -0.1530711651, 0.0721576735, -0.0204055943, -0.1035112739, 0.1057304367, -0.0513255149, -0.2431908250, -0.0390104167, 0.1372623891, -0.0613770112, 0.0455467999, 0.0036273126, -0.0788249299, -0.4308975041, -0.0825054720, 0.1713862270, 0.1299188584, -0.2339646816, -0.1047583669, 0.0103389854, 0.1423644722, -0.1304512769, -0.0628537983, -0.1268092990, -0.1588548571, -0.0352751575, 0.0823755488, -0.0342747793, 0.0447798744, -0.0629643649, 0.0244380273, -0.0697917640, 0.0431758724, -0.0108814612, 0.0260872990, -0.0250951312, 0.0215703249, 0.0380415954, -0.1684225947, 0.0357752405, 0.0730064288, 0.1984380335, -0.0182184391, 0.0070872237, 0.0645173043, -0.3029043972, 0.0054918313, -0.1401399076, 0.0873539075, 0.0742465407, 0.0183723290, 0.0607437715, -0.0121771730, 0.0039711329, -0.0161111075, 0.0881949961, 0.0640077367, 0.1246480122, 0.0029913045, -0.1051336974, -0.2519750893, 0.0242966637, -0.1849350035, 0.1259522885, -0.0073649902, 0.0579827651, 0.1827893704, -0.0715488344, 0.0438252576, -0.0148140276, -0.1035333797, -0.1077730581, 0.0027131499, 0.2063291967, 0.0553564355, -0.0085523827, -0.0539546236, -0.0971305370, 0.0825788900, -0.1061179563, -0.0163588636, -0.1325311661, 0.0121798376, -0.0795817748, 0.0529714003, 0.1273241937, -0.0415316150, 0.0717452317, 0.0872178301, 0.0962590650, -0.0991899967, -0.0031537435, 0.0253089741, 0.0859234184, 0.1029265672, 0.0187354684, -0.0378111601, -0.0551542863, 0.1540226042, -0.0456038825, -0.1222577691, -0.0232535973, -0.0166811291, -0.1285427213, 0.0114386482, 0.0297315959, -0.1888752580, -0.0497296117, 0.0154431909, -0.0913713127, -0.0035248701, 0.0135528622, 0.0276720170, -0.5777540803, -0.0244221762, 0.1689360887, 0.1539552063, -0.0896000937, -0.1244484112, 0.0258581694, 0.2031024992, -0.0516800508, -0.1531824023, -0.0601130575, -0.0235026870, 0.0265042260, 0.0344007052, 0.0705594495, 0.0335594639, 0.0103283739, -0.1156987920, -0.0215876866, 0.0204879977, -0.0756195039, 0.0132596800, -0.1515381187, 0.0256274361, -0.0394860245, -0.1786564589, 0.1249077097, 0.1229954958, 0.0772140697, -0.0112981535, -0.1073345020, 0.0512124747, -0.1259609163, 0.0283424631, 0.0554602258, 0.0317228921, 0.0586185120, -0.0616522804, -0.0325163268, 0.0316540003, 0.0140045332, -0.0363834016, 0.0798266456, 0.0945900008, 0.0631005466, 0.1198883280, -0.0168647487, -0.1201092377, -0.0099502848, 0.1470931917, 0.1355847269, -0.0329239443, -0.0113492673, 0.0398637652, -0.0419054963, -0.0389814973, -0.0331721157, -0.0972676650, -0.0021696072, 0.1132894084, 0.1548871100, -0.1438583583, 0.0500572994, -0.0024454258, -0.1107772365, -0.0604454577, -0.0441371426, 0.0362523459, 0.0245217495, -0.0584508814, -0.0929501578, 0.0480126962, 0.0728161186, 0.0120498417, -0.1267339289, 0.1137868240, 0.0147604439, -0.0843714625, 0.0946106762, -0.0341142528, 0.0891961604, 0.1273993701, 0.0444364585, -0.0785953626, -0.2682633102, 0.1737386137, -0.0558777377, -0.0527017266, -0.0647296458, -0.0457988568, -0.1238872707, 0.0819091275, 0.0163980071, -0.1389448345, -0.0127946856, 0.0346027575, -0.0946448296, 0.0885256603, 0.0291844718, 0.0272000190, -0.4909503460, -0.1190662012, 0.0286346879, 0.1605227143, -0.2056841105, 0.0284312200, 0.0392751284, 0.0642068014, -0.1462442279, -0.0588458329, -0.0967314690, 0.0498835295, -0.0322383568, 0.0057224198, 0.0360134877, -0.0767406821, -0.1361917704, -0.0381851234, 0.0309810806, -0.0370849743, -0.1192208901, 0.1224604622, -0.0894541070, -0.0181219894, -0.0013215004, -0.0553529076, 0.0502866879, 0.0807757527, 0.1136981398, 0.0088356584, -0.0557261854, -0.0410798676, -0.2105382383, 0.0064630127, 0.0362356827, 0.1170593724, -0.0335972123, 0.0915673599, 0.0452316143, 0.1022300273, 0.0300818477, 0.0624100491, -0.1043726206, -0.0303468723, 0.0583170168, 0.0577676073, 0.0894070417, -0.0511610918, -0.1121763960, 0.1842325926, 0.0692151561, -0.0090340804, 0.1078604385, 0.1810746938, 0.0050516729, -0.1055233032, -0.0584619455, -0.0936856270, -0.0711284652, -0.0494944677, 0.1446621269, -0.1954143494, -0.0742311552, -0.0706043467, -0.1376804411, 0.0359528251, -0.1545671672, -0.0424886383, -0.0810844973, -0.1347277761, -0.1028154865, 0.0319662653, 0.0488699824, 0.1493461281, -0.1507313102, 0.0189456083, 0.0720056072, 0.0054955096, 0.0708175600, 0.0376592837, 0.0975655988, 0.1415493935, 0.0309651382, -0.0966893137, -0.1711081564, 0.1461202353, 0.0460237749, 0.0900282338, -0.0275870636, 0.0775797218, 0.0136704892, 0.0225465093, -0.0659611002, 0.1822848022, -0.0176674463, 0.0533229038, -0.0313689299, 0.0121800825, 0.0025895317, -0.0313573740, -0.3370950520, -0.0992669240, 0.0599309728, 0.1281756014, -0.0950747952, 0.1260147095, -0.0655326620, 0.0386623964, -0.1564511359, -0.0561094843, 0.0006243841, -0.0878767371, -0.0598659627, 0.1141262576, 0.1425956935, 0.1156304628, -0.1242149323, -0.0434943140, 0.0691165924, 0.0391138569, 0.0199625213, 0.0750004053, -0.1263545752, 0.0208305102, -0.0098290714, 0.0546281859, -0.0743341446, -0.1571741551, 0.0843306109, 0.0599413887, -0.0726843327, -0.0200592019, -0.0922389179, -0.0440491661, 0.1718530953, -0.0674941167, -0.0621708781, -0.0727363825, 0.1460368186, 0.0508662537, 0.0125091551, 0.0507223979, -0.0563860200, 0.1076095551, 0.0591948032, 0.1394732445, -0.0352909863, -0.1826095879, -0.0194359124, 0.0415504053, -0.0970295146, 0.0618929416, 0.0098325172, 0.0947317407, 0.0720069110, -0.1325743794, -0.1052475721, 0.1147386730, 0.0322230011, -0.1201563925, -0.0526340380, 0.0212594103, -0.1271309406, -0.0470984243, 0.0095924735, 0.0578480735, -0.0651693866, -0.0208282452, 0.0243525375, -0.0756077468, -0.0537284315, 0.0391072147, -0.1461295336, 0.1907241195, -0.1379578859, 0.1007213816, 0.0260062721, 0.0330120064, 0.0448910333, -0.0844951570, -0.0176108032, 0.1479003876, -0.0372078978, -0.0834933296, -0.0857815668, 0.1144966036, 0.0131410528, 0.0529864319, 0.0054050991, -0.0444044359, 0.1125776768, 0.0182581563, -0.0056299372, 0.2628083527, 0.0450613052, 0.0805113688, -0.1369037479, 0.0492832474, 0.0275252201, -0.0040585604, -0.2806779444, -0.2374871522, -0.0229554586, 0.0127175925, 0.0148065528, 0.0381886028, 0.0870720148, -0.0681147426, -0.1177956760, -0.0214729309, 0.0948827788, -0.0493158475, 0.0461230054, 0.1045891345, 0.0225724429, -0.0131851556, -0.1099260971, -0.1324739158, 0.0617841743, 0.0167968757, 0.0876883268, 0.0169284586, 0.0024634928, -0.0776321590, -0.1022599712, -0.0381426327, -0.0263028201, -0.1515062302, 0.0119682672, 0.0200765673, -0.0412229784, 0.0319376811, -0.0034261970, -0.0639849007, 0.0798493996, -0.0327015407, 0.0199012682, 0.0617075413, 0.2646809220, -0.0915676355, -0.0197342262, 0.0546508431, -0.0082209939, 0.1135641634, 0.0553834848, 0.0832433105, 0.0495356619, -0.0377931111, 0.0408498719, 0.1166729331, -0.1316673756, 0.0402780212, 0.0724718720, -0.0275160130, 0.0572076701, 0.0470322631, 0.0518318973, 0.1968809515, 0.0217932500, -0.2136058807, -0.1147535145, -0.0091266194, -0.0573118441, -0.0023657416, -0.0435210206, -0.0049445932, -0.2015848905, 0.0331285261, -0.0757672265, -0.0599844307, 0.0928630680, 0.0756068379, -0.2816062570, 0.0401640870, 0.0089638131, 0.1528476328, 0.1121249646, 0.1882318109, 0.0145718465, -0.2219486237, -0.2359070778, 0.0981728062, 0.0180195477, 0.1260064989, -0.1533357352, 0.0732473433, -0.0264720265, 0.0056251152, -0.0146695161, 0.0203573145, 0.1340625286, -0.0493258797, -0.0836709216, 0.0293490253, 0.0933447704, 0.1362402737, -0.1617678106, -0.0200727452, -0.0409641340, -0.1531591415, -0.2970547378, -0.1477558315, -0.0290054195, 0.1495421082, -0.0400265604, 0.1305976361, 0.1286081523, -0.0281590335, -0.0258283224, -0.1104259789, 0.0407874435, -0.0751811564, 0.1094621494, 0.0991136581, 0.2018574029, 0.0529286601, -0.1426686943, -0.1512145698, 0.0452516861, 0.0377522111, -0.1053189486, -0.0041802437, 0.0543334596, 0.0130760586, -0.1254470348, 0.0069918651, 0.0913665369, -0.1024484858, 0.1560330987, -0.0217375178, -0.0656060427, -0.0263731349, 0.1381406188, -0.0330631286, 0.0390089341, -0.0287246313, -0.0817742050, 0.0821271092, 0.1111563444, -0.1398635954, 0.0214085300, 0.0814048275, -0.0680214688, -0.0148098907, 0.0198941361, 0.2111588269, 0.0356563330, -0.0329061747, -0.1085510403, 0.0329388715, -0.0241843984, -0.0474523045, 0.1119911373, -0.0290225632, 0.0270051248, 0.0119065894, 0.1074622273, 0.0738156289, 0.1681281179, -0.0854100883, -0.0663757995, -0.0128135169, -0.0239673406, -0.1105170250, -0.1308816522, 0.0451561660, -0.0934562758, 0.1214646474, -0.1999698579, 0.0233853552, 0.0513290502, 0.1080807075, -0.1578049511, 0.0669653863, -0.0142769311, 0.1479322761, -0.0236948766, 0.0139041338, -0.0586297810, -0.1637835503, 0.0130588561, 0.0465673432, 0.0875933990, 0.0469285697, 0.0034815175, 0.0393846333, -0.0713358372, 0.0077828257, -0.0003288767, -0.0331432112, 0.1159960404, -0.0235960782, -0.0149117727, -0.0223190580, 0.0229820646, 0.0524400584, -0.0259481166, -0.1033059284, -0.0160028581, -0.1040150449, -0.0700220317, -0.1518410444, -0.0296097435, 0.0975119546, -0.0675249025, 0.0611152425, 0.1063088775, -0.1103119850, 0.0433584042, 0.0700523704, -0.0233403426, 0.0208099894, 0.0783698484, -0.0317641087, 0.2131075710, 0.0878526494, -0.0218759719, -0.1677361578, -0.0653332248, -0.0146047138, -0.0790292397, 0.0187820401, -0.1181256101, -0.0940708518, -0.2955082655, 0.0068804878, -0.0354318619, -0.1609597951, 0.0009474645, -0.1155061573, -0.0982759967, -0.1032589376, 0.0547037460, -0.0274717640, 0.0656937659, -0.1050911993, -0.0248062070, 0.0192359462, 0.0290405117, -0.1046928763, 0.1013739407, 0.0111720208, -0.1156029478, 0.1011770666, -0.0065269964, 0.0577839129, 0.0291613862, 0.1061877906, -0.0480784401, 0.1298841685, -0.1050298959, -0.0818481892, 0.0999912173, -0.0644040704, 0.0625754818, -0.0295644719, 0.0500851683, 0.0922848582, -0.0231872015, -0.0071520573, -0.1335231662, 0.0211235285, -0.2188776433, 0.0182662960, -0.0448480844, -0.0508840904, 0.0236123130, 0.0751413703, -0.3382806182, 0.0371911675, 0.2081448585, 0.0620882995, -0.2035128921, 0.0842289552, -0.0382014029, 0.0998106450, 0.1109780222, 0.0019773252, 0.0062514963, -0.0921180174, 0.0604733191, 0.0208063498, 0.0619651936, -0.0496942215, -0.0597079061, -0.0667685866, -0.0116353203, 0.1355112791, 0.0016752146, 0.0225936398, 0.0869898349, -0.0166262798, -0.0094870972, -0.0627282187, 0.0996028334, 0.0725652501, -0.1091148555, -0.0419179499, -0.0325972736, -0.1003633887, -0.1193373352, -0.1862740815, -0.1243401393, 0.0034578268, 0.0420784615, -0.0449688546, 0.0949729830, -0.1896845102, 0.0271616820, 0.0974875838, -0.0322766826, -0.0474563390, 0.0784115195, -0.1424889266, -0.0120924180, -0.0370017402, -0.0053075701, -0.2749793231, -0.0091606807, -0.0307830367, 0.0212162286, -0.1107513830, -0.1013559103, -0.1171934903, -0.2464515716, -0.0290653948, 0.1176953837, -0.1183314472, -0.0319168568, -0.0568132661, -0.0359330252, 0.2108685225, -0.0205421653, 0.0761993229, 0.1981401592, -0.0929699838, -0.0519150123, -0.1071288437, 0.1778489798, -0.1642854959, -0.0460515432, 0.0680227578, -0.2385368794, 0.1564616859, 0.0090496344, 0.0627740100, 0.1730080098, 0.1079504713, 0.0158539154, 0.1169136986, -0.1998765916, 0.0013980605, 0.0053049265, -0.1715282202, 0.0757418573, -0.0036151104, 0.0661891326, 0.0425820574, -0.1389160901, 0.1107277125, -0.0633889437, -0.0577257983, -0.2240946293, -0.0226909425, 0.1101565659, -0.0428147875, 0.0442588478, 0.0805936307, -0.3140301108, 0.0135785211, 0.0473007150, 0.0071618692, -0.2655054629, 0.0019651919, 0.0883880705, 0.1491529942, 0.0487304777, 0.0582299903, 0.0901440904, -0.1789046079, -0.0640843213, 0.0353196971, 0.0799416304, 0.0194210857, -0.0033492618, 0.0625467077, -0.0658006445, 0.1307784319, -0.0809577852, -0.0023844177, 0.0685412213, -0.0519018024, -0.0562869795, 0.0276071802, -0.0100509832, -0.0274973065, -0.0516047217, -0.1742558181, -0.0016348370, -0.0064954124, -0.2011859566, -0.1864530444, -0.0229311977, -0.0752520412, 0.0614375137, -0.0644674450, 0.1837979257, -0.1224329025, -0.0680894777, 0.0122371977, -0.0185740571, -0.1042992398, 0.0378599800, -0.0195981897, 0.0438088812, 0.0068743746, -0.0270120855, -0.1492956132, 0.0363445394, 0.0271733459, -0.1740884036, 0.0004795807, -0.2070689797, -0.0880979449, -0.1640345901, 0.0706106797, 0.0880058408, -0.0549107902, -0.0462993234, -0.1662776917, -0.0735668018, 0.0281330757, -0.0820227116, 0.0873513222, 0.0500040427, -0.1270598173, -0.0601235405, -0.0166397206, 0.2231237888, -0.0599121042, -0.0269803815, 0.0358037204, -0.3147553205, 0.1168171987, 0.0173086468, 0.0258498471, 0.1162744612, 0.0067345826, -0.0648660287, -0.0018313085, -0.1109174341, -0.0602427609, 0.0548593700, -0.1646799743, 0.1445141286, 0.0453101322, -0.0113154501, -0.2513729334, 0.0488941595, -0.0397875085, -0.1922813058, -0.0429274179, -0.2737741172, 0.1628273875, 0.0953728706, -0.0920666829, -0.0325522386, 0.0719924048, -0.1761529595, 0.0339556858, 0.0301014651, -0.0067096213, -0.3225144148, -0.1196067855, -0.0752570853, 0.0878749192, -0.1133974716, 0.0242271833, 0.1077906042, -0.1560731828, -0.0656483248, 0.0235083587, -0.0007726221, -0.0456855260, 0.1407463998, 0.0021952097, 0.0404639430, 0.1308856010, -0.0058587557, -0.0820989907, 0.0066835578, 0.0218691435, 0.0066901017, 0.0052014329, 0.0884747803, -0.0697659925, -0.1443702281, -0.1015247032, -0.0693752691, -0.0198739916, -0.2398195416, -0.0250362437, 0.0854387358, -0.0613327660, 0.1033448204, -0.2083291709, 0.1552532315, 0.1471852213, -0.0928927884, 0.0098682465, -0.0717266947, -0.1234602779, -0.0112598715, -0.2163514644, 0.0147321736, -0.0106320661, 0.0341711864, -0.1084908694, 0.0732952282, -0.0035093424, -0.1093054414, -0.1057162434, -0.2114240229, -0.1172041744, -0.1177127287, 0.1088972464, 0.1065289378, -0.1830537319, 0.1874630004, -0.1078163162, -0.2182155252, 0.0445179716, -0.0417222790, 0.0545042828, 0.1080915928, -0.0642263591, -0.0441512205, -0.1834022999, 0.1786751300, -0.0997408330, -0.0437940843, 0.0820907950, -0.1364848614, 0.1308102161, 0.0144313946, 0.0827044100, 0.1256791800, -0.0194803160, 0.0521452725, -0.1474586725, -0.0401866250, 0.0271791499, -0.0352224596, -0.0766472816, 0.0828222185, 0.0378898010, 0.1067415625, -0.2834401131, 0.0228193812, 0.0069354395, -0.2919870615, -0.0097276457, -0.1804306209, 0.0505801924, -0.0098154387, -0.0376902670, 0.0293486603, 0.0629947707, -0.1284655631, 0.0841117501, 0.1579088122, 0.0511630289, -0.3218419552, -0.1793775111, -0.0994208679, 0.1654156744, -0.0934254974, 0.0588646494, 0.0762383193, -0.2341863960, 0.0613766536, 0.0857861266, -0.0369331166, 0.0203589909, 0.0640873387, -0.0901400819, 0.0159496609, 0.0195132513, 0.0890708193, -0.0839582682, 0.0105918460, -0.0418173932, 0.1145106778, 0.0105083231, 0.0605458952, -0.0637234822, -0.0465303771, -0.0776988342, 0.0164958443, -0.0647561252, -0.2391214520, -0.0385765992, 0.0194933936, -0.1198666617, -0.0872495472, -0.1791224927, 0.1450140327, 0.0133157102, -0.0462759472, 0.0076920893, -0.1316632777, 0.0099996356, 0.0428110026, 0.0763749853, -0.0260274913, -0.1471064836, -0.0365145244, -0.0004829300, -0.0616173111, -0.0471862070, -0.1165633723, -0.0980165526, -0.3495825231, -0.1118032932, -0.0818551332, 0.2614959180, -0.1829191595, -0.1025622636, 0.0638949797, -0.0556362346, -0.0539206080, 0.1619333476, 0.0013546863, 0.1020462438, 0.2186081409, -0.1164316982, -0.0128024025, 0.0197899397, 0.2134135813, -0.0347586572, -0.0884455740, 0.0416805893, -0.2146188766, -0.0552380607, -0.1217625141, -0.0254854430, 0.0660033450, -0.1626793146, 0.1048583463, -0.1244123057, -0.1166334525, 0.0199343860, 0.0282098353, -0.1464757323, 0.2140341103, -0.0283419974, 0.0508725308, -0.1173499227, 0.0366057046, -0.0196961183, -0.2357333899, 0.0266039949, -0.2897596061, 0.0842448920, 0.0487914979, 0.0004937495, 0.0558035187, 0.0435196571, -0.1777506322, 0.1206727624, 0.0503707565, 0.0803481191, -0.1825011373, -0.0155692725, 0.0087782796, 0.0538286120, -0.1270111650, 0.0691924766, 0.0064619402, -0.2211487293, 0.1290975362, 0.0529976003, -0.0112859439, 0.1753572226, 0.1993041933, -0.0779896006, 0.0051524588, -0.0588373616, 0.0908904225, -0.1635210663, 0.0473065488, 0.0583230630, 0.1049513668, 0.0037094266, -0.0191455204, 0.0017298984, -0.1738195568, 0.0112010268, 0.0692669526, -0.0097242128, -0.1718770564, 0.0796222612, -0.0579129383, -0.2048991919, 0.0282221772, -0.0203125253, 0.0105000418, -0.0431726202, 0.0470318571, 0.0212333016, -0.0046508615, 0.1172966585, -0.0397000834, 0.0243069250, -0.0462402217, -0.1601331085, -0.0251000058, -0.1340700537, -0.0176246315, -0.0605480336, 0.0130207874, 0.0281491093, -0.2533302307, -0.1175337359, -0.0047736615, 0.0202530511, -0.1303668469, -0.1121782884, -0.0889623463, -0.1570323408, -0.0615864880, 0.1766805053, 0.0408178642, -0.1522006541, 0.2077070624, -0.1313595325, 0.0808691904, -0.1512907594, 0.1653544307, -0.0282247383, 0.0036017136, 0.0321484096, -0.1617917717, -0.0015560926, -0.2422765046, -0.0125319678, 0.1494185477, -0.0507132635, 0.0119943349, -0.0865274966, 0.0309858602, -0.1702914238, -0.0847271383, -0.1198205054, 0.1413267553, -0.0073393630, -0.1378415972, -0.1907836199, -0.1333943605, 0.0495908186, -0.1647578478, 0.1793418229, -0.0890180171, 0.1390603632, 0.0667259544, 0.2607594728, 0.1095921025, -0.0285578184, -0.2504907548, 0.0129668675, 0.0132538741, -0.0230730530, -0.2569534183, 0.0214965753, 0.1811331511, 0.0632011965, 0.0272911917, 0.0936757699, 0.2704536617, 0.0202334467, 0.0647188947, -0.0544538945, 0.0568611138, 0.0749872178, 0.2276578397, 0.0964247659, 0.1698239744, -0.1630561650, 0.0668950155, -0.0224843975, 0.0516953357, 0.1242642477, -0.0384651199, 0.0209587663, 0.0597594455, 0.0639736131, 0.0260939579, 0.0009416787, 0.0202263407, -0.0346203744, -0.0813776106, -0.0595263615, -0.0102964593, -0.2296624333, 0.1954831034, 0.1033368036, -0.0635223314, 0.1383766234, 0.0261038411, 0.1818184108, -0.0429483578, 0.1045159400, 0.0942533091, 0.0421514325, -0.0904564336, -0.0736281276, 0.0599533990, -0.1506259143, 0.0789118111, 0.0930142105, 0.1069575921, 0.1127316132, -0.1690704972, -0.0959804729, 0.0904147848, -0.1191898212, -0.0479533747, -0.0994840711, -0.0531272590, 0.0180008002, 0.0172656626, 0.0237466209, 0.0289882496, -0.1997950375, 0.2552222013, -0.0740620568, 0.2246652246, -0.0349583663, 0.0408602133, -0.0025635383, -0.2085698694, 0.0232422482, 0.0532389730, 0.0248535238, 0.0511048920, 0.0644441321, 0.1020780131, -0.1286256909, 0.0732677430, -0.0904620513, -0.0066247727, -0.1444636136, 0.0153187644, -0.0951549336, 0.0329715647, 0.1612054855, -0.1181399524, -0.0087801907, -0.0349195078, -0.0115929106, -0.1083964854, 0.2425251007, -0.1235328242, 0.2231980860, -0.0449009761, 0.2048371136, 0.0709866285, -0.0773707330, -0.0836467817, -0.0349591933, 0.0611515939, 0.1382141262, 0.0295101944, 0.1601066738, 0.1730502397, -0.0068719299, -0.0105141159, -0.0467102937, 0.1372821331, 0.0640806407, -0.0740149468, 0.1547577232, 0.0148711847, 0.0980422646, 0.0428981930, 0.0334742777, 0.0496962592, -0.0928024054, 0.0091586104, 0.0317489505, 0.1549431384, 0.0958806276, 0.0644069687, -0.0302598067, -0.0572668649, 0.0898298696, -0.0965563357, 0.0092783822, 0.0276787654, -0.0385062359, 0.1203208789, -0.0902560204, -0.0788614526, -0.0828157961, 0.0711534098, 0.0329419412, 0.0012610360, 0.1543979645, -0.1421497464, 0.0304944925, -0.0515875444, -0.0001794978, 0.0129836509, -0.0421032235, 0.0823375136, -0.0103542758, 0.2073354274, -0.1183753237, -0.0509372875, -0.0978962630, -0.0214787591, 0.1527946591, -0.1210808083, -0.0578735285, 0.0028250397, -0.0631084144, -0.1791626215, 0.0031240019, 0.0537602864, 0.0755374283, 0.0529901274, 0.0083039971, 0.1238005757, 0.0399879776, 0.0893395096, -0.0178443491, 0.0928684473, -0.0871725827, 0.1409905106, 0.0781430006, -0.0694946349, 0.0680678934, -0.0564603098, 0.0207330920, 0.0162392911, -0.0267077293, 0.1001625508, -0.1123600528, 0.1057301015, 0.0408874787, -0.1075739041, -0.0430766568, -0.0049469904, -0.0705123022, -0.1459316611, -0.0017771260, -0.0966091380, -0.0071146167, 0.0580543131, 0.0861442462, 0.0326018035, 0.0741878822, 0.0179664288, 0.1780695319, 0.0211602841, 0.0635538623, 0.0969406515, -0.0736665651, -0.1091597229, -0.0642573833, 0.0568274632, 0.0125969658, -0.0169715434, 0.1223299652, -0.0499710366, 0.0704686418, 0.0212915577, 0.0654615983, 0.0384302624, 0.0772755221, -0.0332345292, -0.0359198339, -0.1471755356, 0.0560146198, 0.0635676831, -0.0880554020, 0.0954788104, -0.0566399582, 0.0933607668, -0.0779127628, 0.0851344168, 0.1401035339, 0.0944128036, 0.0576692596, -0.0239007492, -0.0525443144, 0.0644659251, -0.0148640107, -0.0557980165, 0.0783677623, -0.0204042494, -0.0098020649, -0.0387409814, -0.0505146645, 0.1125946790, 0.0188773014, 0.1050862744, 0.1604698896, 0.0153980050, -0.0234319791, -0.0205902457, 0.1351274997, -0.0793724731, 0.0693415701, 0.0278688855, 0.1167076752, 0.0026876286, -0.0920197219, -0.0068505034, -0.0591254197, -0.0278365947, 0.1350217611, -0.0743374303, -0.0070427046, 0.0047815056, -0.0780299753, -0.0237405412, -0.0361421853, 0.0626673251, 0.0405021682, 0.0453088321, -0.0788354799, 0.1132737324, 0.0693993270, 0.1083600521, 0.0275431685, -0.0808914974, -0.0276011322, -0.0428715535, 0.1362458915, -0.0003315310, -0.0119653996, 0.0065285265, -0.0973770693, -0.0453858636, 0.0672147870, 0.0301863141, -0.0894158185, -0.0209952239, -0.0278556123, -0.0044819992, -0.0455392227, 0.0141429380, 0.0208002776, -0.0042244853, 0.0875197649, -0.0797618628, 0.0148864323, 0.0036286686, 0.0316676237, 0.0457799435, 0.1057298407, 0.0062581319, -0.0602385923, 0.0139020458, -0.0138648599, -0.0790356547, 0.0292370468, -0.0338942260, 0.0568895787, 0.0782374591, 0.0201889947, -0.0022728145, -0.0497223213, 0.0113638639, -0.0039772466, -0.0275211222, -0.0800658315, -0.0004134700, -0.0479140431, -0.0356829800, 0.0327219963, -0.0665022209, 0.0422580615, -0.0040138587, -0.0315202512, 0.0584630966, -0.0204873197, 0.0081004724, 0.0203375667, -0.0355426744, -0.0501739755, -0.0693174899, -0.0385385193, 0.0647938848, 0.0564031601, -0.0756404251, -0.0336218663, 0.0175723433, -0.0088479966, 0.0453812033, -0.0002337843, 0.0231144056, 0.0776237547, 0.0232815593, 0.0750733018, -0.0768444538, 0.0354297906, -0.0643788576, -0.0051907003, -0.0285126790, 0.0070646033, 0.0773945004, 0.0228394493, -0.0168059245, -0.0183926225, -0.0157945901, -0.0536541939, -0.0501370281, -0.0364917628, -0.0797982663, -0.0335676745, 0.0747412145, -0.0710256770, 0.0055856630, -0.0624907389, -0.0340923145, 0.0724029988, 0.0797817409, -0.0151492059, 0.0563895255, 0.0594361275, 0.0635502785, 0.0115077794, 0.0008400008, 0.0482736975, 0.0535628051, 0.0195069984, 0.0683529973, -0.0695393682, -0.0573497936, -0.0408384800, -0.0697120279, 0.0168305561, 0.0656388253, 0.0189205036, -0.0093667433, -0.0235946514, -0.0400600024, 0.0138818100, -0.0058522895, -0.0301289968, 0.0703969449, -0.0677165613, 0.0013855994, -0.0345963724, -0.0387453698, -0.0514013767, -0.0689872280, 0.0448141098, -0.0764655992, -0.0405410379, -0.0136057064, -0.0583287552, -0.0018578679, 0.0237231646, -0.0730984733, -0.0493264198, -0.0006760565, -0.1057650223, 0.0670876727, 0.0351791978, 0.0473038256, 0.0752645731, -0.1108403802, -0.0035308606, 0.0551500022, -0.0864383802, 0.0487583913, -0.0234665498, -0.0527043417, 0.0865518376, 0.1080828086, -0.0552572943, -0.0364493802, -0.1077224910, 0.1174561679, 0.0816969275, -0.0592435524, 0.0766203403, 0.0843360871, -0.0549910329, -0.0004416339, 0.0733829290, -0.0385742038, 0.1373766214, 0.0668467581, -0.0237965770, -0.0076299696, -0.0558317713, 0.0142644048, 0.0542758256, 0.0959247798, 0.0809186250, -0.0074997884, -0.0986349359, -0.0079925135, -0.0613623932, -0.0112659158, 0.0641022623, -0.0539453849, -0.1200640351, -0.0198926758, -0.0415278971, 0.0365990028, 0.0727119595, -0.1112901643, 0.0017374721, -0.0673593283, -0.0319163017, -0.0530406311, -0.0554821417, -0.1013954505, 0.0090152649, -0.0732133090, -0.0313253999, -0.0523997582, -0.0169945247, -0.0054851770, 0.0148894191, 0.0812863559, 0.0122630103, 0.0068458328, 0.0439262092, 0.0760389864, 0.0253987927, 0.0183419269, -0.0399004705, 0.0694969371, -0.0562923476, 0.0419732071, 0.0534174554, 0.0776501596, 0.0021652649, -0.0015964521, 0.0902373642, -0.0913942307, -0.0653488114, -0.0613079220, -0.0592905357, -0.0403252542, 0.0050774734, -0.0499689095, 0.0086843809, 0.0476826802, -0.0025982428, 0.0413697511, 0.0471696258, 0.0403098166, 0.0736993775, 0.0303655863, 0.1085727364, 0.0244866628, -0.0368682072, 0.0827379823, -0.0480335914, 0.0156371742, -0.0139465239, -0.1175713018, 0.0127762929, -0.1304463148, -0.0939119905, 0.0292764083, -0.0007313294, 0.0435782708, 0.0224984679, 0.0609615147, 0.1437965333, 0.0197202619, 0.0687420964, -0.0678120255, -0.0799341723, -0.0751724541, 0.1349685341, -0.0103346920, -0.1506568789, 0.1427956074, 0.0095682172, -0.1085401624, -0.0450695381, 0.1029664278, 0.0392623506, 0.0768705830, 0.0622793585, -0.0945308954, -0.0942048058, -0.0929536745, 0.0415721945, -0.0639861003, -0.0502312332, 0.0538606942, 0.0732882321, -0.1429646313, 0.0879648775, 0.0719043612, 0.0176043920, 0.0768243149, 0.0183866192, 0.2340730131, -0.0732111260, -0.0043726666, -0.0932910740, 0.0580287166, 0.0556342266, -0.0720130503, 0.0784446672, 0.0397546813, 0.1612153649, -0.0735845789, 0.0163136031, 0.0920551270, 0.0955137983, -0.0626511648, 0.0264236294, 0.0730681568, -0.0125864409, 0.0355134867, 0.0058289552, -0.0291511193, 0.0316020474, 0.0182968304, 0.1721714884, -0.1555081457, -0.0090509020, -0.1492503881, 0.1381646097, 0.0969341546, 0.0494678766, -0.0126747349, 0.0951332226, -0.0254141167, -0.0574089810, 0.0224960446, -0.0611672513, 0.0088747423, -0.0452326201, -0.0469922535, 0.0030501736, -0.0147580197, -0.0141454386, 0.0079596778, -0.1058543101, 0.0417029895, 0.2089866251, -0.0507446080, 0.1616651416, -0.0004578410, 0.0479575843, -0.0038870391, 0.1277829409, 0.1177206784, 0.0070552942, 0.1646855026, 0.0081884526, -0.1380702108, -0.0597890727, 0.0640568510, 0.0268416163, -0.1048987359, -0.1197718903, -0.0780954957, -0.1282035261, -0.0803463310, 0.0309735611, 0.0640963167, -0.1645503342, 0.0496595353, 0.0429983474, -0.1282635629, -0.1165244430, -0.1809806079, -0.1269581914, 0.0445282683, 0.1249833256, -0.0989025757, -0.1267704070, 0.0181051549, -0.0793417245, -0.0350585319, 0.0709198341, -0.0956908539, -0.0623309240, 0.0040255184, 0.0035169276, 0.0548884161, -0.0280473251, -0.0414293110, 0.1138928235, -0.1296163350, 0.1025792882, 0.0534270108, 0.1354824007, -0.1670049578, -0.0600676425, -0.0736679211, -0.0821264312, -0.0235405993, -0.1036829948, 0.2156576663, -0.0871232301, 0.0683540180, -0.2301846743, 0.0496600196, -0.0294352286, 0.0703376755, 0.1292478889, 0.0316725746, 0.0845649987, 0.0360442586, 0.0085006077, 0.0173455812, -0.2235732228, 0.2607771158, 0.3048110604, 0.1019721553, -0.0087722298, 0.0001908493, 0.2440955937, 0.0379251912, 0.1391910315, 0.0612580664, 0.0229224712, 0.0186337475, -0.1169801131, -0.1200284213, -0.0172846671, 0.0644569248, 0.0160974190, -0.0571118183, 0.1232832000, 0.0748319998, 0.0542191193, 0.0094286967, -0.0126363160, 0.1373959333, -0.0295264106, -0.1224452108, 0.0122594908, -0.0949710160, 0.1557615548, 0.0424273126, -0.1831712127, 0.0234627482, 0.1241274625, 0.0550049059, -0.0642567500, 0.0140282642, -0.1462922841, 0.1139424220, 0.0628527999, 0.1330867112, 0.0276078321, 0.0852417946, -0.0669932440, -0.1248129755, 0.0984482095, 0.1238806397, 0.0896274894, -0.1229714006, -0.1272643059, -0.0469092764, -0.0335826240, -0.0015473838, 0.0953916833, -0.0834937394, -0.1632305682, 0.1659911573, -0.0609004647, -0.0760690421, -0.0945338979, 0.0227213092, 0.1396052539, 0.0094521130, 0.0684090704, -0.0116382297, -0.0482239388, 0.0628910363, -0.0094909193, 0.0603379682, -0.0017165510, -0.1097300723, -0.0700613335, 0.0500331819, 0.1030127630, 0.1128142774, 0.0274242703, -0.0151113244, 0.1545707434, -0.0083747394, 0.1709249765, 0.0429504327, 0.2060054988, -0.1012490094, -0.2202508003, 0.0489645265, 0.0521701872, 0.1293788105, -0.2628223002, 0.1680510640, -0.0986358672, -0.0485827699, -0.0834940225, -0.0079889316, -0.0546646491, 0.1572071016, 0.2701230049, -0.0064518079, 0.0458907858, -0.0149456533, 0.0204805769, 0.0122792264, -0.1381939203, 0.0644093379, 0.1664027721, 0.0336780995, -0.2296566665, -0.0848162547, 0.0388307981, -0.1580668688, -0.1747032255, 0.0208073910, 0.0952622965, 0.0317696631, -0.0506195799, 0.1543089151, 0.0750956088, -0.1343317628, 0.0038278482, -0.0951789916, 0.0745953768, -0.0221946202, -0.0244377442, 0.0591092445, 0.0245076437, 0.1486541629, -0.0283059124, -0.1246393025, 0.1204801053, 0.0960965678, 0.0417876355, -0.1234311387, -0.0553158633, -0.0508843176, 0.0988844633, 0.0523776449, -0.0343323573, -0.0863528699, 0.1176728830, 0.1806913018, -0.1151383966, 0.2501626015, 0.0542396978, 0.1218067035, -0.1041943580, 0.0504085459, -0.1061837822, -0.0261567179, 0.1939862221, -0.0007903452, -0.1750479341, 0.0995077416, 0.0108536333, -0.0721258000, -0.0777769610, -0.2196880430, -0.2172024846, 0.2272288352, -0.0900797769, -0.1175627336, -0.0750012174, 0.0329466946, 0.0392532051, 0.1584676355, 0.1385316402, 0.0235255286, -0.2143722177, 0.0304037053, -0.0612482429, -0.0568401478, -0.0832970440, -0.0375184603, -0.2288209796, 0.2173557729, 0.1957231313, 0.1203179955, -0.0243987348, -0.0482316352, 0.0718128160, 0.0223837383, 0.2326404154, 0.0964369550, 0.1656921655, -0.0800894275, -0.1158207208, 0.0350521281, -0.0948287174, -0.2694070339, -0.3863736391, 0.1637226641, -0.1359585822, 0.0632618517, -0.1040020362, -0.1458824873, -0.1544185579, -0.0501673929, 0.1708905399, 0.0539139956, 0.1156035364, 0.0164097250, 0.0779327154, 0.0630300865, -0.2954598367, 0.2650853693, 0.1090421751, 0.1117947623, -0.0477260277, -0.2709172964, -0.0982808098, -0.1073293686, -0.1881867498, -0.0481462218, -0.0515195392, 0.0277129337, -0.0822641104, -0.0284418147, 0.0069474517, -0.0434580594, 0.0615107045, -0.2006900162, 0.0548822172, 0.0772970170, -0.0282738358, 0.0712579712, -0.0347674787, -0.0271270368, -0.1650257260, -0.0722879097, -0.0670362115, 0.0254469477, -0.1616088599, -0.0664202571, -0.0147943757, 0.0789407939, 0.1261663735, 0.0387652703, 0.0609923601, 0.0940286294, -0.0002235336, 0.1080900282, -0.0010504989, 0.0906030461, -0.0916384086, 0.0508909076, -0.1998074800, -0.2125049829, -0.1419059336, -0.0457670763, 0.0702986568, -0.0111376764, -0.3176782727, -0.0601332970, 0.0604121648, -0.0088310018, -0.0807779208, -0.1447612196, -0.1221534461, 0.0476946309, -0.0059072003, 0.0337924175, -0.0478725322, 0.1219779179, -0.0606906600, 0.1225781590, -0.0979098603, 0.0365809575, -0.1279757321, -0.0885879993, 0.0580265820, -0.0818125755, -0.0473251417, -0.0196314361, -0.3459237516, 0.0231561884, 0.1357052326, 0.0185172353, 0.1007393748, -0.0207871180, 0.1456383318, -0.0467352718, 0.0628496855, -0.0077260346, 0.0183166880, -0.0630749315, -0.0768413395, -0.0483659133, 0.0933324546, -0.3407692909, -0.4031835496, 0.1228383556, -0.0779585838, 0.0280355010, -0.0296773128, -0.0059271292, 0.0461648814, -0.1092554703, 0.1959882975, 0.0317832977, 0.2066440731, 0.0442482419, -0.0321441293, 0.0745695606, -0.3381775618, 0.1715550721, 0.0655250475, 0.0239792876, -0.0230174232, -0.1323979944, -0.0342311226, 0.0843570381, -0.0109784137, 0.0748892128, -0.0173059218, -0.0339905843, -0.0506545901, -0.1239347979, -0.1159932166, -0.1547694653, -0.0556466840, -0.0878024399, 0.0845744759, 0.0241031498, -0.0336403102, -0.0138613256, 0.1842141598, -0.0145209385, -0.1656183004, -0.1094535291, 0.0333265997, -0.0210186411, -0.1365543902, 0.0837762132, 0.0660769045, -0.0910467878, 0.1864178032, 0.1082323268, -0.0331171192, -0.0661591217, 0.0929298177, -0.0461887754, -0.1103615239, 0.0652111322, -0.0592404716, 0.0564221665, -0.1823281497, -0.0946840793, -0.0353528187, -0.0092252512, -0.0255098678, -0.0413345434, -0.1628705114, 0.0583237447, -0.0299748499, -0.0297548771, -0.0926972702, -0.0760924369, 0.0039149304, 0.1573755592, -0.1627556533, 0.0640875325, 0.0055415807, 0.1322947592, -0.1426918954, 0.0662765428, -0.0026775757, 0.1018661708, -0.1068385988, -0.0462243482, 0.0875811055, 0.0681265518, 0.1335634589, -0.0260386355, -0.2706535757, 0.0667584687, 0.0999073237, 0.0124390926, 0.0705532581, -0.0379643627, 0.0021915971, -0.0308790971, -0.0146453781, 0.0975560546, 0.0258148797, -0.0154325115, 0.1539612412, -0.0042427643, 0.2207474411, -0.1313547194, -0.3479848802, 0.0152434809, -0.1082520485, -0.0176738687, 0.0740359053, 0.1266356409, 0.1113766804, -0.1411799937, 0.1031825691, -0.0379942469, 0.1940638721, -0.0880552530, -0.0318174511, -0.0133523736, -0.3000532389, 0.0796492025, 0.1443291903, -0.0840302557, 0.0477841385, -0.1652221531, -0.0998952836, -0.0930690914, -0.0334261917, 0.1020887643, -0.2603189945, 0.0462163687, -0.0412890613, 0.0022094336, 0.0244207885, -0.0973439887, -0.0188781694, -0.0525696501, -0.0001446277, 0.0913937837, -0.0433816388, 0.0346744880, 0.1826449782, -0.0817960352, -0.0168131944, -0.2008635402, -0.0590574630, -0.0168772321, 0.0059482856, 0.0357655548, 0.0982056335, 0.0567669272, 0.0157381166, 0.1969712079, -0.1719941199, -0.0023951703, -0.1111885384, -0.1405542195, -0.0827426091, 0.0748238415, -0.0443336703, -0.0058947187, -0.1488659382, -0.0267957002, 0.0831414461, -0.1262294948, 0.0509670377, 0.0508232340, -0.2011744082, 0.0075240084, 0.0370204151, -0.1507853419, -0.0368758254, -0.0300421752, 0.0491680354, 0.0217389148, -0.2160768211, -0.0114732133, 0.0481605902, 0.0542944111, -0.1308646202, 0.0106913112, -0.0290265512, 0.1489531696, -0.0728845373, -0.0970182270, 0.0699516535, -0.0370956771, 0.1972275674, -0.0362244546, -0.1645024717, -0.0255629644, 0.1687446088, 0.0457398258, -0.0326533727, -0.0300477464, -0.0214444976, -0.0491925590, -0.0398046114, 0.0094705010, 0.0345236436, -0.0117553966, 0.0722882226, -0.0921851918, 0.1469483823, -0.1011106372, -0.0726272687, 0.0054339892, -0.1809550673, 0.1590917557, 0.0955125019, -0.0030583474, 0.1094204411, -0.2291326076, 0.0404319800, 0.0380128920, 0.2267158329, 0.0040798150, 0.0048344177, 0.0766915157, -0.0824963301, -0.0481586754, 0.1591271013, 0.0935291499, -0.0493720137, -0.1139545217, -0.0460658036, 0.0462121032, -0.1512913406, 0.1395314932, -0.3390413821, 0.0554804876, 0.0390134268, -0.0868639573, 0.0104341879, -0.0280480087, -0.0146512147, 0.1142606065, 0.0314277224, -0.0158137046, 0.0564899743, 0.0956311896, 0.1835185736, -0.1453208029, -0.0918540806, -0.2307163626, -0.1129848659, 0.0226142984, -0.0529976338, -0.0071831360, -0.0262789577, -0.1058418974, 0.0218643174, 0.1142298803, -0.3009310067, -0.0125126624, -0.1549846232, -0.0405485593, -0.1559306383, 0.1011633128, 0.0008400855, -0.0332840979, 0.0697157755, 0.0391794480, 0.0338076726, 0.0622705221, 0.0006844923, -0.0745284036, -0.0901423469, 0.0267647970, -0.0332898423, -0.1152841225, 0.0649674907, 0.0395057984, -0.0506346487, -0.0453932323, -0.3165133893, 0.0015385825, 0.0725422725, -0.0090911156, 0.0085172700, 0.1212037578, 0.0347025618, 0.0000769918, -0.0144934682, 0.0095946211, 0.0630361661, -0.1166773513, 0.3085036874, -0.0839738250, -0.2624230087, -0.2277861387, 0.2203555554, -0.1471399069, 0.0813634247, -0.1381053776, -0.0095170820, -0.0920097306, -0.1028766856, -0.0282665808, -0.1136638001, -0.1265434772, -0.0542677753, -0.1633245349, 0.0103020333, -0.1068248600, 0.0390305184, 0.0022892924, -0.1585929543, 0.1382802278, 0.1136311740, -0.0078953961, 0.1300214082, -0.0151940696, -0.0267827082, -0.0160534140, 0.0984931439, -0.0834692493, 0.0217139423, 0.1438024789, -0.0165761411, 0.0674014911, 0.1904973984, 0.0330204219, 0.1300862879, -0.0102096852, 0.1711571962, 0.0695672259, 0.0284669213, 0.1462046057, -0.4015319347, 0.1233064979, 0.0917044133, 0.0447415002, -0.0956709087, -0.1970352232, 0.0138583556, 0.0223310143, -0.0290501118, 0.0250742231, 0.0550193936, 0.1472149342, 0.1055654511, -0.1154471338, -0.0886463448, -0.1604034603, -0.3406191468, -0.0141054234, -0.2315479219, -0.0992001370, 0.1061204672, -0.2087477446, 0.0513376109, 0.0068635470, -0.2158943415, -0.0287476126, -0.0644463077, -0.0181101803, -0.0710982680, 0.0657639503, 0.1026163846, -0.1500595957, 0.1169269234, 0.0605433136, -0.1252967417, 0.0029605385, 0.0857120082, -0.0573559776, -0.2909591794, -0.1758783907, -0.0628448725, 0.0073955562, -0.0275341757, 0.0128060663, -0.0828598738, -0.0995227620, -0.1457299292, 0.0942752361, -0.0504259765, 0.0335444771, -0.1143177226, 0.1213608012, -0.1676756293, 0.0401464999, 0.0158753153, 0.0416536629, -0.1003494337, -0.1175077111, 0.0751160681, -0.0583294518, -0.1103506461, -0.2514419258, 0.0005349314, -0.1237705201, 0.1091284975, -0.0358063392, -0.0512724407, -0.2003218383, -0.1870685220, 0.0202287491, 0.0396492928, -0.0110268611, -0.0688375831, -0.0107281301, 0.0577113219, -0.1275494099, 0.1065487787, 0.0551005565, 0.0018062367, 0.0351702012, -0.0887159333, -0.1210440248, 0.1950022578, 0.0382168889, -0.0272017624, -0.0037069730, 0.0452325530, 0.0573584065, -0.0729248226, 0.0740755126, -0.0626836568, 0.0732202455, 0.1611387730, -0.1130698398, 0.1635150313, 0.0022174176, 0.1246734038, 0.0726715401, 0.0244479999, -0.0345191956, -0.0946173966, 0.0540314838, 0.0961794108, -0.1314585358, 0.0918502212, -0.0954144374, -0.0731860027, 0.1377950460, 0.0224793553, -0.0332288444, -0.0062942943, 0.1682487279, 0.1383801848, -0.1463864446, -0.0724867210, 0.0300572664, -0.4120825231, 0.1121806353, -0.3592670560, 0.0589153767, 0.1165143475, -0.0311731324, 0.1324199885, -0.1491717994, -0.1119001284, 0.0372451209, -0.1172936708, 0.0721662641, -0.0183016863, 0.0452326685, 0.0742922276, -0.2153827250, 0.0740203857, -0.0635869056, -0.0518717282, 0.0046621952, 0.0523385108, -0.1260150075, -0.1086032316, -0.0775561556, 0.0757675543, 0.0969545469, -0.0070854384, 0.0847438052, 0.0287855342, -0.0091295941, -0.1571292132, 0.0331023894, 0.0543704554, 0.0114136143, -0.0728271455, 0.1489761472, -0.1305145770, 0.1226192638, 0.0241492968, 0.0215817653, -0.1644470394, -0.0404736549, -0.0652114600, -0.0359436683, -0.0131666316, -0.2962267995, -0.0633565709, 0.0649631321, 0.1416042894, -0.0444845669, 0.1001747921, -0.0898113698, -0.2104863375, -0.0800736621, 0.1377442032, 0.0394562595, 0.0221872553, -0.2162253559, 0.0230999086, -0.0670547113, 0.1191309616, 0.1005375087, -0.0176835973, 0.0502802730, -0.0421814658, -0.0009987364, 0.1195884645, -0.0069657927, 0.0493359976, 0.0270390995, -0.0297300089, 0.0354864299, 0.0495255776, 0.0441420861, 0.0936895683, 0.0516335517, 0.1625672281, 0.0114878360, -0.0521199033, 0.1056967825, 0.1574838310, 0.0301537700, -0.0150292041, 0.0360483266, -0.0641581863, 0.0026500949, 0.0065049534, -0.0790773258, 0.2038067728, 0.1089116409, -0.1830617636, 0.1097314954, 0.1325544715, -0.0312020667, -0.1264040172, 0.1110946611, 0.0918756500, -0.1684432477, -0.0076002008, 0.0285133682, -0.2403529286, 0.1010381505, -0.2848119736, 0.2533369362, 0.0931157544, 0.0068124314, 0.0938968211, -0.1542258561, 0.0709079579, 0.1865136176, -0.0094638886, -0.0252222512, -0.0839317366, 0.0658245832, 0.0336116068, -0.0629148409, 0.0592653789, -0.1267128140, -0.0441438779, 0.0791909769, 0.0941827074, -0.0904023424, 0.0663531795, -0.1140747815, 0.0116334911, 0.1751156896, -0.0962098688, 0.1872034669, 0.0621155277, -0.1455491483, -0.0841317400, 0.0572732128, -0.0098366188, 0.1329778284, -0.0182888154, 0.1700198352, -0.0537203439, -0.0539675318, 0.0412404165, 0.1080935597, -0.1037421525, 0.0443320312, 0.0391132794, 0.0279137827, 0.0302328430, -0.1083098426, -0.1534478068, -0.0112238787, 0.1427046061, -0.0903186873, 0.0060000364, 0.0018444576, -0.2262153774, -0.2451108545, 0.0925912708, 0.0841746107, 0.0831615925, -0.2236026824, -0.0682967678, -0.1591517776, 0.0769444108, 0.0576637462, -0.0938558355, -0.0855403244, -0.1293766350, -0.0138656516, 0.0337826945, -0.0281513836, 0.0025138429, 0.0242223646, 0.0078606494, 0.0513924733, 0.0459034219, 0.0245274827, 0.0376171619, 0.0842130110, 0.0376426950, 0.1202389449, -0.1131094322, 0.0520055443, 0.1041298658, -0.0004622727, -0.0211087689, 0.0308028702, 0.1004267037, -0.0524143726, 0.0453232862, -0.1692697853, 0.1461540610, 0.1003506631, -0.0644372851, 0.1053744853, 0.1315575689, -0.0448912829, -0.1512210071, 0.1319320351, 0.1230127886, -0.1736621410, -0.0304787271, -0.0295468997, -0.2608654201, 0.0451471955, -0.2697490454, 0.2716908157, 0.0337738991, 0.0732510909, 0.1399967074, -0.0753423348, 0.0647134185, -0.0053508431, -0.1610006988, 0.0298547391, -0.0307480134, 0.1062872484, 0.0755576044, -0.0888570398, 0.0301254708, -0.0874824524, 0.0636080131, 0.0039417627, 0.1030635610, -0.1568455547, 0.0588971563, -0.1785968393, 0.0683219284, 0.1036980450, -0.1500577331, 0.0759793743, 0.0373194925, -0.0266272239, 0.0059020831, 0.1537801325, 0.1315093338, 0.0556630194, -0.0923094824, 0.1385542154, -0.0522248223, -0.0545408018, 0.0212954693, 0.0436983593, -0.1398010850, -0.0309396926, 0.0465734862, -0.0065798573, 0.0879361033, -0.0690697953, -0.1994308233, 0.0745571926, 0.0656201318, -0.1461731493, -0.0169684310, 0.0794806257, -0.1626089364, -0.3335387707, -0.0496460162, 0.1847092211, 0.1219480485, -0.0116729690, -0.0463011190, -0.1184573025, 0.0705456361, -0.0490487330, -0.1957816631, -0.1281289160, -0.1034979224, 0.0213743988, 0.1718480289, -0.0115337502, 0.0916404203, -0.0183951128, -0.0615211166, -0.0194489546, 0.0853019431, 0.0602201968, -0.0113708675, -0.0627475679, 0.0544233657, -0.0126743680, -0.1860562712, 0.0345364511, 0.1930949390, 0.1425254941, 0.0365916789, 0.0782020986, 0.1291049570, -0.1091407761, 0.1061584502, -0.1412159801, 0.1342187077, 0.0280176885, -0.0423361436, -0.0648641810, 0.0495672449, 0.0299655199, -0.0830764398, 0.0301310141, 0.0787619501, -0.1737850010, 0.0962748304, -0.0110578621, -0.2066504359, 0.1437992007, -0.1605991572, 0.1901810318, 0.0376015902, 0.0529978611, 0.2055839896, -0.0909282789, -0.0016533262, -0.0071535436, -0.1824271232, -0.0084642051, 0.0519895405, 0.1802217364, 0.1220142543, 0.0383764543, 0.0161096230, -0.0664239526, 0.0362034105, -0.2493377030, 0.0122975558, -0.0626416430, -0.0747429132, -0.2141733021, -0.0523869880, 0.0186296199, -0.1309196949, 0.1453092396, 0.0867164135, -0.0993324667, 0.1136199459, 0.1046504527, 0.1154413670, 0.0468521751, -0.0228029285, -0.0254686140, 0.0135117276, -0.2003316283, 0.1265761256, -0.0452667437, -0.0796775073, -0.1024262011, -0.0305989943, -0.0784469247, 0.0582994930, 0.0339987166, -0.3162689507, 0.0811710879, 0.0767895058, -0.0514813401, 0.0027721333, 0.1674086303, -0.0454268605, -0.2649254203, -0.1185844839, 0.2171605825, 0.0463499352, 0.0225906260, -0.0939569920, -0.1399478614, -0.0556829758, -0.1608870476, -0.0576415025, 0.0433826633, -0.1243348718, 0.0443608537, 0.1526752710, 0.0150810611, 0.0913761705, -0.0791085362, 0.0315492041, -0.0723896101, 0.0946592763, 0.0977849886, 0.0588569418, -0.0188823752, 0.0725153536, -0.1116275042, -0.0724628568, 0.0513235591, 0.1038354114, 0.0803994834, 0.0551788844, 0.0250833891, 0.0659979507, 0.0024744442, 0.0345331989, -0.0671361759, 0.1999300569, -0.0966931954, -0.0321427695, 0.0737883598, 0.1276063919, 0.0051494366, -0.0455976017, -0.0115735391, 0.0373633914, -0.2382852137, 0.0224229377, -0.0759840086, -0.0259039067, 0.1238426343, 0.0169421975, 0.0874340460, 0.0412647724, -0.0279068127, 0.0831524059, -0.0115155550, 0.1384230405, -0.1729754359, -0.1386606097, -0.0471225195, 0.0211696513, 0.2233027965, 0.0824530646, -0.0481965542, 0.1344314069, -0.1810204685, 0.0810451433, -0.3629733920, 0.0657642558, 0.0467355847, 0.0002079954, -0.1603090465, -0.0830852315, 0.0635152161, -0.0049499241, 0.0038454358, 0.0545557924, 0.0869094729, 0.0010012750, 0.1611377448, -0.0771463960, 0.0074498612, 0.0449359193, 0.0866659954, 0.0475155190, -0.2366697490, 0.2048130482, -0.0082643526, -0.0610570274, -0.0425925739, 0.0111012664, -0.0740753338, 0.1013373435, -0.1119239554, -0.2583329976, -0.0491933636, 0.1119120196, -0.1946108043, -0.0322295167, 0.0866962671, -0.0348357148, -0.3047840297, -0.1416584402, 0.1130342707, 0.0950614884, -0.0610212125, 0.0833073780, 0.0691793412, -0.1202213764, -0.1927543581, -0.0662326813, 0.0404843688, -0.0625238344, -0.0561343133, 0.2286728621, 0.0955174416, -0.0649067536, 0.0077239531, 0.1259281784, 0.0153983096, 0.0180112533, -0.0674531609, -0.0238347221, 0.0149264093, -0.1478769779, -0.2230368406, -0.0350436158, 0.1975889802, 0.0755415186, 0.0840028152, 0.1212030873, 0.0751636475, -0.0483077541, -0.0903607085, 0.0372591317, 0.0924939513, 0.0377774313, -0.1440715343, -0.0950419530, 0.1942739338, 0.0060871760, -0.0155386087, 0.1248616874, 0.0165985487, 0.0471179262, -0.1567099392, 0.0156422090, 0.0677201524, -0.0318897963, 0.0723899901, 0.0765002966, -0.0142386444, 0.0441972017, 0.0396361686, 0.0052421885, -0.0918968916, -0.0908499807, -0.0817692131, -0.1416818947, 0.0024537614, -0.0786650479, 0.2229195535, 0.0282377359, -0.0122382957, 0.0563619062, -0.1049645171, 0.1313841641, -0.3567271531, 0.0550934114, -0.0215645730, -0.0887554139, -0.1204235032, 0.0514715277, -0.1144047379, -0.0408460759, -0.0062131444, 0.0858352929, -0.0118214563, 0.0283025596, 0.0658756122, -0.3264197707, -0.0343789756, 0.0556696467, 0.1190027818, 0.0925347582, -0.2363276184, 0.1598469168, -0.0663057417, -0.1427879035, -0.0439123288, -0.1407658160, 0.0976526216, 0.0051319776, -0.0287163816, 0.0408028401, 0.1295302510, 0.1201305911, -0.0790177509, -0.0361522175, -0.0943147689, -0.1081558466, -0.3504630625, -0.0632516146, 0.1116564348, 0.1797698587, -0.1213906109, 0.0193833094, -0.1096502095, -0.1212729216, -0.2104238570, -0.0181991030, 0.0576074347, -0.1207201406, -0.0007069444, 0.1642349213, 0.1394165456, -0.0484392010, -0.0113940677, 0.1047493592, 0.0549642295, 0.0486358888, 0.0637695715, 0.1088603660, 0.1520571858, -0.1224471033, -0.0736373886, -0.0495211817, 0.0574724823, 0.0102470107, 0.0130668953, 0.1459213048, 0.0258163903, 0.0189446360, 0.0283800419, 0.0033588379, 0.0044893529, 0.0294774268, -0.0976427644, -0.0532241352, 0.2175044119, 0.0005184324, 0.0817323774, 0.0308898836, 0.0519085079, 0.0289517529, -0.0417639241, 0.0075882408, -0.0197251160, 0.0521395355, 0.0083411401, 0.1128415242, -0.1353860199, -0.0037107789, -0.0051761069, 0.0728496760, -0.0055972701, -0.0415965207, -0.1748897284, -0.0399375446, -0.0185518395, -0.1833041608, 0.2613282204, -0.0238585584, -0.0730375051, -0.0195115674, -0.0310645327, 0.0903630778, -0.2400184274, 0.0471831188, 0.0717032105, -0.0782638937, -0.0811115578, -0.0386573449, -0.1563140899, -0.0034459811, 0.0875984579, 0.0651708469, -0.0222913697, -0.0312964320, 0.0282186083, -0.1696211845, -0.0854474008, 0.0709636658, 0.0119461920, 0.0809033439, -0.0823863596, 0.2066638917, 0.0558389127, -0.1390271038, -0.0807447806, -0.0855826363, 0.0916199535, -0.0074839448, 0.0299245454, 0.0496087596, 0.1586279273, 0.1090704203, -0.1333896667, -0.0479262955, -0.0383822024, -0.1541570872, -0.1463053077, -0.0675268769, 0.0075386763, 0.1148354709, -0.1831516922, -0.0954254046, -0.0685024932, -0.0610407293, -0.1674371660, 0.0295058433, 0.1848552525, -0.0417785756, -0.0156473350, 0.0980603918, 0.1596763283, -0.1037156209, -0.0112819653, 0.0285508148, -0.0686106086, 0.1372478753, 0.1059086323, 0.1826815307, 0.1550892442, -0.0319519304, 0.0175680984, -0.0375484265, 0.0042209122, 0.0537263379, 0.0082108174, -0.0094118789, 0.0559431463, -0.0626592562, 0.0538284928, -0.0182731263, -0.1363490969, -0.0147364195, -0.2195801884, 0.1262942553, 0.1739602834, -0.0786646083, -0.0441944525, -0.0508867688, -0.0199883319, 0.0342501327, 0.0493767224, 0.0280027781, 0.0240603127, 0.0466168411, -0.0261472706, 0.0160288662, -0.1184828356, -0.0911613405, -0.0491561703, 0.0547135957, -0.0081636487, -0.0717436746, -0.0773237944, 0.0571372099, -0.0157409646, -0.1621223241, 0.1824845374, 0.0985531658, 0.0961041525, 0.0781956315, -0.0831201300, -0.0157573242, -0.1961096823, 0.0555410124, 0.0519671589, -0.0086945556, -0.0044115037, 0.0346981771, -0.4305616021, 0.0011572524, 0.1166056618, 0.1265122443, 0.0619090460, 0.0243228413, 0.0111477384, -0.2375115156, -0.0446330495, 0.0272303373, 0.0664585903, 0.0334327556, -0.1083256453, 0.0513012223, 0.0397467688, 0.0741457492, -0.0161183216, -0.0473933704, 0.0140435798, 0.1106242985, -0.0691449493, 0.0323831588, 0.0345795117, 0.0294042230, -0.1199863330, -0.1183440387, -0.0526130162, -0.1634201556, -0.1073222086, -0.1252407283, 0.0284857843, 0.0015592807, -0.1198133528, 0.0182151124, -0.0610448234, -0.0905032456, -0.0994041562, 0.0064000427, 0.1109299734, -0.0180492643, -0.0064647105, 0.0086408090, 0.2665899098, -0.0115556326, -0.0393048860, -0.0676745772, -0.0547968186, 0.0198529977, -0.0286189876, 0.1146597564, 0.1039876491, -0.0751620755, -0.0276047122, 0.1144317165, -0.0116508901, -0.1499832273, 0.0361504108, 0.0016148580, -0.1422662735, -0.0400248691, 0.0713220835, -0.0205396693, -0.0107696168, -0.1369576156, -0.0628293380, 0.0720110014, 0.2228647918, -0.0311839525, -0.0104953833, 0.0027613554, -0.0972090438, 0.0440088846, 0.1920318305, 0.0939133689, -0.0162526369, 0.1330541223, -0.0337652266, 0.0279358849, -0.0698016286, 0.0000589654, 0.1244849265, 0.0177085139, -0.0058076950, -0.0503127612, -0.1409587264, -0.0109364996, -0.0550090410, -0.0883565694, -0.0133603849, -0.0770119429, 0.0329766273, 0.0631945729, -0.0703057498, 0.0737002268, -0.0019612410, 0.0395847969, -0.1915836334, -0.0306907631, 0.0565066896, -0.0915692151, -0.3083884418, 0.0286411475, 0.1166139320, 0.0567825846, -0.0623235554, 0.0757431537, 0.0016382390, -0.0643224567, 0.0528054610, 0.1249051467, -0.0309379753, -0.0916945115, 0.0087261721, -0.0111077419, 0.0025875645, 0.0615322553, -0.0065781903, 0.0137009537, 0.0854895040, -0.0101961261, 0.0253693331, -0.0458785668, -0.0182975456, 0.0963046029, -0.1694230735, -0.0455484428, -0.1768955141, -0.0292145777, -0.0398288965, -0.0989290848, -0.0420368500, -0.0639425218, -0.0085235303, -0.0736449584, -0.0482315160, -0.0887420848, 0.0001290829, 0.0090078460, -0.0378049947, -0.0499530025, 0.0388675593, -0.1080065072, 0.1856150031, 0.0620445795, 0.0920154527, -0.1507131010, 0.0156170549, -0.0829452202, 0.0466559678, 0.0980262980, 0.0780952647, -0.0627316460, -0.1362622827, 0.0018939708, 0.1062528268, -0.1911795735, 0.0274645500, 0.0786140189, -0.1857811064, 0.1207331866, 0.1161464378, 0.0543775596, -0.1193627939, -0.1199946031, 0.0158189647, 0.0350087732, 0.1817970723, -0.0685185790, 0.0654863790, 0.1514986008, -0.2082624137, -0.0093214400, 0.1973777115, 0.0036702466, -0.1017761603, 0.0400074571, -0.0526643023, -0.0005653476, -0.0990870520, -0.0299886651, -0.0132461516, -0.1640758812, 0.0611636937, 0.0222542416, -0.0106417909, -0.1160128787, -0.0024150643, -0.1226779968, -0.2447071820, 0.0190789104, -0.1233597919, 0.1280375719, 0.0810593590, 0.0587015636, -0.0441317260, 0.0834270716, -0.2305433452, 0.0074643046, 0.0308552813, -0.0547117889, -0.3863561153, -0.1335993558, 0.1234181598, 0.1260011643, -0.1283641756, 0.0851490498, -0.1018802524, -0.0462609492, 0.0193818770, -0.0127263460, 0.0164242908, 0.0798764825, -0.0667614043, 0.0126349768, 0.1574886888, 0.0819688514, -0.0817556903, 0.0199889373, -0.0714352950, 0.1438495368, 0.0027053126, -0.0855859816, 0.1827949136, 0.0149641111, -0.1635738313, -0.1882544458, -0.0012694397, -0.0738951266, -0.0648897588, -0.1247115582, 0.0090619316, 0.0030997896, 0.0493477471, 0.0317321606, -0.0766963512, -0.1279944032, 0.0137200356, -0.0177743919, 0.0345667675, 0.0245849472, 0.0062118722, -0.0810045153, -0.0164774191, -0.0689420104, 0.0469062701, -0.1458148062, -0.0112600522, 0.0936532319, 0.0885796994, 0.0168039463, 0.0947750658, 0.0365518816, 0.0441782624, -0.0413260870, -0.0114766667, -0.0423663929, -0.0395013280, -0.1814327836, -0.0930110142, 0.1455102265, -0.0315645635, 0.0863421783, -0.0347233377, -0.1788567901, 0.0160586182, -0.1460815966, 0.1442477852, 0.0203846972, -0.0446162187, 0.1061955467, -0.0591599680, -0.0013200672, 0.1726136208, 0.0187615473, -0.0653448552, 0.1385308802, 0.0010496973, 0.0197804477, -0.1548388600, -0.0719624609, 0.1597189605, -0.1782481074, 0.0957625508, 0.0640261099, -0.0482370593, -0.1399266124, -0.0958276540, -0.0097471876, -0.2466204017, 0.1261451542, -0.1359844804, -0.0013496160, 0.1726274937, -0.1228119582, -0.0030883248, 0.0896254852, -0.1507353634, 0.1238731891, 0.1224375889, -0.0938435718, -0.4440764189, -0.1421085149, 0.1037658751, 0.1003555804, -0.0056347284, -0.0419039913, -0.1140520722, -0.1766933352, -0.0255290549, -0.0220114645, -0.0400448181, 0.0645708814, -0.0191708300, -0.0992406383, 0.0081314519, 0.2012729645, -0.0915362835, 0.0763722733, -0.0747632757, 0.1509254277, 0.0565648787, -0.0190085657, 0.0912458822, -0.0440316424, -0.0601297915, -0.1328211427, -0.1357242465, -0.1529383659, -0.0191556048, -0.1507946849, 0.1130263731, -0.0422672741, 0.2128039151, -0.2413936853, -0.1105417311, -0.1010163426, 0.0268328749, -0.0388605073, -0.0656140223, -0.0798564255, 0.0858841240, -0.0926458314, -0.0305366442, 0.0735474378, 0.0424765907, 0.0167471617, 0.0703777596, 0.1182267591, -0.0008308497, -0.0154455062, 0.0690793842, 0.0514296331, 0.1338757575, 0.0414705090, 0.0355172865, -0.0317205191, 0.0811981708, -0.2484306544, -0.0767207965, 0.0229738709, 0.0253456198, 0.0576243103, -0.0528660938, -0.1041077077, 0.0212960951, -0.0126298508, 0.0399054848, 0.0240103099, -0.0991289020, 0.0379701518, -0.2832657099, 0.0125208367, 0.1752452254, -0.0152568640, -0.0529451184, 0.1437405944, 0.0235818569, -0.0826424137, -0.1881241202, -0.0511602983, 0.1337786019, -0.1418584883, -0.0144871147, -0.0122018000, -0.1346194148, -0.2255643010, 0.0020181660, 0.0221383385, -0.0665702224, 0.0258098152, -0.0314627066, 0.0059614754, 0.2046832889, -0.0589789525, -0.0738788769, 0.0157788135, -0.2333071530, 0.0461538024, -0.0195475109, -0.0196435582, -0.2615508139, -0.2139676064, -0.0142317228, 0.1380962431, -0.0079008359, 0.0239937529, -0.0262068007, -0.0919857994, 0.0853799656, -0.0202974416, -0.0112842368, -0.0395653620, 0.1052392945, -0.0199614335, 0.1651694328, -0.0062704887, 0.0014617086, 0.0793668255, -0.0036748578, 0.0663729385, 0.0661146939, -0.1052672118, 0.0068152593, -0.0652075931, -0.1427712888, -0.1177298576, 0.0067463722, 0.0064290096, -0.0638942569, 0.0227216762, -0.0797058642, -0.0215467308, 0.2333071828, -0.2057168186, -0.0664621890, 0.0519317165, -0.1248280555, -0.0176103059, -0.0437641181, -0.0073710089, -0.0151963420, -0.0437570475, -0.2125947922, -0.0613527484, 0.0216127876, -0.0462954193, -0.0569866486, 0.0692161098, 0.0435839556, -0.0609896965, 0.0715331212, 0.0432358719, -0.1826011389, 0.1113870591, 0.0713078231, -0.1085420772, 0.1082126275, -0.0517810173, -0.2190171629, 0.0392379276, 0.0467887372, 0.0982181206, -0.1280437857, 0.0095239468, 0.1492569149, -0.0441700965, -0.0215731729, -0.0184917971, -0.0538030304, 0.1984814852, -0.2677684128, 0.0829485878, -0.0103086391, -0.0334970541, 0.0681028739, 0.0210842434, 0.0490034036, -0.0984204710, -0.1156189516, 0.0923031494, 0.0609590262, -0.1843689084, 0.0003803422, 0.1504516453, 0.0376840904, -0.2386956811, -0.0747515187, 0.0134359077, -0.2216856778, 0.0672980323, -0.1675504446, 0.0056966860, 0.1135977581, -0.0445411578, -0.1905920655, 0.1477093697, -0.2444181889, 0.0888795853, 0.0957352221, 0.0404070951, -0.1638260186, -0.1691914350, -0.1294876784, -0.0338807404, 0.0072338274, -0.1034287214, -0.0189772900, 0.0540602915, 0.1310773790, 0.1355312318, 0.0289281160, -0.0175011996, 0.1526040733, 0.0242279917, 0.0722763240, 0.0467016026, 0.0279731806, 0.0621762052, -0.0435387008, 0.1077994332, 0.0093644299, 0.0659666210, 0.0159298684, 0.0430240966, -0.1654784083, -0.0666483194, -0.1412150413, 0.1595118344, -0.1778842062, 0.0404018238, -0.0651663542, -0.0654559359, 0.0714648291, -0.1405498087, 0.0275078863, 0.0311650895, 0.0376424193, 0.1324939430, -0.1430522203, 0.1010221839, 0.0677646175, -0.0001649624, -0.1904944777, -0.1495003551, -0.0455857627, -0.0188511182, 0.0284017622, -0.0274331979, 0.1178484261, -0.0438531004, -0.0257268809, 0.0119990911, 0.0154079627, 0.1736078262, -0.1323855072, -0.2531052530, 0.0634710938, -0.2240637690, -0.0609653406, 0.1375265270, -0.1122874022, 0.1130256429, 0.1142960340, 0.0200134441, 0.1467547715, -0.0739835873, -0.0083802482, 0.0611983947, 0.0860392675, 0.1330131590, -0.2729290426, 0.0660440549, -0.0946911946, -0.1225641146, 0.0983298123, 0.0552555174, 0.0199634694, -0.0690292716, -0.1879503727, -0.1135831624, 0.0153710982, -0.1202940717, 0.0385143198, -0.0493497476, -0.0064914208, -0.1797273159, 0.0126994485, 0.0215538219, -0.1119105667, -0.0416111909, -0.1863850355, 0.0184103437, 0.0953412503, 0.0729384795, -0.0296057127, 0.0278216228, -0.3261155188, 0.0708447769, 0.0294388235, 0.1682741493, 0.1769286394, -0.0330535099, -0.1597108692, 0.2049636990, -0.0713493973, 0.0448134094, 0.1463193744, -0.0606775247, 0.1401723772, 0.1909697950, -0.0127881719, 0.1204169914, 0.1577392817, -0.2092434913, 0.2657924294, -0.0814137012, 0.0109365247, -0.0569223948, 0.0754486024, 0.1299390495, 0.1441816241, 0.0142678265, -0.0268225595, 0.0332872346, -0.1784119904, -0.2184967548, 0.0575952791, 0.1086521447, -0.0681907088, 0.0923242494, -0.0196545832, -0.2132491171, 0.0977355763, 0.1067079455, -0.1040727794, 0.0572799258, -0.0135190627, 0.0820066109, -0.2048776597, 0.0406983569, -0.1455990821, -0.0861746967, -0.0958794132, -0.0231405981, -0.0199558102, -0.1221697181, -0.0093597481, -0.1607223302, 0.1482054144, -0.0029241205, -0.0635169148, -0.0678411499, 0.0245524254, 0.0742781535, -0.1053005978, -0.1573139429, 0.0115616713, -0.1914148182, -0.0472555012, 0.2127760053, 0.0053418898, -0.0396121889, 0.2466935366, -0.1498068124, 0.1221761927, -0.0646034926, 0.1976720989, -0.0594338179, 0.0309162885, 0.0313997641, -0.1737892330, -0.0354464054, -0.0596309900, -0.0422819816, 0.0265465714, -0.0112474393, 0.0770757273, -0.0559504405, -0.0710010231, -0.1951351911, -0.1863882989, -0.2447778732, -0.0742573664, 0.1038764566, -0.0980773196, -0.0686069652, -0.2684087455, -0.1024097279, -0.1676417589, -0.0206470992, -0.2136880308, 0.0199165195, -0.0654323474, 0.0988216028, -0.0037252121, -0.1141642332, -0.1546101719, 0.1432510763, 0.0808595046, 0.1747373194, -0.1775521487, -0.0215348266, 0.1058206707, 0.2624747753, -0.0618131533, 0.0460775606, 0.0904604495, -0.0482286140, 0.1893475056, 0.2156939507, 0.0507968403, 0.0572653748, 0.2333111763, -0.0137047358, 0.2199261338, -0.0952911675, 0.0933527052, 0.0386668146, 0.0946059749, 0.2175817937, 0.1322571486, 0.0369776860, 0.0800381154, -0.0073237657, -0.0822809786, -0.1228823885, -0.0180320237, 0.0124540227, 0.0497738570, -0.0652044863, 0.0837406814, -0.1596746594, 0.2623527646, 0.0453938618, -0.1278754771, 0.2208572477, -0.0389562435, 0.1766674519, 0.0118728364, -0.0618616790, 0.0894808546, -0.1839627326, -0.0436162502, -0.0509937666, 0.1173985004, -0.2843597233, 0.0129821794, 0.0204368383, 0.1399884820, 0.0608196259, -0.1769948155, -0.0020951612, 0.0655494407, -0.0380942002, -0.0315208323, -0.0916161165, -0.2384145707, 0.0012717154, 0.0129767554, 0.1301712543, -0.0151857659, -0.2650743723, 0.3413277864, -0.1221279725, 0.1661236882, -0.0280877277, -0.0043326057, -0.0183979459, -0.0914342105, 0.0314804129, -0.1269990057, 0.0446224622, -0.0656483322, 0.0721220821, 0.1287660897, -0.0833894238, 0.0555542745, -0.0507546104, 0.0404690653, -0.3038608730, -0.1311719567, -0.1643213332, -0.0511938557, -0.0553057492, -0.0069017084, -0.0276234932, -0.1446488351, -0.0530435182, -0.1393460035, 0.1115068495, -0.0711596310, 0.2369910181, 0.0530098975, -0.0395671353, 0.0904244035, -0.0723700896, -0.1926560104, 0.0946751907, -0.1213942841, 0.0923297033, -0.0671174899, -0.0004312629, 0.1317122877, 0.0650651976, -0.0512916967, -0.1154193580, 0.1464881003, -0.0351325870, 0.0845562369, 0.1784318388, 0.0173169617, 0.0632999539, 0.2139056474, -0.0430601537, 0.1883804798, -0.0755801797, 0.0979261696, -0.0427411981, -0.0599628836, 0.1456691772, -0.0316106528, 0.0327445827, 0.0399987102, 0.0844493434, -0.0942316055, 0.0173851606, -0.0324380845, 0.0454743840, 0.1189280674, -0.0491798185, 0.0462749824, -0.0591314994, 0.0078398725, -0.0572227351, -0.2010286301, 0.0150530366, -0.3003276289, 0.1563481838, -0.0776000172, -0.0026530679, -0.0421613269, -0.0275471695, -0.0422495902, -0.0560547896, 0.0575643182, 0.0490573272, 0.0763332695, 0.0055689388, 0.0977604762, -0.0283432249, -0.2266494036, -0.0694679394, -0.0362096280, 0.1325585097, -0.1713036597, -0.0366095752, -0.1247727349, 0.0227420647, -0.0051910882, 0.2034841925, -0.0046559628, -0.0233977623, 0.1254338026, -0.0660165921, 0.1092956513, -0.0103722829, 0.0097286999, 0.1673634797, -0.1013031900, 0.1410251111, 0.0752754211, -0.0559097156, 0.0165184122, 0.1340436488, 0.0129129430, 0.1020053849, 0.0406589434, 0.0800360590, 0.0114620887, -0.1021327749, -0.1872073412, -0.0865885764, 0.0687900782, 0.0126529383, -0.0469331667, -0.0611517802, 0.0969981104, 0.0697519779, 0.0242513996, 0.0663961917, -0.0763056874, 0.1996048838, -0.0753353313, 0.0425043702, 0.0436684862, 0.0273703039, -0.1016807631, 0.1489320397, 0.0574257337, 0.0921220034, 0.0177982114, -0.0562944636, 0.0261242241, 0.0517373569, 0.0198348500, 0.0035751872, 0.1352037787, -0.1115112305, 0.0539276525, 0.1376923770, 0.0195977185, -0.0474204756, 0.0622533634, 0.1781954020, 0.0165598635, -0.0698890835, 0.1557847708, 0.0332587548, 0.0266906060, 0.0889630094, 0.0725868195, -0.0052986159, 0.0199527089, 0.0507317558, 0.1254917979, -0.0617895573, 0.0601071678, -0.0565465577, 0.0239606183, 0.0515231900, -0.1314980537, -0.0956616104, 0.0405400656, 0.0337260887, 0.1042250097, 0.0724660158, -0.0904393867, -0.0515674278, -0.0252695065, 0.1195655093, -0.1560323387, -0.0663687885, 0.1092585549, -0.0408873037, 0.0923918486, -0.0688708276, 0.0548039228, -0.0865050256, 0.0429327972, 0.1247107461, -0.1487895399, 0.0435180068, -0.0676094219, 0.1310549229, -0.1290338337, 0.0585991293, -0.0732888505, 0.1065129116, 0.0405714065, -0.1168920249, 0.0632537603, 0.0778228864, 0.2363989800, -0.0398252383, 0.1416242421, -0.0099660531, -0.0405328572, 0.0321875438, 0.1294310689, 0.0841267183, -0.0664058775, -0.0792568550, 0.0410082266, -0.1037096158, 0.0801637322, -0.0698815212, 0.0662660897, -0.0143496692, -0.0195034258, -0.0374838002, -0.0728098601, -0.0752415583, 0.1620669961, -0.0820790008, -0.1583216637, -0.0385724306, 0.0287506729, 0.0702179968, 0.0847874880, 0.1143384203, 0.0234268345, 0.0194070823, -0.0643607900, 0.0628560483, -0.0439816378, 0.0460171625, 0.0729325116, 0.0128900781, -0.0283862837, -0.0463970006, 0.0608713180, 0.0343973227, 0.0011005396, 0.0155857336, 0.0046404642, -0.0338234939, -0.0555716753, -0.0185089186, 0.0542303175, -0.0089613497, 0.0452764928, -0.0107407384, 0.0659707189, -0.0013417155, 0.0652150065, 0.0751520991, 0.0578375459, 0.0145192770, 0.0037076175, -0.0427142642, 0.0082263201, -0.0520845093, 0.0650846586, -0.0385815129, -0.0002240335, 0.0196250044, -0.0698300302, 0.0242513120, 0.0085173165, -0.0238864925, 0.0328179896, 0.0604984462, -0.0212300494, -0.0524094887, 0.0134422183, -0.0192981660, -0.0640587732, -0.0593747124, 0.0389410071, -0.0621919036, -0.0024366900, -0.0358044654, 0.0470884591, 0.0462421142, -0.0207830276, 0.0066572279, -0.0436843187, -0.0043567559, 0.0588061698, 0.0056329924, -0.0331757553, 0.0207238644, -0.0596368648, 0.0321323685, 0.0637479722, -0.0081358608, -0.0362547413, 0.0039705858, 0.0182370525, -0.0058867782, 0.0259174779, -0.0091845999, 0.0071213692, -0.0037476295, -0.0313826203, 0.0420653708, -0.0779029727, -0.0531321578, 0.0001843050, -0.0144898482, 0.0105096344, -0.0781125948, 0.0293342546, 0.0398639888, -0.0048917681, -0.0241900869, -0.0160690043, 0.0628367364, -0.0431712456, 0.0102527216, -0.0295453295, -0.0806381777, 0.0675885156, -0.0437418297, -0.0124366889, 0.0542801321, -0.0747481138, 0.0619632155, -0.0070709330, 0.0535811521, 0.0365685523, -0.0505410321, -0.0363452211, -0.0026118874, 0.1048271433, -0.0029555005, -0.0416557752, -0.0067785834, -0.0526351146, 0.2410264909, -0.0279095471, -0.0313950703, -0.1058125645, 0.0692233071, 0.0746021345, -0.0480316728, 0.0663236529, 0.0344117470, -0.0243393797, 0.0561130755, 0.1469597816, 0.1111623347, -0.0212625656, -0.0840742141, 0.1650753170, 0.0873751119, -0.1354508400, 0.1458680332, 0.1181951761, -0.2435850352, -0.2482775897, 0.0021208450, -0.0572640225, 0.1187388152, 0.0793032572, -0.1843024045, -0.0652393252, -0.0404552780, 0.0757135600, 0.1544918120, 0.1269803494, 0.0088473205, -0.0996832848, -0.0364440382, -0.0379814841, -0.0419487655, -0.0340656005, -0.0378763638, 0.0692927167, -0.1488070339, 0.0176563747, 0.0871078819, 0.2334655076, 0.2592458725, -0.0437872075, -0.1480196416, 0.0481584668, -0.1950633675, 0.0001848660, -0.0741368085, 0.0495431423, 0.1757197827, 0.1258047074, 0.1638067663, -0.1222936586, 0.0113625545, 0.0627245605, 0.1690385789, -0.0695666671, 0.0323161334, 0.1173838302, -0.0464517474, 0.0772057101, -0.1849874854, 0.1366806328, -0.1652541608, -0.0696053058, 0.0338218324, -0.0619838163, 0.0470077805, 0.0163175929, 0.1845938712, 0.1672331989, 0.1113892645, -0.0008737584, -0.2087826431, -0.0123049729, 0.0190867707, -0.0171366129, 0.0977881104, -0.0107986247, 0.0795248970, 0.1325764954, -0.1530186683, -0.0205131769, 0.0293720420, 0.0853079259, -0.1052476391, 0.0743851513, 0.1168223768, 0.0713638365, -0.1279044598, 0.1748544276, -0.0646918267, -0.0194461979, 0.0096395332, -0.0909187421, -0.1928865612, -0.1103868708, -0.0871209726, 0.0111339763, 0.0842007101, 0.0478720441, 0.0505544282, -0.0073204325, 0.0810879394, -0.0828917697, 0.0265062712, -0.0279540308, -0.1479358822, 0.0173346493, 0.1208103821, 0.0530043468, -0.0366481915, 0.0964961722, -0.1751821637, -0.0800618380, 0.0605811365, -0.0360685848, 0.0504600480, -0.0056497231, -0.0651332140, -0.0250792895, -0.2266594619, -0.1333967447, 0.0314471722, -0.0781400353, 0.0757952929, -0.0201730449, -0.0331198312, -0.0494436957, 0.1299578547, 0.0336938687, -0.0278282557, 0.0659603029, -0.0041709808, 0.3052054942, -0.1277897060, 0.0441176482, -0.0530336127, -0.0886717737, 0.1706640422, -0.0575511083, 0.0320067331, -0.0225906111, 0.0121700568, -0.0903783813, 0.1324801296, 0.1950885206, 0.0318919383, -0.0154325049, 0.2249390334, 0.2328089327, -0.0572712459, 0.1059550196, 0.1533867568, 0.0417644978, 0.0540166907, -0.0122710764, 0.1709067971, -0.1777345240, -0.0476224720, -0.0727149621, 0.0373778380, -0.0842908770, 0.1053193733, -0.0398550294, 0.2141350359, 0.1137518957, -0.1464217305, 0.0965164378, 0.0477875136, -0.1235050485, 0.1154825836, -0.0084516639, -0.0433476456, 0.0711302161, 0.0240998864, 0.0676538274, -0.0548292957, -0.0804150552, 0.1729150116, 0.0381988548, 0.1780677736, -0.0451335944, -0.0198007952, 0.0525529534, 0.0865289643, 0.0699644759, 0.1469877213, 0.1823139787, 0.0153695596, 0.0945832878, 0.0351634063, -0.0845851451, -0.0265431646, -0.1448093206, -0.1002984792, -0.0400752202, -0.1185742393, -0.0157227386, 0.1173488349, 0.1425434649, -0.0656892359, 0.0719518960, 0.0740016252, -0.0731579140, 0.0277932342, -0.1389989853, -0.0091188988, 0.1156472042, 0.2078695744, -0.0852702931, -0.1151969805, -0.0759859383, -0.2082286626, -0.0531784780, 0.2748751044, -0.1463912725, -0.0959074944, 0.0241750404, 0.0810479522, -0.1036859080, -0.1306645572, -0.0501043834, 0.0065403134, -0.1071056128, 0.0109849423, -0.0028953596, 0.1224059537, -0.0550840832, -0.0533316694, -0.0159847736, -0.1370635927, -0.1296968460, -0.1752422899, 0.2196640074, -0.2005809844, 0.0461250395, -0.1072995216, 0.0376465060, 0.0697938278, -0.0073285610, 0.2362901717, 0.0715416297, 0.2464185357, -0.0438724943, 0.1722732633, 0.0647435486, -0.1819585860, 0.2650762498, 0.3686719239, 0.1317735910, -0.0874133781, -0.0198392775, 0.2798950374, 0.0041644676, -0.0162324533, 0.0406602062, -0.0480920225, -0.0258014537, -0.0169547517, -0.1169186607, 0.0866411701, -0.1838172227, 0.1937634349, -0.1993717104, 0.1898319721, 0.1222149432, 0.0017363159, -0.0188770294, -0.0424720086, 0.0387075171, 0.0063847736, -0.0676813945, 0.0416819267, -0.1462362707, 0.1083166525, -0.0600266978, -0.0992748216, -0.0087422673, 0.0022042848, 0.0809385702, -0.1023717523, 0.0799413174, -0.1487794518, 0.2809149027, -0.1637047529, 0.1268931031, -0.0807616040, 0.1255475879, -0.1584867537, 0.0138486270, 0.1425556242, 0.0459159203, 0.0337569304, -0.1786634475, -0.3303773999, -0.0122144129, 0.0050580124, 0.0339897349, 0.0401301533, -0.0753924921, -0.0440621264, 0.1149863824, -0.0854693726, 0.0246604588, -0.0615894459, -0.1107268855, 0.0804520100, 0.0166846029, -0.0040426091, -0.0463854037, -0.0056711552, 0.0105632534, 0.1196569875, 0.0945525244, 0.1050739288, -0.0234951507, -0.2667822838, -0.0088048065, 0.0864254385, -0.0192502383, -0.0465646610, -0.0940958709, 0.0806860924, -0.0698416680, 0.0966327637, 0.2155663371, 0.0594316535, -0.1727449149, -0.0697647929, -0.0676784888, 0.0753439292, 0.0107699661, -0.2438221723, 0.1680163741, -0.2739841342, -0.1208455488, 0.0840760097, 0.0363400057, 0.0029969569, 0.0708378181, 0.1341128200, -0.0140366973, 0.0711647719, -0.0169633403, -0.0838148147, 0.0361929946, -0.0398110785, -0.1064939797, 0.2469903976, 0.1858687401, -0.1420642734, -0.0250218734, 0.0858046263, -0.0421562940, -0.0976292938, -0.0330553949, 0.1495888382, -0.1747583896, -0.0461588204, 0.0233045034, -0.0301024709, -0.1767863333, 0.1383970827, -0.3082780838, 0.0108481413, 0.0072663371, -0.1040989906, 0.0932194516, 0.2772161067, -0.0242647789, -0.0235597435, -0.3189438283, 0.0991852880, 0.0038853111, 0.0098627908, 0.0185862705, 0.0859058276, -0.0803997442, 0.0976952016, 0.1492016017, -0.0681798831, -0.1229999661, 0.0590724237, 0.1327126920, -0.1333958358, 0.0822988525, 0.1310190111, 0.0458263643, -0.1462190747, 0.0304704346, -0.0708406568, -0.0174814668, -0.0268178880, -0.1050803438, -0.0823631212, -0.0627110153, 0.1437492669, 0.0475135446, -0.0000259876, -0.1306477785, -0.1573688239, 0.1458824575, 0.0105818659, 0.1112847701, 0.0045660762, 0.0592168234, 0.1107975170, -0.0557811856, -0.0471252277, 0.1060307473, -0.2521829605, 0.1990102082, 0.2397268862, 0.0249415766, 0.0830489919, -0.1963666826, -0.2573525906, -0.0726094022, 0.1727986783, -0.0531652644, 0.0280470271, 0.0543291047, -0.0830077380, -0.1169436276, 0.2562156916, 0.0876686350, 0.0366191082, -0.0750553161, -0.0704239830, -0.0564365350, 0.0648617670, -0.2571091950, -0.2385436743, -0.0027798379, -0.2128982842, 0.1075310335, 0.0202776603, -0.0768478140, -0.0477713719, 0.1073565260, 0.1310059279, -0.0979862437, -0.0538156480, 0.0199612211, 0.0025883403, -0.1608434021, -0.2365401834, -0.0203656349, 0.1422423720, 0.0782659054, 0.0852368698, -0.0754305646, -0.0796597973, 0.0910443589, -0.1084985286, -0.0618905611, 0.1702750176, -0.1377155930, -0.1227190644, -0.0050814482, -0.2223642468, 0.0090601686, 0.0116233816, -0.0389736742, 0.1694376916, -0.0622870214, -0.0628332868, 0.0867790580, 0.0873613134, -0.0911192819, -0.1116204932, -0.1811615378, 0.1359756887, 0.0893901065, -0.0719060525, 0.0357733294, 0.0196202137, -0.1588498354, -0.0100432755, 0.1622780561, -0.0999491587, -0.1020987704, -0.0906444937, 0.0851897672, -0.1253188848, -0.0211121012, 0.0620884709, 0.0003612512, -0.0243075099, -0.0024417348, 0.0080851177, 0.0477518849, 0.0449525006, -0.0211861264, -0.2400389463, -0.0954580903, -0.0446674079, 0.0180931780, -0.0254290290, 0.0331413709, -0.0086528398, 0.2077679485, 0.0094571942, -0.0385331362, -0.0868623406, 0.0962967202, -0.0650410131, 0.0445448495, -0.0034074874, -0.0411387607, -0.2201192230, 0.0538499542, 0.0893112049, -0.0822216272, 0.0906171352, -0.1370578110, -0.2847124934, -0.0775362551, 0.0200818833, 0.0016667440, 0.0523396134, -0.0006369361, 0.0300056171, -0.0752785727, -0.0595041513, 0.2021241039, 0.0423092209, -0.0184577145, 0.1646921188, -0.0432943478, 0.1418856382, -0.2998406887, -0.2409204543, 0.1354966015, -0.2513838112, 0.0822379291, -0.0514448807, -0.0271227825, -0.0194238722, -0.0935062841, 0.1696511805, -0.0986778662, 0.0327082835, -0.0371067040, -0.0367417745, -0.1408848017, -0.3107146323, 0.0069141411, 0.1719921529, 0.0036634328, -0.0302976500, -0.1604246944, 0.0637812614, 0.0982357338, -0.1208661199, 0.0880674422, -0.1455950588, -0.1359153539, -0.0002205406, -0.1419640929, -0.0032109392, -0.0125529310, 0.0838226750, 0.0060505979, 0.2030759752, 0.0204141848, -0.0126335267, 0.0319420025, 0.1240083352, -0.0619348139, -0.0808159187, -0.1687510610, 0.0463693663, 0.1008465067, -0.1351688504, 0.0954762250, -0.0099223182, -0.1415988654, 0.0754712299, 0.1166848093, -0.1052740589, -0.0311887171, -0.0270610023, 0.0052840160, -0.0403183550, 0.0590210333, 0.0717651471, 0.0758696720, -0.0746542215, -0.0299118310, 0.0189568270, 0.0329560861, -0.0501505956, 0.0187421422, -0.0765864775, -0.0096142292, -0.0190726686, -0.0047538718, 0.0526586622, -0.0832677037, 0.0120788077, 0.1256735772, -0.1686224341, 0.0001312660, -0.0184192508, 0.0439509489, 0.0043691881, 0.0258138981, 0.0347828157, 0.0360835381, -0.1003809497, -0.0467556715, 0.0100365002, -0.0952354670, 0.0493013039, -0.0675026029, -0.2686851621, -0.0569118336, 0.0157064144, 0.0112136770, -0.0509309508, -0.0706954077, 0.0024803178, -0.0896378681, 0.1159193292, 0.0494069271, 0.0904072896, -0.0743751973, 0.0185345523, -0.1237861514, 0.0190890208, -0.1378359050, -0.2490865290, 0.1533500999, -0.0203966442, -0.1237069890, -0.0741049349, -0.0129713649, 0.0660210252, -0.0307582598, 0.1245008633, -0.0179091934, 0.0311806221, 0.0637362376, -0.1173018739, -0.1275405288, -0.2572935522, -0.0456609093, 0.1680072248, 0.0573646016, 0.0546243638, -0.0537824519, 0.0943930969, 0.0694206506, -0.0411623046, 0.0371176675, -0.3135802150, -0.0495067537, -0.0530959778, 0.0081098024, -0.1183236539, 0.0530147478, -0.0705359355, 0.1752765775, 0.0506903864, -0.0282484442, -0.0530007929, 0.0522369891, 0.0889050364, -0.1585740596, -0.0466032252, -0.1317322850, -0.0138103655, -0.0485183932, 0.1203188077, 0.0244097039, 0.0686364323, -0.0832270458, 0.0708135739, 0.0914427564, -0.2445625961, 0.0451468565, -0.0793377236, -0.1498728395, -0.0448718704, -0.2112887502, -0.0880495980, 0.0826915428, -0.0293631293, -0.0158770923, 0.0623614714, 0.0682830215, -0.0006778549, -0.0084285587, -0.1777219027, 0.0320901982, -0.0868886635, -0.1798784435, -0.0155587830, 0.1248791814, 0.1123798788, 0.1266608536, -0.2768377364, -0.0051908563, 0.0934022442, -0.0837782472, -0.1722080559, 0.0971585959, 0.0072278474, 0.1089992151, -0.0712987557, -0.0062477221, 0.1463334411, -0.1105894074, 0.0580954291, -0.1314275265, -0.2899643481, -0.0140982391, 0.0245207660, -0.0918731242, 0.0561095774, 0.0486960039, -0.0602525137, -0.0847726911, 0.0165256839, 0.1045485586, -0.1144332439, 0.0115192616, -0.0729852840, -0.0595494509, -0.0255711004, -0.1614268422, -0.0397859998, -0.1024650857, 0.0145407747, 0.0050200126, 0.0908503234, -0.0677236170, 0.0647875741, -0.0206642747, -0.0889887810, -0.0356314778, -0.1561688781, -0.0685792416, -0.0305304956, -0.0049438728, -0.1242918819, -0.0082419990, 0.0649705902, 0.0872935727, 0.1318346411, -0.0586762428, 0.0976953208, -0.0975005180, -0.0554028638, 0.1328512430, -0.2945417762, -0.0279151481, -0.0368911214, 0.0993860140, -0.0430672020, -0.1188008189, -0.0427050330, 0.1439780295, -0.0415125713, -0.0593194515, 0.1008878872, 0.1396005452, 0.1721172631, -0.1578253061, -0.0166358203, -0.1361848265, -0.1743745655, -0.0135004492, -0.0158258490, 0.0120790042, 0.0161295068, -0.1436880827, 0.0792169422, -0.0185774397, -0.2075960040, -0.0084744189, -0.1026333496, -0.1318036765, -0.1428537518, -0.1680561453, -0.0694774538, -0.0668342561, 0.0444464386, 0.0860200003, -0.0179845430, 0.0680262372, 0.0523871481, 0.0109548960, -0.0248688664, -0.0035376081, 0.0315432958, -0.1537641287, 0.0089144344, 0.0328368545, 0.0652942881, 0.0319405869, -0.1372504830, 0.0898999423, 0.0308673028, -0.0975497663, -0.0641755536, -0.0118034761, 0.0580310300, 0.0875810534, -0.1033639088, 0.0211447254, 0.0074721449, -0.0571045466, 0.0897394791, -0.0887800530, -0.1934451014, -0.2566965222, 0.1763855964, -0.0608078316, -0.0392307118, -0.1120476797, -0.0612057000, -0.0451024473, -0.0916164964, -0.1478165984, -0.0687321946, -0.1064853147, -0.0643533692, -0.0845042467, -0.0868583545, -0.1262854189, 0.1321196407, -0.0322366059, -0.1517562121, -0.0050143041, -0.0285976436, -0.0385027193, 0.1173103452, -0.0212345477, -0.0001949851, 0.1014570296, -0.0355170183, -0.0607203618, 0.0115904724, 0.0480608977, -0.0390044563, -0.0033483123, 0.0483790524, -0.0103886779, 0.1191667467, -0.0373691767, 0.1147688255, -0.0783593580, 0.0561275855, 0.1602499634, -0.3818334937, 0.0150202364, 0.0479277298, -0.1019881070, 0.0111688897, -0.0610118844, 0.0265556350, -0.0078889150, 0.0303596575, 0.0452525578, -0.0477629974, 0.2042580992, -0.0115989018, -0.2290914208, 0.0395181775, 0.0205727275, -0.2148287445, 0.0506908745, -0.2044681609, 0.1020270288, -0.0447616279, -0.0841530263, 0.0500622354, -0.0268575028, -0.0760379359, 0.0804927275, -0.0587989129, -0.0172351729, -0.1160204932, -0.0312294755, 0.0044098459, -0.0831230208, 0.0543965735, 0.0166004226, -0.1239220798, 0.1306701750, 0.0222209059, -0.1267201453, 0.0302077588, -0.0787763447, -0.0553546064, -0.0327233598, -0.0900479853, 0.0992037132, 0.0182802267, 0.0062870705, -0.1678358018, 0.1710030437, -0.0116908150, -0.0772772133, -0.1836514473, 0.1110471487, -0.0531161949, 0.0344473273, -0.0930621400, 0.0252205245, 0.0984236896, -0.2317309529, -0.0842172354, 0.1245370284, -0.1263533682, -0.1946417987, 0.1736402512, -0.0225463267, -0.0375337861, -0.0404454395, -0.0479858220, 0.0510043204, -0.2446505725, 0.0432162434, 0.0138494810, -0.1069400087, 0.0153665897, -0.1440719962, -0.0018940046, -0.1023241803, 0.1500558704, -0.1031209379, 0.0351865515, 0.1124899611, 0.0127824396, 0.0366117358, 0.0703563839, -0.0234003011, 0.0347887687, 0.0339963436, -0.1425167620, -0.0801299438, -0.0063828961, -0.0337820798, -0.0324690267, 0.2399991006, 0.0830581039, 0.0369749442, 0.0492663532, 0.0038663978, 0.1188019514, -0.0596348904, 0.0735585839, 0.0915825516, -0.1359226853, 0.0193804055, 0.1221427098, -0.0596539825, 0.0997405201, 0.0674684346, -0.0654266998, 0.0503122620, 0.1473675072, -0.0249482635, -0.0012378888, 0.1403286904, 0.1603041142, -0.1830970943, -0.0529327430, -0.0030770181, -0.3437399268, 0.0149738686, -0.5043528676, 0.1860584170, -0.0307905022, -0.0621795654, 0.0798580274, -0.0010667660, 0.1118206158, 0.1234048381, -0.0738745406, 0.0700455233, -0.0512151681, -0.0968145728, -0.0623859912, -0.2320301831, 0.0257881433, -0.0723495260, -0.0847870782, 0.2043258697, 0.0165095273, -0.1952722371, -0.0728996843, -0.0389106683, 0.0146455653, -0.0050041708, -0.0821106732, 0.1114495695, -0.0284557287, 0.1046315208, 0.0495364331, 0.1385936737, -0.0378541984, -0.0660016686, -0.1964383423, 0.0447884686, -0.0686877668, -0.0429795273, 0.0151824495, 0.0153092351, 0.0049388534, -0.0284150764, -0.0184324309, 0.0231018141, -0.0170468781, -0.2789877355, -0.0201430712, -0.0720760226, -0.0039317552, -0.1001759917, -0.0346763730, 0.1385016143, -0.2218067497, -0.0661377311, 0.0535657182, 0.1060714200, 0.0328558311, -0.0957265794, -0.0519311652, 0.0128115499, 0.0475228168, 0.0349396020, -0.0186112039, -0.0112083880, -0.1106266975, 0.0200381763, 0.1053168550, 0.0604491606, -0.0245376248, 0.1307616532, -0.0440258123, 0.0042842440, 0.0826762989, -0.0430307947, -0.0647939667, 0.1095072925, 0.0480620041, -0.0013601390, 0.0379538499, 0.0242985319, 0.0417726822, -0.0792065561, 0.0027148577, 0.0431028418, 0.1023601145, -0.1106025204, -0.0113823554, -0.2644507289, 0.0849233270, 0.1029856801, 0.0400637165, 0.1412184536, -0.0345380679, 0.0270776451, -0.0021231221, 0.0813180953, -0.0259057619, -0.1856011599, -0.0212323125, 0.0458836257, -0.2328214347, 0.1337470412, -0.2257420272, 0.2742795646, 0.1115463898, 0.0863060430, 0.0174922887, -0.0228428897, 0.2352076471, 0.2108746320, 0.0067645106, 0.0568288900, 0.0062918770, 0.0103284605, -0.0013272928, -0.2623190582, -0.0205196086, -0.1593554318, 0.0863592997, 0.0231438875, 0.0876433998, -0.2660987973, -0.0187081676, 0.0065090596, -0.0344845168, 0.0618177690, -0.1231994927, 0.0179693922, 0.0379034877, 0.0491363481, -0.0555345379, 0.1223861426, -0.0137341172, 0.0616631843, -0.1762914956, 0.1013068855, 0.0075373743, -0.0133408625, -0.0157705136, -0.1077730954, -0.0867977664, -0.0801968277, -0.0211057905, 0.0261358526, 0.0045039654, -0.1607500315, -0.1863369346, -0.0057463935, 0.0833824649, 0.0070942058, 0.1092132777, 0.1753299683, -0.1486348808, 0.0574292243, -0.0320718400, 0.0176270474, 0.0132406354, -0.0673259273, -0.1860896498, -0.1914044470, -0.0135728847, 0.1064466387, 0.0235627200, 0.0561700538, -0.0959304720, -0.0413401797, 0.1138948277, 0.0725747943, -0.0615545064, 0.0361932479, 0.0009119208, -0.0701474696, 0.0025115786, 0.0560127385, -0.1216929629, 0.1519113034, 0.0475574583, -0.1403320879, 0.0201895144, 0.0691770837, 0.2363526970, -0.0019712031, -0.0175800361, 0.0607869513, 0.1741070896, -0.0833570063, -0.0041817753, -0.2200041562, 0.0651689693, 0.0910329819, -0.0180821493, 0.0207671784, -0.0072423220, 0.0557117388, -0.0048021874, 0.0213211104, 0.0394351929, -0.1339967400, -0.0730694160, 0.0011681535, -0.0368343405, 0.0438276604, -0.0999992937, 0.1600828469, -0.0052819881, -0.0855728090, 0.0076858578, -0.0679362118, 0.0919845849, 0.1316891462, -0.0956654176, -0.0182158668, 0.0674917847, 0.0747976005, 0.1013397425, -0.0800174102, 0.0112729417, -0.0671733990, 0.0363734439, -0.0482735373, 0.1967689693, 0.0280388240, 0.0861821026, -0.0287898425, -0.0642292574, 0.0874879062, -0.1308547258, 0.0348769762, 0.0369708352, -0.0602416471, 0.0416601747, 0.1406059712, 0.0942581370, -0.0207218826, -0.2310894281, 0.0175589081, 0.0824699253, -0.0792546645, 0.0935455710, 0.0376303792, -0.1703431606, -0.0453476943, -0.0633505806, -0.0879717991, 0.0994744897, 0.0222531240, -0.2482262403, 0.0686658621, 0.0375367776, -0.0637062564, 0.0585049465, 0.1165594906, -0.1964982003, 0.0684089884, -0.1413273066, 0.2577182651, 0.0922712088, 0.0638050437, -0.0967069268, -0.0912608057, -0.0628659129, 0.0016591758, -0.0472181551, -0.0136845615, -0.0848701373, 0.0143206948, 0.1614274234, -0.0373218097, -0.1179412678, 0.0040614540, 0.0134165948, 0.0741101056, 0.0283621103, -0.0426071137, -0.0103571443, 0.0585185401, 0.1865155846, -0.2332274765, 0.0000385011, 0.0765966102, 0.0894077271, 0.0896829963, -0.0431250706, 0.0653312728, 0.0797864273, -0.1637774408, 0.0674097985, -0.1937996000, 0.1615408659, -0.0527736768, -0.1725980043, 0.0734512135, -0.0724843368, 0.0117279990, 0.1098936647, -0.0801249892, 0.1392840296, -0.2262653261, -0.0176568311, 0.0037441710, 0.0088813230, 0.0138646504, 0.0208373405, 0.1626979858, 0.1114166528, -0.0856495574, 0.0619580150, -0.0604791716, 0.0668760985, -0.1627765596, -0.1618163437, 0.1583589166, 0.0341755711, 0.2494396567, 0.0145517578, -0.1486838162, 0.1139405072, -0.1887771338, 0.0357395932, -0.3648688495, 0.1331183165, 0.1293149740, 0.0168439932, -0.2179256678, -0.0475024581, 0.1650148779, -0.1176306978, 0.1269791275, 0.0934187174, 0.0232638903, 0.0346435793, 0.1503454596, -0.0604294874, 0.0198314283, 0.0586097203, -0.0203911103, -0.0063471827, -0.0789438188, -0.0581515469, 0.1032850519, -0.0607077554, -0.0367713980, -0.0534098707, 0.0210207403, 0.0642768145, 0.1228538752, -0.4188371599, 0.0247077048, 0.1360273659, -0.0548401996, -0.0486402772, 0.1467099488, -0.0327820145, 0.0573407076, -0.1172638014, 0.1658534855, -0.0527742803, -0.0555909500, -0.0116490945, -0.0146203553, 0.0100316387, -0.0576565266, -0.0619573034, -0.0089627076, -0.1565899551, -0.0480166599, 0.1508290768, -0.0058861137, 0.0952586830, -0.0906511694, 0.0277596917, -0.0624146461, -0.0235452000, 0.0611637235, -0.0165214259, 0.1140565500, 0.0826287642, -0.2028381526, 0.0511128418, 0.1220791489, 0.1342563182, 0.0019411691, 0.0908973739, 0.1337174475, 0.1054927111, -0.1584200859, 0.0772669092, -0.0999847353, -0.0143195456, -0.0668660402, -0.0860701501, 0.0830758214, 0.0278639719, -0.0518371500, 0.0483267978, -0.0039428556, -0.0177639201, -0.1649839431, 0.0888482109, 0.0117603727, 0.1313552111, 0.1564285606, 0.0927837417, -0.0275578797, -0.0007396590, -0.0646362156, 0.1149432659, -0.1107463837, -0.0874642581, -0.0960730761, -0.1665222943, 0.0438469835, -0.0035286008, 0.2824814618, -0.0213202406, -0.0178196318, 0.1060557440, -0.2101815790, -0.0308809169, -0.5010596514, 0.0955879539, 0.0214586239, -0.0481431186, -0.1513940394, -0.0029498746, 0.0259796288, -0.1330261528, 0.1383983493, 0.1985182464, 0.0401758850, -0.0557673573, 0.0418412089, -0.1500844359, 0.1299505532, 0.1150448769, -0.0513795055, 0.1295221448, -0.1478956044, 0.1225529760, 0.0567672290, -0.1617856920, -0.0819768235, -0.0415996835, 0.0179056674, 0.1674588472, 0.0221682023, -0.2999713719, 0.1076736227, 0.0715564415, -0.0252044927, -0.0403082594, -0.0094910720, -0.0961106643, -0.1007672027, -0.1715228856, 0.0986535773, 0.0069315634, -0.0306720864, 0.0516159385, -0.0488298610, -0.0235549249, -0.1693446636, -0.0403636098, 0.0025931108, -0.0486692153, 0.0978269204, 0.1297624558, 0.1369045675, -0.0448807776, 0.1226974204, 0.0686703846, 0.0049819886, -0.0231297389, -0.0347280912, 0.0913344398, 0.0430849269, -0.1145292297, -0.1508559138, -0.0646089092, 0.1332786083, 0.0574587435, 0.0418897495, 0.0749491528, 0.0471084155, 0.1385234743, -0.0778353810, -0.0094113909, -0.0358317755, -0.0071406919, -0.2016884089, 0.0154734179, 0.0271304734, -0.0606900379, 0.0584378541, 0.1495304704, -0.0802127942, 0.0231957268, -0.0695613846, 0.0588735417, 0.1725803167, 0.0823180526, 0.0259225070, 0.2179737389, -0.0903068259, 0.0745333210, -0.1272594780, -0.0019777834, -0.1958166212, 0.0536019988, -0.0304465480, -0.0971667841, -0.1029181033, -0.1679379493, 0.2388037592, 0.0290815793, -0.2006734908, 0.1446946263, -0.1366281062, -0.0503048413, -0.3857314587, 0.0676608011, 0.1304534823, -0.0933773816, -0.0441566966, 0.0706511065, -0.0832277015, -0.2851995826, 0.0694311708, 0.1916771233, 0.0467674211, 0.0431495756, 0.1496648788, -0.2971194088, -0.0426696539, 0.1341179609, -0.0050301678, 0.0551522113, -0.0261468384, 0.0556180254, 0.0423830338, -0.1023941711, 0.0043952931, -0.1631293893, -0.0316159390, 0.1166574433, 0.0060914573, 0.0286407899, 0.1542288661, 0.0303463619, 0.0429985784, 0.0029792446, 0.0236766040, -0.1515035480, -0.0710297674, -0.0332923494, 0.1849558353, -0.0059513166, -0.0708872080, 0.0893039852, -0.0463909730, 0.0047771838, -0.1811381876, -0.1055872962, 0.1289221197, -0.1333448589, 0.1348931044, 0.0726470724, 0.0823554099, -0.0977798104, 0.0223899521, -0.0003941417, -0.0594493300, -0.0544894896, 0.0476759039, 0.0029323557, 0.1335644275, -0.0247704890, -0.0343532339, 0.0125385039, 0.1498437524, 0.0870868489, 0.0135788834, 0.0950697288, -0.0287674256, 0.0632793903, 0.0372836739, 0.0942490250, -0.0822229758, 0.0435523875, -0.1889906973, 0.1267613918, 0.0703271255, -0.0066833897, -0.0874076933, 0.0405126736, -0.0523664318, 0.0076106275, 0.0360681526, 0.0334278271, 0.0506285802, 0.0497135483, 0.0460415892, 0.0308710877, -0.0956138372, 0.0850562751, -0.0546711162, 0.0066709197, -0.0514048077, 0.0252897236, 0.0408574678, -0.1515603065, -0.0153504191, -0.2321130931, 0.2102427334, -0.0472167321, -0.1109026372, 0.1132555008, -0.0584129244, 0.0180538259, -0.1245570332, 0.0069668368, 0.1184232682, -0.0236260481, 0.0778614730, 0.1113784239, -0.1533430815, -0.2161826193, 0.1186301187, 0.0574235097, 0.1016549021, 0.0165316164, 0.0296633337, -0.1913531274, -0.0001223048, 0.1145240217, 0.1454204619, 0.1098018363, 0.0100123454, 0.0423940085, 0.1788538545, 0.0460734740, -0.0496362746, 0.0320185758, 0.1045479700, -0.0047343629, -0.0296682250, 0.0945409238, 0.1141821370, 0.0020468065, -0.0285817552, -0.2071999758, -0.0706013739, -0.0828350112, -0.0932347476, 0.1086704507, 0.0561699308, 0.0822279304, -0.0166413337, -0.0252607372, -0.0864839926, 0.0619805120, -0.0672532842, -0.0255830083, 0.3043733835, -0.0868796483, 0.0262453165, 0.0271172747, 0.1383477300, -0.1859571040, 0.0253901258, 0.0826423541, -0.0732034519, 0.0601504669, 0.0270069782, 0.0781133100, 0.2058480531, -0.0614811666, 0.0089142611, 0.0740275308, 0.1165791973, -0.0119983582, 0.0099913999, 0.1930435300, -0.1381296962, 0.0474208407, 0.1018252969, 0.0029873666, -0.0642594770, -0.0504019707, -0.0377631821, 0.1844503731, 0.0864811167, -0.0206903052, -0.0517045222, 0.0334609225, -0.0091427313, -0.0731898993, 0.0921883360, 0.0661043599, -0.0919941440, -0.0083584152, 0.0637699142, 0.1265465915, -0.1654642522, 0.0272270460, 0.0093691219, 0.0182906128, 0.1427592784, -0.0981666744, 0.0782895535, -0.1994681507, -0.0127836252, -0.1141234636, 0.0830776691, -0.0219534989, -0.0343933143, 0.1060799360, 0.0170800425, 0.0617690571, 0.0757983103, -0.0823491886, -0.0060247341, 0.0364824571, 0.0239288136, -0.0450760946, -0.3278460801, -0.1868599504, 0.0440697335, 0.1566686928, 0.0418594293, 0.0787582844, 0.0625200868, -0.0937065631, -0.0898790956, -0.0988643616, 0.0777959004, 0.1220269799, -0.0057258909, 0.1114835590, 0.2490930259, 0.0202933252, -0.1486411542, 0.0964532420, -0.0421957448, 0.0055264602, -0.0398652554, -0.1023688167, 0.0664570928, -0.0554425716, 0.0643579066, -0.1189426184, -0.0888052583, -0.1362127960, -0.0380175225, 0.1201881245, 0.0727946684, 0.1837512255, 0.0442302600, -0.1853447258, -0.0602920689, 0.1388658285, 0.0055984585, -0.0246179011, -0.0103842588, -0.0832407698, 0.0279687978, -0.0537114441, 0.1502362490, -0.1699513346, 0.1854679883, -0.1386924386, 0.0034410837, 0.0568311103, 0.0092588309, 0.0719646439, 0.2266309261, -0.0640823245, 0.0233261418, 0.1049085185, 0.1991465837, -0.0539342612, -0.0011583421, 0.1027916521, -0.1825222671, -0.0424361229, 0.0744576454, -0.0140256239, -0.0677992404, -0.0383313037, -0.0821760148, 0.1445871592, 0.0155227808, -0.0644045845, -0.0414086878, -0.0909012780, -0.1128268316, 0.0206739157, 0.1301372796, 0.0776111335, -0.0318281204, 0.0618941374, 0.0555254444, -0.0620136708, -0.1990171373, -0.0133906780, 0.0731261969, -0.0534743443, 0.1416764706, -0.0203385763, -0.0124488547, -0.1627007425, 0.0522481725, -0.1300075799, -0.0569696799, 0.0571854673, -0.0265826378, 0.1495785117, 0.0974604040, -0.0244095083, 0.1020988300, 0.0071210950, 0.0226367600, 0.1148940474, -0.0033694261, 0.1148077399, -0.5348916054, -0.2337284237, 0.0536895581, 0.0797753707, 0.0048278123, 0.0246946067, -0.0305385254, -0.1226270646, -0.1131535023, 0.0181241930, 0.0597066209, 0.0521443635, 0.0887604058, 0.0153965931, 0.2282034010, -0.0259844977, -0.1195634380, 0.0698858798, 0.0209278055, 0.0722363666, -0.1243510544, -0.1753184646, 0.1485347599, -0.0782201886, -0.0938985348, -0.2113609910, -0.1782830060, -0.1042167917, 0.0792688057, -0.0249816030, 0.0941061229, 0.1187937111, -0.0663733631, -0.0968789086, 0.0030239485, 0.0922966450, -0.0380500592, -0.0102833277, 0.0057051615, -0.0788927972, 0.0865791887, -0.1141101494, 0.0690446943, -0.1143481359, 0.1663042158, -0.0825503096, 0.0115166521, -0.0049517271, 0.1209931672, -0.0881661475, 0.1685374677, -0.1356871575, 0.0919151679, 0.2308736891, 0.1198488995, -0.1071516126, 0.0796497241, 0.0840898603, -0.2379849553, 0.0527336635, 0.1499645710, 0.1136291996, -0.1152008548, -0.0129220719, -0.0194442216, -0.0284770913, -0.0454476401, -0.0007791556, -0.0408820882, -0.0198139828, -0.1466096640, 0.0581365228, 0.1248606443, 0.1363381147, -0.1395671815, -0.0010396861, 0.0471360348, 0.0068430356, -0.1181916147, 0.1311623305, 0.1832201481, -0.1470110118, 0.1333784312, 0.0038626015, 0.0447394252, -0.2538802326, 0.0315159075, -0.1410469711, -0.2165802270, 0.0151107218, -0.0867226943, 0.0397564992, -0.0427246206, -0.0295098554, 0.0613201931, 0.0021776115, -0.0429395661, 0.1420853436, 0.0124819065, 0.0785750300, -0.6141400933, -0.0786775127, -0.0441593677, 0.1617213935, -0.0193994343, 0.0170691367, -0.0269142278, -0.0910843238, -0.0712524205, 0.0445730314, -0.0744236931, 0.1252807677, 0.1137239784, -0.0462989286, 0.2436134666, 0.1830542535, -0.0847676620, -0.0251972694, 0.0385127999, 0.2425933480, 0.0543510132, -0.0894868374, 0.1256447881, -0.0184202958, -0.1855570376, -0.1570498645, -0.0059937518, -0.1405309588, -0.0926509500, 0.1391116828, 0.0859636441, 0.0692276582, 0.0387210734, -0.1259647310, -0.1025522873, 0.0025115844, -0.0080380747, -0.0101652415, 0.0118993558, 0.0033070419, 0.0119728446, -0.0668538064, -0.0007982237, -0.1373421401, 0.0736700073, -0.0204322655, -0.0409301035, 0.1152007654, 0.0933776870, 0.0054729725, 0.1635470092, -0.1348847151, -0.0610018708, 0.0597585626, -0.0943104997, -0.1736437082, 0.0257454570, -0.0190134011, -0.2163261622, 0.0448921137, 0.1398631930, 0.0524991341, -0.1603742093, -0.0228306204, 0.0238365624, -0.2588178217, -0.0856844932, 0.0772554204, 0.0307393651, -0.0148777440, -0.0395833179, 0.0734104291, 0.0940144435, 0.0692868009, -0.2346960157, -0.0166215748, -0.0264997743, -0.0712997243, -0.2928994298, 0.0449209847, 0.0886629373, -0.0474209897, 0.1044519320, -0.0731197000, 0.0009052829, -0.2526887357, -0.1156844273, -0.0859888270, -0.2031801194, 0.0562728234, -0.1472575366, 0.0882970840, 0.0101225870, 0.0069080857, 0.0100819031, -0.0090731857, 0.0411952697, 0.0366917960, 0.0123244273, -0.0368951298, -0.2619369626, 0.0273311026, -0.0078725964, 0.1239046752, -0.0802433118, -0.1138751507, -0.0192913786, -0.0602675602, 0.0510708056, 0.0919619575, -0.1085186154, 0.0522582904, 0.1657258272, 0.0138601083, 0.1592914909, 0.1711549461, 0.0754915923, -0.0010435448, -0.0037533694, 0.1919556409, -0.0378089547, 0.0060341074, 0.0614556000, 0.0484357812, -0.2201537192, -0.2426730841, 0.0789118782, 0.0106793316, -0.0594023727, 0.1280746907, 0.1196186021, -0.1005012617, 0.1298547089, -0.0804301575, -0.1005335748, 0.1516364068, -0.0333797373, 0.1029361263, 0.0945195556, -0.0417309105, 0.0886746198, -0.0490234755, -0.0063420758, -0.0164106376, -0.0063692559, -0.0730170459, -0.0674788356, 0.1236617789, -0.0494167358, 0.1225354150, 0.0170943495, -0.0866913572, 0.0457921997, 0.0518832430, 0.0061888914, -0.1209045202, 0.0305289105, -0.1442967951, -0.1129182726, 0.0087836543, 0.0513921566, 0.0885032862, -0.1941755861, -0.2326071560, -0.0008816140, -0.1517209411, -0.1482088268, 0.0125556327, 0.1452285498, -0.1461651325, -0.0789819434, 0.0867958814, 0.0408370979, -0.0042081927, -0.0862766877, 0.0445540920, 0.0622278675, -0.0991580859, -0.3050943613, 0.1121303439, 0.1404165626, -0.2798006833, -0.0859723166, -0.2296885699, -0.0289120376, -0.2808716893, -0.1089831740, -0.0351713113, -0.1799466163, 0.1103862375, -0.1361421347, -0.0151573243, 0.0362336077, 0.0270650312, -0.1157752201, 0.0606620796, -0.0649147481, 0.1429620534, 0.0496312715, 0.0454402491, -0.2635223269, -0.0182372909, -0.0365047455, 0.0746227428, -0.0859861970, -0.0310921855, 0.0605557002, 0.0169502310, 0.0801415965, 0.0137820365, -0.0394996256, -0.1121969596, 0.1980666518, -0.0711067542, 0.2864389122, 0.0859136134, 0.1058143601, 0.1284901053, -0.0755730569, 0.1639871150, 0.0683716685, 0.0294718724, 0.0017584919, 0.0511064902, -0.2367453128, -0.1502980739, -0.0151923615, 0.0781232044, 0.0113395611, 0.0563301966, 0.0226750560, -0.0924115852, 0.1399056762, -0.0519678369, -0.0588921532, 0.1100714952, -0.0500431024, -0.0322040953, 0.0446849056, 0.0223528352, 0.1813879460, -0.1895426959, -0.1831065863, -0.1868732721, -0.0157848559, -0.0537038483, 0.0011758234, 0.0748333037, 0.0154901799, 0.0030330215, 0.1288808882, 0.0213137269, -0.0324995033, 0.0723934099, 0.0513067134, -0.1227817908, 0.0936725736, -0.0567264482, -0.1803088784, 0.1296268404, 0.0655820295, 0.1159092486, -0.0989137515, -0.2362313271, 0.0743850097, -0.1029238254, -0.1518536359, 0.0158907045, 0.0598684773, 0.0870434195, -0.2681869268, 0.0623297170, -0.0573590845, 0.1080966890, 0.1501245350, 0.0718664080, -0.0518783443, -0.0072705713, -0.2253203094, 0.1050264835, 0.0962263793, -0.2198466659, -0.0124615291, -0.0560333841, 0.0110531626, -0.3132794797, -0.1007441804, -0.0535648130, -0.2931689620, -0.0817101523, -0.0380912535, 0.0961361304, 0.1312023401, 0.0694829151, -0.2914701700, 0.1025880501, -0.1543113142, 0.0777931437, 0.0643572435, 0.0888862908, -0.0655527264, -0.0248105489, -0.1825054586, 0.0477154367, -0.0022718082, -0.1257067770, 0.0672213063, -0.0382246673, 0.0361259803, 0.0840272531, 0.1281829178, -0.1311812103, 0.0757150203, -0.1102015823, 0.1026885137, -0.1210223511, -0.0343645588, 0.1019826904, -0.1816234589, 0.0400822870, 0.0036627285, 0.0588504747, 0.0750858635, -0.0045487024, -0.0798436999, -0.0354616456, 0.0122374576, 0.0007955885, -0.1311164200, 0.1514928341, -0.1739237010, 0.0335604735, 0.1592000276, 0.0400724113, 0.0376072824, 0.0384949036, -0.0979321077, 0.0265763644, -0.1916867495, 0.0709001124, -0.0021468534, -0.3106561601, -0.2762687504, -0.0702338815, 0.1958695352, 0.0081404541, 0.0072824867, 0.1388306022, 0.1610770822, 0.0991513729, -0.0868519694, -0.0601771176, 0.1046549305, 0.1518177390, -0.0618178062, -0.3458241224, 0.0219067186, -0.2612310350, -0.1389854103, 0.1560195088, -0.0255580842, 0.0630689189, -0.0596190356, 0.0541713648, 0.1429072171, -0.0637770891, -0.1561837643, 0.0265486818, -0.0143752666, 0.0599967390, -0.3040556312, 0.0711793602, 0.0823681206, -0.0705468580, -0.0567398183, 0.1951942295, -0.2374482453, -0.1304761767, -0.1789203733, -0.0332314260, 0.0808436647, -0.1585481018, -0.1354422122, 0.0588460490, 0.0547153018, -0.2592197061, -0.1471565068, -0.0534496643, -0.3242627680, -0.1290391088, -0.1324373186, 0.0436734520, 0.1094722673, 0.2602795064, -0.0587367490, 0.0249046460, -0.3390218318, 0.0441386029, 0.0905525535, 0.1386829317, 0.0256835483, -0.0408586077, -0.1953444630, 0.1187047064, 0.0869984627, -0.0432841443, 0.0373827741, -0.0486962870, 0.1197798476, 0.1058058664, 0.0703577474, 0.0348816887, 0.0992199630, -0.0498176515, 0.2521188259, -0.1270633489, 0.0845196694, -0.0719542205, -0.0147255110, 0.0176284891, 0.1106707752, 0.1176968291, -0.0664885938, -0.0461866371, -0.2003515959, -0.1005948931, 0.0123817828, 0.0585722104, 0.0353128761, 0.0298983585, -0.1419861615, 0.0811047405, 0.0881426930, 0.0346419960, 0.0968972594, 0.1204691231, 0.0477939732, 0.1772336513, -0.2353276312, 0.0413019769, 0.0781827271, -0.3299365044, -0.2250581533, -0.0498377606, 0.0394849218, 0.1319058985, -0.0024468447, 0.0244417246, 0.1442279816, 0.1168552414, -0.0270833578, -0.1162323132, 0.0520273708, -0.0649301633, -0.0915062055, -0.2246890664, 0.0864067301, -0.3052548468, -0.0462904349, 0.0398631878, -0.0536526218, 0.0021690782, 0.0096004792, -0.0483061448, 0.0608660877, -0.1303569525, -0.1030364558, 0.1177126840, -0.1048811451, 0.0411064215, -0.1860855371, -0.0102484878, -0.0870253593, -0.0761840045, -0.0473205410, 0.0720334798, -0.1041615307, -0.0671865121, -0.2230066359, -0.2812860012, 0.1329864562, -0.2558277547, -0.1670157313, 0.0243525002, 0.0957929939, 0.0585095473, -0.1764371097, -0.0884704590, -0.0805004090, -0.0856247917, -0.2329422832, 0.0828356668, 0.0679455772, 0.2080107480, -0.0365003832, 0.0189430211, -0.3382896185, -0.0109639689, -0.0407504216, 0.0624139905, -0.0364046954, 0.0369995087, -0.0799974725, 0.0348023921, -0.0403434522, -0.0110066757, -0.0383224636, 0.1065439358, 0.2415444255, -0.1071460396, -0.0984438434, 0.1969304979, 0.0692486688, 0.0574343875, 0.1390464157, -0.0558232777, -0.0272195339, -0.0553565994, 0.0150281219, 0.1079024896, 0.0799675286, 0.1360974461, 0.0069450191, 0.0765874907, -0.1152521744, -0.1586590111, -0.0612539090, 0.0695661902, 0.1030299962, -0.0692034289, -0.0960615650, 0.0394447967, 0.2616175413, 0.0555977523, -0.0762125477, 0.1927647889, 0.0679145083, 0.0856471881, -0.0973326564, -0.0011550367, 0.0620309822, -0.2145625949, -0.3076637685, 0.0018739633, -0.0320061073, -0.0597095117, 0.0235464741, -0.0672874078, 0.1784176826, 0.0986122265, -0.0113226436, -0.0895805061, -0.0168369096, 0.0000613193, -0.0970537812, -0.0838770494, -0.0575711578, -0.1911123544, -0.0683133900, 0.1360320002, -0.2281363159, -0.2023763061, 0.2088328302, -0.0400395803, 0.0525872670, -0.0825569630, 0.0946241319, 0.0302668251, 0.0758671612, 0.1790384352, -0.0952486470, -0.1351208240, 0.0779821053, -0.0356241651, -0.0112964418, 0.0297640096, -0.0094869453, 0.0017393973, -0.0672563165, -0.1965447962, -0.1583493650, -0.1752807647, -0.0964983627, 0.0651677549, 0.0730208084, 0.0444032475, -0.1434921026, 0.0267323460, -0.0283915978, -0.0076452857, -0.2068281174, 0.2242074013, 0.1164643094, 0.0073121465, 0.2103273273, -0.0690805092, -0.2080287933, 0.3016629219, -0.0588103794, 0.1985079646, -0.1479120702, -0.0704455674, 0.1332044899, 0.1325143725, -0.0317577422, -0.0224863589, 0.1456258446, 0.0231109858, 0.0030521932, 0.0642229989, -0.0120985573, -0.0273063909, 0.1297831833, 0.0311979987, 0.1043272540, -0.0596172400, -0.0247742031, -0.0291339755, 0.0066382489, 0.0041046618, 0.0404896811, 0.1185256988, -0.0839242563, 0.0387112089, -0.1990715563, -0.0816667601, 0.1301113963, 0.0445872732, -0.1200257987, 0.1166193113, -0.0366257131, -0.0505009629, 0.0410152487, 0.0117332330, -0.0748970881, -0.0108880578, -0.1040960997, 0.0897789896, 0.0280168392, 0.0846988633, -0.0344067514, -0.1872684062, -0.0473987833, -0.0698898882, -0.0051372647, 0.0853081048, 0.0744655877, 0.0350406617, 0.1972319931, -0.0936153531, -0.2238336951, -0.0563755222, -0.0793194771, 0.0196180940, -0.1248085648, -0.0343810730, -0.1781395674, 0.1045596376, 0.0698950738, 0.2242856920, -0.0205266699, -0.0779311955, 0.2092140764, -0.0276898034, 0.1310500503, 0.0929792672, -0.0133150620, 0.1557491720, -0.0531778745, -0.0056782286, 0.1235546172, -0.1007449105, -0.1577562988, 0.0711085424, 0.1768827438, 0.0003948007, 0.0606447943, 0.0746495724, -0.0365015492, -0.0022502453, -0.1635991633, -0.0035965412, -0.0145313740, 0.0646955669, -0.0235704370, -0.0331261046, -0.0350094847, 0.2179594636, -0.0256472640, -0.0451427847, -0.0915334225, 0.1613314003, -0.1659915000, 0.0086788172, 0.1277726293, 0.0185048711, -0.1186741590, 0.0802839920, 0.1287631541, 0.0016517258, -0.0391229428, 0.0044384371, 0.1189071015, 0.0843143985, -0.0849227011, 0.0225569252, 0.0833149254, -0.0450673327, 0.0109255286, 0.0005418322, 0.0357072912, -0.0197474808, -0.0161646847, 0.0449264161, -0.0690774694, -0.0868162215, 0.1643446684, 0.0213046987, 0.0202032384, 0.0622093678, 0.0856535062, 0.0274769086, -0.0558480732, -0.0534216166, 0.0552900918, 0.0357235745, 0.0402020328, 0.0023819816, -0.0169832800, -0.0079908622, -0.0417662822, -0.0670243055, 0.1528924108, -0.0950038135, 0.1013168320, 0.1467982382, -0.1167232320, 0.0550757349, 0.0023021931, 0.0955436155, -0.0739368573, 0.0754097253, -0.0197022036, 0.0606596954, 0.0973789617, -0.1348995119, 0.0702186525, -0.0205588304, -0.0639219657, 0.0501065478, -0.2181990147, 0.0370029062, 0.0432971753, 0.1473137289, -0.0061865300, 0.0059911674, -0.1107715368, 0.0264013354, 0.0258422848, -0.0578018129, -0.0387462340, -0.0187179651, 0.0789781585, -0.0157986451, 0.0417786166, -0.0488661341, -0.0333927609, 0.1173864082, 0.1431232691, 0.0586310029, 0.0292796809, -0.0235901475, 0.1009988040, -0.1193305925, 0.0147657497, -0.1305086017, 0.1711475700, -0.0628071576, 0.0135480324, -0.0229406673, -0.0731147304, -0.0893702880, 0.1131600887, 0.0481620692, 0.0289728530, 0.0715296865, -0.1333002299, -0.0035385599, 0.0357314423, 0.1505343765, 0.0867282227, 0.0597859360, -0.0418815501, 0.0319157913, 0.0339424014, 0.0028991215, -0.0983248055, -0.0177522823, 0.1480932981, -0.0284539685, 0.0397501886, -0.0114171468, -0.1788100302, 0.0049311277, -0.0575870126, 0.0594418831, -0.0674118921, 0.1854535192, 0.0275875330, 0.0521874204, -0.0232372396, -0.0441994146, 0.1355479658, 0.0752999708, 0.0345671475, 0.0042391224, -0.0566807389, -0.0706922263, 0.1148765460, -0.0175651852, 0.0236811060, 0.0382208452, -0.0810477585, -0.0483393036, 0.0743663535, -0.0334843099, -0.0516110919, 0.1658220738, -0.0652250573, 0.0231887568, -0.1423299164, 0.0993553028, 0.0669585988, -0.0511810668, 0.0920623392, 0.0067868871, -0.0761929825, -0.1283655316, -0.0198437106, -0.0230805706, 0.0026002084, -0.0797886699, 0.0161689669, 0.0770015046, -0.0301096421, 0.0269639343, 0.0783184022, -0.0462067090, -0.0188349728, -0.1073406562, -0.1741164327, -0.0422863327, 0.0700952187, -0.0437519401, -0.0359968953, -0.0382822677, 0.0366936475, -0.0487295836, -0.0273460820, 0.1236789450, -0.0168689284, 0.0829462558, -0.0557033643, 0.0343323722, -0.0054991841, 0.0976562873, -0.0771016106, -0.0204952378, 0.0666028410, 0.0054380405, -0.0291422214, 0.0028643156, 0.1626588106, 0.0323209576, -0.1277853847, -0.0568516850, 0.0046091606, 0.0509925634, -0.0593058243, -0.0617249310, 0.0517387688, 0.0262714978, -0.1779254973, -0.0013465387, 0.0803015754, -0.1040679365, -0.1137562096, 0.1895883679, 0.0691481233, 0.0364636742, -0.0592618845, -0.1768071353, -0.0077796062, -0.1331176758, 0.1505081058, -0.0363675132, 0.1416020691, 0.0633062050, -0.0303189829, -0.0410447828, 0.0981484577, 0.1184142828, -0.0032361241, 0.0962445810, 0.0881514102, -0.0232425146, 0.0332407355, 0.1569796950, -0.0168716647, -0.1253041178, -0.1068501398, 0.1720860451, -0.0740341172, -0.0762519091, 0.1395221800, -0.0868786275, 0.0190510657, 0.0988306329, 0.0520957112, -0.0429834090, -0.0048560239, -0.0041244924, -0.1446371228, -0.0910739526, 0.0976014286, 0.1182691976, 0.0900522918, -0.0828404054, -0.0480855294, 0.1855174154, 0.0507406183, -0.0544144735, 0.0543702357, -0.1057354510, -0.1345090717, 0.0334039070, 0.2238623649, -0.1413039118, 0.0126435170, -0.0708097368, -0.0378033035, 0.1156858727, 0.1122039407, 0.0885422975, 0.0867494121, -0.1122745648, 0.0305776224, -0.1127886027, 0.1132259741, -0.0974841192, 0.1250314713, 0.1027667597, 0.0924489424, 0.1393769830, -0.0523800962, -0.0736596808, -0.0414560474, 0.1445864737, 0.1361813545, -0.1624022126, -0.0055161882, -0.1068525091, -0.0162262227, 0.0937477276, 0.0226577334, 0.0171445925, -0.0004730225, 0.1013112962, -0.0190535765, -0.0454134904, -0.0070480639, -0.0581960045, -0.0108088842, 0.0246900115, -0.0336083397, -0.0374779291, 0.0267733056, 0.0406523496, 0.1129369885, 0.1398725063, 0.0018917981, -0.0171552375, -0.0371529497, -0.1207817942, 0.1908055991, -0.0421319194, 0.1751927435, -0.0194858387, 0.0050922404, -0.0221729446, 0.1852266341, -0.0597764887, 0.2276552320, -0.0860147253, -0.0561747663, -0.0808606073, 0.0319406316, -0.1480841786, -0.0047033639, -0.1168031320, -0.1350201368, 0.0915204808, 0.2029733360, 0.1011552960, 0.1861599684, 0.0930765048, -0.0844051242, 0.0014661226, -0.1625716686, -0.0968384370, -0.0308415927, 0.0694938973, 0.0728958398, 0.0720049664, 0.0340874232, -0.0459634513, 0.0917902440, 0.0437348559, -0.0713475719, 0.0995757505, 0.1021121517, -0.1112829968, -0.0060332455, -0.0839201137, -0.0413142256, -0.0411184095, -0.0096232137, 0.1901815385, -0.0507619716, 0.0186526794, -0.0037446839, 0.1580064595, 0.0838277116, -0.0576697178, 0.0957856849, -0.0622917153, 0.2769092023, -0.0223856866, -0.1226897165, 0.0727819577, -0.0826455206, 0.1374539435, -0.2188958228, -0.0787172988, 0.0499767028, -0.0071757250, 0.0480818301, 0.2351381481, -0.0097511373, 0.0313997865, -0.0297271442, 0.1980224997, 0.1925765872, -0.1620758921, 0.0119070075, 0.1771182567, 0.0039744768, -0.0658164918, 0.0488432907, 0.0706800893, -0.0742965117, 0.0459779128, -0.1424632519, 0.0168134868, -0.0783710405, 0.0503133237, -0.0904198810, 0.0531911552, 0.2421107590, -0.1594889611, 0.0053989622, 0.0175231788, -0.0012913250, 0.0774406940, -0.0375982113, 0.0402082875, -0.0196330789, -0.0756756663, -0.0202904921, -0.0863576457, 0.1136946157, 0.1009524688, -0.0869846418, 0.0437722541, 0.0327287540, 0.0479428098, 0.0474739671, 0.1077858880, 0.0742812604, 0.1729691178, 0.2198405117, -0.0263694655, 0.1829604805, 0.0511841066, -0.0904967114, -0.1470988393, -0.1273459345, -0.0375327654, 0.0393242575, -0.0626278818, 0.0422226191, 0.0014282557, 0.0139351245, 0.0364608951, 0.1236106679, 0.0139599796, 0.0352384895, -0.1006651297, -0.2288642675, -0.1652328670, 0.0238351822, -0.0755976588, -0.0676697269, -0.0073176837, -0.0078650713, 0.1351106316, 0.1265949309, 0.2509468794, -0.1871278137, -0.0829080120, 0.1695989370, 0.0814277381, -0.0283476356, 0.0657475814, -0.0261374023, -0.0665648803, -0.0601947606, 0.1128856614, -0.0149391647, 0.1477982849, -0.0515777878, 0.0826660991, -0.0858538002, -0.0581768714, -0.0878879279, -0.1196681932, 0.1555808634, -0.1830045432, -0.1062086821, 0.0227815099, 0.1404589713, -0.0469129123, -0.0208185073, 0.2433567941, 0.1009973437, 0.0487401038, 0.0641906187, 0.0428427942, 0.0121500464, -0.0374735892, -0.0551787950, 0.1389896125, 0.0994551852, 0.0500073917, 0.0609426163, 0.1061098799, 0.1422158629, -0.1018193066, 0.2622576356, -0.0724545792, -0.2088656574, -0.0046963282, -0.1865838617, -0.0387206823, -0.0729217902, 0.0291964244, -0.1633460224, 0.0218174197, -0.0620146915, 0.0707293153, -0.1097960100, 0.1219276562, -0.0573241711, -0.0197545476, -0.0232563056, -0.0353326350, 0.0157578532, -0.0173913371, -0.1201056466, -0.0187146459, -0.0540110096, 0.0474339761, -0.0112538831, -0.0366303138, -0.0656189844, -0.1391627491, 0.1903730035, -0.0653545931, -0.0842349604, -0.0863667205, 0.1285491437, 0.0395681374, 0.0297813825, 0.0261131395, 0.0688519776, -0.0067379507, -0.2410993725, -0.1938340962, 0.1763572991, 0.0076790047, -0.0296911430, 0.1203080490, -0.0212196708, -0.0913038105, 0.0027542789, -0.0957321525, -0.0196547061, -0.0608919710, -0.1646987349, -0.0658622831, 0.0151530299, 0.0901820585, -0.1561836004, -0.0209460892, 0.0515214168, 0.2003321946, 0.0176143367, 0.0796044022, -0.1777514219, -0.1534225792, -0.0767474174, 0.0251195617, -0.0207777191, 0.0933359489, 0.0694436505, 0.0340305120, -0.0023529283, 0.0528668165, 0.1306850910, 0.1362217218, 0.0076986346, 0.0088913376, 0.0068953815, 0.0753260851, -0.2376770526, -0.1843932867, 0.0666318610, -0.2821529508, -0.0181826819, 0.0186612271, 0.1052706242, 0.0619529597, 0.1735937148, 0.1551292986, -0.0472057872, 0.0029015890, -0.0513958894, -0.0891721696, -0.0239902791, -0.1255285293, -0.2048000991, 0.2900864482, 0.3423517346, 0.1153354123, -0.1165497601, 0.1117695719, -0.2040459812, 0.0103428895, 0.1068448424, 0.2540456355, -0.1269504279, 0.0199825950, -0.0068610241, -0.2196227163, -0.1902759373, 0.0456457809, -0.2738266885, 0.1155901849, -0.0257786009, -0.1254338622, 0.0498252921, 0.2719365954, -0.0799775273, 0.0215652343, -0.3344237506, 0.0549528152, -0.0966415182, -0.0511239730, -0.0015693067, 0.0442137718, -0.2687611282, 0.2825757563, 0.1378704309, -0.0282035079, -0.1475533396, 0.0585349128, -0.0123033691, -0.0814081654, -0.0886789337, 0.0889883935, 0.1406277269, -0.0419001654, 0.0191282015, 0.0910472274, 0.1074614227, -0.0387726352, -0.1229558736, 0.0912895873, 0.0853191540, 0.0059191459, -0.0020047948, 0.0033570419, -0.0480302572, -0.1896902621, 0.1012106240, -0.0244980957, -0.0001700984, -0.0347907208, 0.0542423762, -0.0176698249, -0.0329948477, 0.1063948497, -0.0230933242, -0.1309827715, 0.0264374521, 0.0291448236, 0.1144904792, 0.0730713084, -0.2360906899, -0.1600300521, -0.1764908284, 0.0228218194, 0.0168107990, -0.0620908923, 0.0610806271, -0.0473196320, -0.0647046641, 0.1401171535, 0.0345324166, 0.1092714891, 0.0185137242, -0.0317969024, 0.0083032977, 0.1122440547, -0.2004849911, -0.1651009321, 0.1021986902, -0.1987138540, 0.0543233193, 0.0642279461, 0.0062712040, 0.0199359488, 0.1226901487, -0.0017156876, -0.0248256437, -0.0328569263, -0.0946764871, -0.0678267479, -0.0762658641, -0.1430650502, -0.1542471796, 0.0660784617, 0.1746763736, -0.0364996418, -0.0756519809, -0.0285900626, -0.0463124327, -0.0129167959, 0.1879979223, 0.1455067694, -0.0940249488, -0.0822473690, 0.0132098794, -0.0397542827, 0.0560747012, 0.0717783943, -0.0675632730, 0.2204943746, -0.1359763891, -0.1805592924, -0.0074409032, 0.0242453683, -0.1634068638, -0.0755857900, -0.2474123985, 0.1313572377, 0.0449703149, -0.1471042037, -0.0337686799, -0.0379248038, -0.3939953744, 0.0094069326, -0.0061795488, -0.2240272164, 0.0465109237, -0.1541460007, -0.0214067679, 0.0611747652, -0.1340239495, 0.0387959704, 0.1017358676, -0.0839684457, -0.0857855976, 0.0995733216, -0.0525556020, 0.0432575792, -0.1108317301, 0.1902170181, -0.0237775743, -0.0105851255, -0.0967586562, 0.1739585251, -0.0105050756, -0.0296218358, 0.0741800442, -0.0355004482, 0.0557934307, 0.0103981365, 0.1056101769, -0.0803559646, -0.0237146001, 0.1184502319, 0.0318468325, 0.0124124866, 0.0537089370, -0.0150623806, 0.0112589942, 0.0536178797, -0.0468828790, -0.2705842555, -0.1600538194, -0.0403505713, -0.0039407564, -0.0322934911, 0.0618811026, 0.0571924038, -0.0647416636, 0.0419226699, -0.0771404058, -0.0494378097, 0.0254978463, 0.0413618721, 0.0663400888, 0.1530258507, -0.0862061009, -0.0689350814, 0.0541329309, -0.0676409006, 0.0517293587, 0.0473490842, -0.0378876179, -0.0903849825, 0.0894482881, 0.0304627642, -0.0580190197, -0.0850481540, -0.0275559388, -0.1730060875, 0.0409014933, -0.0267057102, -0.0792872757, 0.0030778693, 0.0062651718, -0.0674517080, -0.1043806821, 0.0454071239, -0.0046750107, -0.0820697173, 0.0453793742, -0.1175094023, 0.0219932143, -0.0577495806, 0.1193220317, -0.0814112350, 0.0445490181, -0.1149648279, 0.0274208300, 0.1543171853, -0.0695699826, -0.0503927283, 0.0148125449, 0.1125578880, -0.2001130283, -0.1263449639, -0.1906988025, 0.0475334898, -0.0118328221, -0.1079770178, 0.1570826620, -0.1235216111, -0.2604076564, -0.0512423031, 0.1192204431, -0.0227220282, -0.0338490754, -0.0160600338, -0.0880496725, -0.0437733568, -0.2310430110, 0.0019699363, 0.1110689566, 0.0591828525, -0.1070158854, 0.0143492734, -0.0652470440, 0.0105315838, -0.0299015809, 0.0704227760, -0.0627855361, -0.0457163975, -0.0390885435, 0.1195303053, -0.0904846713, -0.0619407892, 0.2094131410, -0.1021465734, 0.0078685973, 0.1131618470, -0.0790328234, -0.1053857505, 0.0174380112, 0.0643530115, 0.0761445239, 0.0040093861, 0.0857853964, 0.0512452200, -0.1431915313, 0.1408003122, -0.0897431225, -0.2801419497, -0.0742005333, -0.0968578160, 0.0485747233, -0.0051372005, -0.0930176452, 0.0639066026, 0.0189977214, -0.0450788997, -0.0481821783, 0.1488162279, -0.0007048060, -0.0392843783, 0.0497134477, 0.0800979957, -0.0746521875, -0.0416126102, 0.1525417864, 0.0709554330, -0.0712825060, 0.0446228944, -0.0702150911, 0.0533821285, 0.1395323426, -0.0770645067, 0.0841347501, 0.0148862628, -0.0671987087, -0.0911858231, 0.1362900883, -0.2582618296, 0.0265286267, 0.1027625352, 0.0968405008, 0.0106276395, -0.0910183638, 0.1224509031, -0.1130076721, -0.1176253483, 0.1131067947, -0.4515505731, -0.0079708537, -0.0625406429, 0.1647962779, -0.0511736907, 0.0763355494, -0.0632573143, 0.0049926015, 0.1189507619, -0.1127029583, -0.1292904764, 0.0352928676, 0.0363276452, -0.2331025898, 0.0072494713, -0.1325457096, -0.0086260699, -0.0574813224, 0.0914457440, 0.0807164907, -0.1045196801, -0.0850216672, -0.0715739131, -0.0486718565, -0.2083765864, 0.0311729386, -0.0671057627, -0.0209547449, -0.1490738988, -0.2252622098, 0.0600082278, 0.0802315995, 0.0931852683, 0.0406653546, -0.0339526981, 0.0225840267, -0.0023985317, -0.0193890743, -0.1085242182, -0.0436043218, -0.0459920391, -0.1531405598, 0.1364823878, 0.0042161988, -0.0578965656, 0.2416732609, -0.1584068686, 0.0198385678, -0.1325011253, -0.0720262378, -0.1397285908, 0.0673112720, 0.0214240123, 0.0921032578, 0.0403782465, -0.1245124713, 0.0025247044, -0.0902939662, 0.0466055870, -0.0518834144, -0.1701300144, -0.0679583251, 0.0717757717, -0.0407333300, 0.0087041445, -0.0317517258, -0.0836245269, -0.0161622819, -0.0727872625, -0.1532008648, 0.0269462373, -0.0818019956, -0.0835144147, 0.0173933338, 0.0387347937, -0.1820359677, -0.0281913765, -0.0258094892, -0.0110788625, 0.0253053177, 0.1152833402, -0.0429389700, 0.0599411055, 0.0599640273, -0.1768254489, 0.0198697932, -0.0049867979, 0.0383100733, 0.0034659882, 0.0625435486, -0.1336262524, 0.0308755711, 0.0068782256, 0.0617169850, 0.0259121116, -0.0465114191, 0.1656523198, -0.0259384047, -0.2076116502, 0.0871173888, -0.4418811202, 0.0807456449, -0.0167973991, 0.0035848320, 0.0768332183, -0.0908427015, 0.1122173741, 0.0849657431, 0.0728594288, 0.0758800432, -0.0827985778, 0.1683513820, -0.1181972921, -0.1934783310, -0.1206851006, -0.0569985472, 0.0169138368, 0.0563490279, 0.0340794176, -0.0067587462, -0.0103710918, -0.0441722237, -0.0050902655, -0.0258616749, -0.0608644076, -0.1032677144, -0.1516604424, 0.0167824086, -0.1652673036, -0.0396916158, -0.0139759993, -0.0669754371, 0.0660375506, -0.0241868105, -0.0103742061, 0.1673967689, 0.0452792495, -0.0448272079, -0.0254705586, 0.0269584768, -0.0131202545, -0.1224164292, 0.0900901332, -0.0676317587, -0.0388206914, 0.0576995313, -0.0716843680, 0.1282544434, 0.0150246555, -0.0746588409, -0.0989435911, 0.1185816079, 0.1057620049, 0.0948964953, -0.0493106544, -0.0521647409, 0.1415280402, -0.1088553667, 0.0496862680, -0.0405409113, -0.1046237499, -0.1939395219, 0.1066609919, 0.0431534871, 0.0518566109, 0.0443274565, -0.0280929059, -0.0427144170, 0.0061090146, -0.1086398289, -0.0057711080, 0.0946588963, 0.0782473683, -0.0195833761, -0.0729996264, -0.0739167854, 0.1593935788, -0.0448474139, -0.0297306366, 0.0285430439, 0.0811798498, -0.0023739217, -0.0213823970, 0.0065332362, -0.1268919855, 0.1020457074, -0.0795763507, -0.0076377541, 0.0389305800, -0.0243485365, -0.0532023385, 0.0718723908, 0.1014874279, 0.0901268125, 0.0569954365, -0.0172955226, 0.1463314891, -0.0877980664, 0.0042154710, -0.0279295575, -0.3292000890, -0.0204135533, 0.0568257906, -0.0749165043, 0.0071915444, 0.0135994125, 0.1090423167, 0.0369014032, 0.1467803568, 0.0929573327, 0.0191910788, 0.1634191424, 0.0339499228, -0.0818069130, -0.0198053680, 0.0603638403, -0.1751848906, 0.0782238245, -0.2146529555, 0.0320209973, -0.1044542193, -0.1015266851, -0.0161950588, -0.0365865454, -0.0280759875, 0.0996331498, -0.0410603397, 0.1240028366, -0.0148386322, -0.1158386394, -0.0296744108, -0.0205157809, 0.0428565443, 0.1432292461, -0.0922803804, 0.0300689433, 0.0104858587, 0.0942951292, -0.0535552353, -0.0760040656, -0.0679251701, -0.1848037392, -0.0357649364, 0.0632291436, 0.0212597828, 0.0606558993, -0.0683480576, 0.1015833691, -0.0395416021, -0.0144721549, -0.1049051657, 0.0709315687, 0.0919975936, 0.0751239210, 0.0085845031, 0.0573602803, -0.0210475754, -0.1069501117, 0.0504457057, 0.0825313702, -0.0080060950, -0.3260577321, 0.1410137266, 0.0913069546, 0.1151580662, 0.0535904095, 0.0845599994, 0.0903733671, -0.1375041157, -0.0318539441, 0.0097795734, 0.0151452282, 0.0313905180, -0.1932688951, -0.1078966334, 0.0429677851, 0.1140192598, -0.0869898796, 0.1389376372, 0.1753769666, -0.0238355845, -0.0510299541, 0.1286735088, -0.0738745630, -0.0825329199, 0.0248420704, -0.0382375382, -0.0589956939, 0.0694970563, -0.0153473048, -0.1066286042, 0.1024206206, -0.0007307706, 0.0497658886, 0.1591908932, 0.1406053603, 0.1178979054, -0.0966020077, 0.1146774739, 0.0784336552, -0.0477178730, -0.1159574017, -0.0619751476, -0.0789168030, -0.0324516110, 0.0076330504, 0.0262468345, 0.0556062981, 0.0448916405, -0.0124169607, 0.1017209440, 0.0473859161, 0.0017536895, -0.0903527364, -0.0731471330, -0.0120861251, -0.2959938645, 0.0335346833, -0.2057968229, 0.0175903738, -0.0206059869, -0.0055195000, -0.0796564892, -0.0726729259, 0.0682499409, 0.2183894068, 0.0691927671, 0.0474675372, 0.0045358134, 0.0327216275, -0.1272766441, -0.1219162121, -0.1418264508, -0.0188767128, 0.0342607386, 0.2115308791, 0.0669920668, -0.0140053108, 0.0018627524, -0.0434369184, -0.0505709797, -0.0187281743, -0.1160662994, 0.0103512015, 0.1461278349, 0.0063878624, -0.0586039014, 0.0539094843, 0.0460591912, 0.0789338201, -0.1875615567, -0.0273094960, 0.1671322733, -0.0261191055, -0.0220607705, -0.0759770349, -0.1753404438, -0.1177700758, -0.0450930037, -0.0220168885, 0.0294068307, -0.1622498631, 0.0326896645, -0.0955823958, 0.0753976703, 0.0289006829, 0.0558170602, 0.0931127444, -0.1710944921, 0.1181468442, 0.1103551164, -0.0238310304, -0.0542471297, -0.1731469482, -0.0623662695, 0.0618583895, 0.1059792638, 0.0278021917, 0.1025775298, 0.1188574582, -0.0040577552, -0.1529703438, 0.2205453366, -0.1313057244, -0.0826727897, 0.0885404050, 0.0393747911, -0.0813903362, 0.0995782539, -0.0241244584, -0.0728000998, 0.0872927532, 0.0217969511, -0.0159522258, 0.1502735019, 0.0887591988, 0.0674023628, -0.0813224465, -0.0464644916, 0.1543219686, 0.0305637736, -0.1017502695, 0.0729967654, -0.1675376296, 0.1716583371, 0.1475297362, -0.0609949827, 0.0113603752, -0.0474801026, -0.0184535794, 0.1362262219, 0.1031705663, 0.0076096235, -0.2395934314, -0.0112681659, 0.0151152462, -0.2668890655, 0.0103044296, -0.2189884335, 0.1220993772, -0.0343786255, -0.0980033278, -0.1503800750, -0.1064762622, 0.1716298908, 0.1682855487, -0.0271888748, 0.1275363714, 0.1260498464, -0.0292522591, 0.0204639155, -0.2062078863, 0.0026656326, 0.0089150881, -0.0294086095, 0.2023275644, 0.0447509475, -0.0807123035, 0.1871551424, -0.0987692550, -0.0171090644, -0.0331789777, -0.0763873234, -0.0045872913, 0.0767599940, 0.1096995920, 0.1138325185, 0.0999159217, 0.0643463507, 0.0049331398, -0.1654484272, 0.0481399745, 0.0674823821, -0.1034548134, -0.1044732109, -0.0319534242, -0.1293355376, -0.0822816566, 0.0164468084, -0.0599078797, 0.0130053489, -0.0883848816, -0.0677667707, -0.0780118331, 0.0081240674, 0.0439742766, -0.0858924016, 0.1532279402, -0.1790948808, 0.2052618563, 0.0063086511, 0.0340464190, 0.0994067267, 0.0011510365, -0.3235862255, -0.0640948713, -0.0357784890, 0.0492078401, 0.0339490101, -0.1203902289, -0.0986599028, -0.0619642958, 0.1143842787, -0.0395671390, -0.1201395243, 0.1253310591, 0.0174778979, 0.0240707975, 0.0004222759, -0.0063152378, -0.1177471429, 0.0581168644, 0.0838757679, -0.1080415100, 0.0581102595, 0.1944614798, -0.0140311681, -0.1412067711, -0.0465717651, 0.1535747200, 0.0822161660, -0.0264953449, 0.0238385107, -0.2003822029, 0.1059609577, 0.0583045296, -0.1005524322, 0.0656865612, -0.0958419368, 0.0007108687, 0.0077896789, -0.0669246241, 0.0946275741, -0.2416704446, 0.0439202897, 0.0510120876, -0.0092597315, 0.0847414806, -0.3707111180, 0.0237505902, 0.0363003686, 0.0002720262, -0.0485083871, -0.0573371910, 0.0359918773, 0.1092653200, -0.0582887679, 0.0779582039, 0.0537716001, -0.1029843837, 0.1006837785, -0.0283291247, -0.0584194884, -0.0353337564, -0.0886310190, -0.0410334133, 0.1100940481, 0.0765822455, 0.1350636184, -0.0441328585, 0.0431939512, 0.1139550880, -0.0502831973, 0.1043259427, 0.0993787423, -0.0120516662, 0.0086850766, 0.0804543495, -0.0528203994, 0.1170138791, -0.0838307366, 0.0974123850, -0.0862839594, -0.0602663308, -0.0438026264, 0.0138878664, -0.1386438757, -0.0269043352, 0.0211314447, -0.0776107013, -0.0168688986, 0.0450021140, -0.1654726714, -0.0262205172, 0.0039842459, 0.0215804260, -0.1116441265, 0.1231416017, -0.1024902239, 0.2323769629, -0.0224443935, 0.0493310876, -0.0643293187, 0.1233386472, -0.2069390565, 0.0859695151, -0.1632254273, -0.0016802860, -0.0461882427, -0.0329304151, -0.0575649999, 0.0545013659, 0.1755656302, -0.1124334410, -0.1242861822, 0.0077183233, 0.0933143348, 0.0705851540, -0.0115900775, 0.0464487076, -0.0241313223, 0.0008335461, 0.1308737993, -0.0205004662, 0.1176620945, 0.1166393012, 0.1613225788, -0.1178468838, -0.2256850153, 0.0827758610, 0.1179048866, -0.1331220269, -0.0329650342, -0.1383178085, -0.0401715264, 0.1251343042, -0.0958154798, -0.1438681483, -0.0386501811, -0.0710732639, 0.0730271786, -0.0152275926, 0.1647529751, -0.0448046252, 0.0415836051, 0.0932662636, 0.1885594726, 0.1354492605, -0.0961150005, -0.0118635800, -0.0032404142, -0.1068755463, 0.0064380411, -0.2235657573, -0.1736543328, -0.0994443521, -0.1181530133, 0.2092721760, 0.1193958893, 0.0269889459, 0.1312634647, -0.1320458204, 0.0006341543, -0.1439150125, -0.1079459935, -0.1986554116, -0.0083414596, 0.1429852843, 0.0503991581, -0.1734077185, 0.0860920995, 0.1392464489, -0.1747323275, 0.1360907257, 0.0991476700, 0.0728046522, 0.0051256251, 0.0760420263, -0.0206382331, 0.0216445085, 0.0116840396, -0.0127011705, -0.0279156435, 0.0101454146, 0.0942095146, 0.1142091900, -0.0844574049, 0.0407343991, 0.0155718476, 0.0557075664, 0.1635018438, 0.1585328132, -0.2768615782, 0.0099869380, -0.0822797716, 0.1287150681, -0.0389767811, -0.1255929023, -0.1998486966, 0.1373330206, -0.0540457629, 0.1042672247, -0.0066734222, 0.0186399128, 0.0095796920, 0.0273728035, -0.0595252998, -0.1474673152, -0.0584760867, -0.0739629269, -0.1808111221, 0.1116351038, 0.2045622021, 0.1074221879, -0.0787925944, 0.0671049878, 0.1097975597, 0.0323851928, 0.0285973530, -0.0606961697, -0.0359207503, 0.0337972939, 0.1129591838, -0.0691003427, -0.0571956486, 0.1373815387, 0.1655434370, 0.0557007156, -0.0088353679, 0.2018669844, 0.0705111921, -0.1022135019, 0.0995758623, -0.0826488063, -0.0165296867, -0.0512936339, -0.0177708641, -0.2223903835, 0.0907558352, -0.0027896268, -0.0923419371, -0.0659429729, -0.0199210141, 0.0301714521, 0.0753950104, 0.0571449064, 0.1783987731, 0.0532636866, 0.1685271561, 0.0843763724, 0.0289927889, -0.0132620540, 0.0553651564, -0.2489701509, -0.0627302751, -0.0920075104, -0.1251728833, 0.0708379820, -0.0182308778, 0.0016015962, 0.1060746759, -0.1253682822, 0.0383641236, -0.1373624504, -0.0911866054, -0.4011391699, -0.0116054406, 0.1893552691, -0.0657695308, -0.0515662394, 0.0694393814, 0.0606958754, -0.2034756392, 0.1317764223, 0.0840511993, 0.1507764161, 0.0134495040, -0.0563450679, -0.0709689334, 0.0331911147, 0.1663378328, -0.0501459278, 0.0620849989, 0.0520910881, 0.0071837297, 0.0876326635, -0.1157990396, -0.0163992103, 0.0137169659, 0.1029506549, 0.1204574928, 0.0685745180, -0.1723733544, 0.1186561212, 0.0377833955, 0.0761820301, -0.0911531672, -0.1341695637, -0.0481799208, 0.0651795268, 0.0591757037, 0.1557414085, 0.0517552905, 0.0811212733, 0.1629260182, 0.0339068361, 0.0613430329, -0.1670354605, -0.0454921685, 0.0140176956, -0.1935859770, 0.0311641358, -0.0284870043, -0.0099396473, -0.0611987039, -0.0079459697, 0.0154445004, 0.0315155536, -0.0392252542, 0.0979253724, 0.0234641396, 0.1932454109, 0.0618969761, -0.0013533661, -0.0441941433, -0.0374232568, 0.1337085962, 0.0849248916, 0.1561055034, -0.0247147586, 0.0172544792, 0.0324231572, -0.0031353340, -0.0625493377, -0.0227914844, -0.1897905320, 0.1071863398, -0.3151867390, 0.0564761497, -0.2045270205, -0.0223493334, 0.0074168378, 0.0358798765, -0.0103971818, 0.0304586794, 0.1008196622, 0.0778980106, 0.0938310921, 0.1685474217, -0.0096652564, 0.1133520082, -0.1280043870, 0.0303231589, -0.1594277173, -0.0541025288, 0.0595855638, -0.0392310284, -0.0293191802, -0.0071541388, 0.0654521957, 0.1784779429, -0.0381580852, -0.0270841420, -0.1330249310, -0.0858452767, -0.1928555667, -0.1512684226, 0.0476026312, -0.0951384380, 0.0369507112, -0.0656738654, -0.1985280514, -0.1890308261, 0.1144563481, 0.0331791230, -0.0019555308, -0.0002705800, 0.1389483213, -0.1961015761, -0.0714679807, 0.0802241340, 0.0605018698, 0.0254766494, 0.0785559639, -0.0001951010, 0.1146647781, -0.0041755755, -0.1141389087, -0.0169718768, 0.1029950231, 0.1386912763, 0.1252087951, 0.0893023238, 0.0836602300, 0.0105898129, 0.1767891645, -0.2180662006, -0.0563743971, 0.0190500654, 0.1484198123, 0.1357057989, 0.1419765055, 0.0500898249, 0.1472747624, 0.0927380696, -0.0142039051, 0.0484246612, -0.2040109038, -0.0547042117, 0.0165366028, -0.0440527014, 0.0993780568, -0.0554735586, 0.0104669780, -0.0992271826, 0.0203273203, -0.1101511493, 0.0539373830, -0.0443992354, 0.1187513769, -0.0374568924, 0.1000096202, -0.0309890956, -0.0917919502, 0.0983462259, 0.0085459771, 0.0900869370, 0.2462801933, 0.1311926544, -0.0718547851, -0.0250920840, 0.1795665026, 0.1010487452, -0.1585555077, -0.0553127378, -0.2089720070, 0.0822028816, -0.2867798209, 0.0166206229, -0.1052668765, -0.0125897378, -0.1007333249, 0.0097323759, 0.2348902076, 0.0649449900, -0.0163483378, 0.0530394390, 0.0963907540, 0.0729203597, -0.1860014647, -0.0163478609, -0.0918363705, 0.1022644415, -0.0735677704, -0.1034278125, 0.0930334181, -0.1560021788, 0.0357741565, -0.1295804828, 0.1017609462, 0.1615070105, -0.0871417522, 0.1502416879, 0.0542248525, -0.0231224541, 0.0396125801, -0.1420880705, 0.0511417240, 0.0220880564, 0.0882393047, -0.0615335517, -0.2601079047, -0.1812490821, 0.0964669511, 0.0394479223, 0.0063400827, -0.0424309373, 0.1659031957, -0.0429421142, 0.0303708632, 0.0364453308, 0.1115978062, 0.0686800182, 0.1076239944, 0.0629871339, 0.1728408635, -0.0177327152, -0.0510273725, 0.0540575162, 0.1089416072, 0.0988358855, 0.0182473119, 0.0402372256, 0.0484335497, -0.0506972633, 0.0944879055, -0.1170220152, -0.1542905420, 0.0035343533, 0.0873631462, 0.2144339085, 0.1962285489, 0.1585492343, 0.0137705496, -0.0647214726, -0.0709918514, 0.1696283221, -0.0185257681, 0.0356289335, 0.0715546757, -0.1473880261, 0.0662593096, -0.1134927347, 0.1017342135, -0.1690673530, 0.0117820492, -0.1748792827, -0.0171440858, -0.0539416075, 0.0514556319, -0.0521508306, 0.1153231189, -0.0715481639, 0.0732016712, 0.0769847631, 0.1240329817, 0.0271674395, 0.0953905731, 0.1924533844, -0.0345822833, -0.0024091930, 0.1896881312, 0.1795188189, -0.0070899744, -0.0276540089, -0.0368308313, 0.2052747160, -0.4023711085, -0.0192889608, -0.0709023997, -0.0351717994, -0.0388302580, 0.0077323904, 0.2150903940, 0.0308668837, -0.0409113728, 0.0471255705, 0.0989896059, 0.0786380097, -0.0877543017, 0.0315247364, -0.0263458248, 0.0585970990, 0.1111065298, -0.0103742452, 0.1403495222, -0.1502630711, 0.0664433911, -0.0712383613, 0.1213782355, 0.0973433256, -0.0606637038, 0.0101164430, -0.0339205638, -0.0676519424, 0.0673602819, -0.0725974217, -0.0226114616, -0.0019689237, -0.0946868584, -0.0421208814, -0.4136898816, -0.1361210495, 0.0193398297, -0.0840857551, 0.0201236494, -0.0607995242, 0.1021700129, 0.0099724466, -0.0401613154, -0.0772990435, 0.0895700678, -0.0337694325, 0.0303052757, 0.0519944429, 0.1394756138, 0.0777951181, -0.0353469960, -0.0039141634, -0.0016485377, -0.0508874767, -0.1742421687, -0.0955686793, 0.0221582111, 0.0183619708, 0.0829532817, -0.2446766049, -0.1567925066, 0.0218144879, -0.0346679389, 0.1923436970, 0.1083032563, 0.1745740324, 0.0901420712, -0.0653740689, -0.0564964674, 0.1251176596, 0.0252194274, 0.0997107252, 0.1360740215, -0.1230097786, -0.0057275780, -0.0320750698, 0.0860713124, -0.1666093022, 0.1769205630, -0.1470210403, 0.0350194946, 0.0851506218, 0.2203773409, -0.0276292749, 0.1825271845, -0.1299907863, 0.0664813742, 0.1558185071, -0.0230449662, -0.1097060889, 0.1758344024, 0.0738508925, -0.1161162332, 0.0521507338, 0.0627726093, 0.1190756038, -0.1234294698, 0.0285330415, 0.0572306626, 0.1133621559, -0.3262213469, -0.0450630561, -0.0499282815, 0.0929305777, -0.1060155779, -0.0267982129, 0.2013842762, -0.0121144643, -0.0440934077, -0.0203681644, -0.0001832429, -0.0774153322, -0.0213634726, 0.1219347492, 0.0311932582, 0.0119010396, 0.1141620576, 0.0406229906, 0.0579517521, -0.2117230147, 0.1190898269, -0.0970571190, 0.1507996023, 0.0148728043, -0.0684034452, 0.1138167232, 0.0207641944, 0.0109121632, -0.0390035994, -0.0535269901, 0.0349813700, -0.0230800845, -0.0571419820, -0.0523673333, -0.4887694120, 0.0035727704, -0.1659095287, -0.0315588713, -0.0594016537, -0.0195036065, 0.0869617537, 0.0312490780, -0.0730404854, -0.0621644855, 0.1283390522, -0.1104122549, 0.0359838493, -0.0608965345, 0.0687402338, 0.0100548668, -0.1325496137, 0.0341936909, 0.0091114584, -0.0080871591, -0.1859118640, -0.1454900801, 0.0589849465, -0.0682960302, -0.0657502338, -0.1140791401, -0.1427846998, 0.0428522341, 0.0932621956, 0.2103270739, 0.0708201379, 0.1618495584, -0.0846962556, -0.1411729008, -0.0498454086, 0.1813992709, 0.0164925717, 0.0053133182, 0.0907723233, -0.1271314621, -0.0268546287, 0.0080701103, 0.1135537997, -0.0308538191, 0.1224402189, -0.1012961492, -0.0112488205, 0.0173578039, 0.0718236566, -0.0894163400, -0.0011040928, -0.1184605882, -0.0792780966, 0.1977485865, -0.1006271541, -0.0089682462, -0.0113020791, 0.0255134329, 0.0042631095, 0.1186545491, 0.1507562995, 0.1442616582, 0.0310329814, -0.0106931133, -0.0280781314, -0.1314403564, -0.5620874763, 0.0645428821, 0.0169644207, -0.0061673652, -0.1171860546, 0.0529390872, 0.1038858891, 0.0305640381, -0.0438149907, 0.0194412768, -0.0258683469, -0.1909871250, -0.1705486625, 0.1122142300, 0.0381197855, -0.0618185811, 0.1534667909, -0.0086383857, -0.0404723734, -0.1605948955, 0.1079677790, 0.0018023027, -0.1015147790, 0.0583874285, -0.0495547354, 0.1197380498, -0.0241655186, 0.0257948358, -0.0409495011, -0.1254945695, -0.0342350751, 0.0771203116, -0.0905119851, 0.0041665421, -0.3163718879, -0.0237761829, -0.0964796394, -0.0391116440, 0.0307078883, 0.1013658345, 0.0958474353, 0.0115165906, -0.1109560952, -0.0250130091, -0.0094952025, -0.0372484066, 0.0657174215, -0.0779515877, 0.0869569033, 0.1744251698, -0.0416300707, 0.1249867007, 0.0260090679, 0.0405766182, -0.0181735940, -0.0947954506, 0.1188883707, 0.0235687625, -0.0062843165, -0.1101412550, -0.1208473966, 0.0516800135, 0.1225979924, 0.2173948735, 0.0115859592, -0.0053174482, 0.0439433567, -0.0621912479, -0.0342363045, 0.0713460594, 0.0601782165, 0.0556672961, 0.0652384460, -0.0562207289, 0.0177169684, -0.1251017600, 0.1055543199, 0.0055931844, 0.1110088229, -0.1825579256, -0.0000260871, 0.0805030838, 0.0841355994, -0.0302555766, 0.1214045659, -0.0929076448, 0.0934780166, -0.0073862458, -0.0136086456, -0.1624645889, -0.0092746848, -0.1155120060, -0.1884415150, 0.1360053569, 0.0993281156, 0.0216251500, 0.0274229348, -0.0561744943, -0.0093611525, -0.2914360464, -0.3868392706, 0.0124068921, 0.0513849817, -0.0478040799, -0.0599626042, -0.0043381937, 0.0630125478, 0.1156945080, -0.1983957440, -0.0423534885, -0.0159545839, -0.1203065664, -0.1710695326, 0.0987244099, 0.1049991399, -0.1827280819, 0.0256757215, -0.1584947109, 0.0140483957, -0.0409070961, 0.0250779670, -0.0295608807, -0.1854974777, 0.1105988920, 0.0133713763, 0.0877036899, 0.0636409521, 0.0464234091, -0.0860548168, -0.0070105540, 0.0232607368, -0.0365635753, -0.0351532139, 0.0481673479, -0.2415897101, -0.1276484281, -0.1174220517, 0.0230205394, -0.1509632915, 0.0544418171, 0.0555333085, 0.0262299050, 0.0604957566, 0.0623527579, 0.0151895275, 0.0112215113, 0.0798153803, -0.1129963920, 0.1669376045, -0.0254802909, 0.0242807362, 0.0507761799, -0.1470889896, 0.0193912592, 0.0027037733, 0.0453754403, 0.0130135799, 0.0282239206, -0.0954087377, -0.1683391482, 0.1270141900, 0.0685415491, 0.0189597290, 0.0904192179, 0.0619377829, -0.0985208005, 0.1039475277, -0.1098688766, -0.0270962641, 0.1025229096, -0.0038094220, 0.1018820629, 0.0210389402, -0.0008194116, -0.0082408739, -0.1284175217, 0.0698604360, 0.0290223286, -0.0385649055, -0.0776502788, 0.0631845593, 0.1069094390, 0.0446148515, 0.0903921425, 0.0152212558, -0.0826872662, 0.0919196680, 0.0097727105, -0.0582259707, 0.0040763384, -0.0702950805, -0.1232090965, -0.3348710835, 0.1578924507, 0.0642852783, 0.1591833383, -0.1336449385, -0.1740068942, 0.0642474890, -0.1979570240, -0.3300547898, -0.0332015008, 0.0964143425, -0.0502146296, -0.0141955661, 0.0562006980, 0.0283454061, 0.0632895082, -0.0300225187, 0.0624512509, -0.0658891574, -0.0967754573, -0.1001155525, -0.0392105095, 0.0594713129, -0.3051554859, -0.1168184429, -0.1837807745, 0.0264910720, -0.2606602907, 0.0088905683, 0.0084311813, -0.2373565137, 0.1571505517, 0.0410753675, 0.0336336009, 0.0955032855, -0.0867123008, -0.0731481910, -0.0379095264, -0.0442321263, 0.0568389781, -0.1052158251, 0.0862420499, -0.0980374515, -0.0532396473, 0.0145532200, -0.0043914774, -0.0462993346, -0.0475366637, 0.1335876286, -0.0434606634, 0.0614814907, 0.0608475693, 0.0186048988, -0.0203620233, 0.1121495292, -0.0741840750, 0.2064521015, 0.0728962868, -0.1441805214, 0.1083246022, -0.0873581842, 0.0387937948, -0.0754105970, 0.1446601450, 0.0973415226, 0.0269679055, -0.1222524345, -0.1684853137, -0.1042702869, 0.0620106421, 0.0406480283, 0.1433525234, 0.0485566519, -0.0761327296, -0.0167265721, -0.0894451663, -0.1753419191, 0.0310922768, -0.0379993431, 0.1542534232, -0.0518407561, -0.0774508715, -0.0315550752, -0.1396352053, 0.0717696995, -0.0245865379, 0.0126807904, -0.1287811697, 0.0247835089, 0.0059546730, 0.1059016362, -0.0268448722, -0.0228778794, 0.0350143313, 0.0446631052, 0.1464509964, -0.0342801698, -0.0085163862, 0.0513642468, -0.1472038925, -0.2631336749, 0.1348316222, 0.0504759476, -0.0031278497, -0.0867045447, -0.0953755379, -0.0204461310, -0.1680558324, -0.3536345661, 0.0874446034, 0.0173294619, 0.1669793874, -0.1692320704, 0.2301575541, 0.0600029342, 0.1625115722, 0.0815647691, 0.0269492343, -0.0778019577, -0.1008053049, -0.1699852943, 0.0367822237, 0.1806601435, -0.3070796728, -0.0411182232, -0.0359259024, 0.0041404446, -0.4128948748, -0.0089547783, 0.0098022195, -0.3670356572, 0.0365895070, -0.0195361730, 0.0086912243, 0.0732550398, -0.0183825605, -0.0244876388, 0.1042850018, -0.1760707498, 0.0775123760, -0.2222509682, -0.0487598963, -0.1248644739, -0.0172194205, -0.0792634562, 0.0279249772, -0.0062478236, -0.1222356558, 0.0471296348, 0.0307478365, -0.0420358106, 0.0423831418, -0.0631055683, -0.0491431989, 0.1325594336, 0.0131268911, 0.2746532261, -0.1341689527, -0.0273892991, 0.0432575084, -0.0042774738, 0.1241619438, -0.1215106398, 0.0308537800, -0.0337561779, 0.0808504522, -0.0071059591, -0.0742346570, -0.0429410227, 0.0552823693, -0.0074072732, 0.1657414138, 0.0598511957, 0.0370917097, 0.1654212326, -0.0920973644, -0.0766326338, 0.0609257668, -0.1126481816, 0.1121341363, -0.0543661490, -0.1228102371, -0.0060041510, -0.1587043107, -0.2018012255, -0.0288067292, -0.0950322300, -0.0199439768, 0.0211870465, 0.0695473626, -0.0304456223, 0.0134402402, -0.0309329070, -0.0146869104, 0.1373348385, 0.0854281411, 0.1591586471, -0.2268166840, -0.0894946828, -0.1907350719, -0.2620783746, 0.0854704902, -0.0983554572, 0.1681154370, 0.0231677331, -0.1008129865, 0.1780023128, -0.1651714295, -0.2328417152, 0.0860295668, -0.0393447392, 0.1687888503, -0.2762974799, 0.1428283602, -0.0036245638, 0.1149130911, -0.0125509566, 0.0508813001, -0.0910684913, -0.1014117673, -0.1937035024, 0.0119030830, 0.1064570174, -0.2090525627, -0.1161970869, 0.1342237145, 0.0744046122, -0.1927693486, -0.1302137375, -0.0512526594, -0.4177342653, -0.0782020688, 0.1528606564, -0.0113376360, 0.1127350777, 0.1987363100, -0.2116122842, 0.0265932679, -0.2834447920, 0.1521761715, -0.1604662091, 0.0430172980, -0.1783167273, 0.0542520136, -0.1098504663, -0.0437644683, 0.1813108623, -0.0372994505, 0.1008063331, 0.1465829164, 0.0923931673, 0.1154217571, -0.0726009309, 0.0015528250, 0.1895702630, -0.0029540183, 0.1992150992, 0.0175797194, 0.0193352215, 0.0621680655, -0.1596745402, 0.0892171040, -0.0677151456, 0.1007611156, -0.0747324675, 0.0395926349, -0.1171732247, 0.0746968165, -0.0364218131, 0.2290073335, 0.0474331826, 0.1136990041, -0.1993531436, 0.1337485909, 0.1504674703, 0.0941819698, -0.1316900551, 0.2938097417, -0.0862989724, 0.1233141273, -0.2444408685, 0.0594945550, -0.0301727746, -0.3435717225, -0.2418839186, -0.0119622368, -0.0640360340, 0.0810708255, -0.0540430509, -0.0401387252, 0.3108861148, 0.2426524609, -0.0241611581, -0.1279495507, 0.0462242924, -0.1747085154, 0.0627008006, -0.2543315589, -0.1369919032, -0.4177661538, -0.0782742798, 0.2398378998, -0.2724234760, -0.1546400785, 0.1157874987, 0.0046251640, 0.0978780016, -0.1799151152, -0.2203441858, 0.1481242329, -0.1347668618, 0.2707816362, -0.2417980880, 0.0100522181, -0.0949380696, 0.0069175102, 0.0944122747, 0.1953873336, -0.1324499249, -0.0846860260, -0.1318482608, -0.2788334191, 0.0168323480, -0.2430063486, -0.4175838828, 0.2031268775, 0.1002807021, -0.0599165261, -0.2703095078, -0.0348355286, -0.1654201001, -0.0844489336, -0.1262643188, 0.2990513742, 0.1529157609, 0.1117634997, 0.0033849042, 0.1007144079, -0.2163168341, 0.1362879872, -0.0905913338, 0.0613800213, 0.0417477302, -0.0099422392, -0.1616385579, -0.1661932170, 0.0799908042, 0.0239365790, -0.0137033397, 0.0888885632, 0.2249753922, 0.0160224773, 0.0485243537, 0.0685723349, 0.2715536058, 0.0210010223, -0.0007307557, 0.0955780670, -0.0308294464, -0.0086727282, -0.0305885691, 0.0021385429, -0.0518160462, 0.1927425414, 0.0203794576, 0.1029899120, -0.2519398034, -0.1768900603, 0.1093884706, 0.1616058648, 0.0285826940, 0.0993902981, -0.1839107573, 0.0722860470, 0.1290103942, 0.0985768810, -0.0161371231, 0.2038699090, -0.0568296202, 0.2123987526, -0.0631122887, -0.0460223593, 0.1984094530, -0.0863239840, -0.2503531277, 0.0306873284, -0.0099067669, 0.0428372137, 0.0764977038, 0.0718828142, 0.3708854318, 0.1197993904, -0.1629703939, -0.0582464375, 0.0015167961, -0.1793027818, 0.0709028170, -0.0874341950, -0.1678230017, -0.0963369459, 0.0065558190, 0.1700254828, -0.1208023950, -0.1587455720, 0.2414189875, -0.1310069710, 0.0177075285, -0.0630673990, -0.0793612450, 0.1448734552, 0.0417737402, 0.2358178198, -0.2177315503, 0.0221805312, 0.0026512952, 0.0540190227, 0.1194238588, -0.0124950446, -0.0522907935, -0.0762688220, -0.0960029140, -0.1877377480, -0.1252564937, -0.0051732943, -0.1444029212, 0.1117369086, 0.1506998539, -0.1096881628, -0.0117068654, 0.0455242023, -0.1393009573, -0.0406707972, -0.0740533173, 0.2926714420, 0.0595888831, 0.1056948453, 0.0346744135, 0.1037807688, 0.0129970107, 0.2715697289, -0.0149102258, 0.0054486063, -0.0895709842, 0.0508955680, 0.0190025140, 0.1885996610, 0.0743138641, -0.1299741268, 0.0546353720, 0.0130041456, 0.0529447310, 0.0708754435, 0.1435400695, -0.0038686225, 0.1874478608, 0.1220225096, 0.0906407833, -0.0562462546, 0.0837067589, 0.1184990704, -0.0520580709, 0.0783989206, 0.0566398166, -0.0482232235, -0.0175439883, 0.1811127365, -0.1211167350, -0.1428310573, 0.0201590545, -0.1198879853, 0.0184255764, 0.0722849518, 0.0314147957, 0.0308935717, 0.0507889912, -0.0806216672, 0.0466588177, 0.1569653898, -0.0534997135, 0.0835375562, 0.0149388965, 0.0156101454, 0.1519399434, -0.0949616060, -0.0647777990, -0.1069824249, 0.1974861771, -0.0318270884, -0.0065270141, 0.0934367999, 0.1602271944, 0.0474959537, -0.2374013811, -0.1048456803, 0.0069893766, 0.0021734464, 0.0332923010, 0.0260057729, -0.1012031659, 0.0578141212, 0.1157063022, 0.3064147532, 0.0316516235, -0.1825525612, 0.1924257427, -0.0497979075, 0.2169601172, -0.1261930615, -0.0937454998, -0.0633084252, -0.0284840092, 0.0353415459, 0.0354007445, 0.1658127904, 0.0259838477, 0.1472563148, 0.1982634217, 0.0230575632, -0.0726700202, -0.0737864077, -0.0057285391, -0.0570363849, -0.0905146077, 0.0554214083, -0.1123149693, 0.1135104969, -0.0205078647, -0.0480277762, 0.2224769741, -0.0854577422, 0.0166706294, 0.0677634478, -0.0472936556, 0.2459183186, -0.0931339189, -0.0168560408, -0.1121454388, 0.1058100611, -0.1383735836, -0.0896716192, -0.0576653294, -0.0265794843, -0.1808712929, 0.1109906211, 0.1196631268, 0.1605752707, -0.0522406474, 0.0125016375, 0.1062807590, 0.0102714775, 0.0936607867, 0.0914236009, 0.1931355596, 0.0426197238, 0.1863029003, 0.0526254177, 0.2047986388, 0.1086795628, 0.0765755251, -0.0299846642, 0.0491719656, 0.1706159115, -0.0741700381, -0.0123300608, -0.0555198602, 0.1764255613, 0.1707596332, 0.0784643665, 0.0547087453, 0.0724393502, 0.1175863817, 0.0631387085, -0.0381818302, 0.0492383838, 0.1754105389, -0.0690645650, -0.1097879708, 0.2383892089, -0.0082483580, 0.1273874342, -0.0914353505, -0.0215083882, -0.0648828149, 0.0817911997, 0.1082149222, 0.0060781683, 0.0286371429, -0.2294890732, 0.0326468498, 0.0434319638, 0.1227312312, -0.0731097087, -0.0976843238, -0.0754576996, -0.0029356501, 0.0243155770, -0.0409671925, -0.0456209108, -0.0631854236, 0.0148524838, 0.0856142938, 0.1748586744, -0.2147240639, 0.0375850014, 0.1385621876, 0.0652946532, -0.0003928732, -0.0762464032, 0.0040827021, 0.0783385187, -0.0354136452, 0.1527020484, 0.0051977918, 0.1992025226, 0.1337721497, 0.0341709778, 0.0612060539, 0.1866654456, 0.1698859632, 0.0765472502, 0.0572727397, -0.0510792807, -0.0246116985, -0.1539318115, -0.0452001542, 0.0187293366, -0.0204160698, -0.1240265295, -0.0667268634, 0.0495893471, -0.0974895880, 0.0501174666, 0.1460123509, 0.1793842465, -0.0110435979, -0.0238674916, -0.0079343459, -0.0079093399, -0.0426023453, -0.0040628356, -0.0122814253, -0.0504583754, -0.0722008869, 0.0703274235, 0.1011177599, -0.0340645537, -0.0178040620, 0.0416056514, 0.0570022427, 0.1141842231, -0.0952846631, -0.0133154513, -0.0560387783, 0.0267397594, -0.0123809353, -0.0394631512, -0.0065913424, 0.0335056931, -0.0739114434, -0.0296591111, 0.0390444845, -0.0550802574, 0.0445074514, 0.0325171500, -0.0703630224, -0.0307934266, 0.0071830526, 0.0302366409, 0.1273203492, -0.0357325077, 0.0137022892, 0.0387367755, 0.0269234926, 0.0210597143, 0.1242534816, 0.0445419997, -0.0499648526, 0.0232558623, 0.0317269079, -0.0735782757, 0.0262176804, -0.0835349485, -0.1039282233, -0.0322488174, 0.0205469113, -0.0120369308, 0.1200663075, 0.0315891691, -0.0046506971, -0.0086667072, 0.1248279437, 0.0323248841, 0.0146118468, -0.0056751496, 0.1108076572, 0.0067306547, -0.0769997239, 0.1330096275, -0.0465067588, -0.0228705034, -0.0269032903, 0.0038320033, 0.0755298883, -0.0221289936, -0.0340794288, 0.0732874274, 0.0359345153, 0.0216864087, -0.0188064799, 0.0666670427, -0.0439503714, -0.0383764617, -0.0286451168, -0.0688915402, -0.0788483471, 0.0478217565, -0.0235520732, 0.0292455982, 0.0423117168, -0.0055338070, 0.0600854382, 0.0283948481, -0.0628112182, -0.0765040815, -0.1178418621, -0.0458032824, 0.1413306445, 0.0381051041, 0.0877289474, -0.0379561484, -0.0553010330, 0.0814007893, 0.1080537364, 0.0215812065, 0.0394103639, -0.0153547674, 0.0813606605, 0.1226598099, 0.1081489548, 0.0303675923, -0.0208553337, -0.0527909659, -0.0383559726, 0.0774868578, 0.0366493762, 0.1535541564, 0.2487452477, -0.0662050024, 0.0539391562, -0.0033477435, -0.0632893443, -0.1112392992, -0.1261016726, 0.1344182640, -0.0391427130, -0.0989076123, 0.0195694249, -0.0921279415, -0.1337940395, 0.1987236589, 0.1145810932, -0.0955448151, 0.0281351637, 0.0204271097, -0.1003467962, 0.0047210250, 0.1607799977, 0.1172735542, 0.1074790582, 0.0004273931, 0.0330760852, 0.1387284696, -0.0726661310, 0.0619585067, 0.0335650295, -0.0791184306, -0.1527675837, -0.0524344221, 0.2358074933, -0.0613587163, -0.0385958254, -0.0725785345, -0.1196267009, 0.0674058720, 0.0313912965, 0.1188315749, 0.0687439591, -0.0848614499, -0.0392228924, -0.0946883485, 0.0746564195, -0.0911219791, 0.1385547966, 0.1688987315, 0.1771056205, 0.1120037064, -0.0948489308, 0.0918013155, -0.0513724051, 0.0074059153, 0.1802366674, -0.0571016818, 0.0878665373, -0.0145173995, 0.0460394919, 0.1475052088, 0.0117477514, 0.1689170152, 0.0028696042, 0.2044143677, -0.1757717729, 0.0099427951, 0.1643172503, -0.1062815115, -0.0028579801, -0.0122694708, -0.1543545574, -0.0588934124, 0.0795650557, 0.0747777969, 0.0375320576, 0.0693602487, -0.0468926616, 0.0228160843, -0.0663360134, -0.0697881579, 0.1370691508, -0.0329477116, 0.1077091098, -0.1822876483, 0.0638100654, -0.0097845709, 0.2854817808, -0.0671183988, 0.1101688668, 0.0606537201, -0.0371559858, -0.0622986145, 0.0416154899, -0.1530085951, -0.0740805492, -0.1677285582, -0.0019137978, 0.0065357201, 0.0639462918, 0.0991891697, 0.2925175428, 0.0524900779, 0.0477674231, 0.0622949153, -0.0775457025, -0.1701271236, 0.0727615058, -0.0080693206, -0.0661071464, 0.0568970107, 0.0138311852, 0.1431503445, 0.1754905730, 0.0760051459, -0.1170128658, 0.1033293903, -0.0370827317, -0.1183226332, 0.0861527696, 0.0858900025, 0.0667689592, -0.0943402573, -0.0131550170, -0.0051836064, 0.1310937852, -0.0449225605, 0.0159674268, 0.0290375203, -0.0632863119, -0.0570138581, -0.0645088851, -0.1410221756, 0.1811858267, -0.2018875331, -0.0835050642, 0.0915460214, 0.0629419908, 0.1028271019, 0.0591258593, -0.0516828150, 0.0867820457, 0.1341280043, -0.0187633149, 0.0904324353, 0.1385847330, 0.1134229675, -0.0128557840, 0.0237185527, 0.0091887685, -0.0144013707, 0.0251687672, 0.0839407817, -0.0140770553, -0.1549520344, 0.0054277512, -0.0093445946, -0.0228812341, -0.0585442670, -0.1667885333, -0.0136410343, -0.0117412023, -0.0836760029, -0.0317350253, 0.0305128619, -0.1188338846, -0.0298298635, -0.0638725162, 0.0773619190, -0.0844943523, -0.0728966370, -0.1124916524, 0.0055398438, 0.0577362292, -0.0039137099, 0.0624102205, 0.0897800475, 0.1027663872, 0.1025782153, -0.0105918674, -0.0737279058, -0.0476062372, -0.0019477158, 0.0405843332, 0.0570772029, 0.1039701477, 0.1382790953, 0.0419086069, 0.0063599199, 0.1554617584, 0.0676391348, 0.0047734217, -0.0259711742, 0.1150570810, -0.0886706710, -0.0435166098, -0.0455050282, -0.0266747605, 0.0252762716, 0.0648031384, 0.0371092074, 0.0968678966, 0.0897115692, -0.1007782221, -0.1240636483, -0.1132074967, -0.2351041138, 0.1259449273, 0.0015717975, -0.1316846758, -0.0122594936, -0.0475950874, 0.1703221053, 0.0106668323, 0.2316284478, -0.0105482955, -0.1256861240, -0.0641716272, 0.0013576226, 0.2163773626, 0.1170883700, 0.1294014901, -0.0750223175, -0.0638276413, 0.0759410262, 0.0635868534, 0.0212820414, 0.1255864352, 0.0188984089, -0.1276276708, 0.0048669763, -0.0816164017, -0.2369219512, 0.0076269871, -0.1483241767, -0.0272113737, -0.0792752877, 0.0617403723, 0.1429123878, 0.0756428912, 0.0330782682, -0.0512416810, -0.1209318265, 0.0586284325, -0.0048599788, 0.1895674020, -0.1072922200, -0.0932436064, 0.0625365302, 0.0722570196, -0.0124393245, -0.0341277830, 0.1389561594, -0.0436917096, -0.0231684987, 0.1625029445, -0.1030096486, -0.0380929895, -0.2128945738, 0.0145475417, -0.1156019941, -0.0055182637, -0.1135365739, -0.0943838805, -0.1094442382, -0.0355634317, 0.2029695213, 0.0150447330, -0.0096060522, -0.0003577603, -0.0574793257, -0.0073494022, -0.0938136354, 0.0916390941, 0.0572064444, 0.0333236456, 0.0599537939, -0.1454040110, 0.1481839418, -0.0641146153, -0.1706006825, -0.1182898208, 0.1233209223, 0.1393143386, 0.0690170601, 0.0253225882, 0.0603662245, 0.1567584276, 0.1012001932, 0.0445570350, 0.1077357829, -0.0779909566, -0.0311478954, -0.2021694630, -0.1379613727, 0.2374229729, 0.0492467247, 0.0198971909, 0.0775443986, -0.0282192938, -0.0241445638, 0.1469343901, -0.0081896679, -0.1209670156, -0.1099705026, -0.0858516395, -0.1214336231, 0.0303468425, 0.0889500678, -0.1079279482, 0.0216308050, 0.0890283436, 0.0163345411, 0.0160279181, 0.0778104290, -0.0951669663, -0.2615870833, -0.0910375118, 0.0047656354, 0.0826293156, -0.1323024184, 0.2694126368, 0.0705890432, 0.1097824723, -0.0164870974, 0.0061221789, 0.1235286817, -0.0213657450, 0.0505278930, -0.0691280141, 0.0172379836, -0.1160553917, -0.2254782319, 0.1164763123, -0.2904844582, -0.1016676724, -0.0290116761, -0.0527996458, 0.0720394775, 0.1069803759, 0.1758222878, -0.0127498936, -0.0762529597, 0.0204788521, -0.0492323190, -0.0346892141, -0.0585474856, -0.1918707788, 0.2001967281, 0.1363832951, -0.0806908086, -0.0844592303, 0.0339589901, -0.0546557158, -0.0377246514, 0.2424071133, 0.2322357297, -0.2200389355, 0.0701150522, 0.0011415672, -0.0849169493, 0.0416295603, 0.0388481803, -0.0934135914, 0.0557137989, -0.0415586978, -0.0232752878, 0.1030562818, 0.1141395345, -0.2906391919, 0.0395260938, -0.2862459123, 0.0323049910, 0.0138159944, -0.0264162067, 0.1164760366, -0.0545673221, -0.1554233283, 0.1605342627, 0.0751080215, -0.0785193741, -0.0082075326, 0.0648353919, -0.0165133569, -0.1012463644, -0.0108976727, 0.2098423094, 0.1748378873, -0.0887236670, 0.0187499877, 0.0483992212, 0.0314289182, 0.0265457146, -0.1478358656, -0.0996334925, 0.0547999181, 0.1416782290, 0.0425612181, 0.2035142034, -0.0232493803, -0.1226345077, 0.0665204003, -0.1588529944, -0.1116129905, -0.1246486977, -0.0522131696, -0.0648377612, -0.0732477009, 0.0876064450, -0.1886115968, -0.0298793986, 0.0568818562, 0.1220141128, 0.1285910308, 0.1812153310, -0.2991823256, -0.3425623178, -0.1816789061, -0.0996186733, -0.0413819067, -0.1107345000, 0.0842383131, 0.0507046767, -0.1203262880, 0.0105062677, 0.0182278808, 0.0649782270, -0.0015863450, -0.0292156693, -0.1119009703, 0.0863715336, -0.1547559202, -0.3758635223, 0.1727545410, -0.0940052345, -0.0151309026, -0.0834043100, 0.0238496345, 0.1115366146, 0.0393865034, -0.0504958220, -0.0410704762, -0.1794900894, -0.0539706871, -0.1222506985, -0.1319785714, -0.1102085859, -0.1148148850, 0.0901723504, 0.1265847832, -0.0552974418, -0.1746345460, 0.0644257888, -0.0440625362, -0.0905307382, 0.0989490300, 0.1195280552, 0.0169952121, -0.0138320830, -0.0082643414, -0.0749813169, -0.1925462037, -0.0408516973, -0.1176611781, 0.1415318102, -0.0035972146, -0.1158203781, -0.0179470740, 0.1530317366, -0.1098261103, -0.0822286457, -0.2234946638, 0.0067069354, 0.0596264750, -0.0637157261, -0.0032493421, -0.0664644614, -0.2691810131, 0.1506717503, -0.0324160419, -0.1949579120, -0.0158934109, -0.0711073950, 0.0060040550, 0.0125340745, -0.2686712742, 0.0921168551, 0.1199739426, -0.0230034962, -0.0992455855, -0.0135650458, -0.1128289923, 0.1771135777, -0.0895040184, 0.2137084156, -0.0450719148, -0.0218294170, -0.0473208055, 0.1853990406, 0.0701223314, -0.0401376709, 0.0220609084, -0.1937826276, -0.0403623767, -0.0487193912, 0.0793580934, 0.0367648005, 0.0797442049, 0.0799292177, 0.0435793102, 0.0497790910, -0.0286702346, -0.0353490710, -0.0176884271, 0.0094290935, -0.1924524009, -0.3186716139, -0.1695448607, -0.2127373815, 0.1650148779, 0.1218211725, 0.1143448353, 0.0361109152, 0.0426457375, -0.1288434863, -0.0705377683, -0.0064456370, -0.0167599525, 0.0481417701, 0.0211912412, 0.0060413526, -0.0425323136, -0.2434341162, 0.1219039261, -0.0392911695, 0.0282229334, 0.0018046624, 0.0468603559, -0.0015820620, 0.0370767228, -0.1934671104, 0.0132239331, -0.1816612631, -0.0391215347, -0.0848549604, 0.1056234390, -0.0793727338, -0.0575607233, 0.0720038116, 0.1117633283, -0.0983695984, -0.1672168672, 0.1754097193, -0.0649609938, -0.1027750298, 0.0915038213, -0.1200300977, 0.0365518369, -0.0148545792, -0.0538581349, 0.0647139400, -0.0583408065, -0.1131179631, -0.0448169634, 0.1510746032, -0.0314115882, -0.0246121176, -0.1165778488, -0.0192525629, -0.2348844707, 0.0035130177, -0.0770983323, 0.0379524752, 0.0857348964, -0.1532966495, 0.0951467156, -0.1767314523, -0.0905576274, -0.0833608359, -0.1063950136, -0.2887477279, -0.1222989857, 0.0124188112, 0.0719278976, -0.1628634483, -0.1317851692, 0.0756335109, 0.0422234274, -0.0287743192, -0.1215179712, 0.0127159264, -0.1213041395, 0.1005185246, -0.1622290313, 0.0052037952, -0.0276661366, -0.0359873772, 0.0006023014, 0.0977192298, 0.0654594973, 0.0757080764, 0.1497978270, -0.0557783619, 0.1563376337, -0.0826730430, 0.0599205270, 0.0135120749, 0.0921171978, 0.0784055889, 0.0254340507, -0.0532791167, 0.0208651107, 0.1213616058, -0.0978176445, -0.1038350090, -0.0620749630, -0.2188503295, -0.0915731117, -0.1484680325, 0.0521245711, 0.0515283830, -0.0103884758, 0.0035642544, -0.0202572122, -0.0450006686, -0.0040017338, 0.1058884859, -0.1227880120, 0.1072211415, 0.0370997116, 0.1238368601, -0.0263761245, -0.0984591916, -0.0482192636, 0.0866848901, -0.0075462195, -0.0011311349, -0.1697081029, -0.0461597107, 0.0968704596, -0.2245700955, 0.0238003153, 0.0546662286, 0.0082673421, -0.1130981520, 0.0251941551, -0.1145796999, -0.0132673895, 0.0933944285, 0.0276515763, -0.0947678611, -0.1205100194, 0.1426855177, -0.0109170387, -0.1868526042, 0.1023405269, -0.2504965365, 0.0071243965, 0.0188323855, 0.1538262963, 0.0075784097, -0.0421567969, -0.1564346403, 0.0674620122, 0.0804378092, -0.0546410307, 0.0256405827, 0.0051773502, 0.0364734046, -0.2853967249, -0.0352478102, 0.0288506206, -0.1225143820, 0.0033218206, 0.1071342081, 0.0922098756, -0.1516085118, -0.1631673127, -0.1455359012, -0.0400348455, -0.2398650795, -0.0969634652, -0.1053328961, 0.0671985596, -0.1218723804, -0.0663601160, 0.1908546835, 0.0634734631, -0.0722592175, -0.0458958596, 0.0157143679, 0.0047603897, -0.0023609072, -0.1233040467, -0.0265360456, -0.0904672444, -0.0331446007, -0.1458978057, 0.1020377949, 0.0782820284, -0.0322281234, 0.1381822228, -0.1231854483, 0.1883886009, -0.0076945336, -0.0576344207, -0.0758210719, 0.0729996487, 0.0709990710, 0.1121891961, 0.0387864895, -0.0306087863, 0.0823997855, -0.0775095001, 0.0693414062, -0.0546817444, 0.0100560011, -0.0416844450, 0.0689107701, 0.0931217447, 0.0848208591, 0.1106272563, -0.0387120359, -0.0800173283, -0.0494848527, -0.0837537274, 0.1647070646, -0.0064551770, 0.0971290693, 0.0384481698, 0.0112435371, -0.0866794065, -0.0580614954, -0.1005670056, 0.1354044527, 0.0393230319, 0.1307219267, -0.2111822665, 0.1143829003, -0.0697463229, -0.2487816215, -0.0291099288, -0.0100699104, -0.0396634564, -0.1057639793, 0.0305660609, -0.0153127853, 0.0519273765, 0.0306981467, 0.0913598686, 0.0481322519, -0.0334051698, 0.1393493861, -0.0178037919, -0.1629265845, 0.0007713423, -0.2579608858, -0.0528449528, 0.0360981785, 0.0036129069, 0.0097958352, -0.0541281626, -0.0141424602, 0.0356392078, -0.0171089340, 0.1185803190, -0.0331966020, -0.0563923381, 0.0225457661, -0.1872757226, -0.0622595586, -0.0271488987, -0.2116114944, 0.0998760015, 0.1454757750, 0.1590705216, 0.0740259364, -0.0679500178, -0.1427706331, 0.0867579132, -0.1140364334, -0.0324815325, -0.2171657532, 0.1472500712, -0.1065053567, -0.0840290636, 0.0286461879, 0.0392228551, -0.0900906399, 0.0354928151, -0.1282233596, 0.0691714510, 0.0480011106, 0.0037871636, -0.1176384017, -0.0145854093, -0.1097978726, -0.1316179037, 0.0342483111, 0.0714718178, -0.0078280978, 0.1222705543, -0.0991833881, 0.0094396286, -0.0684793442, 0.0557226427, -0.0605375469, 0.0439547971, 0.1046670750, 0.1073379293, 0.0173831042, -0.0525985174, 0.0858064815, -0.0196860489, 0.0956243649, -0.1305791736, -0.0007719860, -0.3391360641, 0.0157587528, 0.0387365334, 0.0064282184, -0.0450866818, 0.0343176275, -0.0777865946, -0.0377072543, 0.1103072688, 0.1785419881, -0.0659919530, 0.0537825935, -0.0854004920, 0.0021510343, -0.0664766580, 0.0556866080, -0.1158491150, 0.0021629971, 0.1155020967, 0.1194405034, -0.0380191691, 0.0511759892, -0.0050421325, -0.1756012589, 0.1082624793, -0.0628089160, -0.0216753501, 0.0408624038, 0.0091568343, -0.0539386645, 0.0088424049, -0.1010080129, -0.0577247813, 0.0344611444, -0.0106430352, 0.0080151558, -0.1853804439, -0.1035689786, 0.0721302480, -0.2363461256, -0.0881644115, -0.0203280132, -0.1075201482, 0.0331437141, -0.1542335004, -0.0145528764, -0.0394283310, 0.1075652689, 0.0513899699, -0.0048143556, 0.0568519123, 0.0412389152, -0.1358560175, -0.0505534112, 0.0301942267, -0.1478703171, -0.0230827015, -0.0801634043, 0.1439864188, -0.1196071208, -0.0627655983, -0.2599215209, -0.0826012269, 0.0567683764, 0.1476905346, -0.1449598968, 0.1867068112, -0.1138325781, -0.0487285964, 0.0005827466, 0.0160911866, -0.0280828327, 0.1379240602, -0.0605688505, 0.0849082768, 0.0634119585, -0.0804124400, -0.0395110026, -0.0473777577, 0.0023370334, -0.2453412265, -0.0098490585, 0.1468036920, 0.0919659957, 0.0856560469, -0.0306546669, 0.1398497969, 0.0417123549, 0.0770158246, -0.1744798869, 0.1016711742, 0.0889599472, 0.0413852520, 0.0652423427, -0.0433470830, -0.0790045187, -0.1787133813, -0.0582570173, 0.0009743242, 0.1161852330, -0.3162323236, 0.1040623114, 0.0085927863, -0.0462423600, 0.0130756451, 0.0294253659, -0.0267030112, -0.1393273622, 0.1749557853, 0.0838767216, -0.0902357176, -0.0097093554, -0.1655970365, -0.0738123581, 0.0521872491, 0.1911129057, -0.0340931453, 0.0002539179, 0.0070170648, -0.0576612353, -0.0205930974, 0.1344454587, -0.0319638215, -0.1447750479, 0.0978677496, 0.0474458709, 0.0375166386, -0.0527660958, 0.0266230926, -0.0588462986, -0.0022213089, -0.1340978444, 0.0375944376, 0.0797988623, -0.0008127570, -0.0009345438, -0.2221062034, -0.1469533443, 0.0931660607, -0.1904877424, 0.0083497884, 0.0690518171, -0.2406407893, 0.1246263906, -0.0293929353, 0.0524549745, 0.0358292051, 0.0299295690, -0.0664029792, 0.0071475743, 0.0690997690, -0.0467687398, -0.0334162004, -0.0685415789, 0.0972030312, -0.1515143365, -0.0540371910, 0.0408445038, 0.0908287317, -0.0950517729, -0.0295770764, -0.1197263375, -0.1093051732, 0.1647887528, 0.1337076128, 0.0530015789, 0.2044996768, 0.0198857393, 0.0185143240, 0.0904536545, 0.0614340603, -0.1261326373, 0.1522127688, -0.1219131798, 0.2339808792, -0.0455051363, -0.0375358425, 0.0084515465, -0.0401241705, -0.0685413554, -0.0488880835, 0.0174160879, 0.0482496656, 0.1060864404, 0.0123603083, -0.0410633534, -0.0576406755, 0.0899401382, 0.1252369136, -0.2109462470, 0.0160543527, 0.1371271908, -0.0201117285, -0.1893633902, -0.0438829325, -0.0532130972, -0.1643110067, 0.0148026720, -0.1183365509, 0.0973570198, -0.1228479743, -0.0043207724, -0.0363567583, -0.0318672992, 0.0238913633, -0.0411639251, 0.0683367178, -0.1678944379, 0.2460637391, 0.0860401616, -0.0442360640, -0.1472105831, -0.0286394879, -0.2400006056, -0.0463469587, 0.1781842411, 0.0326787084, 0.0037386173, 0.0360677801, -0.0903049186, -0.0016576580, 0.0135503067, -0.0667063296, -0.1838522553, -0.0340789668, 0.0654766336, -0.0858654454, 0.0777274370, 0.0471652485, -0.0699100196, -0.0044354880, -0.1564994007, -0.0492740236, 0.1818632036, 0.0406434014, -0.0809686407, -0.2225322723, -0.1512616575, 0.0301685072, -0.0684759542, -0.1711982638, 0.0012764169, -0.1937575936, 0.0707939863, 0.1373947710, 0.0425595380, 0.0524455495, 0.0111588091, -0.0907460675, 0.0640813857, -0.0167513862, -0.0056666667, -0.1129943505, -0.0796288624, 0.0357648879, -0.1567260772, 0.0027764719, -0.2299803197, 0.0256822165, -0.0495027304, -0.0681004822, -0.1205234081, -0.1225024164, 0.1628688723, 0.1442686617, 0.0177867915, 0.0477178358, 0.0517198965, -0.0770945847, 0.0761852413, 0.0449221879, -0.0047583869, 0.0217281133, -0.1977262199, 0.2039682418, -0.0892175585, 0.0555179641, 0.0250615198, -0.0204729605, 0.0101730591, -0.0085606324, 0.0208886191, 0.0625201464, 0.0695180669, -0.0528955348, 0.1731247455, -0.0137344655, 0.0265033450, 0.0328245796, -0.1346319467, -0.1061821356, 0.0172428526, -0.1432019919, -0.1495186090, -0.0690688714, -0.1861494333, -0.1607809365, 0.1214223057, -0.0247466862, 0.0166228674, -0.1431328505, -0.1288873106, -0.1760537475, -0.0064442265, 0.0825773329, -0.1282085329, 0.0188697651, -0.1365235597, 0.2577661574, -0.1062476858, 0.0837373585, -0.0779949352, 0.0592317916, -0.2641544938, -0.0816679597, 0.0378646776, 0.1078080684, -0.0023288557, -0.0213400628, -0.2196380049, 0.0123683559, 0.1910463870, -0.2021596879, -0.0950940698, 0.0532522015, -0.0290886387, -0.0477052778, 0.0553632416, 0.0030600042, -0.0612853579, -0.0581360087, 0.0030780609, -0.0869472995, 0.1105835587, 0.0686412007, -0.0798017904, -0.1726872027, -0.2375876606, 0.0496703386, 0.1010946259, -0.0684413612, 0.1808065623, -0.1336036921, 0.0636999458, 0.1941415220, -0.0729089454, -0.1076327339, 0.0940849930, -0.0536384508, 0.1102614328, -0.0641915947, -0.0727438405, -0.0864415392, -0.0295250695, 0.0034801723, 0.0456880666, 0.0969949961, -0.1766232997, -0.1418910325, 0.0528333932, -0.0584815480, -0.1521718055, -0.2169968784, 0.0982444063, 0.1972709298, -0.0151219387, 0.1800431758, 0.1828593761, -0.1345660836, 0.0563920215, 0.1719797999, -0.0387101918, -0.0182250477, -0.2228712440, -0.0709319860, -0.0282674003, 0.1866734475, 0.1203268319, -0.1132360622, -0.0295920633, 0.1573912650, -0.0390432030, 0.2505209446, 0.0484465510, 0.0114459721, 0.0075072465, 0.0325788856, -0.0202589482, -0.0106529985, 0.0259691589, 0.0291972179, -0.1550430655, -0.2413491160, -0.1138395295, -0.1649613529, -0.0876607895, 0.0606472455, 0.0485347621, -0.1369024366, -0.0649805591, 0.0612399802, -0.2223540694, 0.0149615686, -0.0331172571, 0.2102130949, -0.0874975696, 0.0343741514, -0.1766381413, 0.3138656020, 0.0027249609, 0.0449165367, -0.0025001755, 0.1197073162, -0.3054502904, -0.0184002742, -0.1782352924, -0.0345308036, 0.0225857403, -0.1033236533, -0.1736310571, 0.0619296581, 0.0389003009, -0.0717883110, -0.0747414455, -0.0537476055, 0.0772217214, 0.0088181673, -0.0360507742, -0.0034236633, -0.0212972593, 0.0070109731, 0.0427284092, -0.0209496152, -0.2370749265, 0.2257662714, 0.1345107704, -0.2399612814, -0.4194111526, 0.1574874669, 0.1944611520, -0.0815545246, -0.1426855624, -0.1094123498, -0.1204656065, 0.0357708856, -0.0541113019, -0.2991086245, 0.1648308337, -0.0447052158, 0.0263723563, -0.0513199046, -0.0460261330, 0.0263736807, -0.0222134423, 0.0950335562, 0.0868499875, -0.0011123003, -0.0269903690, -0.0297648422, -0.0195249096, -0.0471157469, 0.0224139616, -0.2846281528, 0.0507762320, -0.0454769097, -0.0467970669, 0.1258909106, 0.0460546613, -0.1433641165, 0.1118746474, 0.0828690529, -0.0394568853, 0.0101740472, -0.1200669929, -0.3521986306, -0.0250333045, 0.2800161541, 0.2278350592, -0.2452177852, 0.0644241497, 0.2485950887, -0.0497163385, 0.2532106340, -0.1254653335, 0.0039559519, 0.0307596233, -0.1169337928, -0.0337347426, -0.0462631211, 0.0993783697, 0.0014229412, -0.0435112193, -0.1727321148, -0.0462047681, -0.0414791740, -0.0735436529, -0.0387174264, 0.0923814625, 0.0466216244, 0.0059906151, 0.0853221640, -0.3142194450, -0.1190932319, -0.0717615038, 0.1829205602, -0.0731901377, -0.2014658600, -0.0591743886, 0.2455283552, 0.0190030020, 0.0253868159, -0.0888984352, 0.1179556325, -0.0728725269, -0.1150773168, -0.2468586862, -0.0583355688, -0.0476112925, -0.0460947417, -0.1970129907, 0.1317708194, -0.0574686900, -0.0823831782, -0.0488375910, -0.0383116566, 0.0033384238, 0.0198264346, -0.0695245638, 0.0572059490, -0.0373588353, 0.0274537969, 0.2076655626, -0.0292388629, -0.4305608869, 0.1406977177, 0.1178018823, -0.1423584819, -0.2342232168, 0.2393981963, 0.1918873787, 0.0597224273, -0.1886060983, -0.0116861425, -0.0455556959, -0.0500654355, 0.0014966468, -0.4508266449, 0.1672731042, -0.0231809542, 0.0023574668, 0.0321154520, 0.0539960153, 0.0225509368, -0.0751364157, 0.0465896167, 0.1344402879, 0.0335013866, 0.0320211351, 0.0230768025, -0.1165358350, 0.0110465912, 0.0726367384, -0.2703668475, -0.1454576105, -0.0564527400, -0.0824321210, 0.0756858662, -0.0142014856, -0.1144887581, 0.1978443265, 0.1269741654, -0.0729768425, -0.0814000592, -0.1817743182, -0.1897057295, -0.1300330311, 0.1906877458, 0.0363023318, -0.0961630568, 0.0203718413, -0.0018616411, 0.0051790867, 0.0886346102, -0.1212922856, 0.0353856720, -0.0175900403, -0.1776434928, 0.0026197389, -0.0165735669, 0.1856595278, -0.0017619855, -0.0114860618, 0.0335253999, -0.0984198302, -0.1513893157, 0.0108388867, -0.1423332989, 0.0932177231, 0.0256908853, -0.0169744100, 0.0243612770, -0.0535436198, 0.0265920367, -0.1410210878, 0.1633736789, -0.3006358743, -0.1854034364, 0.0286731087, 0.2183060497, 0.1492612809, 0.1124605760, -0.2218956947, -0.0380204357, 0.2130449563, -0.0656457320, -0.1003299952, -0.1561061442, 0.0485264137, -0.0270104185, -0.1511864811, 0.0562744886, -0.0764947757, -0.1361101568, 0.0282687191, -0.0471261740, 0.1165106148, -0.0921611190, -0.0571251661, 0.0571020544, -0.0956186354, 0.1079324111, 0.1558093727, -0.0485133789, -0.2167855650, -0.0572520681, 0.0611997694, 0.1672123671, 0.1458158493, -0.0233345460, 0.1017993838, 0.1286224723, -0.0690810308, -0.0408217125, -0.0421724021, -0.0819829851, 0.0361905508, -0.4470802546, 0.1122671142, -0.1540196538, -0.0983563811, -0.0779322237, 0.0181565657, 0.1573511064, 0.0190113578, -0.0386223234, 0.0236500707, -0.0864209086, 0.2323258966, -0.0375489034, -0.1115550399, -0.2068725973, 0.3080161512, 0.0235367473, -0.0874794722, 0.0146674924, -0.1140152812, 0.0866373926, -0.0436151884, 0.0532777123, 0.1429273486, 0.1607575119, -0.1202670187, -0.0137038063, -0.0675896928, -0.0235705897, -0.1365574747, 0.0807430297, -0.0793978944, -0.0173176993, -0.0623185895, -0.1545629948, -0.0033224230, 0.0139399469, -0.3596843481, -0.0632226914, 0.0413325652, 0.0585965402, 0.0196565222, -0.1926329136, 0.1602016985, -0.0278073065, 0.0482795425, 0.0047992906, 0.0242806599, -0.1876217574, -0.0539128594, -0.0996931270, 0.1348367184, 0.0030512600, -0.0094619421, -0.0016680646, 0.1803086996, -0.0227334183, -0.0471283123, 0.1506898850, -0.2228618711, -0.0640556514, 0.1388461888, 0.1952479184, 0.1992685795, 0.1181578934, -0.0881403759, 0.0357898436, 0.0651951507, 0.0391298719, -0.0263344459, -0.2299267799, 0.1079253927, 0.0650173724, -0.1539509445, -0.0694352835, -0.2186879218, -0.0391079262, -0.0310293268, -0.0190401133, -0.0685792193, -0.0213014763, -0.1148945168, 0.0567189418, -0.0927764103, -0.0255316440, 0.1450689435, 0.0253632516, 0.0833905861, -0.0350700393, 0.0168121625, 0.1576858908, 0.2643390000, -0.1044554785, 0.1107731089, 0.3130468130, 0.0329912789, 0.0504506379, -0.0036726685, -0.0485710353, 0.1943791509, -0.5346871614, -0.0070066042, -0.2104676366, 0.0577544682, -0.0651746467, 0.0054686479, 0.1255397797, 0.0162032750, -0.1617076248, -0.0015878699, -0.0315466784, 0.2228870392, -0.1075301990, -0.1240760311, -0.2317760289, 0.2607209682, 0.1038887650, -0.0771270841, 0.0215341691, -0.1563327312, 0.1183328703, -0.0153748970, -0.0235890038, 0.0847974345, -0.0069162035, -0.0682158321, 0.0805302635, -0.0824583918, 0.0649024323, -0.0834554359, -0.0397031754, -0.1801708490, 0.0774315968, -0.1532788128, -0.2797378004, -0.1153823286, 0.0335263759, -0.3637427092, 0.0331828184, -0.0652355924, -0.0219072774, 0.0294396561, -0.2321014404, -0.0253291111, 0.0250446852, -0.0072568660, 0.0851986930, -0.0510159098, -0.1741693169, -0.0684476420, -0.0932474136, 0.0638345107, 0.0378017500, -0.0611533672, 0.0029022009, 0.0439000651, 0.0764688700, -0.0356330238, 0.0340749472, -0.0352201462, 0.0338401161, 0.0843606070, 0.0635526031, 0.2521680295, 0.0398125127, 0.0457886532, 0.0904899389, -0.1179607287, -0.0452177972, -0.0573600270, 0.0653529316, 0.0369747356, 0.0013412150, -0.0373564437, 0.0351178311, -0.0904722735, -0.1555151492, 0.0482121482, 0.0255799294, -0.0494213924, -0.0603627041, 0.0920746997, 0.0117415786, 0.0426899903, 0.0484454669, 0.0079084979, 0.0685592666, 0.1019055024, 0.0160211269, 0.0015965691, 0.1494516879, 0.0380590484, 0.0267170854, 0.1208099425, 0.0968809053, 0.0670808479, -0.0241185259, 0.1000726596, 0.0017142908, 0.1449979544, -0.6591802239, -0.0016481152, -0.0403004922, 0.0215115882, -0.0196559560, 0.0796003863, 0.0715712905, 0.0579680502, -0.0890197083, 0.0144085735, -0.0104454346, 0.0612941831, -0.0027345265, 0.0535676852, -0.1477120519, 0.1827530563, 0.2032433450, -0.0898015127, 0.1505586058, -0.1972856671, 0.0603053682, -0.0216026269, 0.1996274441, 0.1367858201, 0.0292674638, 0.0247624964, 0.0901552886, -0.0680681616, 0.0982222110, -0.0125767998, -0.0935167000, -0.0059167268, -0.0261485670, -0.0521241426, -0.3420260251, -0.0072716251, -0.0669924095, -0.1936059892, -0.0488192961, -0.0463415906, 0.0015403138, 0.1275772601, -0.1377496868, -0.1134427264, 0.0379611254, -0.0303331576, -0.0366987921, 0.0283804890, -0.0810668394, -0.0056609027, -0.1178702638, -0.0450819880, -0.0075860126, -0.1144139618, -0.1607944965, -0.0516920611, 0.0051951250, -0.0313049480, -0.0164623614, -0.0668415427, -0.1647963375, 0.1218897328, 0.0649174675, 0.2811128795, 0.0048788427, 0.0910071954, 0.1291741878, -0.0068715499, -0.0703584403, 0.1297413409, 0.1789624095, 0.0147064719, -0.0624578036, -0.0555993542, -0.0097971549, -0.0763820708, -0.1151570454, 0.0765405670, 0.0831725001, -0.1083649248, -0.0323856659, 0.1138928160, 0.0441267304, -0.0957472995, 0.0485990383, 0.0534234345, 0.0001745077, 0.0992871672, -0.1403052956, -0.0039718766, 0.1109537408, 0.0603732206, -0.0532045364, 0.1742213517, 0.0588358045, 0.1458049119, -0.0605730079, 0.1306575090, -0.0259038582, 0.0424724072, -0.6164787412, 0.0348247290, 0.0611634105, 0.0127392355, -0.0000357356, -0.0739954785, 0.0164190177, 0.1285519749, -0.0234702304, 0.0536192171, 0.0352948457, -0.0284573045, -0.1061191261, 0.0209871661, 0.0254304204, 0.0392963998, 0.2626976073, -0.0031133268, 0.1079482883, -0.1904531568, 0.1056320891, 0.1390827745, 0.2065989524, 0.0104281837, 0.1085752025, 0.0796786994, -0.0258863419, -0.0102478508, 0.0722050071, -0.0821894407, 0.0382789932, -0.0624158084, -0.0390471518, -0.2022709548, -0.2392955422, 0.0906491056, -0.1322765350, -0.3190701902, -0.0504783019, 0.0275908783, 0.0517472699, 0.1851470768, -0.0644399002, -0.1449499726, 0.0235927999, -0.1328921169, -0.0300244950, 0.1006903350, -0.1457072645, 0.1727743298, 0.0275950804, 0.0244500507, -0.0044580675, -0.0911315456, -0.1867109984, -0.1109734848, 0.1065023988, 0.0795287937, 0.0893131867, 0.0075258091, -0.1226008832, 0.0045652511, -0.0083586453, 0.2188072503, -0.0420099720, 0.0080792252, 0.1264370084, -0.0857103318, 0.0596778505, 0.0783637762, 0.1086024642, 0.0924357101, -0.1137322411, -0.0411200300, 0.0585916713, -0.1163938865, 0.1125775501, -0.0622442439, 0.0735129789, -0.0583968721, -0.0136724515, 0.1338079572, 0.0979205668, 0.0041351798, 0.0649940521, -0.0162008014, -0.0301990695, 0.0278945658, -0.0726225376, -0.0467985421, 0.0638335943, -0.0674180090, -0.0944691300, -0.0000612711, 0.1579680592, 0.0687015578, -0.0202443488, 0.0147251580, 0.0466364510, -0.2124162316, -0.7031453848, 0.0197162759, 0.1926771849, 0.0225496721, -0.0375000760, -0.0701849684, 0.0956581458, 0.1054485515, 0.0258856378, -0.0155675868, -0.0031770919, -0.2047892213, -0.1059366539, 0.0752906203, 0.2399720997, -0.1861221492, 0.1303716451, 0.0867210999, -0.0270388741, -0.1575708389, 0.0625231266, 0.1234136969, 0.1179352179, -0.1087755412, 0.0984344259, 0.0422532223, 0.1197158247, 0.0369852073, 0.0210078005, -0.0328623839, -0.0339763053, -0.0891543031, -0.0740202889, 0.0117552429, -0.1347482502, -0.0023636750, -0.0569746755, -0.3044428229, 0.0304761287, 0.0303271934, 0.0542990007, 0.1611941755, -0.1818323135, -0.0411750600, 0.0831747651, -0.0995350853, 0.0535565950, 0.0592635609, -0.1254373342, 0.1417950541, 0.1015649140, 0.0676058754, -0.0531388409, -0.1869459450, -0.1155989394, 0.0626088381, 0.1133620664, 0.1332393140, -0.0458510146, 0.0343528613, -0.0692740977, 0.1145384461, -0.0500810817, 0.1893028766, -0.0356380269, 0.0500116125, 0.1078460962, -0.0840370283, 0.0537975170, 0.1205966473, 0.0900676176, 0.0231584422, -0.1281874329, 0.0780087635, -0.0692279339, -0.0627987310, 0.1794303954, 0.0485701077, 0.1249164864, -0.0332905129, -0.0216568485, 0.0427712090, 0.0376913585, -0.0843503401, -0.0545958988, -0.1156459972, 0.0668923631, 0.0138989147, -0.0312054455, -0.0587742701, 0.0575666390, -0.0487758406, -0.2078372985, -0.0056698080, 0.1017269567, -0.0420423113, 0.0718444511, 0.0840747431, -0.0974670053, -0.1962371171, -0.5849969387, -0.0557246022, 0.1949194223, 0.0717408285, 0.0443405099, -0.0106723281, 0.1097830385, 0.0831246376, -0.1600876898, -0.1093036905, -0.0465486795, -0.1440953165, -0.0450626016, 0.0185381062, 0.1601132751, -0.2425844222, -0.0321308449, -0.0485916287, -0.0036481463, -0.1335580796, 0.1417434812, -0.0240368824, -0.0734549835, -0.0766204149, 0.0478506386, 0.1487626731, -0.0002585989, 0.1144650504, 0.0059443265, 0.0556444637, -0.1113186255, 0.0337039120, 0.0475187004, 0.0257542040, 0.0622787066, 0.0501165614, -0.0329719260, -0.3979196846, -0.0387383476, -0.0272749700, 0.0831885859, 0.1503111571, 0.0277914051, -0.0580608770, -0.0199436583, 0.0339320004, 0.0896652937, -0.0833080485, -0.0802566856, 0.0851544440, 0.0575929098, 0.1432016194, -0.0549403727, -0.1938220412, -0.2264343798, 0.0995397717, 0.1040600091, 0.0180005357, -0.0916400775, 0.0796163008, 0.0040523601, 0.0057473835, -0.1123475805, 0.1263280511, -0.0494525097, -0.0508820452, 0.1056447402, -0.0374805517, 0.0522041209, -0.0324926265, 0.0747278184, -0.0095923115, -0.1389080882, 0.0707054213, -0.1336209923, -0.1242103502, 0.0873384699, 0.1375962496, 0.0370212086, -0.0571163259, 0.0229138248, 0.0622318052, 0.0980893672, 0.0073984098, 0.1008351818, -0.1655313522, 0.0584283397, 0.0538118929, 0.0252197906, -0.0409076773, -0.0491694435, -0.0886467397, -0.3644624949, -0.0044611683, 0.0419410504, -0.0561109111, -0.1081746221, -0.0016469435, -0.0571051985, -0.1661171764, -0.4587860405, 0.0650745183, 0.1669139564, -0.0397686027, -0.0066750948, 0.0295573268, 0.0108035337, 0.0155486148, 0.0510445721, 0.0078774458, -0.1263476461, -0.2288358361, 0.0082818912, -0.0269228145, 0.1962448061, -0.2897597849, -0.1388339996, 0.0404907353, -0.0217884332, -0.1826415211, 0.0368401408, 0.0236477945, -0.2529093921, 0.0325513445, 0.0637759045, 0.0587880053, -0.0295548942, 0.1243529320, -0.0216812119, 0.0073481672, 0.0107093053, -0.0000679890, -0.1883753985, 0.0963494927, -0.0117264623, -0.0684061125, -0.0539979227, -0.2841492295, -0.0443399884, -0.1508352607, 0.0882727578, -0.0355061218, 0.0144904098, -0.0376244634, 0.1875934452, -0.0277560353, 0.0637169629, 0.0066277962, 0.0437305942, -0.0005079491, -0.0124888970, 0.0897595808, -0.0805850998, -0.1024042815, -0.2565898001, -0.0292866733, 0.0175287686, 0.0397759080, -0.0276249684, 0.1108100265, -0.2442579269, -0.0147367259, 0.0005839430, 0.2060955018, 0.1268898398, -0.0531493723, -0.0070316647, 0.0331605263, -0.2203197330, 0.0575231276, 0.0381146446, 0.1400176734, 0.0200012773, -0.0089508938, -0.1028724536, -0.0432583727, 0.1991869956, 0.2371658236, -0.0393601619, -0.0150998794, -0.0305562690, -0.0192234535, 0.0563255958, -0.0749631524, 0.1233826950, -0.0268923137, 0.1227259859, 0.1572583467, -0.0431979001, -0.1379744709, -0.0536185056, -0.0821964294, -0.2803387344, -0.0883691385, 0.0513778739, 0.0351146236, -0.0790577754, -0.0075855926, -0.0444269888, -0.0762369186, -0.4345789254, 0.0787772089, 0.0995466933, 0.2023440450, -0.0670141876, 0.0714722499, 0.1546742767, 0.0396418944, -0.0668965280, 0.1648147851, 0.0087044416, -0.1315501630, -0.2210442126, 0.1577357203, 0.0802754387, -0.2287552357, -0.2053916901, -0.0123542082, 0.0750513598, -0.1796281934, 0.0140360622, 0.0352070667, -0.2159788609, 0.0756594166, 0.1026012748, -0.0439478979, -0.0504491106, 0.1091045737, -0.0919887498, -0.0286052749, 0.0236103125, 0.2206379473, -0.1482314169, -0.0369643345, -0.0145901097, 0.0475842990, 0.0406014174, -0.3170420527, 0.0042895107, -0.0685858577, 0.1006241888, 0.0759791434, -0.0514407754, -0.2629700899, 0.1648289561, -0.1316026300, -0.0434483066, 0.0006972114, -0.0869551897, 0.0467665084, -0.1258344799, 0.1661667675, -0.1549150646, -0.0702404007, -0.1871658117, -0.0265666973, 0.0000911683, -0.0159649011, -0.0937964991, 0.0726751462, -0.1859220862, 0.0856190324, 0.0130577628, 0.1133570597, -0.0462162793, 0.0870057493, 0.2157960385, 0.0712359920, -0.2203922123, 0.0467616208, 0.0215080585, 0.1179803610, -0.0663125813, 0.0741319731, -0.0554265119, -0.0237596240, -0.0353601165, 0.2084043920, 0.0277371295, -0.0470636971, 0.0016128280, -0.0341489241, 0.0283741727, 0.0681797713, -0.0650235787, -0.0291815940, 0.1828702092, 0.1025782302, 0.1266935766, -0.2489584088, 0.0010842385, -0.2206534296, -0.2235803753, 0.0910727158, -0.0650638863, 0.2136191726, -0.1338471174, -0.1230947897, 0.0254433192, -0.0475599691, -0.3099861741, -0.0057438626, -0.0227083359, 0.2897679806, -0.2689692676, 0.1606458127, 0.1691846102, 0.0029683958, 0.1067632362, 0.1508191079, -0.0933053493, 0.0372084267, -0.1020327955, 0.0843037888, 0.1521251649, -0.2336151004, -0.2323022932, -0.0072695874, 0.0972973555, -0.2473752499, -0.1059563309, -0.0890779048, -0.2640918195, -0.0424507000, -0.0104712006, 0.1604451388, -0.0739346072, 0.1273974031, -0.0686155334, -0.0357645750, -0.0259797629, 0.1844986081, -0.1779977828, -0.0600850880, -0.1520464718, 0.0393086933, -0.0882501900, -0.2179021537, 0.0145757729, 0.0030700166, 0.3063274622, 0.2096940279, 0.0786889866, -0.1202346608, -0.0746936724, -0.0624691993, 0.1914457232, -0.0270406175, 0.0781357661, -0.1021557227, 0.0089059221, 0.1056329384, -0.1283763051, 0.1980653852, -0.1142838523, 0.0057565845, 0.1321253330, -0.0417708196, 0.0631851256, -0.0615582839, -0.1834999770, 0.1262541413, 0.1474731863, 0.2111016959, -0.2175548971, -0.0381118767, 0.2988304198, 0.1353131384, -0.0913530067, 0.1848533899, -0.0988036096, 0.2943211496, -0.2504832447, -0.0039921254, 0.0658144951, 0.0049193930, -0.2884472311, 0.1156473830, 0.0019119247, -0.0942693129, -0.0447932519, -0.0131383901, 0.1387686580, 0.0582526326, 0.0175779518, -0.1898608208, 0.0279394276, -0.3350998759, 0.1473330408, -0.1131315082, -0.1113331467, -0.0999312922, -0.0537195094, 0.3886420429, -0.1508556306, 0.0257382262, 0.0707594827, 0.0143944863, 0.1714467555, -0.2933619022, -0.3898762763, 0.0589921251, -0.0690929145, 0.0893596485, -0.1273175329, 0.2076142132, 0.1279678494, 0.1162859127, 0.2172326148, 0.2287042588, 0.0573843531, 0.0470585339, -0.0989353508, -0.3094633222, 0.0626287684, -0.1692065448, -0.3426067233, 0.1335407197, 0.1099630147, -0.0805239305, -0.1857210100, 0.2416626662, -0.1718324721, -0.1502229869, 0.0822039098, 0.2939279079, 0.0422574282, -0.0775290802, -0.0828071088, 0.1130162254, -0.2335374057, 0.2821484208, -0.0741852820, 0.0329259895, -0.0523209423, -0.0766575485, -0.0905290768, -0.1155242622, 0.0854724795, -0.0464224704, 0.2578583956, 0.2510153949, 0.1750076562, -0.0147191314, 0.0971248299, -0.0153136607, 0.2335662246, -0.0283116512, -0.0073496210, 0.0138345463, -0.1530893892, 0.1101031825, -0.0580747910, 0.2022343874, -0.0557397604, 0.1917054206, 0.0428455211, 0.1651707888, -0.0797068551, 0.0415348671, -0.0896458998, 0.0668589175, 0.2850485146, 0.2203830332, -0.0779905990, 0.0449588336, 0.2576830685, -0.0733906850, -0.2225031406, 0.2799032032, -0.0894361138, 0.3724819720, 0.1099252999, -0.0451117828, 0.0689009055, -0.0346365497, -0.2316872030, 0.1710855067, -0.0365486778, -0.1067256108, -0.0550278500, 0.0854818076, 0.2547723949, -0.1029184461, -0.1765279174, -0.0130695123, -0.1317076087, -0.1482136995, 0.0781898275, -0.1462950557, -0.2025528103, -0.1953116655, -0.0954202563, 0.3026058078, 0.0015223896, -0.0243786238, 0.1189070791, -0.1357131749, 0.1274578869, -0.2239704281, -0.1857487708, 0.1105789170, 0.0686369911, 0.1670109779, -0.0541187227, 0.1875213385, 0.1202422604, 0.2733922601, 0.2443530560, 0.1123598590, 0.1187821925, 0.1106816754, -0.2630838156, -0.2387409657, -0.0619899742, 0.0357580148, -0.3769990504, 0.1322885305, 0.1102420017, -0.2256894708, 0.0007143003, 0.0737719014, -0.1984199136, 0.0280315354, -0.0509994924, 0.2348474115, -0.0777677223, -0.0763051063, -0.0288843177, 0.1526016146, 0.0478925742, 0.2703406215, -0.1371848881, -0.0939118713, -0.0706649274, 0.0690910444, -0.0104085077, 0.1023366526, -0.0204833653, 0.0573297776, 0.0805824846, 0.0100417240, 0.0340765268, 0.1498617232, 0.1554622054, -0.1499900520, 0.0681830719, -0.0185037162, 0.0131943291, -0.0825871676, -0.1376831681, 0.1662500352, -0.1302040517, 0.1773159057, -0.0702002570, 0.0872932747, -0.0907334909, 0.1100201458, -0.2359250337, 0.0064992774, -0.0506829433, 0.0237474106, 0.0281991903, 0.0109823225, -0.0547143742, 0.0237951968, -0.0421101116, 0.0009936983, -0.0751125515, 0.1374563128, -0.0713194013, 0.1642849892, 0.1212339699, -0.0528736115, 0.1171625778, 0.0422119200, -0.1480223984, -0.1039022133, -0.1135260984, 0.0300391316, 0.0617415607, 0.0475098714, 0.1157358810, 0.0080979513, -0.2169581503, -0.1517259330, -0.0185844898, -0.0485546552, 0.0130500114, -0.0801584721, -0.1949966699, -0.0515133888, 0.0469505563, 0.0861356482, -0.0897739977, -0.1491534263, 0.0441059023, 0.0191836786, 0.2441884577, -0.0852681994, 0.0234871656, 0.0684169754, -0.0874375999, 0.0834282190, 0.1960026324, 0.0661032498, -0.0253779143, 0.1899316758, 0.0426110141, 0.0341864042, -0.0232459828, 0.0108842263, -0.0795280337, 0.0170032475, -0.1454092562, 0.0757611841, -0.2856844962, 0.0080074249, -0.0600899458, -0.0622526594, 0.2097854167, 0.0066457270, -0.1529876590, -0.2041287124, -0.0710086524, 0.1407268494, -0.1385560632, -0.1639008969, -0.0123207746, 0.1844819039, 0.0614707060, 0.1700910330, -0.0753195435, -0.0647132546, 0.0826488137, 0.0741281509, 0.0499548428, 0.0589477271, 0.0784244984, -0.0414665192, -0.0169564001, -0.0004223304, 0.0031611044, 0.0644439235, 0.0426987223, 0.0358668230, -0.0412703715, -0.0694903210, 0.0309861526, -0.0670752823, -0.0891633704, -0.0426105931, -0.0835630298, 0.1281866580, 0.0427448228, 0.1123785004, 0.0142771266, 0.1005006358, -0.0664163381, 0.1175002456, -0.1155851558, 0.1535788476, -0.0390663669, 0.0908801705, 0.1434419900, 0.0966866389, -0.0632253662, 0.0904101953, -0.1070967466, 0.0192836616, 0.0037077940, -0.0904945359, 0.1756792665, -0.0966255292, -0.1326936483, 0.0185146574, -0.0708554015, 0.0690803081, -0.2205182910, 0.1920269430, -0.0780929103, -0.1200489029, -0.0329157300, -0.1424382925, -0.0987272933, 0.0271229781, -0.0955112055, 0.0730579495, -0.1595646143, -0.0575779080, 0.0148671474, 0.0326034762, 0.0174837094, 0.0003535434, 0.1073099747, -0.0748684108, -0.0586478822, 0.0107308319, -0.0252749212, 0.0377662703, -0.0472598225, 0.2043489814, 0.0840719715, -0.0664931312, 0.1907304823, -0.1288578212, 0.0508781932, 0.0843701959, -0.0894949213, -0.1032733917, 0.1120175570, -0.0235550739, 0.0354168005, 0.0302958768, -0.0943006799, -0.1138487458, -0.1737009287, -0.0227176026, 0.0274141356, 0.0776640549, -0.0028730570, -0.1155292615, -0.0396007560, -0.0440562107, -0.0287668034, -0.1056386679, 0.0351099968, -0.0362631455, -0.0194454417, -0.0152805280, -0.0358058549, -0.0330630429, -0.0698772520, -0.1235095859, -0.0466821231, 0.0849652290, 0.0587071851, -0.0369749814, 0.0541610084, -0.0347692668, 0.0108033074, 0.0711001530, 0.0213061478, -0.0316072330, -0.0892944187, 0.0649412796, -0.0724242032, -0.1002316102, -0.0061581731, -0.0528476760, -0.0524298511, 0.0718840733, -0.0074030161, 0.0520092361, 0.0852200314, -0.0785263553, 0.0351487286, 0.0144226030, 0.1092750505, 0.1156058609, 0.0270392336, -0.0643146560, 0.0643102303, 0.0839787349, 0.0813757330, -0.0625846833, 0.1061268151, -0.0817926824, -0.0096044848, 0.0696561411, 0.0465114973, -0.0610635094, 0.0061640912, 0.0293690860, 0.0130488956, -0.0427743755, 0.0558183715, 0.0216413289, 0.0896091908, -0.1074126735, -0.0364566632, -0.0507957339, 0.0793082863, -0.1114649773, 0.1163871810, 0.0030435631, 0.0251132865, -0.0575713962, -0.0734633207, 0.0226432700, -0.0448223837, -0.0317652859, 0.0684951395, -0.0497896336, -0.0341576450, -0.0471313745, 0.0052868887, 0.1208389178, 0.0006748678, 0.0199228171, -0.0381070785, 0.1567709893, -0.0211634506, 0.0093483562, -0.0013064885, 0.0159698017, -0.0320255198, 0.0410367996, -0.0822822973, -0.0107757198, 0.0542303883, -0.0349956006, -0.0468531363, -0.0738721639, 0.0253914371, 0.0124326460, -0.0214299690, 0.0102906525, 0.0667937398, -0.0641322136, -0.0208021458, -0.0080080498, -0.0968579203, 0.0464893393, 0.0317055397, -0.0214899536, 0.0612499751, -0.0695912018, 0.0670085177, 0.0870814100, -0.0007286537, 0.0339725502, 0.0330302566, -0.0961226746, -0.0363015682, -0.0150343077, 0.0641700998, 0.1378734708, 0.2562057078, 0.0746645033, -0.0260687247, 0.0031652059, -0.1475182027, -0.0814915523, -0.1054236591, 0.1297832280, -0.1754415631, -0.0459583551, -0.0432292707, -0.0850017294, -0.1527021676, 0.1063823700, -0.0195086729, 0.0168113150, 0.1003181189, -0.0387327857, -0.0493681878, -0.0050783837, 0.1892411113, 0.1766466647, 0.0918917358, 0.0455235429, -0.0038691028, 0.2190934122, -0.0288416147, -0.0811977386, 0.0869174823, -0.1194239557, -0.1025594324, -0.0779841840, 0.2249618769, -0.0554049164, -0.0533656105, -0.1309129000, -0.1854865551, 0.0365032554, 0.1340607256, 0.0857246220, 0.0292212814, 0.0534422249, 0.0639926046, -0.0673429519, -0.0299921706, -0.0668162331, -0.0682579800, 0.0519051291, 0.1238759682, 0.0156517178, -0.0179299396, -0.0693737268, -0.1091764867, 0.0877994299, 0.1037340090, 0.0046440382, 0.0029484031, 0.0323455147, 0.0665811896, 0.0329139009, -0.0192885231, 0.1209352687, 0.0565464050, 0.1530142576, 0.0334689952, 0.0627418831, -0.0712030679, -0.0260019060, 0.0192597732, -0.1263588518, -0.0052631479, 0.0288155172, -0.0047795223, -0.0169403739, -0.0139751388, -0.0285019930, -0.0030853362, -0.0480104610, -0.1108385623, -0.0816669166, 0.1435136050, -0.0254435316, 0.0983748287, -0.0981315151, -0.0577371083, -0.0580170490, 0.1538790166, -0.0729567334, 0.0548156612, -0.0344317108, 0.0244248901, -0.1208381504, 0.1118934751, -0.1254687309, 0.0469433516, -0.1231902987, 0.0540232956, 0.0908991620, -0.0169751607, 0.0726274848, 0.2505280972, -0.0222988427, 0.0558666065, 0.0632380247, -0.1839433908, -0.1802999675, -0.0624589846, 0.0199963190, -0.2127337754, -0.1466456056, 0.0901379362, 0.0139251770, 0.0497886725, 0.0474692918, -0.0631425306, 0.0044236109, 0.0526345521, 0.0071716132, -0.1130255759, -0.0126219578, 0.1745942533, 0.0589272045, 0.0793005303, 0.0305233356, -0.0917471871, -0.0514106229, 0.0558661893, -0.0777843222, -0.0023380250, 0.0129048796, -0.0297345221, -0.0331262611, 0.0825349614, -0.2097322196, -0.2045466751, 0.0051693204, 0.0121831642, 0.0471711457, -0.0080221361, 0.2210879773, 0.0979895890, -0.0126453945, -0.0287063234, -0.0492378883, 0.0096923169, 0.0549137183, -0.0218216535, -0.0627934635, 0.1350450367, -0.0758739188, -0.0621399134, 0.0067695063, 0.0447603390, -0.0146024441, -0.0178080034, 0.0582846999, 0.1451193392, -0.0564870127, -0.0229945537, 0.0281150714, -0.0335058756, 0.1082122922, 0.1580757648, 0.1353377998, -0.0695492551, 0.0018399112, -0.1300540268, -0.0638682246, 0.0300000925, 0.0434456207, -0.1404968053, -0.0152461408, 0.0733639821, 0.0070870207, 0.1450371146, -0.1124006659, 0.0879272148, 0.0057907556, -0.0332250372, -0.1781193614, -0.0506945364, -0.1249725074, 0.0174133349, -0.0614144094, 0.0260217786, -0.0881256983, 0.1790802628, -0.1230412796, 0.1246845871, 0.1025773063, -0.0460262783, -0.0522379689, 0.0236996245, -0.2129933983, 0.0759738758, 0.0890215412, 0.0016378398, 0.0484023876, 0.0414261185, -0.0915121436, 0.1271148324, 0.0050084558, -0.0421229824, -0.0557296239, -0.2193331122, -0.1090969816, 0.0706487000, -0.0551575944, -0.1951693743, -0.0675395802, 0.1892536879, 0.0719456002, 0.0610964485, 0.1472657919, -0.1586810648, -0.1956239641, -0.1416668594, 0.1467613429, 0.0559444502, 0.0717009231, 0.2140710652, -0.0279502925, 0.0950626358, -0.0551046170, 0.1563231647, -0.0639320612, 0.0547322892, 0.0238337889, 0.0024516026, -0.2177726477, -0.0379692949, -0.1001220942, 0.0738692507, -0.0907121971, 0.1014871895, -0.0895307064, 0.0904929191, -0.0566215739, 0.1168562770, 0.0335975625, -0.0105443681, -0.0467238426, -0.0617417730, -0.1022821441, 0.1697715223, -0.1219172925, -0.1144303158, -0.0074589993, -0.0443291590, 0.0090515874, -0.0129501643, 0.1180509180, -0.0323694646, -0.1014447808, 0.0020778314, 0.0766838491, -0.1175829694, -0.0794835314, -0.0666663125, 0.0153915789, -0.0893342942, 0.0110091716, -0.0731977001, -0.0255538579, 0.0115082795, 0.1615973413, -0.1630928665, 0.1365797967, -0.1258827299, 0.0553573444, -0.2979359329, -0.0462893881, 0.1465660036, -0.0157325268, 0.1299578398, 0.0633130819, -0.1599429846, -0.0053686495, 0.0132414987, -0.0896758661, -0.0471869484, -0.0932918191, 0.1528299302, 0.0918720290, 0.0852560773, 0.2289533317, 0.1004515141, -0.0315794125, 0.0609057993, 0.0050245337, -0.1890143007, 0.0026316566, -0.2140690982, -0.0532923862, 0.2366435975, 0.0936464891, -0.2053528130, 0.1057553813, -0.1671684086, -0.0111574754, 0.0310639348, -0.0398894548, -0.1825955063, -0.0582644306, -0.0314430557, -0.0503069088, 0.0072830785, -0.0157030188, -0.0868143588, -0.0716522411, -0.0194339417, 0.0718722790, 0.1106413230, 0.0694932416, -0.1540812999, -0.1155467927, -0.1332079321, -0.0944885984, 0.1346158981, -0.1333300769, 0.1712456197, 0.1361310333, 0.1250794232, -0.0521938652, -0.0400451683, 0.0532251224, 0.0791149437, 0.0531623550, 0.0048097037, 0.0534090139, -0.0676851422, -0.1730401814, 0.2796888649, 0.0103824288, 0.0028637787, -0.0788243935, 0.0004837593, 0.1062655821, -0.0194797721, 0.0263179000, 0.0283390991, -0.0781510919, -0.0500176102, -0.0400914140, 0.1365575790, -0.0834279507, -0.0387951769, 0.0762700140, 0.2015105933, -0.1281293482, 0.0109958081, 0.0924112573, -0.0591337308, -0.0502014309, 0.2313577384, 0.1159303561, -0.2189258188, 0.0166604631, 0.1838457584, -0.0745238215, 0.0610205829, 0.0175681021, -0.1369392276, -0.0285309702, 0.0030909546, 0.0245938525, 0.0344047733, 0.0828062147, -0.2705792785, -0.0692506358, -0.1669293344, -0.0372728035, -0.1142047048, 0.0515781306, 0.0765543878, -0.0646604449, -0.2289884835, -0.0301134065, -0.0008507105, -0.0944128409, -0.0340055674, 0.0213083234, 0.0330500007, 0.0260777045, -0.1797789782, 0.0400037989, 0.0713085756, -0.0054743537, 0.1282162815, 0.0317496508, -0.1148072779, 0.0647949129, -0.1878699809, -0.1268115789, 0.0621901713, 0.0041126870, -0.2705018818, 0.1424090713, 0.1100271568, 0.0734276399, 0.0852535740, -0.0235375930, -0.0288547780, -0.1021704823, -0.2084325701, -0.1289052814, 0.0043507954, 0.1029990837, -0.0819707140, 0.0152205369, -0.0713647902, 0.0136883827, 0.1803057790, 0.1884277612, -0.0522670820, -0.2377813309, -0.0560916774, -0.1285395771, -0.0441937409, -0.1518032700, 0.0925304443, 0.0765666366, -0.1632671654, -0.0938134417, -0.0417077504, -0.0170925800, 0.1166752949, -0.0022008768, -0.0184740555, 0.1524361819, 0.0074616587, -0.2182816714, 0.1567226201, 0.0930658728, 0.0471751913, 0.0098557109, 0.0561440289, 0.2089344710, 0.0735147744, -0.2209052294, -0.0580554269, -0.1379133314, -0.0677414089, 0.0007607011, -0.0451442413, -0.0507566668, -0.0272876322, -0.0241466165, 0.1340354383, -0.1919854730, -0.0308512449, 0.0959813371, 0.0610662997, -0.1523994058, 0.1220421270, 0.1738503277, 0.0012385033, 0.0807098374, -0.0520187169, 0.0441960730, -0.0281783994, -0.1338375211, -0.0127885910, 0.0259206556, -0.0282535292, -0.0419028811, -0.0002609343, -0.0475915223, -0.1971910000, -0.0751677305, -0.1502101123, -0.0087748049, -0.0592751801, -0.0186420940, 0.1712876260, -0.1638828814, -0.0982106179, -0.1031505764, -0.1228276193, -0.0373491533, -0.0209137369, 0.0432742462, 0.0608573705, 0.0499144271, -0.0851111785, 0.2123617083, 0.0619226918, 0.1243560314, -0.1794534326, -0.0778114423, -0.1927675307, 0.1261706948, -0.0816878080, 0.1085430905, -0.0057891347, -0.0894562677, -0.0951682702, 0.2014185190, 0.1245036647, -0.0129543692, 0.1288228184, -0.0678359568, -0.0339030474, -0.1261173338, -0.0092409756, -0.0051653385, 0.0736048669, 0.0092341695, -0.0275340788, 0.0749054030, -0.0178890564, -0.0047874483, 0.0135317864, 0.0827766806, -0.0923155025, -0.1972082257, -0.1973648816, -0.1296015382, -0.0790339112, 0.0555983633, 0.0164795835, -0.0051185950, -0.1090418026, -0.1220164299, 0.0811453909, -0.0108793592, 0.0337829627, -0.0053227278, 0.0718839616, 0.1214353666, 0.0655470565, -0.1636875421, 0.0510606691, 0.0449709147, -0.0141840484, 0.0829893798, 0.0016129190, 0.2118957043, -0.0045841043, -0.2367141694, 0.0345572233, -0.1421920210, 0.0019388626, -0.1745071262, 0.0207731556, -0.0366772525, 0.0315403715, -0.1061431617, 0.0574224666, -0.1490378678, -0.1487890780, 0.2621013522, -0.0549727269, -0.0862009972, 0.0591883808, 0.0396633074, -0.0528483577, 0.0497864932, 0.0883291140, 0.0666871518, -0.1340498328, -0.1326620132, -0.0276108701, -0.0485492609, 0.0391593203, -0.0833266675, -0.0252048504, -0.1034318358, -0.1845421493, 0.0623477884, 0.0198276006, -0.1612123102, 0.0446903110, 0.0269319657, 0.0753518790, -0.0859109461, -0.1793181151, -0.1092228740, -0.1307101548, -0.3996877670, -0.1850305349, 0.0489478372, 0.0899823681, 0.0204675160, -0.0357923657, 0.0345667936, 0.0484150797, 0.1337968409, 0.0048797643, -0.1117270663, -0.1035469249, 0.0571155027, -0.1268526465, 0.0536066145, 0.0231969431, -0.0716800764, 0.0688448101, 0.0419885963, -0.0321474932, 0.0874221921, 0.0715353787, -0.1235016659, 0.0040312456, 0.0091011683, -0.0281479470, -0.0553718954, 0.0069795796, 0.1306317449, 0.1036953703, 0.0125407698, 0.0242665727, 0.0042733606, 0.0128937783, -0.0263017733, 0.0072774468, -0.0520290285, -0.1475968063, 0.0179395322, -0.0621871203, 0.0885015130, -0.0305345971, -0.0973154604, -0.1107508019, -0.0146765066, -0.0011628630, 0.0521261916, -0.1054970846, 0.0402310081, 0.0916955099, 0.1752504259, 0.0015094415, -0.0257618893, -0.0755846426, 0.0184594449, 0.0991054922, -0.0277950149, -0.1701068580, 0.1058040559, -0.0292992368, -0.2010678947, 0.0069859396, -0.0420793332, 0.0159786325, -0.1183807552, -0.0188606028, -0.0420803949, -0.0189186838, -0.1979619712, 0.1076837331, -0.1519134045, 0.1032267660, 0.0898417979, -0.0808100626, -0.2611244619, 0.0893851072, -0.0130748739, 0.0792971700, 0.0852455795, 0.0627675951, -0.0468027741, -0.1454398632, -0.0111856936, 0.0216357671, -0.0645163432, 0.1366225630, -0.0634102076, -0.0279756878, -0.1384428144, -0.0506994240, 0.0406226851, 0.0186873041, -0.1998972148, 0.0608280934, 0.1356699765, 0.0882636830, -0.0601746030, -0.0612585358, -0.2899056971, -0.0521431193, -0.3608028591, -0.1954716444, 0.0762251243, 0.2003770173, -0.1101582125, -0.0569174998, 0.0804162472, -0.0368075222, 0.0890927017, 0.0946850702, 0.0624018610, -0.0427159965, -0.0599501878, -0.1703637689, -0.1142047048, -0.0920573398, -0.0413513593, -0.1005781889, 0.0760691315, 0.0802394301, 0.0340535790, 0.0599938072, -0.0244426895, 0.0679830015, -0.1185731888, 0.0623163618, 0.0266469866, 0.0473664962, 0.0216135997, 0.2422953546, 0.0055060959, -0.0067055537, -0.0234181024, -0.0327461325, 0.0031105245, -0.0117287263, 0.1499786079, -0.1922620684, 0.0680763200, 0.0133635402, 0.0488486849, 0.0610550605, 0.1125108972, -0.1374038756, -0.0597534440, 0.0452831276, 0.1648382246, -0.0140395090, -0.0213965680, -0.0294895023, 0.1488944441, -0.0506425761, 0.0220430624, 0.0003398919, 0.0415053703, 0.1495916992, 0.1274484843, -0.2319099456, 0.1656844467, -0.1692534387, -0.3299573958, 0.0593447760, 0.0235690661, 0.0512702577, -0.0147058750, 0.1483761072, 0.0470812656, 0.0975993276, -0.2059655935, -0.0362379029, -0.0642435253, 0.0882500783, 0.0396274664, -0.1790332794, -0.2167751640, -0.0421945788, -0.2231162190, 0.1133068874, 0.0233013891, 0.0321779214, 0.0691879913, -0.1095638648, 0.0745287612, 0.1774578840, -0.0729932189, 0.0945384502, -0.0406191647, -0.0541729741, 0.0017684301, -0.1228667349, 0.0318582095, 0.0311091486, -0.2201963216, 0.0117750447, 0.0078097256, 0.0968914554, 0.1300434917, -0.0447646789, -0.2376389056, -0.0471189693, -0.1761262268, -0.0822784975, -0.0787403882, 0.1434183270, -0.1239492968, -0.0563437939, 0.1462282538, 0.1331689954, -0.0376857482, 0.1271942854, -0.0698809773, -0.0870220438, -0.1017889455, -0.0926700383, -0.0403443091, 0.0187143534, -0.1232532039, -0.1795713305, 0.1291954815, 0.0982305780, 0.0739261508, 0.1736235619, 0.0898519158, 0.0530836284, 0.0824573785, 0.0195481181, -0.0693862438, 0.0037408667, 0.1351850331, 0.2802968025, -0.0222027712, -0.0537548885, -0.0668309629, -0.0521071106, 0.2156922221, -0.1267912984, 0.0756219551, -0.4200998843, 0.0936833322, -0.0945681036, -0.0074604042, 0.1335552186, 0.0735226572, -0.0874425918, -0.0850223899, 0.2325728536, 0.0078640124, -0.1315905601, -0.0359594598, 0.0638883710, 0.0656316802, -0.0323981270, 0.1618881375, 0.0081606591, 0.0769570842, 0.0371809863, 0.1706791967, -0.0090310965, 0.1799966991, -0.1867894679, -0.1784833223, 0.1130837649, -0.1254890859, 0.0206740405, 0.0420109555, 0.0269957967, 0.0484724343, -0.0887906328, -0.4007938206, -0.0411796235, -0.1356879473, -0.0659202859, -0.0709654465, -0.2436770499, -0.2338745296, 0.0398076102, -0.2642108500, -0.0749422461, 0.0354463980, -0.0692177042, 0.1234591380, -0.0178529415, 0.0742211789, 0.0796397850, 0.0136618558, -0.0226422567, 0.0635734648, -0.0333079621, -0.0268334821, 0.0760131553, -0.0621818341, 0.0403877608, -0.2989398539, 0.0172420926, -0.0407083966, 0.1798147708, -0.0081544407, 0.0024601452, -0.2514522076, -0.0306337625, 0.0125980973, 0.0989625379, -0.1247234792, 0.1914743483, -0.0347203314, -0.1625904441, 0.0927215144, 0.0658138245, -0.0252521299, 0.0928406119, -0.2218477726, -0.0103054680, -0.1396586001, -0.1163698882, 0.0493768528, -0.0594245419, -0.1025454774, -0.0354785100, 0.1946411729, 0.1506402344, 0.1025353521, 0.1015068889, 0.0312690772, -0.0240041446, 0.1724425107, 0.1148619726, -0.1592296362, -0.0030655114, 0.1296727657, 0.1943695694, -0.1045899168, -0.0459290072, -0.0259892046, -0.0745682344, 0.0071547381, -0.1415072531, 0.1097058803, -0.3856177628, 0.1529095322, -0.1443215460, 0.0040041534, 0.1886166036, 0.0446702614, 0.0916637555, -0.0060611065, 0.1479371339, 0.0919850320, -0.0393707380, -0.0404059961, -0.1348549277, -0.0569313616, -0.0214774497, 0.0593364947, 0.0554121472, 0.0801348910, -0.0051685991, -0.0559219085, -0.0189110395, 0.0176935568, -0.0964305624, -0.1852792352, 0.0077462574, -0.0762672499, 0.0104656322, -0.0227085855, 0.0182658825, -0.1005039737, -0.0595810935, -0.2519255579, 0.0307308901, -0.1883095801, -0.0296057556, -0.0952177942, -0.2278348356, -0.2473825812, 0.0571199246, -0.1545843482, -0.1508032680, 0.1483140439, -0.0770431831, 0.0766782910, 0.0516539663, -0.0398846865, -0.1484293640, -0.0237600338, -0.0435733683, 0.1004090235, 0.0152505860, -0.0575230308, 0.0460968204, -0.0415656753, -0.0055858823, -0.2411252260, -0.0166509729, -0.0904306397, 0.1569114923, -0.0948446095, -0.0023810971, -0.1569804400, -0.0180953071, 0.2173865438, 0.0682825223, -0.0367062204, 0.1351204365, 0.0252878983, -0.0731466636, -0.0266746525, 0.1923457384, 0.0584794506, 0.1064736992, -0.1976290047, 0.1021938175, -0.0055058021, 0.0189915802, 0.0983286351, -0.1145671532, -0.1038782150, 0.0558581688, 0.0961847156, 0.2060173750, 0.0696309656, -0.0027431455, 0.0864667371, -0.0215375479, 0.1055502966, 0.0655520111, -0.0727109388, -0.0490697846, 0.1474608332, -0.0398870632, -0.1029329449, -0.2283650637, -0.1558040231, -0.1418790966, -0.0188778676, -0.0604370125, 0.0332078263, -0.0238469206, 0.0415762067, -0.0120892720, 0.0574001111, 0.1794415414, 0.0062102834, 0.0904461816, -0.1131825671, 0.1078670695, -0.1074693203, -0.0502215661, -0.0610595010, 0.0162105188, -0.2925806046, -0.0080843624, 0.1331577748, 0.0346654803, 0.0679683164, -0.0891064480, -0.1851900220, -0.0442776158, -0.0072539928, -0.1639123261, -0.1219195351, 0.0384688787, -0.0084885228, 0.0056607910, -0.0469790474, -0.0612051487, -0.0381864235, 0.0241989512, -0.1424446702, 0.1034540012, -0.1352136284, 0.0782929286, -0.0844582245, -0.1966902912, -0.3195070028, -0.0268315058, -0.0822134838, -0.0667301640, 0.0766229704, -0.0170133989, 0.1447734088, 0.1620580405, -0.0625621825, -0.1121976450, 0.0635483041, -0.0697746798, 0.1252222806, -0.0867293552, -0.0838979706, 0.0017136465, 0.0556898341, 0.0379270129, -0.0330877528, -0.0583548732, -0.3129152358, -0.1392253488, -0.1490140557, -0.0107135475, -0.0450953692, -0.1944164485, 0.2439858466, 0.2036353648, 0.0912891701, -0.0612824485, 0.0038252594, -0.1285831630, -0.0652827695, 0.1912700087, -0.0760672614, 0.1522520185, -0.0375026651, 0.0407685116, -0.0166096073, 0.0919142663, 0.1693879217, -0.0253727306, -0.0206485670, 0.1693278849, 0.2382677495, 0.1640774459, 0.0935747847, -0.1072098687, 0.0583821349, -0.0522067696, 0.1534911990, 0.0798676834, -0.0424032100, -0.1384734511, -0.0726557449, -0.0623069368, -0.1235860363, -0.1702858955, -0.0879533067, -0.1528469175, 0.0286505222, -0.1206974387, -0.1298089325, -0.0776696429, -0.1132743508, -0.2222804576, -0.1211753190, 0.1134400442, 0.0415005311, 0.1181811541, 0.0114842178, 0.1461615413, -0.1883908659, 0.0351435952, -0.0298365410, 0.1366885006, -0.3959456682, 0.0601368025, 0.1553460658, 0.1056584865, -0.0174452383, -0.0519103557, -0.1344369054, -0.0753745362, -0.1890558004, -0.1234566197, 0.0252027456, 0.0012962595, 0.0504614562, -0.0719737187, 0.0215040911, -0.0199445672, 0.0353641883, -0.0942398682, -0.1763368547, -0.0582794659, -0.3258171678, 0.1265939176, -0.1864724010, -0.2012984753, -0.3326132298, -0.0921206400, 0.0838079900, -0.0534335822, 0.0383388773, -0.1163706779, 0.0459886715, 0.2138466686, -0.1340776086, -0.1232998073, 0.1353515983, -0.1276215017, 0.1166524515, -0.2578316629, -0.0354784504, -0.0771268681, 0.0718434528, 0.0351426266, 0.0765367672, 0.0123099713, -0.1498328596, -0.1089693606, -0.0624719076, -0.0468514711, -0.0283666495, -0.2848780751, 0.1422972530, 0.2044978440, -0.0046190759, -0.0909770876, 0.0709936395, -0.2788445950, 0.0630004033, 0.1866340935, -0.0956212729, -0.1162955761, -0.1059804633, -0.1889918149, -0.0670423508, 0.1813634336, 0.0637219474, -0.2305606157, 0.0715242028, 0.2067507058, 0.2364345491, 0.2903195620, 0.0189862512, -0.0866339505, -0.0329400301, 0.0504822843, 0.0161323044, 0.0104549499, -0.0174627174, 0.0273666475, -0.1240324825, -0.1846060604, -0.1919347495, -0.2167924345, -0.2097021192, -0.2200052589, 0.0361882076, -0.2573696971, -0.2299715281, 0.1380113810, -0.1864314377, -0.2513971329, -0.1281546950, 0.3172814548, 0.1097207665, -0.1504955441, 0.0493217930, 0.3572680056, -0.0387847759, -0.1715380251, -0.1469507664, -0.0277685635, -0.2963563204, -0.0689685047, -0.1690956205, 0.1360558867, 0.1082119271, -0.2042128742, -0.1828194410, 0.0321898386, -0.2554868162, -0.0710244626, 0.1578061432, -0.0742639303, 0.0132322637, -0.0554928705, -0.1261026114, -0.1444651186, -0.3298931718, 0.0610398017, 0.0091511877, -0.0505289286, -0.4915458858, 0.1015883982, 0.0867920145, -0.1335139871, -0.3710265756, 0.1844596863, 0.2053170502, -0.0819228217, -0.1690859348, 0.0333246402, 0.0920019448, 0.1567979157, -0.0726906508, -0.1807306707, 0.1303781569, -0.1034208536, -0.0206680521, -0.0761091486, -0.0469467416, 0.0357326679, -0.0010763825, -0.0114000309, 0.1738317907, -0.0953456908, -0.0098942351, -0.1271080971, -0.2801767886, -0.1400990635, 0.0378428139, -0.2175348848, 0.0386577658, -0.0360300280, -0.0502479337, 0.0701241419, 0.0203869902, -0.1564930230, -0.0266339350, 0.2570760846, -0.1484363079, -0.1144357696, -0.0768589154, -0.1824319363, -0.0625257790, 0.1525015831, 0.0538165085, -0.1344222128, -0.0687651709, 0.1345994473, 0.0508088507, 0.2298534065, -0.2471006513, -0.0544836447, -0.0183646437, 0.0465363413, 0.0736665130, 0.0172252208, 0.0657598525, 0.0727403983, -0.1456969827, -0.2611177564, -0.0569877513, -0.1901178062, -0.1542248875, -0.1486398578, 0.0781640932, -0.0158714708, -0.2234235406, 0.1051730141, -0.2840133011, -0.0912133157, -0.1000567675, 0.2346435785, 0.0592230000, -0.3060496747, 0.0266608149, 0.2251497060, 0.0314367041, -0.1015154421, -0.2217332721, -0.0350323915, -0.1872013658, 0.0303275678, -0.3399323523, -0.1405465752, 0.1079722270, 0.0315207876, -0.2346716374, 0.1434561014, -0.2140366733, -0.1297475994, 0.0203688964, 0.0161059368, 0.0063323360, -0.0262363926, -0.0693025291, 0.1347373128, -0.2031977773, -0.1378054768, 0.1591636240, -0.1443036348, -0.4414936900, 0.2260427326, -0.0070761396, -0.0036529691, -0.1327687204, 0.0760079622, 0.2657674551, 0.0730320215, -0.1722102761, 0.0326599777, 0.0587068424, -0.0269328207, 0.0768420994, -0.1595628560, 0.2549222708, -0.1922920942, 0.0508868061, -0.0021290276, -0.0179356225, 0.1999069899, -0.0116581321, 0.0028623515, 0.2176089883, -0.1912453324, 0.0648991391, -0.0292811804, -0.3724932671, -0.1105217710, 0.2885603607, -0.0651163533, -0.1925811321, -0.1916367859, -0.0270091742, 0.0040389244, -0.0358698182, -0.0032545766, -0.0719593391, 0.1582215428, -0.1706769317, -0.0847653672, -0.0888914317, -0.0734285265, -0.0240257327, 0.2498531640, 0.1986177266, -0.0218931660, -0.0618328527, -0.1297587156, -0.0212530047, 0.0006266804, -0.2547890842, 0.0758089200, -0.1060578302, -0.0451501384, 0.0555365644, -0.1255935580, 0.1121275797, -0.0337956958, -0.0607065894, -0.1085024029, -0.1155091524, -0.2643142045, -0.1191646531, -0.1543531716, 0.0946976542, -0.0986826494, -0.1347659975, 0.1136081591, 0.1121286973, -0.0411023721, -0.2301590741, 0.1849132627, -0.1320538968, -0.1597417891, 0.1505245119, 0.1162975058, 0.1904649138, 0.0062500639, -0.3153488338, -0.1053633466, 0.0823068991, -0.0453886203, -0.2593637407, -0.3233000934, 0.0775254294, 0.1175049618, -0.1013560668, 0.0205346141, -0.2438187599, -0.1238402575, 0.1054690555, -0.1028135493, -0.0744031966, -0.0827158764, -0.0883248001, 0.0791512355, -0.1157053262, -0.0854992121, 0.1770363003, -0.0028354812, -0.0901255012, 0.0793001428, 0.0325160176, 0.1149357185, 0.2072802484, -0.1163046360, 0.0438371710, 0.1674852371, -0.0683904588, -0.0454475358, 0.0719295815, -0.0888672993, 0.0032908404, -0.1606549323, 0.1280170083, -0.2455723882, -0.0679068789, -0.0017659233, 0.0240109265, 0.0957591385, -0.1263242513, -0.0698730201, 0.0457974263, -0.1012469903, 0.2292043567, 0.0975699276, -0.2423843294, -0.0609791614, 0.2882786989, 0.1977134943, -0.2049410790, -0.1211291403, -0.1570723802, 0.0161046330, -0.0939718932, -0.0391949899, 0.0063272761, 0.1541109383, -0.2068606764, -0.0121142026, -0.1635160148, 0.0715454295, -0.0898238793, 0.0902044401, -0.1045465022, 0.0067876624, -0.0172867551, -0.3056596220, -0.0462192036, 0.0822438821, -0.3020848930, 0.0365597308, -0.1061353683, -0.0574817024, 0.0469940975, -0.2089471817, 0.0028823060, -0.0530595519, -0.0128413755, -0.1911262572, -0.0025049185, -0.2702752948, -0.1154342964, -0.1544361562, 0.0401884988, -0.0854099691, -0.2060026824, -0.0930915177, 0.1427786350, 0.0475648493, -0.1188489422, 0.0505312458, 0.0010651923, 0.0446093492, 0.0537190326, 0.0147730801, 0.1785224676, -0.0322031826, -0.2571321428, -0.0539115556, -0.0469271243, -0.0926801860, -0.1783813536, -0.2149375379, -0.0034891751, 0.0569459014, -0.0352651961, -0.0210830979, -0.1193304136, -0.1819255054, 0.1608029604, -0.0055331499, -0.0068186070, -0.0712591410, -0.1029036716, -0.0547255054, -0.1304416656, 0.0424035117, 0.0804398209, 0.0596067496, 0.1763913929, 0.0176202264, 0.0996904895, 0.1266365051, 0.2416736633, -0.0552970991, -0.0526436530, 0.1710598916, 0.1512741148, 0.0396100916, 0.2000270337, -0.0029287683, 0.0565559603, 0.0063090734, -0.0451869145, -0.3025323153, 0.0901669040, -0.0667324588, 0.0171499159, 0.1816625893, -0.1111800298, -0.0463938490, 0.0265795998, -0.1185071021, 0.1420329809, 0.0546137393, -0.0862031803, -0.1538608074, 0.3409920037, 0.1942885220, -0.1324118376, -0.0084947236, -0.1389199495, 0.0877944827, -0.1246572882, 0.0851553231, -0.0888185054, 0.0274248552, -0.1440552473, 0.0165785309, -0.0535286069, 0.1389419883, 0.0023057382, -0.0797656700, -0.1869197339, 0.0313088112, -0.0683498383, -0.2349924445, 0.0434301421, -0.0819194168, -0.4548146129, 0.0617570691, -0.1316752434, 0.0417944863, 0.1125063300, -0.0954119414, 0.0401846468, 0.1351899654, -0.1179452240, -0.0929908380, -0.1338223070, -0.2297590822, 0.0677553937, -0.1157629415, 0.0024250804, -0.2339193523, -0.1022197530, 0.0526497178, 0.0416945517, -0.0136744939, 0.0731335431, 0.1009844989, 0.1116507128, 0.1406659186, 0.0620934851, -0.1191246286, 0.2420151830, 0.0336389542, 0.0085984301, -0.0263580494, 0.0130721191, 0.1030738801, -0.1680668443, 0.1679435372, 0.0521768257, -0.0087905321, -0.0923343152, 0.0194288716, 0.0438139029, -0.1847954094, 0.0268796925, 0.0107554849, -0.0690306723, -0.0729874969, 0.0706388354, -0.0408469252, -0.0861240700, 0.1264526248, 0.0960688666, 0.0812187716, 0.0414735638, 0.0254485384, 0.1141969711, 0.2043850869, 0.1119674072, -0.0450995862, -0.0120184636, 0.0782746747, 0.1299504042, -0.0796888173, 0.1196475551, 0.1317663938, 0.0913631245, -0.1282913536, -0.0032564714, -0.0728328153, -0.0131205088, -0.1477630734, 0.0231030937, 0.1022967026, -0.1185589954, 0.0410559997, 0.0093978252, -0.1034054682, -0.0165690165, 0.1181558892, 0.0874330029, -0.1606719792, 0.1093332246, 0.2205137014, -0.0618854761, 0.0880994126, -0.1269893646, 0.0889383778, 0.1631904095, 0.1401667595, -0.0214296822, 0.1120910645, 0.0076556271, -0.0340965353, -0.1055464968, 0.0225025583, 0.0317220315, -0.0763690472, -0.0970295146, -0.0428445339, -0.0649551153, -0.1885173917, 0.1813775748, 0.0264334753, -0.3599359989, -0.0227961261, -0.0482538529, 0.0769083574, 0.2702416480, 0.0778040662, -0.0949790329, 0.1524787545, 0.0078369891, -0.0489724055, 0.0375841781, -0.4402940869, 0.1388217956, -0.0302717816, -0.0247981176, -0.1073206887, -0.0938570127, -0.0531466007, -0.0313862041, -0.0062420410, 0.0440126881, 0.0922610164, 0.1857756972, 0.0672951341, 0.0653019994, -0.0071023377, 0.1649033874, 0.0569662042, 0.0633908585, 0.0205484144, 0.0127503788, 0.0119748469, -0.0513682477, 0.2760259211, -0.0671402737, -0.1171302497, 0.0182022806, -0.0210264251, 0.0864412859, -0.0756279230, 0.1363727450, 0.0464489236, 0.0285949074, -0.0399305671, 0.1075107381, 0.0486701466, 0.0614193045, -0.0015141635, -0.0611667894, -0.0299493428, -0.0156533532, -0.0621952899, 0.1087291613, 0.0746564269, -0.0208217073, 0.0286187492, -0.0446215309, 0.1114792600, -0.0419385098, -0.0319589637, 0.1991014928, -0.0129036931, 0.0516099855, -0.2931684852, 0.0351793617, 0.0581476130, -0.0102510089, -0.1437098831, 0.0459631905, 0.0044342424, -0.0371045992, -0.1142196804, -0.0839411095, -0.0637105405, 0.0234620254, 0.0949846581, 0.0646798313, -0.0337479338, -0.0431259163, 0.2965834737, -0.0916761532, 0.0356962234, -0.0222053826, 0.0970142782, 0.0415585898, 0.1909548938, -0.0374394841, 0.1525011808, 0.0017259938, -0.0005203139, 0.0468933284, -0.0235403311, 0.1376542747, 0.0393528603, -0.2106868178, -0.0595570244, -0.0436890610, -0.1071751863, 0.1299884021, 0.0932143405, -0.4799627066, -0.1238432452, -0.0213135704, -0.0224921014, 0.1782920510, -0.0346643403, -0.1022821665, 0.0399677046, -0.0200039987, 0.0248596873, -0.0143723944, -0.4298303723, 0.1630176306, 0.0863861069, 0.0560000390, -0.2360660583, -0.2397379875, -0.0567727685, 0.0308385696, -0.0051629888, 0.0762427747, -0.0016490527, 0.2013327181, 0.1025930718, 0.0901809186, -0.0167388134, 0.1954927891, -0.0960506499, -0.0228215344, -0.0194371790, -0.0812342688, 0.0884031951, 0.0488343425, 0.1903987229, -0.0396016613, -0.0713376626, 0.1177199557, -0.1022620201, -0.1008043215, -0.0017717598, 0.0992132798, 0.0079336111, 0.0140331350, -0.0711004734, 0.1214558482, -0.0424027145, 0.0816733763, 0.0053271931, -0.1210148633, 0.0517722219, -0.0016243533, -0.1828656346, 0.0027035598, 0.1126669347, -0.0648257956, -0.0560454912, -0.0923070982, 0.0596189499, 0.0420009308, -0.0583789349, 0.0530409403, 0.0127096036, -0.1526135355, -0.4789479673, -0.0187959801, 0.1540096253, -0.0106301103, -0.0947307944, 0.0524080992, 0.0525483191, -0.0392457284, -0.0201127417, -0.1243847609, -0.0345221162, -0.0860344321, -0.0162497740, -0.0693679973, 0.2238000929, -0.2048040330, 0.1517060846, -0.0177497435, 0.0481934361, -0.1470187902, 0.0635091364, 0.0986569896, 0.0924933925, -0.1672374457, 0.1424114853, -0.0200614706, 0.0188251901, 0.0287603345, 0.0107075870, 0.0281012692, -0.0482573621, -0.2024705559, -0.1353496015, -0.0188762005, 0.1060734540, 0.0881179497, 0.1278327256, -0.3187212944, -0.1040482819, -0.0363207497, 0.1284955740, 0.0729434490, -0.0382078215, -0.1978806108, 0.1448881626, 0.0115998294, 0.0075031566, 0.0592509583, -0.2906253636, 0.0163634717, 0.0499212444, 0.0742753968, -0.1846688390, -0.2943958342, -0.1715230644, 0.0496874973, 0.0866538063, 0.1660575420, 0.1085455939, 0.1684526205, -0.0300264675, 0.0768866390, 0.0893795863, 0.0862074345, -0.1607774347, -0.0511075370, -0.0338822864, 0.0560500026, -0.0455225557, -0.0730310157, 0.1203872785, -0.0223478395, -0.0402169041, -0.0273377039, -0.0070021818, -0.0677903593, 0.0154748494, 0.2345304340, 0.0345091783, -0.1171040908, 0.0388692841, 0.0184953101, 0.0831106454, -0.0853061527, 0.0628976598, -0.0466835052, 0.0546062849, -0.0903809518, 0.0405080132, -0.0431162156, 0.1206904277, -0.0960124731, -0.3257189989, -0.1140787676, -0.0108001018, -0.0319452956, -0.0115363356, 0.1227380261, -0.0850141048, -0.2697087824, -0.4455519021, 0.0836884156, 0.1727560610, 0.0886856839, -0.0125695448, 0.0484236106, 0.1495291293, 0.0102927070, -0.0706610307, -0.1954320520, 0.0197244398, -0.0793978497, -0.0655009449, -0.0232668296, 0.2019517571, -0.3553793430, 0.0213610511, -0.0411686450, -0.0212191064, -0.0638009310, 0.0765953213, 0.0772711784, 0.0365652516, -0.0616651773, 0.0716111809, -0.0253126100, -0.0014748137, -0.0041058501, -0.0222346857, -0.0029906936, -0.1247343123, -0.0150858229, 0.0307924021, -0.1426806599, 0.0649187863, 0.0605147071, 0.0202086288, -0.4534416199, 0.0058880476, -0.0326643251, 0.0605830364, 0.1872655153, -0.0897688046, -0.2215008140, 0.0123680998, 0.1120915338, -0.0830088630, 0.0971083790, -0.1928395331, 0.0036138962, 0.0631225631, 0.2009660751, -0.1625054628, -0.2262075543, -0.2987094522, -0.0176944770, 0.0459784418, 0.1115993410, -0.0736642927, 0.1268673390, -0.0678264424, 0.0759949982, 0.0281973537, 0.1730636954, 0.0400452316, 0.0673996657, 0.0289373491, 0.2151128650, -0.0040460764, -0.0501539931, 0.0724412948, 0.0209333710, -0.1142896414, 0.0082235662, -0.1143725440, -0.0529506318, -0.0070947860, 0.0995098725, -0.0822664127, -0.0749380291, -0.0500931703, -0.0580956936, 0.0620470978, -0.0166346487, 0.0600073300, -0.1929583251, 0.1833160818, -0.0671436489, 0.0150256427, -0.0389043167, 0.1306079328, -0.1527499408, -0.4524184763, -0.1439682841, 0.1303962469, 0.0294595417, -0.0879501700, 0.0031974898, 0.0024361631, -0.1932468563, -0.4840699732, -0.0272027012, 0.1258214563, 0.0667224675, 0.0561727993, 0.0085887797, 0.0006644618, 0.1163945422, -0.0139239654, 0.0447794832, -0.0010647904, -0.0300168172, 0.0713879243, -0.0639133602, 0.2365102321, -0.4102143347, -0.2443502545, 0.0361213721, -0.0000156619, -0.0792613029, -0.0206550732, 0.0145833483, -0.0398702212, 0.0727225393, -0.0140156960, 0.0006030446, -0.0758301243, 0.0197806284, -0.0869216472, 0.0413819626, -0.0137010822, 0.0227941051, -0.1649129242, -0.1645874232, 0.0586915724, 0.0009348522, -0.0596689098, -0.4302138388, 0.1504096836, -0.0800804421, 0.1229359731, 0.1972611696, -0.0145588024, -0.3305898011, 0.1414883137, -0.0049763452, 0.0132141160, -0.0516366735, -0.0914794058, -0.0240632333, -0.0403834470, 0.1444949955, -0.2369660586, -0.2175522596, -0.1677965224, -0.0374321938, 0.2310469747, 0.0961839408, 0.0546295643, 0.3192641735, -0.1901937276, 0.1185816377, 0.0477288105, 0.0979462191, -0.0500424951, 0.1068697274, 0.1224613339, 0.0392724127, -0.0800259337, -0.0533619337, -0.0501285344, 0.0698309019, -0.0161830895, 0.0823845416, -0.0975695625, -0.1336613744, -0.0100604463, 0.0698927119, -0.0735597610, -0.1827424020, 0.0067807930, 0.1005385146, 0.0681256205, -0.1743243486, -0.1004612148, -0.1006143913, 0.1250951141, 0.0689835995, 0.0841165259, 0.0451528616, 0.0371860266, -0.0599573739, -0.3811695278, -0.1692280918, 0.0124213938, 0.0354967862, -0.2314835787, 0.0572181828, -0.0632863566, -0.1206517965, -0.3728369474, 0.0383979976, 0.1172023118, 0.0857129991, -0.0497677699, 0.0176147968, 0.2148678154, 0.1066809148, -0.1102163643, 0.1256503314, -0.1489479095, 0.1220217273, 0.0709153265, -0.0169755444, 0.2022848129, -0.1646812260, -0.3133671880, 0.0168004259, -0.0353166275, -0.0490840226, 0.0433335789, 0.0141290063, -0.1960666925, 0.0551558286, 0.0787907615, 0.0393160135, -0.1113668084, 0.1701219827, -0.0468449816, 0.1329542100, 0.0165230334, 0.0967759192, -0.1626123488, -0.0428514220, 0.0669006780, -0.0018910232, -0.0049055060, -0.4470782578, 0.0032874667, -0.0461715348, 0.1721846908, 0.2482531518, 0.0154965241, -0.4406693578, 0.0495456085, -0.2386946678, 0.0427172519, 0.0987178609, -0.4141723812, -0.0764635876, -0.0887754634, 0.1494863480, -0.0538690425, -0.2774342000, -0.1596952379, -0.2029547095, 0.1126702875, -0.0281634908, -0.0877989978, 0.1999218017, -0.2873429954, 0.0279925335, 0.1758902222, 0.0909894630, -0.1290285587, 0.0647530183, 0.2422738373, 0.1208308712, -0.1323463172, -0.0542452298, -0.0653470233, 0.0440020636, 0.0362621918, 0.1384775937, -0.1518327296, 0.0130406031, 0.1130175367, 0.0735347643, 0.0173575543, -0.0509032719, -0.0353143513, 0.1955335289, 0.0756136104, -0.0148769328, -0.2738659978, -0.0632843971, 0.0157543141, -0.0394614302, 0.1444022655, -0.0829132795, -0.0663746148, -0.1294303238, -0.1964181662, -0.0282109417, -0.0391568318, 0.1099771932, -0.0978278965, 0.0227438137, 0.0457903482, -0.1717485040, -0.4458879828, -0.0052430215, -0.0418621488, 0.1243843883, 0.0101719378, 0.1552883834, 0.2165743262, 0.1505517215, -0.0352569185, 0.1898664087, -0.0842531696, 0.0129366703, -0.0384378508, -0.0690470561, 0.1693349630, -0.1179758981, -0.2971536815, 0.2400858700, -0.1306755990, -0.0686320737, -0.1550018489, 0.0642884821, -0.1355976909, 0.0022857699, 0.0972656384, 0.1670863777, -0.1350275427, 0.0551174209, 0.0771567672, 0.0667654648, 0.0244774669, 0.0331166312, -0.0962492228, -0.0504295379, 0.0968226641, 0.0851336569, 0.1191926152, -0.2521806359, 0.1536674052, 0.0063095908, 0.1526894569, 0.2555927336, 0.2248384058, -0.2140531540, -0.0606363826, -0.3179498613, 0.1237033233, -0.0134496614, -0.1034757867, -0.1029057354, -0.0278244801, 0.0640592203, -0.0631836355, 0.0726005659, -0.2153594643, -0.1048953459, -0.0413976610, -0.1209174767, -0.0171275437, 0.0784624517, -0.2172505856, 0.2074119151, 0.2885839045, 0.2278147638, -0.1647725850, 0.0091536427, 0.2492918521, 0.1415576190, -0.0886086002, 0.0652906522, -0.0148896622, 0.2142416984, 0.0477475300, 0.1027733386, -0.0956861675, 0.0480836891, -0.2226238102, 0.2435564995, -0.0956927091, 0.0404147618, 0.0040891566, 0.0330663249, 0.0621202476, 0.0367483385, -0.0530696772, -0.1057503000, 0.0506528765, 0.0823420063, -0.0468850173, -0.1135688201, -0.1087544784, -0.1217166334, -0.2265072763, 0.1292311400, -0.2123892903, 0.1267272830, -0.0707636178, -0.0491604842, 0.1686728597, -0.1644437164, -0.2585053742, 0.0825714543, -0.0366608277, 0.0743250176, 0.1055456996, 0.1226864383, 0.1879280061, 0.1285819709, -0.1256493032, 0.2516558170, 0.0523019284, 0.0594417825, 0.0446560718, -0.1504763663, -0.1015843600, -0.1046772078, -0.3945038319, 0.1941449195, -0.0097711179, -0.0948439986, -0.1731357127, 0.2959219217, -0.1802999079, -0.0318008885, -0.0706291273, 0.1245305315, 0.0468772836, -0.0609810203, 0.0296588168, 0.0925450474, -0.0644459873, 0.1815609485, -0.0389780477, 0.0484953523, -0.0344407335, 0.0147213452, -0.0575600304, -0.0765163973, -0.0443387739, -0.1495393664, 0.0133811440, 0.2281548828, 0.0424904339, -0.0640911162, -0.0144796902, 0.1027088910, 0.1077180281, -0.1613439471, 0.0018816171, -0.0265643075, -0.0344589353, 0.0070839855, -0.1936686337, 0.1351568699, -0.2381383032, 0.0165494438, -0.0998091847, 0.0371771231, -0.2521915138, 0.1407187134, -0.1492939144, 0.2672411203, 0.2607177496, 0.2158442736, -0.2105822414, 0.0333589315, 0.0169147309, -0.0686760619, -0.2497215867, 0.1320041716, -0.0489413776, 0.2388243377, 0.1099121124, -0.1019412279, 0.0755643845, 0.0050835456, -0.2967619300, 0.0730449483, -0.1777581871, 0.0352387950, -0.0539464876, -0.0260848850, 0.0872474089, 0.1403676420, -0.0879023969, 0.0969777331, -0.1407755315, 0.1929223388, -0.1261574030, -0.0529260635, -0.2191564739, -0.0855429545, -0.0840948299, 0.0750567988, -0.0486627705, 0.0303442515, -0.1685338020, -0.0843010843, 0.1263043433, -0.1130163372, -0.1275455952, 0.3188411891, 0.0689942837, -0.0278564822, 0.0184927750, 0.1364090443, 0.0375380926, 0.1880126297, -0.1987410337, 0.2687426209, -0.0039209169, 0.0145982206, -0.2008047551, 0.0144177303, -0.1023014560, 0.0482886583, -0.3281948268, 0.1683127731, -0.0000810976, -0.1373545527, -0.0517865233, 0.2718430758, -0.0546739399, 0.0102060558, 0.0686114281, 0.0778833777, -0.0818993226, -0.1850392371, 0.0095876865, 0.0262184609, -0.0211573113, 0.1263544858, -0.1744198054, -0.0029810304, 0.0119029535, 0.1169904768, 0.0972918123, 0.1442374438, 0.1278887242, 0.0257718768, 0.0934442580, 0.2738254666, 0.1019862145, -0.0405801274, -0.0299159922, -0.1182104275, 0.0835655332, -0.1289936751, 0.0488362573, 0.0151617182, -0.1443981081, 0.0315155275, 0.0505823009, 0.1174701601, -0.0512934662, 0.0569391996, -0.0555420071, 0.1577071398, -0.0926409811, 0.1418572515, -0.1338390857, 0.1598685235, 0.2218485177, 0.2005492747, -0.1442422122, 0.0129440464, 0.0778698623, 0.1049917564, -0.0834721625, 0.0458271764, -0.1137126982, 0.0725147799, 0.0462759770, -0.0619558357, -0.1083921194, 0.1511068791, 0.0043238476, 0.2154557109, -0.1854559332, -0.1527136415, 0.0706064552, -0.0696195811, -0.0128552718, 0.0232282616, -0.0962781459, 0.0367676206, -0.1203317568, 0.0873821899, -0.0919057354, -0.1318790913, -0.0845432654, -0.1694657505, -0.0189655982, 0.0327023752, -0.1634824723, 0.0777916461, -0.0999148190, 0.0047115092, 0.0569542423, -0.1368081868, -0.0702272803, 0.1473863572, -0.0886960849, 0.0585235804, 0.0539275296, -0.0346758664, -0.0118150087, 0.1614086628, -0.0336886570, 0.0531552173, 0.2324520648, -0.0326024927, -0.0837621912, 0.0043571284, -0.2169988900, -0.0499847792, -0.1864867359, 0.0910433605, -0.0445971228, -0.0585306957, -0.0933008343, 0.0786330476, -0.0637743920, -0.0887755379, 0.0841502100, 0.1146150082, -0.0548245460, -0.1365944147, 0.0654867664, 0.0621931665, 0.0415539779, 0.1766187996, -0.0703519508, 0.0871212706, -0.0249322634, 0.0560794137, 0.0331309848, 0.0391887277, -0.0582184866, -0.0191538110, -0.0374821313, -0.0199399237, 0.0457497239, 0.0836136043, 0.0876694247, 0.0735038295, 0.0366172865, -0.0367126055, 0.0208430868, -0.1244826242, -0.0911765248, 0.0411335863, 0.0102751432, 0.0793160200, -0.0358553864, 0.0169058926, -0.0383213088, -0.0269898660, -0.0052305660, 0.1945073307, 0.0022258770, -0.0138402255, 0.0778483227, -0.0059874696, 0.1645527333, 0.0434301309, -0.1050246730, -0.0470251851, -0.0495378673, -0.0081534395, 0.0562766939, -0.0815895721, 0.0116981575, -0.1808491051, -0.0112385331, 0.0292264726, 0.0471862964, -0.1330808699, -0.0795679763, 0.0270558242, 0.0598376542, -0.2279156595, -0.0633682907, -0.1469380260, 0.0742569044, 0.0336833522, -0.0099309804, -0.0368927754, -0.0768471658, 0.0554301329, -0.1127543449, 0.0621072836, 0.0251675565, -0.0700029060, 0.0623182692, 0.0319546238, -0.0181404091, -0.0221711192, 0.0470913798, -0.0286356620, 0.0011488125, 0.1393736601, 0.0320069529, -0.1087888256, 0.0778405815, -0.0876747519, 0.0379226469, 0.0076581696, 0.0118683372, -0.0374280699, 0.0336358622, 0.1055227593, 0.0399023630, 0.0415688679, -0.0345191099, 0.0905014575, -0.0421624668, -0.1222525239, 0.0687851310, 0.0060174917, 0.0338735990, -0.1415792406, -0.0172048770, -0.1080746353, -0.0182527695, 0.0088222502, 0.0712727681, -0.0148930196, 0.0334203131, 0.0264169909, 0.0578133017, 0.0170197990, -0.0468110777, -0.1199500486, 0.0289097615, 0.0686445236, -0.0412591398, 0.0299816225, -0.0128052160, -0.0668843687, -0.0295738429, 0.1004009768, 0.0174702834, 0.0272739567, 0.0089033833, 0.1194761768, -0.0563799962, -0.0074600116, -0.0379512981, 0.0519850142, 0.0298750587, 0.0567618646, -0.0224256106, -0.0675709322, 0.0209454056, 0.0103112161, -0.0653616413, 0.0318028256, 0.0047294158, 0.1833765656, 0.0909646228, -0.0623657182, 0.1062351763, 0.0466800295, -0.0088674426, -0.0291303284, -0.0246990379, 0.0665768087, -0.0615789033, -0.0798425525, 0.1125526130, -0.1548979282, -0.0389196277, -0.1195473596, -0.1107866764, 0.0579212904, -0.0043245857, 0.0537791960, 0.0865566060, 0.0000435527, 0.0441055000, 0.0511772074, 0.0878764242, -0.0605864637, 0.1088639200, -0.0132694626, 0.0960115269, -0.0672740564, 0.0483828411, 0.0126527976, 0.0313968211, -0.0055000517, -0.0488413833, -0.0741652027, -0.0552073196, -0.0234880876, 0.0635240749, 0.0131269339, -0.0249121562, 0.1578135192, -0.0249868333, 0.0359293818, -0.0436786823, -0.0560010970, 0.0155014778, -0.1399869174, 0.0614353791, 0.0107774464, -0.0902342647, -0.0383858718, 0.0365268812, 0.0235996991, 0.0045043258, 0.0729980469, -0.0383992568, -0.0138199972, -0.0046401778, -0.0638462678, 0.0128922882, -0.0824498758, -0.0042334478, -0.0651397184, 0.0443039611, 0.0522346348, -0.0134961400, 0.0426969752, 0.0067057270, -0.1201409847, 0.1071988568, -0.0180062708, -0.0988070890, 0.0319729000, -0.0091403117, -0.0049509672, -0.0383595563, -0.0489179268, -0.1052758843, -0.0063156807, 0.1827028394, 0.1466161013, -0.0051899897, 0.0993318334, -0.0980513245, -0.0854077041, -0.0683438107, 0.0374901257, -0.1845522821, -0.1134767905, -0.0622718297, -0.1118494794, -0.2029924244, 0.0499826483, 0.0827838853, -0.1141113490, 0.0437757187, -0.0491955988, -0.0509498827, -0.0527003258, 0.1574500352, 0.1150211915, -0.0542903505, 0.0854865462, -0.1725164503, 0.1173593104, -0.0542080179, 0.0073609855, 0.0523557886, -0.0926324800, 0.0695268810, 0.0358331800, 0.1458126605, -0.0555451624, -0.0698773339, -0.0545736998, -0.0297245830, 0.0126876244, 0.1783379316, 0.0011625409, 0.0217646938, 0.0040763495, 0.0421187207, -0.0882264003, -0.0305074919, -0.0641138479, -0.0985880867, -0.0225777533, 0.2202655971, 0.1483447105, -0.0588396229, -0.0783172622, -0.0125873610, -0.0482106879, 0.0303796306, 0.0278820470, -0.0176062156, 0.0792271867, -0.0494753569, 0.1199692860, -0.0326720737, 0.2015464306, -0.0070737740, 0.0486698635, -0.0029451239, 0.0921423733, 0.0464555472, 0.0772052333, 0.1788333356, -0.0579331890, 0.0394140072, 0.0577166863, 0.0124857696, 0.0874942914, 0.1337380856, 0.0417113975, -0.0193680804, 0.0298882928, -0.0988582075, -0.0945126265, 0.1742218584, 0.0775521398, -0.0743168369, 0.0616447628, -0.1630142331, 0.0311898272, 0.0905528963, -0.1451837569, -0.1724525243, 0.0454394221, -0.0059238975, -0.1474872082, 0.1277697533, 0.0294565540, -0.0575836264, -0.2169239819, -0.1893933713, 0.1707047224, 0.1156294942, 0.1557717919, 0.1353597045, 0.1321453899, -0.1908667833, -0.0285222605, -0.0789500922, -0.2732219100, -0.1936041564, 0.0872964263, -0.1764572412, -0.0476907454, 0.0365905575, -0.0528368317, -0.1205049306, 0.0640881732, -0.0149373878, 0.0390926339, -0.0307952706, -0.0022621490, 0.0349782221, -0.3446455002, 0.1474837512, 0.1688617766, 0.1250497848, -0.1539108902, 0.0959565267, -0.0175389424, -0.0054008337, -0.1362323016, 0.0173520651, -0.1084450856, -0.0321101733, -0.0478197224, 0.1166154146, -0.0668304488, -0.0906712711, -0.0091417022, -0.1069642603, -0.0115621351, 0.0086667230, 0.1442551613, 0.0729442239, 0.0057700914, -0.0382736996, 0.0504208617, 0.1266302615, 0.1406129748, -0.0278469101, -0.0002511354, 0.1311012059, -0.1706600636, -0.0439845733, -0.0992558897, -0.0045085829, -0.1386027336, -0.0096525177, -0.0358679481, 0.0598644838, 0.0049727876, -0.0588292181, 0.1671370864, -0.0341579355, 0.0862000659, 0.1015557125, -0.0282348637, 0.1331869364, -0.0224291757, -0.0542220399, -0.1796152741, 0.1683817357, -0.1312814057, -0.1753293872, 0.0943749845, -0.1332969815, -0.0451717116, 0.2682627141, -0.1220960170, 0.0776838586, -0.0244910419, -0.1007624641, -0.0769942179, 0.0333216116, -0.1106547713, 0.1277228594, -0.1105051935, -0.0218517520, -0.1609778702, 0.1234646812, -0.1985994428, -0.0873918980, 0.0633224100, -0.0357595310, 0.0199106988, -0.0966728702, -0.1767422110, 0.0135636013, 0.0746354461, -0.1349770129, 0.1242047101, 0.1056378484, -0.0799478665, 0.0069810716, -0.0192354694, 0.0106949406, -0.0904419944, -0.2180118412, -0.0727495253, 0.0074752597, 0.0273663104, -0.1908316910, -0.0483275652, 0.1282876134, 0.0929593220, 0.0741022900, 0.0968909860, -0.0806348324, -0.1105761752, 0.0268411469, 0.0505516604, -0.0775300115, -0.0002858335, 0.2206464708, 0.1575465649, 0.0058418773, -0.0996479392, 0.1198184788, -0.1161947772, -0.0105463546, -0.0269131325, -0.0191171654, -0.1767420620, -0.0673344135, -0.0407112390, 0.0541364662, -0.0357555561, 0.0876628757, -0.1678065956, 0.1292087138, -0.0560288616, 0.0525630079, 0.1763324440, -0.0579378568, -0.0637554526, -0.0806058124, -0.0876433253, 0.0684044436, -0.1344129592, -0.0832545459, -0.0017115524, 0.0014363773, -0.0292005464, -0.0827407017, 0.1073279679, -0.0106008481, 0.0587102026, 0.0261756778, 0.0046227733, -0.0004908708, 0.0256009866, -0.0011503029, 0.0409940071, 0.0556811318, 0.2706590593, -0.2388730049, -0.0423080996, 0.0360250659, 0.1685509086, -0.1592129469, 0.0818115100, 0.0716113076, 0.0349348374, -0.0770159811, -0.1385943741, 0.0457133539, 0.0714764595, 0.0566317216, -0.0773517638, -0.2568149269, -0.0360467359, -0.0217280742, -0.1334150136, 0.0154438829, -0.1513197124, -0.0274064317, -0.0805479884, 0.0286768340, 0.1449825168, 0.1418324858, -0.0170894507, -0.0321602151, 0.0672597960, -0.1779096127, 0.1040567607, -0.0126036163, -0.0938570276, 0.0702735111, 0.0481535904, -0.2692570984, 0.2564425170, 0.0019902869, 0.0011667255, -0.0761636347, 0.0003388218, -0.0226483773, -0.0356354117, -0.2265990973, -0.0971834064, 0.0141270254, -0.0331586599, -0.1885760128, 0.0750853345, 0.0862970501, 0.0018755313, -0.0182625633, 0.0031058986, -0.0651479587, -0.0959319323, 0.0488482416, -0.0668748319, 0.0952407047, -0.0551101789, 0.0338037014, 0.2624894381, -0.1253159493, -0.1712829918, 0.0233602505, 0.0363441184, 0.0296809431, -0.0315324813, -0.0925421566, 0.0376043431, -0.0704575554, -0.1195069999, 0.1200947464, 0.1546477675, 0.1226671860, 0.0193227492, -0.0665609017, 0.1833979338, 0.0514861941, -0.1389738023, -0.0054979715, -0.0659034550, -0.0803059712, -0.1176230460, 0.0836812109, -0.0231809150, -0.1218670756, -0.1598247737, 0.1235282868, -0.2347525358, -0.0654174089, 0.0053244359, -0.0705915466, -0.1512615830, 0.1056687981, 0.2602324486, 0.0164400060, 0.1454735696, 0.1750607640, -0.0044743204, 0.1416162550, 0.0803872123, -0.0448562279, -0.0528960042, -0.0002675499, 0.0204534307, -0.0209413469, 0.2040442675, -0.1194765121, -0.1177999899, 0.0104727428, 0.1367938071, -0.1058649272, 0.1087363213, 0.0973979682, -0.1949874610, -0.1765267849, -0.2176536471, -0.2086129636, -0.1593739837, -0.0398718305, 0.0230647027, -0.1775008887, -0.0487087034, -0.0740918070, -0.0088148937, -0.0450617895, -0.1021541581, -0.0374534205, -0.0528736860, -0.3388047516, 0.0772236139, -0.2044683546, 0.0247707367, 0.0828458220, -0.1252417564, -0.1217490435, 0.1272678524, 0.1093341708, -0.0455682762, 0.0538467467, -0.1340359002, -0.1732670665, -0.1349568814, -0.0667991564, -0.0674856827, 0.0674883947, -0.0278868545, -0.0926126689, 0.1217964664, -0.1503434926, -0.0893416479, 0.0839044675, 0.0450120568, -0.0167768728, -0.2636967599, 0.1155503616, -0.1409093440, 0.0263656788, -0.1552674472, -0.0550750382, 0.0720534697, -0.2053922713, -0.1561047882, 0.1275468469, -0.1042552963, 0.1690249443, -0.0423146598, -0.1061277837, 0.0954084396, 0.0942436084, -0.2709705234, 0.1261963695, 0.1218360886, 0.1346783787, 0.0655359402, 0.0660248548, 0.2647564113, -0.0418224819, -0.1959312260, -0.0429232642, -0.0283643138, 0.0102311214, -0.0845514536, 0.0077092992, 0.1591940075, -0.1263501644, -0.1674656570, 0.1053205803, -0.2641804814, -0.0570145361, 0.1015239209, 0.0238661803, -0.2680796385, 0.0343938433, 0.2129487395, 0.0316611715, 0.2683019638, 0.0413932167, -0.0740514025, 0.0629495531, -0.0598338731, -0.1174264923, -0.0467496887, -0.0479420684, -0.1491298079, -0.1343296319, -0.1273503155, -0.0747949854, -0.1498738527, -0.0165482275, 0.0274894796, -0.1578719616, 0.0395411924, -0.0534168631, -0.2467304170, -0.1850171536, -0.1741584390, -0.1703913063, -0.1056520641, -0.1467359662, 0.1161356941, 0.0694830790, 0.0328329876, -0.0527246594, 0.1189551428, -0.1239575446, 0.0863812268, -0.0096133985, 0.0188614465, -0.1707316041, 0.1027061269, 0.0096888738, 0.0327351689, -0.1092769951, -0.0888335630, -0.1159001663, 0.1156602055, 0.1058368832, 0.0364349037, 0.1700541526, 0.0426284187, -0.0352453366, -0.0778776482, -0.0025211093, -0.0736607611, 0.0059301932, 0.0031493381, 0.0523292869, 0.1129032820, -0.1189517602, -0.0856686011, 0.1089933068, 0.0914752409, -0.0559824780, -0.1563678980, 0.0787157863, -0.1243560389, 0.0248573441, -0.0346768834, -0.1366364360, -0.0408821106, -0.0760354400, -0.0896242633, 0.0432592109, -0.0073545557, 0.1135592684, 0.0995214060, -0.0275342967, 0.0557517856, 0.1379615068, -0.1574793458, 0.0658309013, 0.1138885319, 0.0312307812, 0.0560706519, 0.0473535769, 0.1640442908, -0.0276535377, -0.2691456676, 0.0514206849, -0.1399685740, 0.0017184141, 0.0571464300, -0.0164017286, 0.1299896240, 0.0749238282, -0.3448662460, 0.0220855139, -0.3862064183, -0.1308168918, 0.0822430626, -0.0269033201, -0.3166393936, -0.0393345505, 0.1914403886, 0.0245462507, 0.2044834197, 0.0224486012, -0.0343073383, 0.0099583380, -0.2020212859, 0.0446588956, -0.0965365991, 0.0902266204, -0.0668523014, -0.2004093379, 0.0044848155, -0.0788508803, -0.0233175233, -0.0317642614, -0.1592386961, 0.0484507270, 0.0018421791, 0.0479384065, -0.1607350260, -0.0573497079, -0.2636480629, -0.1898909956, -0.3771504462, -0.0744912028, 0.0629572123, 0.0778140798, -0.1774892062, 0.0015039656, 0.0567579195, -0.0305378996, 0.1667490005, 0.0083024865, 0.0421563014, -0.0112636872, 0.1017059982, -0.0379969254, 0.0870399848, 0.0419693887, -0.2386201620, 0.0062399157, 0.0932356566, 0.0592885092, -0.0281342603, 0.1164350584, -0.0186613500, -0.0167915039, -0.0295114405, -0.0765697286, -0.0732970163, 0.1183616593, 0.0081031304, 0.1857258677, 0.0853296295, -0.0793252960, -0.0457319431, -0.0593668818, 0.2699307799, -0.0630585998, -0.0090597812, 0.0235932730, -0.0474107601, -0.0849462226, 0.0038867954, 0.0354547054, -0.0208361112, -0.2507520914, 0.0515999608, -0.0581006631, 0.1206753477, -0.0999942571, 0.0113460636, 0.0126888314, 0.1087453216, 0.0652852878, 0.0224145371, -0.0061134240, 0.0947321877, 0.0997883752, 0.1022509262, -0.0710162669, 0.1941818744, -0.0922348350, -0.2944194078, 0.1103776395, 0.0658702925, -0.0842951089, 0.0577911958, -0.0837565660, 0.0198547021, 0.0221777819, -0.3799691498, 0.1304681301, -0.4021118879, 0.1525533348, 0.0755796656, -0.2492158860, -0.2719315886, -0.0463508330, -0.0495004393, -0.0273169130, 0.0553669035, 0.0551103204, 0.0440514758, -0.1181040481, -0.1185154542, 0.0394371971, -0.1122818440, 0.0436913520, -0.0896542519, 0.0438707098, -0.0021642933, 0.0305034425, 0.0646196008, -0.1027775481, -0.3100402057, -0.0055037942, -0.0914532393, 0.0996231213, -0.2554429471, 0.1465673149, -0.2568705678, -0.1692403555, -0.3146687746, -0.0507523939, 0.0132856099, 0.1243361309, -0.0583149642, 0.0379700847, 0.0016819190, 0.1001782641, -0.0326207243, 0.1909567714, 0.0149590513, -0.0091275051, 0.0688954145, -0.1486368030, -0.0757546276, 0.0428315438, -0.1645596623, -0.0463562310, 0.0739378333, 0.0255019553, -0.0430969559, 0.1674305201, -0.0490318686, -0.0526007302, -0.1485887319, 0.1826183647, -0.0141818700, -0.0146967703, 0.0863891318, 0.2506485283, 0.0444810800, -0.1771914959, -0.1576428264, 0.0355531238, 0.1234348938, -0.0746094659, 0.0915356949, -0.1394537836, -0.0069018425, -0.0358136557, -0.1020930931, 0.0928304046, 0.1000271142, -0.1253204644, 0.1030088961, 0.0656498820, 0.1144197807, -0.0847721100, -0.0709925443, -0.1556985676, 0.1644398868, 0.0250251535, -0.0073417337, -0.0852751508, 0.0922046751, 0.1661493778, 0.1979000568, -0.1167090088, 0.1152435318, -0.1479416341, -0.2657716870, 0.0940586999, 0.0144222965, -0.0691617504, 0.0459604971, 0.1013075411, 0.1529186517, -0.0306776371, -0.4964331686, 0.0646045059, -0.4946091771, 0.0365817808, 0.0106329927, -0.0644639432, -0.2238141745, -0.1213899702, -0.2120008618, 0.0866768137, 0.0284244940, -0.1133713424, 0.0333919674, -0.1427964717, -0.0483518355, 0.0903003439, -0.0203073639, 0.0205469262, -0.1735910177, 0.0365584232, -0.0656842291, 0.1087304205, 0.0067283129, -0.0429919213, -0.3335410058, -0.0140027553, -0.0809431821, 0.1476442218, -0.2316573858, 0.1708758473, -0.1448166668, -0.0365530476, -0.0810535178, -0.0627332777, -0.0291746072, 0.0893221721, -0.0033910181, -0.0891083926, 0.1050401628, 0.0034633100, 0.0493058786, 0.1675641537, -0.0180920027, -0.0961361080, -0.0611957088, -0.1284547448, 0.0111974208, 0.0505118519, -0.0948590487, -0.0049244901, 0.0861139223, 0.0112472698, 0.0260126162, 0.1509435326, -0.0175932869, -0.0311470274, -0.0585377440, 0.1144873798, 0.0695071444, -0.0249912851, 0.1122478247, 0.1792888492, -0.0408803783, -0.1411745846, 0.0146429455, 0.0425432995, -0.0280040540, -0.1399719566, 0.1577769071, -0.3212274015, -0.0142010134, -0.0715020448, -0.1620020866, 0.0291045159, 0.0897269994, 0.0810051709, 0.0642770007, 0.0140780685, 0.0384588838, -0.0659493282, -0.0212829616, 0.0005695795, 0.2422591895, -0.0130741466, 0.1535057127, -0.0404963791, 0.0476731397, -0.0664664879, 0.1603619456, -0.0518196002, -0.0184077006, -0.0893388689, -0.0671818778, -0.0068633123, -0.0970092714, -0.0886236057, 0.0190030914, -0.0027013556, 0.1192483976, -0.0648518279, -0.3834468424, 0.0477889739, -0.4420241714, -0.1239359528, -0.2310973406, -0.1967527866, -0.3370240033, -0.0002773965, -0.2656311393, 0.0839983895, 0.0808757097, 0.0108392220, 0.0445479006, 0.1014574543, 0.1274064332, -0.0406945534, -0.0124495802, 0.0722172260, -0.1496202946, -0.0450192168, -0.0236007832, -0.0825523287, -0.1092649475, -0.0835340023, -0.3691107929, -0.0931909159, -0.2592882216, 0.1466109753, -0.2419048250, 0.1184587032, -0.0405831635, -0.1066696495, 0.1730498374, -0.0508061573, 0.0077304840, 0.0478590317, -0.0894098654, -0.0143474108, -0.0219221916, 0.0447919704, 0.0939050615, 0.2086655349, -0.1173764616, -0.0252838153, 0.0113627929, -0.0420140103, 0.0019857096, -0.0675144568, 0.0320585966, -0.0326034464, 0.0219014827, 0.1266114116, 0.1424910575, 0.0246939044, -0.1781323850, 0.0864276141, 0.0460504666, 0.0049713817, -0.1129682288, -0.1235089153, 0.1958895177, 0.2527230382, 0.0302305669, -0.1311299950, -0.0326157697, 0.0088264765, -0.0616316348, -0.1256867647, 0.1348830014, -0.1593243033, 0.1926977038, -0.0230571777, -0.0616282858, 0.1096450984, 0.0113827866, 0.0230142064, -0.0584261082, -0.0670852214, -0.1535712183, -0.1557038575, -0.0543054938, 0.0302531403, -0.0192377698, -0.1022472754, 0.0770974010, -0.0102488641, 0.0648357719, 0.0416335389, 0.0827228650, 0.0075146188, -0.0406776816, -0.1285348237, 0.0060082842, 0.1048751920, -0.0810867846, -0.0127700940, -0.0991316736, 0.0125780432, 0.1231478453, 0.0120790163, -0.2724999189, 0.1409814507, -0.4252667427, -0.2078762352, -0.1945173591, -0.0119178956, -0.3130405247, -0.0515187085, -0.3229180276, -0.0197944026, 0.0849823356, -0.0971583202, 0.0877730250, -0.0463433228, 0.1227179021, -0.0435166173, -0.0244751424, -0.0672779009, -0.0589823276, -0.1051048338, 0.0024453748, 0.1283868700, -0.1617117524, -0.1306488514, -0.1504645497, -0.1079867631, -0.1462481767, 0.1193746328, -0.4742254317, -0.0318938382, 0.0270653963, -0.0007956492, 0.2912068963, 0.1515724212, -0.0686516687, 0.0487884432, 0.0242412295, 0.0403708592, -0.0303397849, 0.1910919398, -0.0033864663, 0.2121820897, -0.0590972602, 0.1122329831, -0.1405738145, 0.0114914579, 0.0916748941, 0.0398984589, 0.0053739245, 0.0426927432, 0.1488732845, 0.0735865906, 0.0242504049, -0.1697518229, 0.0026477892, 0.1075309217, 0.2213673294, 0.0266244803, -0.0247258898, -0.0543501936, 0.0390647799, 0.1774266064, 0.0131134205, -0.2304966301, -0.1117188409, -0.1119471416, -0.0688886493, -0.1774189174, 0.0921936929, -0.0025195915, 0.1332586557, -0.0452297591, 0.0075851292, 0.2439756393, 0.0065680658, 0.1615039557, 0.0502796210, 0.1918251514, -0.1732622385, -0.0571521036, -0.0882242024, 0.1590032130, -0.3740042150, -0.0069506457, 0.1938769966, 0.0682610422, -0.0096824504, -0.0960462019, 0.0114157684, -0.0182082169, -0.0556653403, -0.0894096121, 0.0686254725, -0.0506310090, -0.0192779694, -0.0379961804, 0.0356162563, -0.1351926327, 0.0780383423, 0.0102946283, -0.1054832414, 0.0840381458, -0.5611395836, -0.0715073794, -0.0374525487, 0.0733032525, -0.3161192536, 0.0890167207, -0.1121510714, -0.1146704927, -0.0288977884, -0.0772808343, 0.1001899317, 0.0388953127, -0.0127467243, -0.1046046540, -0.0088572642, -0.0553857312, 0.0194217954, -0.1044362411, -0.0176344849, 0.1148311347, 0.0292687621, -0.0611796007, -0.1656040400, -0.1789099127, -0.2697604299, -0.1158028990, -0.4559876919, -0.1409934014, 0.0265420116, -0.1108168066, 0.1372363716, 0.1893603355, -0.0145908836, -0.0050156629, 0.0113586457, -0.1044380665, -0.1347897649, 0.2606841028, 0.0252981968, 0.1973254532, 0.0695713460, -0.1024410129, -0.0905534849, 0.1190375388, 0.0829674676, -0.0036951283, 0.0144973136, 0.1065909341, 0.2196755856, 0.0202955436, 0.1052539721, -0.3555885851, -0.0587720387, 0.0490058437, 0.1774759740, 0.0416634716, 0.0171212647, -0.0792255998, -0.1073263288, -0.0303825457, -0.0852209330, -0.1835479736, -0.0625135973, -0.1091233715, -0.0101567386, -0.1872424036, -0.0728940293, 0.0763022751, -0.0080977352, -0.2202230543, 0.0911386907, 0.2605915368, 0.0379498266, 0.0735808685, 0.2038588226, 0.0276105776, -0.2112039775, -0.1364763677, 0.0029018691, 0.0595421083, -0.4081012607, -0.1613931209, 0.1217873991, 0.2410199046, 0.1089166179, -0.0822697058, -0.0479877330, 0.0492360517, -0.3996529579, -0.1527326405, 0.2473616451, 0.0269513670, -0.0168924015, -0.0198724810, 0.0427230485, -0.1074626297, 0.0116757052, -0.0898945332, -0.0538559221, -0.0407011770, -0.5714015365, 0.0804066285, -0.1476784647, -0.0567498058, -0.2377583385, 0.0192162208, -0.0393246040, 0.0054221000, -0.1527640820, -0.0165474806, 0.1803286672, 0.2764589787, -0.0056449454, -0.0165794622, 0.1381795108, -0.0102101602, 0.1391161382, -0.2455902696, -0.0092026088, -0.0344923958, -0.0807085410, -0.0314895771, 0.0146498922, -0.1127218232, -0.1962980032, -0.0182881374, -0.4931910336, -0.0472047217, 0.0150284413, -0.0624465160, 0.2610609233, -0.0315434113, 0.0391885787, -0.1963967532, 0.1448788792, -0.1323498636, -0.0706046969, 0.0722360611, 0.0059327977, 0.0178489760, -0.0050975401, -0.3059717715, -0.0234422255, 0.0412368104, 0.1109348312, -0.1204686910, -0.0872956961, 0.2281266302, 0.1929907799, 0.0091755921, -0.0791455582, -0.1927525401, -0.1051653475, 0.1218454391, 0.0551528633, 0.0314720012, 0.0946025252, 0.0286829472, -0.1349979490, -0.1869514734, 0.0795873329, -0.1024560705, -0.1605821699, -0.2767055631, 0.0113281598, -0.1938340515, -0.1639519781, 0.2728181481, -0.2481902242, -0.0843473747, 0.1892692447, 0.1903247535, 0.2013960779, 0.0037831829, 0.0838963091, 0.0729365200, -0.0695889369, -0.2042269856, -0.0933697373, 0.1315488666, -0.2511115670, -0.0492572077, -0.0095030442, 0.0132136689, 0.1084452495, 0.0186047181, 0.0184193943, -0.0913354233, -0.3754729033, -0.0522311777, 0.1898994297, 0.0824714899, -0.0427660383, -0.0218252260, -0.1656037718, 0.0697911829, -0.2842208445, -0.1546882987, 0.0287468750, -0.1566671580, -0.3801933825, 0.1931737959, -0.1027121246, -0.0223271698, -0.0993678793, 0.0770291835, 0.0308720786, 0.0319780819, -0.4237025678, 0.1785331368, 0.2672048807, 0.2234679610, -0.0319868885, -0.0292459503, 0.1695663035, 0.1340059638, 0.1614703387, -0.1606747806, 0.0321181230, 0.0052742125, -0.0627673790, -0.0160056241, 0.2003612071, -0.0698796958, 0.0459815972, -0.0107494444, -0.5012862086, -0.0602190122, 0.1003670692, 0.0442274734, -0.0227434896, -0.2651740611, 0.0016586464, -0.1931855083, -0.0056871404, -0.0193538330, -0.0428109467, 0.1929738224, -0.1635868549, -0.1396825761, 0.0719352067, -0.0909290537, 0.0581865273, 0.0424578376, 0.1124143526, -0.0744541138, -0.0158647913, 0.0517079234, 0.0972868651, 0.0504547060, -0.1404422224, -0.0947410017, -0.1048210710, 0.0967316926, -0.0658633038, -0.0318280086, 0.0472351052, 0.0900835320, 0.0374486893, -0.1290341318, 0.0700228140, -0.0566819720, -0.0753670558, -0.1979618073, 0.0677540153, -0.1245594770, -0.2107897997, 0.1128037944, -0.2040538192, 0.0714247376, 0.1434188783, 0.1366484910, 0.1887390614, -0.0886920393, 0.0333589949, -0.0247135684, 0.1485563815, -0.1803168654, -0.3739380240, -0.0316919237, -0.1149491444, 0.0083724586, -0.0993286669, -0.2245326191, -0.0534670353, 0.1082742810, 0.0562463962, -0.1726041436, -0.2929319441, -0.0350734927, 0.1001920104, -0.0356506929, -0.0810556561, -0.0298393015, -0.0349156149, 0.0461699814, -0.1669180095, -0.2938094139, -0.0096684024, -0.1161413938, -0.1466782689, 0.1271177530, -0.0901460201, -0.1324719340, 0.0878956541, 0.0186805371, -0.0037810237, 0.1246733665, -0.2912396491, 0.1303153634, 0.2193893045, 0.1764861792, -0.0692580938, 0.1056730896, 0.1197128519, -0.1806158870, 0.1103301495, 0.0256329067, 0.0527836643, 0.2319533080, -0.1280031800, 0.0783373490, 0.1402875781, -0.1096821874, 0.1636897922, -0.0436065719, -0.2446914315, -0.1606413126, 0.2100795656, 0.0666668192, -0.1903720200, -0.3872443438, -0.1290488392, -0.1420484185, -0.2151181251, -0.0780223534, -0.1810589582, 0.1546654999, -0.1163057685, -0.0043409979, 0.0677471831, -0.0979444683, 0.0280675963, 0.1305408478, -0.0228220355, -0.1149527431, -0.0158038083, -0.0512169786, 0.0403950028, -0.0783994272, -0.0889140815, -0.0345172361, -0.1648643166, -0.0789892524, -0.1057170033, -0.0836826935, 0.1544267684, 0.0681287795, 0.1501393765, -0.1901121736, 0.1126639843, -0.0280882269, 0.0481112301, -0.0372551754, -0.0072842403, -0.1908745617, -0.1055583507, -0.0911887065, 0.0618338399, -0.0376262181, 0.1436251402, 0.0249046274, 0.1614530534, -0.0606624708, 0.0882702023, 0.0379512794, 0.1711718738, -0.1223816425, -0.4048903584, -0.2066320181, -0.0578317232, 0.0689865872, -0.2371189594, -0.4270684421, -0.1107603684, 0.2245844752, 0.0296980049, -0.1614063531, -0.2093412876, -0.0900518671, 0.0780134797, 0.0240907427, 0.0082091875, 0.0002888174, -0.1019631326, 0.0879830644, -0.0830497742, -0.1166670471, 0.0006015690, 0.0085723344, 0.0230505168, 0.0129403407, -0.0187877920, -0.0925910100, 0.0658632517, -0.1262820661, -0.0337660089, 0.0673098043, 0.0694439560, -0.0368548781, 0.2789585888, 0.0071112961, 0.0978885144, 0.1096142158, -0.0092029069, -0.2493350506, 0.1052917093, 0.0322788730, -0.1050919741, 0.1937581599, -0.2498174906, 0.0707189217, 0.0634616390, -0.2561103702, 0.1563515663, 0.0937379599, -0.1707472205, -0.1036766395, 0.2077807635, 0.1991762519, -0.1405994147, -0.2332631946, -0.2773180604, -0.1131295711, -0.2786774337, 0.0904121697, -0.1689157188, 0.1232414991, -0.1974490583, 0.1052199602, -0.0275291279, 0.0391871072, 0.1731952876, -0.0183467809, -0.1015960798, 0.1106359959, -0.0114027513, -0.1142260209, 0.0080292793, 0.0269854888, 0.0400258973, 0.1546064764, -0.2633251846, -0.0806769952, -0.0972487703, -0.0111813536, 0.1789362282, 0.0318909399, -0.0276656374, -0.2351747453, -0.0105818659, -0.0633311793, -0.0735377446, -0.0617445856, -0.1506697387, -0.2887873054, -0.0090970919, -0.1488402188, 0.0527973399, -0.0175042991, 0.1224773452, -0.0982032865, 0.1407257766, 0.0252486113, 0.1099489480, 0.0312153324, -0.0025138385, -0.0186246838, -0.3375769854, -0.2540637255, -0.0165076312, 0.0245391056, -0.1446400881, -0.2118182331, -0.0886445940, 0.1588059068, -0.0425278693, -0.0834208876, -0.1162073910, -0.2090669125, 0.0759418383, 0.0530402660, -0.0435304940, 0.0190738011, -0.0594929419, -0.0058686463, 0.0578261949, -0.1006297022, -0.1388951838, 0.0430892371, 0.1729118824, -0.0120837837, -0.0284306854, 0.0629102141, 0.0299663600, -0.0040069316, -0.1008078083, 0.0326610878, 0.0934937075, -0.1273521185, 0.2110538930, -0.0010086112, 0.0826652348, 0.1564254165, -0.0798384994, -0.4433412850, 0.0509847328, 0.0557951368, -0.0490576103, -0.0215886794, -0.1621461362, -0.0414577015, 0.0737358555, -0.0672809631, -0.0531726293, 0.0645492747, 0.0052366336, -0.2631829083, 0.2144293487, 0.1721342504, -0.0121788271, 0.0429945439, -0.1808817536, 0.0170346834, -0.0753751695, -0.0094913794, -0.1626336873, 0.0912737325, -0.1712650508, 0.1559809446, -0.0584318638, 0.0204486959, 0.2055974454, 0.0288542286, -0.1160072908, 0.0337818563, -0.0097271949, 0.0153725632, -0.0039628865, 0.0525591932, -0.0899197832, 0.1111084521, -0.2746656835, -0.0007509376, 0.0860058591, -0.0238599833, 0.1121361926, 0.0697965473, -0.0114238234, -0.2168859541, -0.0492302701, -0.2199892104, -0.0201238561, -0.1177886352, -0.1253142506, -0.2967197001, -0.0557530969, -0.0484590232, 0.0967278555, 0.0904703587, 0.1214350909, 0.0693922415, 0.3374896944, 0.1195776314, -0.0338777304, -0.0093882456, -0.0845165402, -0.1303654313, -0.0605025515, -0.2130711824, -0.0365533903, 0.0340558477, -0.1809532046, 0.0424689874, -0.1409221590, 0.0245511997, -0.0472506732, -0.0035831099, 0.0557655059, -0.0939554721, 0.0950234532, 0.1194513515, 0.0731389448, -0.0438218154, 0.0824280754, -0.0444064289, -0.0530943647, -0.0161901675, -0.0183158983, 0.0335958637, -0.0482894704, 0.0247758590, 0.0790487453, 0.1382084638, -0.0106016286, -0.0278940238, -0.0028230874, 0.0108827967, 0.0495187752, -0.1281917244, 0.2902183831, 0.0372937210, 0.1611517519, 0.1050146818, -0.1440632045, -0.1441681534, 0.0858684480, -0.1428284496, -0.0243407078, 0.0606106855, -0.1532796472, -0.0738542601, -0.0235971250, -0.0115749734, -0.1212751940, 0.2217844725, 0.0177332703, -0.0404353701, -0.0241709203, 0.2670675218, -0.0134422136, 0.1332007647, -0.0180485211, 0.0803086907, 0.0936574787, 0.2107044905, -0.0401975736, -0.0818022639, -0.0473496839, 0.0088826781, -0.1273146272, 0.0747579858, 0.1072538197, -0.1057153791, -0.2299106121, -0.1243336126, 0.0342938378, 0.0220730249, 0.0821894929, 0.0669508055, -0.2646204829, 0.0216264222, -0.0848668590, -0.0830340162, 0.1877190918, -0.0428774245, -0.0283667520, 0.0737732053, 0.0094207209, -0.1350120604, -0.0532523245, -0.2113101035, 0.0571976267, -0.0376678184, -0.1726905406, -0.2548947632, 0.0375193469, -0.0737936571, -0.0211029127, 0.1733630002, 0.2297816426, 0.0995786637, 0.2603028417, 0.0983108208, -0.0811229944, 0.0263596065, -0.0308918878, -0.0290312972, -0.0138021857, -0.1164214537, 0.0467837118, 0.0615663491, -0.1813690066, 0.2085713893, -0.1020735726, 0.0507137328, 0.0093898019, -0.1707724929, 0.0033272854, 0.0299136098, 0.1189538985, -0.0371997431, 0.0787965283, -0.0909034759, 0.0702777430, 0.0122493664, 0.0321992934, 0.0658731312, -0.0544853918, -0.0562991649, -0.0004368945, 0.0489415862, 0.0894636214, 0.0956864655, -0.0491697006, 0.0782939941, 0.0206526667, 0.0248665810, -0.0481077507, -0.1793188751, 0.1875530034, 0.0803506970, -0.0222158618, 0.0918142423, -0.1365069896, 0.0765583888, 0.0566778481, -0.0219183993, -0.0396234915, 0.0211935584, -0.0832619965, 0.0165863968, -0.0714126155, 0.0568359569, -0.1684783995, 0.0099941567, -0.0510768443, -0.0732350647, -0.0333963186, 0.0964139998, -0.0347748548, 0.1062511578, -0.0950379446, -0.0080148913, 0.0577972159, 0.1727109551, -0.0915303156, 0.0694237873, -0.1291518658, -0.0337864570, 0.0537112579, 0.0602821298, 0.1717424393, -0.0512718335, -0.2334679812, -0.1201409176, 0.0226925798, 0.1346149743, 0.1331498474, 0.0836334750, -0.3844569325, -0.1041462645, -0.0591517352, -0.1314106137, 0.2053132653, -0.0729330406, -0.2426434010, 0.0513369665, 0.0138714639, -0.0894356966, -0.0050487597, -0.3231225014, 0.0967833027, -0.0026800195, 0.0282246489, -0.1360864937, 0.0094141895, -0.0772780105, -0.0482653379, 0.0976531878, 0.0010219984, 0.0063133938, 0.2136298865, 0.1260674745, 0.0558962040, -0.0193484984, 0.0171640869, -0.1349798143, -0.0559560768, -0.0595265068, -0.0896029770, 0.0651360601, -0.2123928368, 0.2084916383, -0.0791674107, -0.1419826299, 0.1624003649, -0.0067593078, 0.0241018794, 0.0247433800, 0.1598601639, -0.0052674385, 0.0762393400, -0.0661592484, 0.1033591107, -0.0778376609, 0.2107918710, -0.0563530847, -0.0374854542, -0.0231460817, -0.1333658248, -0.0756204575, -0.0338542163, 0.1685677618, -0.1252264678, 0.0028245698, -0.2041669488, -0.0435122587, -0.0743593648, -0.1816419661, 0.2182463109, 0.0044020251, -0.0895000696, -0.0630790293, -0.1444856822, 0.3457753062, -0.0439057723, -0.0301985741, 0.0435812958, 0.0919959694, -0.0667890757, -0.0641081110, -0.2424368113, 0.0203098953, -0.1839563549, 0.0323757939, 0.0464291349, 0.0848492831, -0.2910267115, 0.1574049592, -0.0172814596, -0.0640319139, 0.0444893688, 0.0549028926, 0.1416891962, 0.2483154982, -0.0715136528, 0.1717751175, -0.0527867898, -0.0333551280, 0.1111277491, -0.1736632288, 0.2339259237, 0.0146682244, -0.0579381995, -0.0586274825, 0.0227855127, 0.1674476862, 0.1978245825, 0.0623891912, -0.3773652911, -0.1111680418, -0.1299241781, -0.0480677038, 0.1911961585, -0.0457023308, -0.2212023437, 0.0607329756, -0.0270228535, -0.1677596420, 0.1082016006, -0.3657733202, -0.0583413430, -0.0682111606, 0.0126608256, -0.1234175190, -0.0584165044, -0.1726530194, -0.0462342985, 0.1388122886, 0.0999712646, 0.0317588486, 0.2621535659, -0.0393037349, -0.1409328431, 0.0602656715, -0.0333980434, -0.0505370386, -0.1051688343, -0.1109517589, -0.0352002196, 0.0544642583, -0.1629802883, -0.0279251765, -0.0371439420, 0.0387865454, 0.0999520272, -0.0331090465, 0.0361346938, 0.1042906791, 0.1905872077, -0.0002710561, 0.0082597258, -0.0738338158, 0.0814391673, 0.0592618622, -0.0041980590, 0.0224554725, 0.0105988896, 0.0384948254, -0.1293670833, -0.0757698938, 0.0040525952, 0.1833467036, -0.1387682259, -0.0807347149, -0.2666868567, 0.0459375829, 0.0018735033, -0.1838150918, 0.1863024235, 0.1135461107, -0.1839369386, -0.2829537690, 0.0599998720, 0.2036477327, 0.0138746006, 0.0447520912, 0.1352876425, 0.1421490461, 0.0574467368, 0.0058980454, -0.1855453402, -0.1063035876, -0.0425760858, 0.0715459809, 0.0740764067, 0.0722280145, -0.3433039784, -0.1734175533, -0.0324535593, 0.0571722239, 0.0070987465, 0.0517217629, 0.0821452364, 0.1351009905, 0.0647871047, 0.1000132263, -0.0105148405, -0.1561437845, 0.0127040409, 0.0388469547, 0.0687592477, 0.0001418626, 0.0146363694, -0.0191054251, -0.1594257951, 0.0853134468, -0.0411022343, 0.0674964637, -0.4803214073, 0.0417760946, -0.0489853397, -0.1215864941, 0.1310517639, -0.0241584759, -0.3836135566, 0.0944445953, -0.0462277979, -0.0441438556, 0.1701191217, -0.2135208696, -0.1099552289, -0.0086045871, 0.1766934097, -0.0567397848, -0.0999638364, -0.1824831665, -0.0596987233, 0.0949287489, -0.0199506171, -0.0329071134, 0.2166962475, -0.1481352895, -0.0253516342, -0.0685839802, 0.0192320831, -0.0205409229, 0.0122843077, -0.0206879396, 0.1565827578, 0.0115742506, -0.1591628045, 0.0141426856, 0.0454825871, 0.0561918430, 0.0302973110, -0.0147770112, -0.0164056588, 0.0996248350, 0.1601894498, -0.0951936990, -0.1292385906, 0.0069283335, 0.0755722448, 0.1040563583, 0.0133016128, -0.1199194342, -0.1853147596, 0.0446109772, -0.0541250706, 0.0060441843, 0.0074049667, 0.0999225453, -0.0454142913, -0.2471150160, -0.2570109367, 0.1176158413, -0.0169049874, -0.1618147045, 0.0997965038, 0.0483116694, -0.1240029931, -0.2052440643, 0.0555490404, 0.0661493093, -0.0655260533, 0.0520270169, 0.0592136085, 0.0654974505, 0.0847309157, -0.1148333177, 0.1469981521, -0.0571169518, 0.1236862391, -0.0157261565, -0.0529500917, 0.1090527028, -0.2577058971, -0.2992488444, 0.0359428711, -0.0296590179, -0.0196895450, 0.1187912077, 0.1028559878, -0.0512041412, 0.0002945816, 0.0412517115, -0.0632723197, -0.1943228692, 0.1266696453, -0.0374896564, 0.0858216807, 0.0119744213, 0.0119083570, -0.1089508235, -0.1372935176, 0.0916680172, 0.0200617164, 0.1438261718, -0.4861551821, 0.0331802405, 0.0287527516, -0.1103687957, 0.0883131772, -0.2424658686, -0.4172971845, 0.0800832212, 0.0447116755, -0.0151693290, 0.1168380752, -0.3172641098, -0.0683220550, -0.0854270607, 0.0344183072, -0.0842012390, -0.2240893245, -0.2813374996, -0.0770005435, 0.1108239889, -0.0880365819, 0.1337850839, 0.2986960113, -0.0953111947, 0.0066192425, 0.2195833027, -0.0228384156, -0.0674642026, -0.0778281614, 0.0576811656, 0.1875977218, -0.0399073474, -0.2066199630, -0.0061305924, -0.1163170859, 0.0763559043, 0.1309194416, -0.1478445679, -0.0049735364, 0.0070153377, 0.0737590343, 0.0085717998, -0.1233855113, -0.0094494876, 0.0632473230, 0.1491260529, -0.0436982848, -0.1503983885, -0.0562666170, 0.0774940401, 0.1101065874, 0.0979147181, -0.0617726110, 0.0611701757, 0.0162830427, -0.1302172542, -0.2331537604, 0.0172754824, -0.0434610583, -0.1643972248, 0.1611248702, 0.1004892662, -0.0285358950, -0.3069746792, 0.0288301054, 0.1500555873, -0.0677403957, 0.1184853837, 0.0433636270, 0.0995117500, -0.0034390863, -0.1176799685, 0.0895489305, -0.1201654151, 0.0921522602, 0.1812364906, -0.0885156915, 0.2323123366, -0.2490064949, -0.3881097138, 0.0544965677, -0.0251899939, -0.1204412058, -0.0513535626, 0.0226408001, -0.2413872629, 0.2002283186, 0.0558633655, 0.0310666915, -0.2119333893, 0.0904664919, -0.0842615068, 0.1268693656, 0.0089156553, -0.0922798440, -0.2750205398, -0.3588045537, 0.1006230563, 0.1236387938, -0.0481366701, -0.4856588244, 0.2451916933, 0.0053524696, -0.1265442669, 0.2772809565, -0.1034531742, -0.5807120204, -0.0348178484, -0.0685419738, 0.0455420017, 0.0862616226, -0.4263541996, -0.1653082818, -0.0537732132, 0.0490487404, 0.0170280691, -0.2232052088, -0.2848844230, -0.1451492012, 0.0343589634, -0.2067444623, -0.0434009098, 0.2316748649, -0.1081423461, 0.0983567387, 0.1605578512, 0.0166884456, -0.0040334989, 0.1347739547, 0.2929667234, 0.1815051138, -0.0743254349, 0.0121297901, -0.0622333102, 0.0311352294, 0.0316529796, 0.0907333121, -0.2177961618, -0.0658249706, 0.0862322897, 0.0987897962, 0.0238217134, -0.1212405860, 0.0164904259, 0.1224242002, 0.2002950758, 0.0362483300, -0.1395525783, 0.0085458374, -0.0243023522, 0.0997466967, 0.0952655375, 0.0643958822, -0.0036117849, 0.0654597878, -0.1955538243, -0.0823848620, -0.1123895943, 0.0977870300, -0.1941059232, 0.1048042253, 0.0699424595, -0.2326445282, -0.1971414536, -0.0629010797, 0.0811878666, -0.0522513650, 0.1638310254, -0.0510732494, 0.1481137425, 0.1005072296, -0.1798118651, 0.2254523635, 0.0440563485, 0.1261264533, 0.1884939373, -0.0380215980, 0.1272614747, -0.1783294231, -0.3584783971, 0.1589998901, 0.0100952340, -0.0910993144, -0.1162743270, -0.0121003920, -0.2406976223, 0.1721054167, 0.0482293516, -0.0286191162, -0.1143863946, 0.2173511982, -0.1107733175, 0.1955250651, -0.0620728545, -0.0996497348, -0.2085942775, -0.2610674202, 0.0242597889, 0.1736626327, 0.0977569148, -0.3248984516, 0.1728677303, 0.0874069706, 0.0353479423, 0.3512959182, 0.0120312385, -0.4135535955, 0.0144493226, -0.2538493574, 0.0516880788, 0.1563945115, -0.2207725793, -0.1245567054, -0.1607081443, -0.0319826491, 0.1714058816, -0.1253578663, -0.3048003316, -0.2159820199, -0.0346431471, -0.1685783267, -0.0403072350, 0.1923106909, -0.1355908364, 0.0162406005, 0.2781457007, -0.0051514665, -0.0811942592, 0.0356373861, 0.3626980782, 0.1656625718, -0.0681217834, 0.0954005644, -0.0956920907, -0.0246377755, -0.0002612325, 0.0151314838, -0.1601559520, 0.1381979436, -0.0304116104, 0.0492086820, 0.0608343259, -0.2272004187, 0.0295888558, 0.1209820807, 0.1718151718, 0.1571654081, 0.0784413889, -0.0639983863, 0.0309890788, -0.0330065824, 0.0869482607, -0.0278054345, -0.0440307334, -0.0684413314, -0.2020947486, -0.0614573620, -0.2461646497, 0.1156690568, -0.0035134607, -0.0221047420, 0.2557192147, -0.3245395720, -0.2722453773, -0.0772097334, -0.1780934632, 0.0541575365, 0.0401880927, 0.1372215301, 0.2023828179, -0.0588973276, -0.2714053988, 0.3396167457, 0.1745429188, -0.0950502828, 0.2979007661, 0.0446951389, 0.0753140450, -0.1402421594, -0.3931699991, 0.2961556613, 0.1010869518, -0.1767673045, -0.2433073968, 0.0256722998, -0.0968902707, 0.0572907589, -0.0650558025, 0.1006805897, 0.0115843555, 0.1373694390, 0.0294104833, 0.0405525528, -0.1554618627, 0.0839346349, -0.2166603953, -0.0459432453, -0.0974864513, 0.2243016660, 0.0104069375, -0.1533330679, -0.0902358443, -0.1516618729, 0.0688862801, 0.2155114114, -0.0902387798, -0.1523218453, 0.0345961340, -0.1421103328, -0.0426599234, 0.1995413899, -0.1810022742, 0.0765728131, 0.0077786683, 0.0894051790, 0.2232567519, 0.0979309902, -0.3005010784, 0.0858192965, -0.1448615640, 0.1069628745, -0.1946740150, -0.0136396615, -0.1617408246, -0.0486491024, 0.2644723356, 0.1360966712, -0.1517540514, 0.0254384167, 0.0951067209, -0.1067086235, 0.0502074510, -0.0326097831, -0.0736053437, 0.0114263780, -0.0135705993, 0.0020633803, -0.0299291518, 0.2005755603, -0.0721166134, 0.0520576090, 0.0095561370, -0.2058569044, 0.0453065783, 0.0313819535, 0.1134439483, 0.2519142032, -0.0587892383, 0.0020146274, -0.1439225078, 0.1278398335, 0.0932795033, -0.0245005488, -0.1092600301, 0.0097126961, -0.1556762457, -0.1306863427, -0.2000346184, 0.1690439731, -0.1158200726, -0.3327689171, 0.3068638444, -0.2490650415, -0.2034232169, 0.1959698349, 0.0918471813, 0.0373767838, -0.1809820086, 0.1310719699, -0.0143725369, -0.0523001477, 0.0052451082, 0.2015691400, -0.0513429716, -0.0405879654, -0.1165999249, 0.0989410952, 0.0103640165, 0.0118801892, -0.2282033116, 0.1448220909, 0.0123505499, -0.0495052226, -0.1368861943, 0.1573723704, 0.0919016525, 0.0557081848, -0.1733590961, 0.1602089554, 0.1662104726, 0.1446384043, -0.0417950489, 0.0347600356, -0.2171830833, -0.0537505820, -0.1890410483, 0.0500652865, -0.1306236237, 0.3098782301, 0.2197390050, 0.0892195702, 0.0870584995, 0.0349176936, 0.3291723430, 0.2137716115, 0.0440631956, 0.0177144706, 0.1835285276, -0.1721595377, 0.0993173793, 0.0645214468, -0.0541902333, -0.0140268402, -0.1600077599, 0.1531783789, 0.0342768207, -0.1019799188, 0.0115715927, 0.1595943421, 0.0189601909, 0.0655270815, 0.1365608871, 0.0710530058, -0.1679120809, -0.0621635057, 0.2950030565, 0.0395178199, -0.0851877853, -0.0245254226, 0.3782920539, 0.0116204377, -0.0546955653, 0.1557517648, 0.0358506255, 0.1569986194, -0.2126950175, 0.0438875705, -0.1304627806, -0.0664971918, -0.0494254269, 0.1510410607, 0.0170836095, -0.3741498291, 0.0287223235, -0.0203341562, 0.2392850667, 0.2610419691, -0.1270341575, 0.0447753146, -0.0970970541, -0.1795365810, -0.0028106843, -0.0592931099, 0.0208961330, -0.2251184881, 0.0581921116, 0.0028099578, -0.1337468326, 0.0721077248, 0.0620401539, -0.1090898514, 0.2234198153, -0.1484140456, -0.0294590872, 0.0471442752, -0.0441122428, 0.2252699733, -0.1154424772, 0.0749901161, 0.0643103048, 0.1766805500, 0.1082404777, 0.1617834866, 0.1741268486, 0.0249589905, 0.0290021319, -0.1953198761, -0.1070645824, -0.0217979308, -0.2497082353, 0.1710501164, 0.0745974332, -0.1088184640, -0.0895901173, -0.0214938410, -0.0558173507, 0.0558986962, 0.0098740356, 0.2161165625, 0.1397657096, -0.2081884891, -0.1371938288, 0.0033580840, -0.0589712225, 0.2016489953, -0.1185922101, 0.0567961037, -0.0690207779, 0.1213411242, -0.1049391776, 0.0545274653, -0.0960394442, 0.0328712352, -0.0161413290, -0.0822241157, 0.1113106459, 0.0174905658, 0.1144783571, 0.0100357216, 0.0187695380, 0.0098243086, 0.0144351292, -0.0309773870, -0.1818262786, -0.0448300727, 0.0253727976, 0.1318064630, 0.1153470278, -0.0358955115, 0.1194462180, 0.0369180404, 0.0618758127, 0.1836493909, -0.1620684266, -0.0979345962, 0.0424349941, 0.0289474446, 0.0568947196, -0.0568103753, -0.0473791733, -0.0724189505, 0.0107491268, 0.0183629896, -0.0772447214, 0.0302834921, -0.0212011244, -0.1427464336, -0.1778892577, 0.1767006963, 0.1251504272, -0.0716701373, -0.0217834339, 0.0252694208, 0.0197334141, -0.1897644103, -0.0343427062, 0.0500295907, -0.0028530278, -0.0051868609, 0.1165779307, -0.0222548861, -0.0895620435, -0.0122179613, -0.0838842914, 0.0552044399, 0.1257965714, -0.1581667662, 0.1933208555, 0.0193330180, -0.0604323447, 0.0082048047, 0.1290409565, 0.0859512463, 0.0656542778, 0.0266102571, -0.0774307847, -0.0046424288, 0.1877351254, -0.0070205200, 0.0949876085, -0.1223798469, 0.0278489646, -0.0246256683, -0.0308544207, 0.1220438406, 0.0653340816, -0.0789181963, -0.0469113365, 0.1236076951, 0.0110234041, -0.1614379585, -0.0513087250, 0.0123594785, 0.0007000908, -0.1030797288, -0.0539505593, -0.0289838612, 0.1536007822, -0.2150056362, 0.0723377988, 0.0550771058, 0.0777973533, -0.0277331360, 0.0011852443, -0.0071871728, -0.0459050424, 0.0352178141, -0.0016481727, -0.0838417113, -0.0184092969, 0.1549575031, 0.1102029160, -0.0151487105, -0.0219742376, 0.0633094311, 0.0395699367, -0.0547081493, -0.1101686805, 0.0385042988, 0.0562906377, -0.0396997891, 0.0420484990, 0.0175945666, -0.0552018583, -0.0133271515, 0.0231219828, 0.0619597323, 0.0426525474, 0.0059604198, 0.0875528753, -0.0032778478, 0.0414697006, 0.0022962133, 0.0707571805, 0.0155719444, -0.0292401761, 0.1098897457, -0.0277574398, -0.0040500611, 0.0931181386, -0.0902050138, -0.0584403202, -0.0029145032, 0.1570648104, 0.0028803323, 0.0352339558, -0.0802634880, -0.0256957915, -0.0124011207, -0.0475659594, 0.0782608539, 0.0586702861, -0.0637600720, -0.0263737664, -0.0335688367, 0.0501797460, 0.0060437978, 0.0260530822, 0.0116957584, 0.0164782330, 0.0324026793, -0.0641311333, 0.0084174452, -0.0107247084, -0.0745601654, -0.1066504121, -0.0588037223, -0.0193898156, -0.0554762110, -0.0645433217, 0.0554124340, 0.0820604116, 0.1017079502, 0.0026339740, 0.0737812817, -0.0657929406, 0.0667034984, 0.0149561614, -0.0681669787, 0.0825661495, -0.1014869064, -0.1265020072, -0.0231485218, 0.0522863008, 0.0665932000, 0.0377092287, -0.0772863850, -0.0748172030, 0.0143173784, 0.0319906026, -0.0170161128, 0.1309221089, -0.0669002533, 0.0594431385, -0.0529561900, -0.1489237547, -0.0139390221, 0.0995907262, -0.0493164212, 0.1298430413, -0.0349951871, 0.0839020535, -0.0902928486, 0.0340176895, -0.0283003822, 0.1175915450, -0.0623898618, 0.0829092637, 0.0350409821, 0.0364631228, 0.2284936905, 0.1754747629, 0.0544071011, -0.0223760363, 0.0020074812, -0.0714987740, 0.0562163144, -0.1873407066, 0.2934257686, -0.1183445826, -0.1959612072, -0.0269106030, -0.1787306666, -0.2047815472, 0.0845879689, -0.1181918234, 0.0358276851, 0.0913334861, 0.1363777816, 0.0111291260, -0.0782711655, 0.1023611426, 0.1498290896, 0.0838235617, 0.0766956359, -0.0067062979, 0.0510496162, -0.0490599088, -0.0104046268, 0.0747694224, -0.0916089714, -0.1797132641, -0.0570061915, 0.1702023596, -0.1730795056, -0.0474978536, 0.1005117223, 0.0098548997, 0.0357577279, -0.1072093695, 0.0694498345, 0.0460133553, -0.0127754044, 0.0452791899, -0.1108303070, 0.0187829044, -0.0554491393, 0.1257536560, -0.0379609354, 0.2764489651, -0.1431964189, -0.0937590301, 0.0137744630, -0.0699958354, -0.1455799043, 0.0455632694, 0.0712713003, 0.1101572514, 0.0849906132, -0.1079415157, 0.1938925683, -0.0253235567, 0.2547689974, 0.0641879067, -0.0407038890, 0.0412195586, 0.0227114875, 0.0039042425, 0.0769999176, 0.0209089573, 0.0191023648, -0.0912708566, -0.0033169142, -0.0719129294, -0.0611629300, 0.0770008937, -0.0282315705, -0.0871098340, 0.0475791171, -0.0993287116, 0.0046515921, 0.1461265832, -0.0320311897, -0.0099239741, -0.0103422673, -0.1253722310, -0.0311614908, 0.2226708531, -0.1339424103, -0.2017107010, -0.0614684783, 0.0498015396, 0.0034269097, 0.1866775900, 0.0790428370, -0.0491250157, -0.1244918108, -0.1759985536, 0.0434301272, 0.2137836963, 0.1706435382, 0.1561047584, 0.2058611214, -0.1270950586, -0.1283188611, -0.1988002211, -0.2220308036, -0.1516429931, 0.0818594545, -0.1945659816, -0.1072909012, 0.0834645927, 0.0872741714, -0.0536899641, -0.0296059269, -0.0333382152, 0.0698801503, 0.1657382697, -0.0616306216, 0.0423421711, -0.1672173440, 0.0515347011, 0.1527507007, 0.1117374748, -0.1544457972, 0.0458655730, -0.0634944960, -0.0414224193, 0.0352608524, -0.0504430979, 0.0420363918, -0.0116995368, -0.0528658405, 0.0655617639, -0.1178813130, -0.0402826853, 0.0584555641, -0.0149877546, -0.0912793353, 0.1078226641, 0.0489795320, -0.0055531547, 0.0311759003, -0.0048691556, 0.0154154235, 0.0093814507, 0.1622953713, 0.0674677864, -0.1394937187, 0.0167092029, -0.2048417032, -0.0691486448, 0.0122225164, -0.0761726722, -0.1471958309, -0.0033015246, -0.0435727686, -0.0302756261, 0.0227808356, -0.0912482813, 0.1256695390, -0.0451387130, 0.2030057460, 0.1217046231, 0.0191409495, 0.1300715506, -0.0476429462, -0.0550101288, -0.1814354062, 0.0675241128, -0.0258698296, -0.0814461410, 0.0447108150, -0.0336810946, 0.0412603617, 0.0815196931, -0.1518654525, 0.0622713715, -0.0209039934, -0.1803217232, -0.1913797110, -0.0301953424, -0.0256549660, -0.0430910215, -0.1451572776, 0.0036655525, -0.1507789791, 0.0652591065, -0.1330673993, -0.0435845107, 0.0203583408, -0.0542402565, -0.0797842070, 0.0732014626, -0.1094777063, -0.0063968203, -0.0616302937, -0.1588357687, 0.1678131670, 0.0730383322, 0.0539124273, 0.0435956083, 0.0207884144, 0.0274589937, -0.0910171419, -0.2023574412, 0.0858660117, -0.1234212071, -0.0224137437, -0.2190394253, 0.1684869379, 0.0767499506, -0.0839184448, 0.1299170256, -0.0566137210, -0.0057645366, -0.0471735187, 0.0260807276, 0.0223395638, -0.1322794706, -0.0847023427, 0.0489263758, 0.1349960864, -0.0132637843, -0.1245917380, -0.1427977681, -0.0359845273, -0.2262242138, -0.0234467816, -0.1129686758, -0.0937108994, 0.0692678019, 0.0241251849, 0.0522100776, 0.0986955687, 0.0542333350, -0.0056175850, 0.1411078423, 0.0360230096, 0.0354901738, -0.0204920061, 0.1030908227, -0.0015371528, -0.0142935887, -0.0478654541, 0.0523115210, 0.0538565665, 0.0541762374, -0.0720408559, 0.0024658795, -0.0539827086, -0.2116091698, -0.0334556252, -0.0513939001, -0.0916663483, 0.0362389944, 0.0321075544, 0.0532384627, 0.1521236151, 0.0176429022, 0.0725226402, -0.0214295704, 0.1851777285, -0.1647049338, -0.0168007743, 0.1723786145, 0.1184623465, -0.0822302997, 0.0720294043, -0.0839701965, -0.0376280472, -0.0717745349, -0.0286473408, -0.0527673215, 0.1034833640, 0.1960050613, -0.0518038832, 0.0234953240, 0.0523584858, -0.1955089569, -0.0842584372, -0.0012873301, -0.0481952801, -0.2079951018, -0.0570685752, -0.0907217413, -0.1008053869, 0.0079772333, 0.0237053037, 0.0019426848, 0.0509214699, -0.2838204801, 0.1600985378, -0.0178645123, -0.0640100390, -0.1046487316, 0.0859471709, -0.3341729343, 0.1509864628, 0.2519271076, 0.0180162881, 0.0012963503, 0.0420062803, -0.2252327800, -0.0574420020, -0.0737031996, -0.0610682182, -0.0731959715, 0.0069597573, -0.1609019488, 0.0788064748, 0.0396753848, -0.1157891378, 0.0019499112, 0.0273771305, -0.1815698147, -0.2906699777, -0.0513554737, -0.0160294678, 0.2343521267, -0.0394456871, -0.0024771781, 0.3032806814, -0.2347290516, -0.2438528389, 0.0674613416, -0.0534324870, -0.2243176401, -0.0098022157, -0.2286519110, -0.0049090902, 0.0032614516, -0.1723329574, -0.1208091304, 0.0003048507, 0.0325128622, -0.0011820251, 0.0596730225, 0.0193977319, 0.0991263688, -0.1497393250, 0.0293242652, -0.0703204200, 0.0086241867, -0.1477528811, 0.1676561236, 0.2546718717, -0.1527542025, -0.2069968730, 0.1376767606, -0.3026164472, -0.1435645074, 0.1221317202, -0.0707606748, -0.2579896748, 0.1123022139, 0.2865440249, 0.0191560723, 0.0543816201, -0.0961923823, 0.1385587156, 0.0564013347, 0.1200413033, 0.0448288880, -0.0916885734, -0.0169277862, -0.0394036733, -0.0588363782, 0.1176474467, -0.0297938585, -0.0745899230, 0.1022409648, 0.1146182269, -0.0879421681, 0.0513270497, 0.1616847664, -0.2706978917, -0.1765585095, -0.2279275358, -0.2866214514, -0.1253169328, -0.0740139559, 0.1348282248, -0.1531749070, -0.1376515925, -0.0359045453, 0.1607868969, -0.0355022177, 0.0512983352, 0.0052185785, 0.0638523102, -0.3230837882, 0.0924518257, -0.0382948779, -0.1418715417, -0.0112994369, -0.0768612623, -0.1935866326, 0.0591776036, 0.0339883715, -0.0746912062, 0.1788430065, -0.0098437294, -0.1458297074, -0.0166440122, -0.1433004290, -0.0638964772, -0.0158946924, 0.1637359113, 0.0248582605, 0.1805862188, -0.1124839485, 0.0397308059, 0.0932990164, 0.0744647384, -0.0266915001, -0.2986311316, -0.0072028302, 0.0100115100, 0.0285716020, -0.1027039140, -0.0941583961, 0.1864516586, -0.2266270965, -0.0764385015, 0.0991125405, -0.2358346879, -0.0440000705, 0.0219792593, -0.0665026009, 0.1134114563, -0.0045402013, -0.2641618550, -0.0331919938, 0.1221355796, 0.1248818189, 0.1663162410, 0.0931650251, 0.0248511527, -0.1075749993, -0.1333544552, 0.0603181645, -0.1292868853, -0.1026284397, 0.0793420896, 0.1395262629, 0.2183220834, -0.0516949072, -0.2342399061, 0.1330012381, -0.3948345780, -0.1759256870, 0.0051648887, -0.0548776910, -0.2595970929, 0.0891449973, 0.2567490041, 0.0548977554, 0.1019743532, 0.0468273349, 0.1062854230, 0.1690322161, 0.0845076218, 0.0327344500, -0.2385303825, 0.1055864841, -0.1002845094, -0.0940500945, 0.0422961712, 0.0721866041, -0.1184300035, 0.0191734191, -0.0261246469, -0.0825688988, -0.0503201857, 0.0234939102, -0.3114823401, -0.1377894580, -0.1148575246, -0.0877645016, -0.1855504662, -0.0677604973, 0.1871609539, -0.0629087165, -0.0883788094, -0.0714046210, 0.1438841224, -0.0141577711, 0.0893799290, -0.0507808886, 0.0548636988, -0.2703593671, -0.0271068197, 0.0639177784, 0.0302759446, 0.0116343955, -0.1259073913, -0.0556798354, -0.1295048296, 0.1040070951, -0.0528246351, 0.1783564836, 0.0145829301, 0.0502525270, -0.1183853820, -0.0079734018, 0.0787071511, 0.0080791414, 0.0846640915, 0.1824400425, 0.1658663303, -0.1006302312, 0.0184513386, 0.1313391179, -0.0513719395, -0.0110921646, -0.0230546482, -0.0432775877, 0.0214411393, 0.1078722030, -0.1601634324, -0.0516899452, -0.1692013443, -0.1293960810, -0.0214766897, 0.0631973296, -0.0855793357, -0.2028007358, 0.1282214671, -0.0081486059, 0.1707028598, 0.0306737367, -0.2026406229, 0.0036239943, -0.0056643891, 0.0270859767, 0.0557621084, 0.1106059551, 0.0084440419, -0.1103687808, -0.1458586752, 0.1148679107, 0.0358300284, 0.0077304766, 0.1059274450, 0.0092391316, 0.1691196710, 0.0717338473, -0.3952044845, -0.0843709558, -0.4225554764, -0.0886638686, 0.0213981736, -0.0485933498, -0.2298817933, -0.0228931420, 0.0300464146, 0.0212842431, 0.1239111498, -0.1130447462, 0.1385198087, -0.0881365910, -0.0897378922, 0.0309947766, -0.1589522511, 0.0440873355, -0.2402400374, -0.0986704603, -0.1196265966, 0.0279596914, -0.0366388261, 0.1168137640, 0.0251211412, 0.0044429633, 0.0576348938, 0.0916745514, -0.3399407268, 0.1141409799, -0.1513057649, -0.0404308140, -0.2692354023, 0.0381912813, -0.0428007729, 0.0106033972, -0.1846967787, -0.0127036478, 0.1247451976, -0.0332874060, 0.1645112783, 0.1130415276, 0.0190348607, -0.0180122517, 0.0079315128, -0.0578589551, -0.0029084925, 0.0090716016, -0.0462915488, 0.0174278989, 0.0370692834, 0.0833888128, 0.0403432250, 0.1473233700, -0.0267345123, 0.0792047307, -0.0040175123, 0.0469457544, 0.1609371006, 0.0198121518, 0.0381443389, 0.3155861795, 0.0296809133, -0.0735667795, -0.1585238427, 0.0968921185, 0.1118223071, -0.0258635636, 0.1073957458, -0.2408011258, -0.0459303409, 0.0081668179, 0.0234265700, 0.0225380808, 0.0224776119, -0.1740748733, 0.0588808022, -0.0491142422, 0.0772970095, -0.2505434752, -0.1245743930, -0.0260878038, 0.1996957511, 0.0731234476, 0.0000683402, -0.0627199262, 0.1341347098, 0.0364688002, 0.0442087390, -0.0477949493, 0.0108534694, -0.1480203569, 0.0645490810, 0.0146486247, 0.1020137891, 0.0173690785, -0.0182476975, 0.0633587316, 0.0760142729, -0.1592842042, -0.4186550975, 0.1222266257, -0.5300732851, 0.0552529730, 0.0231536254, -0.1184419319, -0.3194420040, -0.1332465559, -0.1250021458, 0.0865729526, 0.1242038235, -0.0250015520, -0.0145222945, -0.1030314118, -0.0184756834, 0.0314383917, -0.0451697633, -0.0133376531, -0.1111801267, -0.1041051671, -0.0573466159, 0.0207105447, 0.0251630954, 0.1160188466, -0.2477616221, -0.0832497776, -0.0354548544, 0.1114898250, -0.5025764108, -0.0288129784, -0.0154440952, -0.0730431378, -0.2740221918, -0.0446368232, 0.0408787988, -0.1791250557, -0.0508489944, -0.0832645223, 0.0673233718, 0.1128159538, 0.0678826123, 0.2115319818, 0.0330516361, -0.0785542801, 0.0335813388, -0.0850478932, 0.0406848267, 0.0371696055, 0.0075550508, 0.1434004754, 0.0626802966, 0.0694399923, -0.0622586608, 0.1146332100, 0.1305782646, 0.0501217134, -0.0475707203, 0.1120913774, 0.0633055121, -0.1882767230, 0.0914014801, 0.1883438081, -0.0660117567, -0.1515503675, -0.1857788116, 0.0899787992, -0.1345621943, -0.1161854342, 0.1154024005, -0.1236274242, -0.0718863830, -0.0840482116, -0.0454147197, 0.0394916460, 0.0657789856, -0.1506855935, 0.1164780781, -0.0936892927, 0.0394614786, -0.0728054792, -0.1255322546, -0.0398149975, 0.1982865930, -0.0719997212, 0.0357335322, 0.0102183241, 0.0639069676, -0.0350392833, 0.0880698189, -0.1063755080, -0.0631729811, -0.1264498681, 0.0719541833, 0.0153518487, 0.0285289045, 0.0407183804, 0.0982113555, -0.0547481291, 0.1062919050, -0.0070533389, -0.3835078478, 0.0832397118, -0.5952301025, -0.1539521664, -0.1617838740, -0.0381818488, -0.1805454046, -0.0583781041, -0.2076469511, -0.0150517579, 0.2104115337, -0.1503488868, 0.1462441087, -0.0793927610, 0.0073250695, -0.0529481359, -0.0787605718, 0.0404807515, -0.2674435079, 0.0199212413, -0.0556379221, -0.0193457641, -0.0286640842, -0.0922172666, -0.3333765566, 0.0168070253, -0.1270113140, 0.0289881565, -0.4853987098, 0.0732640624, -0.0102360342, -0.1292492449, 0.0285460744, -0.0050459998, 0.0400705449, -0.1092638522, 0.0230624676, 0.0426137522, 0.0739120021, -0.0254824813, -0.0995973051, 0.1871184856, -0.0814441368, -0.2752842903, -0.0796703398, -0.1645331085, 0.0960332826, 0.1059146672, 0.0099660158, 0.0148419766, 0.1689546406, 0.1288502365, 0.0728359967, 0.2303706408, 0.0576178879, 0.0570426099, 0.0153313223, 0.1796797514, 0.0707094595, -0.1932688951, 0.0347822793, 0.1290112883, 0.0062873070, -0.1309036016, -0.0845843628, 0.1254719645, -0.1953501254, -0.0598480403, 0.1693672538, -0.1554560214, 0.0196446944, -0.0202953443, 0.0141051197, 0.1580516398, 0.0490530878, 0.0452155359, -0.0119201234, 0.0301596243, 0.0364401191, -0.1102076024, -0.1645873338, 0.1357762367, 0.1506666243, 0.1294695586, 0.1058262438, -0.1038091108, 0.0424983837, -0.1770243496, 0.0604933351, -0.1479555666, -0.2031892985, -0.0016804771, 0.2012967914, -0.0333992317, -0.0577994101, 0.0287598930, -0.0492183268, -0.1778897792, 0.1733489037, -0.0806150958, -0.1893659234, 0.0500345230, -0.4575307965, -0.0466882102, -0.0853967369, 0.0040608221, -0.1384210885, -0.0669734254, -0.0965663418, 0.0157955866, 0.0817610249, -0.0684660599, -0.0035049594, -0.1796828806, 0.0409446172, -0.1194131970, -0.0050283251, -0.0874593258, -0.2966122329, -0.0880762041, 0.0325055532, 0.0837238804, 0.0074211312, 0.0353855342, -0.2346102595, -0.0312518738, -0.2203127593, 0.0842249990, -0.5133736730, 0.0307808463, 0.0058420915, -0.0020471041, 0.0929672718, 0.1193538159, -0.0214242227, -0.0835890770, -0.0948926210, 0.0042733336, -0.0339913182, -0.0440252461, -0.0722349957, 0.2334002852, -0.0305106025, -0.0828734562, 0.0591846257, -0.0477710180, -0.0506052710, 0.0680062994, 0.0313754641, 0.1707375199, 0.1353545487, 0.0259787124, 0.0217244048, 0.0202682242, 0.0328165628, 0.0088555152, 0.0834109560, 0.1185858697, 0.0498760976, -0.0808255151, 0.0143257640, 0.1793404818, 0.0114963865, -0.1473147422, 0.1270499676, 0.0832967088, -0.1316878349, 0.0330563635, 0.1906993985, 0.0474115051, 0.1687001139, 0.0623849221, 0.0263174251, 0.0812398493, 0.0590903237, 0.0834546685, 0.0831829831, -0.0096670510, -0.0776059404, -0.1146885455, -0.0826591030, 0.0263597425, 0.0664617270, -0.0176942758, 0.0486211330, -0.0095251612, 0.0214752611, -0.0373748206, 0.1028349847, -0.1839663088, -0.2365506291, -0.1058952734, 0.2829948068, -0.1016109139, 0.0284263231, -0.0356997401, 0.0191822313, -0.0566233061, 0.1631548107, -0.0371038578, -0.0160424281, -0.0031135574, -0.2727634311, -0.1769305915, -0.0563166924, 0.0838266462, -0.1420568675, -0.1291578114, -0.1601701230, -0.0231585596, 0.0861339793, -0.1269479543, 0.0472086668, -0.0969405174, 0.1117607579, 0.0196464788, 0.0088721598, -0.0164467059, -0.1520145684, -0.1783041507, -0.0726663023, 0.1653741300, -0.0327526070, -0.1835889220, -0.0137786390, 0.0588012263, -0.3309478164, -0.0803665221, -0.5195173621, 0.0262879729, -0.0246369392, 0.0648207888, 0.2884328365, 0.1644198447, -0.0383437201, -0.1520705521, 0.0322059281, -0.0252417848, -0.1414351463, 0.0124305207, -0.0018261706, 0.2245958894, 0.1161620393, 0.0082222028, -0.0572384335, 0.0628874749, 0.0957110822, 0.0789583400, 0.0113942586, 0.1060977131, 0.0737714246, -0.1334521472, 0.0041024340, -0.3149410784, 0.0838084668, 0.1472255737, 0.2128535658, 0.0439765714, -0.0550236069, 0.0113716312, -0.0385100581, 0.1397860348, -0.0244436655, 0.0161601342, 0.0100736590, -0.1111376882, -0.1739268005, -0.1069302782, 0.1819146425, 0.2451905608, 0.1682444960, -0.0018763422, 0.0376367457, 0.1267261207, 0.0431739241, 0.1863801479, 0.1156953424, -0.0531334020, -0.1488368362, -0.1805668473, -0.0849819034, 0.1371145248, -0.1683923006, -0.0057007698, 0.0835937932, 0.2060483098, 0.0558499545, -0.0801451057, 0.0966668427, -0.1864828765, -0.2836151421, -0.0087155784, 0.2370084971, -0.0759173483, -0.0226873327, 0.0563850030, -0.0188905373, -0.0942045674, 0.1112960279, 0.0917009562, 0.0774118677, -0.0469214283, -0.1944546103, -0.1628262848, -0.0886767134, 0.0466513894, -0.0311934948, -0.0477361940, -0.2326143384, -0.0441106148, -0.2717412412, -0.0565659702, 0.0122194868, 0.0735654011, 0.1286270618, 0.0675758794, -0.0334054977, 0.0503769219, -0.0162087977, -0.2943847775, -0.0242724419, -0.0406067334, -0.0013088088, -0.1617315561, 0.0793177336, -0.0654174834, -0.2159249932, -0.0000303803, -0.5724593401, -0.0427306183, 0.0113171181, 0.1555091143, 0.2989706397, 0.1907162666, 0.0935357362, -0.2012667060, -0.0133889886, -0.1451489180, -0.0459739976, -0.0009216631, 0.0160539094, 0.0669789985, -0.0085986936, -0.0027775555, -0.0334634893, 0.0949767828, 0.2009616047, -0.0183816403, 0.0015409546, 0.1793386936, 0.0718059614, -0.2390013784, -0.0937499553, -0.4569349587, -0.0779485703, 0.2115913033, 0.1413763911, 0.0462522842, 0.0381946191, 0.0260017645, -0.1730656028, -0.0061284532, -0.0230344348, 0.0526771098, 0.1234684214, -0.1946644336, -0.0787126347, -0.2042873204, 0.0145311709, 0.2881533802, 0.0095211826, -0.2115175277, 0.0127304727, 0.1144886985, -0.0591661781, -0.1163619906, 0.2214959562, -0.0749388039, -0.1173060834, -0.1709236354, 0.0920816213, 0.1822321564, -0.2640512884, -0.0997791439, 0.0331536829, 0.1001956984, 0.0113056712, 0.0780587196, 0.0801562294, -0.0928492695, -0.3843695223, -0.0988416001, 0.2994842827, 0.0413273685, 0.0976606905, 0.0235420074, 0.0114964107, -0.0920787752, -0.0731669217, -0.2001638263, 0.0984471291, -0.1200537682, -0.1324340403, -0.0216437727, -0.2128026485, 0.1801841855, 0.0871271268, 0.0239676759, -0.1254921854, 0.0128906732, -0.3994591534, 0.1392701715, 0.1020666510, 0.2352771163, -0.0329321101, 0.0361986905, 0.0935515761, 0.2132465839, 0.0227201059, -0.3920155466, -0.0950146690, -0.0345241725, -0.0432461090, -0.0134029156, 0.1028693616, -0.0324732512, -0.0130941793, -0.0661810711, -0.4574565887, 0.0218884200, 0.1426469684, 0.2342265695, 0.1304340363, 0.0398289412, 0.0609423928, -0.2561061382, 0.0156668611, -0.0216145813, -0.2222506106, 0.0473368801, -0.0802443922, 0.0564882532, 0.2062695622, -0.1338865906, 0.2052711099, 0.0285031442, 0.0529425815, -0.1103107855, 0.0297506321, 0.1336298436, 0.0404126532, -0.1414329112, -0.2134182304, -0.3175188899, -0.0399105102, 0.2342455834, 0.0526365489, 0.0381740294, -0.0045797406, 0.0913232490, -0.1710797399, -0.0167377759, 0.0322944894, 0.1087713018, 0.2346582115, -0.3030311167, -0.0318632387, -0.1591100544, -0.0348186865, 0.2202637196, -0.2044838518, -0.0588204265, 0.1698272079, 0.0030196588, 0.1655636430, -0.1001949608, 0.1748277843, 0.0237091668, -0.0647389367, -0.2769016623, -0.1131230965, 0.1315462589, -0.0246350057, -0.0095208725, 0.1105301678, 0.0759131983, -0.0117850155, 0.0835557058, 0.0123325782, -0.1304650903, -0.2839943171, 0.0341956131, 0.1628658623, 0.0219487417, 0.1984693557, -0.0117174368, -0.1352592111, 0.0993513241, -0.0824465379, -0.4128947556, 0.1226328164, -0.3056204915, 0.0325511731, 0.0117042838, -0.1637478769, 0.0155088129, 0.0717872232, -0.0440602899, 0.1041372567, 0.1101564318, -0.5045298338, 0.1039532870, 0.1225455925, 0.2178931236, -0.0886295512, -0.0788136870, 0.0081484905, 0.0398081802, 0.2709691823, -0.1355532557, 0.0289070047, -0.0931766033, -0.0190784968, 0.0687620267, 0.2104143798, -0.0509325974, 0.0174628589, -0.1601715982, -0.2003688365, -0.2130724490, 0.1027982682, 0.1283838749, 0.1282869577, -0.2978546023, -0.0008542156, -0.1767694801, -0.0207412709, 0.0274071526, -0.0918317065, 0.0452825613, 0.0780117735, -0.1132812053, 0.0994859412, -0.1139121428, 0.1761686951, 0.0384805948, 0.0131000802, -0.0792468414, 0.1043879241, 0.1271817684, 0.0343050100, -0.0626942143, -0.0598307699, -0.3073609173, -0.1939779967, 0.0770326778, -0.0657519177, -0.0827555209, -0.0467104651, 0.1143225357, 0.0550647713, -0.1419533938, 0.1855144203, 0.1460008770, 0.1178986803, -0.1223857328, -0.1234564185, -0.1169979945, -0.0561503954, 0.0840041339, -0.2659658492, 0.1460646391, 0.2031289488, -0.0297607053, 0.1549076587, -0.0354296230, 0.0673839450, -0.0183585268, -0.0361546278, -0.1657089591, -0.2956176996, -0.1062564105, -0.0647096634, -0.0156926587, -0.0123642245, -0.1757608801, -0.1843589246, 0.0599058159, 0.1340225041, -0.3310402632, -0.1329240054, -0.0413879231, 0.1748061180, -0.0606595539, 0.2300866693, -0.0450276509, -0.0775414184, 0.0647902191, -0.0441368967, -0.4064767361, 0.0126176476, -0.1150985435, 0.1415797174, 0.0594922565, -0.0099677853, -0.0391623601, 0.0443050042, 0.0641243979, 0.1921440065, 0.0627103969, -0.1615092009, 0.1495547295, 0.1567834914, 0.1269892454, -0.0230275262, 0.0130153345, -0.0113494005, -0.1284539104, 0.2258491665, 0.0512773544, 0.0473747402, 0.1424367279, -0.2011771947, 0.1432583928, 0.2268503308, -0.1148890927, 0.1280392855, -0.0772676095, -0.0401085205, -0.1876834482, 0.1748965830, 0.2052345872, -0.0489224680, -0.4625700116, 0.0643082559, -0.2072238475, -0.1478012502, 0.1033767164, 0.0245106816, 0.1706647724, -0.1668115407, 0.1249587983, 0.0674455166, -0.0830799937, 0.1689970940, -0.0091476226, 0.0678772181, 0.0241082590, 0.0556515232, 0.0608596317, 0.0196493994, -0.1292905509, -0.0016240007, -0.0990892202, -0.1640572548, -0.1092658639, -0.2230781913, -0.0382227786, 0.0986034796, 0.1816965789, 0.0490971245, -0.0551824830, -0.0186938904, -0.0425667353, -0.0121100219, -0.1838490218, 0.0028638500, -0.1851602197, -0.0343820564, -0.1820286810, 0.0009451958, 0.1394782662, 0.1427533329, -0.0257051680, 0.2341244370, 0.1318740100, -0.0104955202, 0.0080656447, -0.0629051179, -0.1778579354, -0.2699767649, -0.1635539681, -0.0814783797, -0.0317751206, -0.1975498348, -0.3364052176, -0.2695099711, 0.1320283711, 0.0711520314, -0.2580555975, 0.0188538432, -0.0430507809, 0.0139926309, 0.1138310209, 0.0792661086, 0.0521067083, 0.0318947360, 0.1533939540, -0.0185492672, -0.0671552569, -0.0457205027, 0.0411282144, 0.1474124342, -0.0194945969, -0.0288782939, -0.0890966207, 0.0482623652, 0.0846769214, -0.0249995366, -0.0371401310, -0.0010000715, 0.0557842329, 0.1743649095, -0.0255377479, 0.0890696868, -0.0544419810, -0.0769772083, -0.2979358435, 0.1654811949, 0.0334949307, -0.1147129908, 0.0529692844, -0.2680416107, 0.0861702934, 0.2289476544, -0.1096688211, 0.0508564599, -0.0001685789, -0.0491600968, -0.2845574021, 0.1384820640, 0.1355298012, 0.1400069445, -0.1371074319, -0.0073063513, 0.0507088751, -0.2197378129, 0.0066831927, -0.0942781791, 0.1105940044, -0.0729600564, 0.1245080158, 0.0790604427, 0.0493856780, 0.1202570349, 0.1061239392, -0.0221837256, -0.0039344411, -0.0044688429, 0.0705169216, 0.0135896225, -0.0844528228, -0.0008915099, 0.1240967065, -0.2914161682, -0.1832611114, -0.1212451458, -0.0338541120, 0.1702617705, 0.0034916434, 0.0135620758, -0.1456499249, 0.0531002544, -0.0745291784, 0.0101050502, -0.0212450698, -0.0190644115, -0.1143351346, -0.0162213109, -0.1699294597, -0.0429731943, 0.1265628189, 0.1183629930, -0.0407574475, 0.1437192708, 0.1188233793, -0.0109180659, -0.0464834683, -0.0916449055, -0.1480872482, -0.2780860960, -0.2294001728, -0.1220654994, -0.0192305334, -0.1587935984, -0.1985236853, -0.1781682521, 0.1389426589, 0.0331135020, -0.1723193973, 0.0308851991, 0.0170089100, 0.0703133941, 0.0856951475, 0.1262344718, -0.0002748515, -0.0087176273, 0.0563567728, -0.0274934489, 0.0276370477, 0.0059876675, 0.1653436422, 0.0732287392, -0.1137827337, 0.1378940642, -0.0820274875, 0.0644361228, 0.0407372229, -0.1465010941, 0.0457812436, 0.1349025369, 0.0240984764, 0.1759314388, -0.0737894550, 0.1930994391, 0.1294011027, -0.0506386720, -0.4556803703, -0.0097931651, 0.1025259867, -0.0010511124, -0.0639065579, -0.2050199211, 0.0944051296, 0.0494544469, -0.0626022965, -0.0258662123, 0.0070970417, -0.0331918411, -0.0836046115, 0.1081690341, 0.1817587912, 0.0897426680, -0.0434236340, 0.1056730747, 0.0758492202, -0.0810107291, -0.0496841669, -0.0331544057, 0.0547257438, -0.0896092281, 0.0500765406, -0.0039441325, -0.0441032276, 0.1655305475, -0.0850487500, -0.1147609651, 0.0247520562, -0.0688133165, 0.0980732366, 0.0010895623, 0.1476287395, -0.0099702850, -0.0056132013, -0.1279359162, -0.1098660305, 0.0266446434, -0.0419419073, 0.0657960400, 0.2071775347, 0.0761248022, -0.0432304926, 0.0194742009, -0.0426514037, 0.0698538721, 0.0585199594, -0.0944082439, -0.0898903534, 0.0135700461, -0.0589145608, -0.0701468438, 0.0427822098, 0.1858647168, 0.0582293943, 0.1742755026, 0.1073912978, -0.0174838044, 0.0228651669, -0.1180288121, -0.0670174435, -0.0906822085, -0.1755689532, 0.0412541963, 0.0703472421, -0.1405626833, 0.1263903826, -0.1244819388, -0.0170912016, -0.0000536415, -0.0609466918, 0.0398529805, 0.0067474470, -0.0707593411, 0.0076099844, 0.1075674072, 0.0426180176, 0.1962550282, -0.0394112356, 0.0106172627, -0.0446299277, 0.0624591075, 0.0075644515, -0.0159921721, 0.0278232396, 0.1770154089, -0.0602488443, -0.0955318809, 0.0332092158, -0.0194973964, -0.0382199138, 0.0364374444, -0.0367977656, 0.0841296464, 0.0144239729, 0.1754098237, 0.0240090564, -0.2251855582, -0.2810270488, 0.0868471935, 0.0604868159, -0.0529764183, 0.0694239587, -0.2384535670, 0.0818607658, -0.0719280839, -0.0904614553, -0.1184567362, 0.1577483416, -0.0014316526, 0.0010825569, -0.0509866364, 0.1626246572, -0.1038906053, 0.0139882974, -0.0359261297, 0.1116735935, 0.0133560216, 0.1101991460, -0.0153081967, -0.0347952880, -0.0723703355, -0.0211089756, 0.0051954864, -0.0258014612, 0.0958223939, -0.1011990830, -0.1568040848, -0.1699872315, 0.0537565239, 0.1150943935, -0.0268116910, 0.1344999224, -0.0385101959, -0.0621344112, -0.1752862334, -0.0871909037, -0.0202967767, -0.0373293683, 0.0405168235, 0.0578912534, -0.0300669540, -0.0932744816, -0.0183983184, -0.0072957645, 0.0431359932, 0.0463323258, -0.1623243093, -0.0627434179, 0.0613557696, -0.0783559829, 0.0058871079, 0.1254657060, -0.0103013413, 0.0344580226, 0.2557933927, -0.0458339825, -0.1304252893, -0.0454742722, -0.2446013540, 0.0336196609, -0.1002214178, -0.1567888558, 0.0413707718, 0.0327289701, -0.1361199170, 0.1011502594, -0.0587110296, -0.0017024960, 0.1143199503, -0.0169881750, 0.0446887650, -0.0084599238, 0.0702293292, -0.0303794090, 0.1519484371, 0.0462394953, 0.1682361811, 0.0134893088, 0.0174168516, 0.0442582108, -0.0070009287, 0.0007956183, -0.0221773256, 0.0053511830, 0.0856621414, 0.1026516035, -0.1039821804, 0.0854778886, -0.1081765145, -0.1149649471, 0.0314386636, -0.1779585332, 0.0967391133, -0.0010067881, 0.1294487566, 0.0852295160, -0.1627934724, 0.0455784611, 0.0949499458, 0.0013996032, -0.0303797796, 0.0858099237, -0.0820960924, -0.0969016254, -0.0780230686, 0.0519505106, -0.2246677577, -0.0571434535, 0.0144181978, 0.0008987167, -0.0548421964, 0.0542305224, -0.0345877260, -0.0503056012, 0.1069446132, 0.0359880440, -0.1085113734, 0.0927427933, -0.0600863919, -0.0448171869, -0.0022169163, 0.0604391433, 0.0918515101, -0.0935660750, 0.1923318356, -0.0497862287, -0.1225107536, -0.1355658770, -0.0342297591, 0.2051965743, 0.0445822887, 0.1667555571, -0.2621325850, -0.1896784902, -0.0348806605, -0.1257466972, 0.1444608122, -0.0594836995, -0.0491431542, 0.0395588502, -0.0506881475, -0.1660275608, 0.0254091043, -0.2069501877, -0.0156197548, 0.1234659180, -0.0484569632, -0.0645757839, 0.1172487438, -0.1294456720, -0.0937684998, 0.1158955544, -0.0144458348, 0.1148629561, 0.1081605256, 0.0068047442, -0.0390995368, -0.0688008741, -0.2097372711, -0.1338509321, -0.0181158818, 0.0552297533, 0.0003630807, 0.1417212933, -0.0968973711, 0.1098436639, -0.1086534411, -0.0070285858, 0.1743400842, -0.0778718069, 0.0164688211, 0.0578387417, 0.0357162170, -0.0521080606, 0.1789678633, 0.0617065839, 0.1074524075, -0.0674736798, 0.1942487061, 0.0433083773, 0.0051148366, 0.0094856182, -0.0399023369, -0.0138586238, 0.0451796837, 0.1146168411, -0.1476152837, 0.0754981562, -0.0734883547, -0.0959251374, -0.1543020606, -0.2071624547, 0.0965831652, 0.0184297301, -0.1222213283, 0.0541828871, -0.1999187618, 0.2820937932, -0.0167033784, -0.0625105649, -0.0623665228, 0.0462867059, -0.1112603545, 0.0283577722, -0.1192106754, -0.0188934840, -0.2780998051, 0.0488641597, -0.0024035936, 0.0502584316, -0.1387997419, -0.0678425133, -0.1228604317, -0.1418007612, 0.0942499042, -0.0161308385, -0.1136018634, 0.1341687292, -0.0171745494, -0.0838454887, 0.1004193649, 0.0406154059, 0.0403352939, -0.0532191321, 0.2036374211, -0.0275697280, 0.0461829528, 0.0210893098, -0.0464494340, 0.2359813899, 0.1143574119, 0.0710147396, -0.2750519812, -0.1212685406, -0.0739199370, -0.1063860729, 0.1339418739, 0.0339583084, -0.1061321050, 0.0574073568, 0.0095370142, -0.0675834566, 0.0601832010, -0.2703614235, -0.0181995779, 0.0356677361, 0.0994371548, 0.0037817960, 0.0691242814, -0.1847644746, -0.0361431949, 0.1217161119, -0.1701529026, 0.0904702768, 0.1109154895, 0.0646819621, -0.1290319264, -0.1664451808, -0.3136603534, -0.0296226125, -0.0543924682, 0.0157211591, -0.0574675426, 0.0833344981, -0.2023406923, -0.0521142930, -0.1203128174, 0.0590411834, 0.1487973928, -0.0964265019, -0.0189098958, 0.0591996238, 0.0242171623, -0.0176503789, 0.1111081392, 0.0208498705, 0.1591877937, 0.0196541194, 0.0738092214, -0.1451589912, -0.1239148006, -0.0502961278, -0.1639950275, 0.0788322464, 0.0621439740, 0.1491075009, 0.0184925515, -0.0205288641, -0.0606748350, -0.0569943562, -0.1036337689, -0.1655008495, 0.2328053713, 0.1993870586, -0.0550402589, 0.1314705908, -0.0852604657, 0.2005101889, -0.0290033221, 0.0162885934, -0.0063862558, -0.0168051999, -0.0216101296, -0.1216420382, -0.2037878931, 0.0603934042, -0.0517872311, -0.0241494142, 0.0474109501, 0.0155021129, -0.2226499915, -0.2609341145, -0.0016266198, -0.0671295002, 0.0167517029, -0.0069022262, -0.0481052175, 0.1276230067, -0.0436797962, -0.1141613573, 0.0209004022, 0.0658681616, 0.1494974643, -0.0639923289, 0.2108642906, -0.0184500795, 0.0254093464, 0.0166803803, -0.1217121705, 0.1628075838, 0.0661911368, 0.0510757789, -0.3336101472, 0.0467692502, 0.0716884658, -0.0001239741, 0.0429386757, -0.0042211055, -0.2790465355, 0.0828846693, 0.0064356094, -0.0382724032, 0.1495459825, -0.3358359635, -0.0318117626, 0.0207400676, 0.1314554214, -0.0740096420, -0.2482198030, -0.1896817386, -0.0221424624, 0.0386299491, -0.2286211252, 0.1156762838, 0.1690976471, -0.0618769042, -0.0784310773, -0.1656426191, -0.1909254044, -0.0196761619, -0.1226908639, 0.0235733539, 0.0812027007, 0.0221435502, -0.1279747337, -0.0787219033, -0.1355550885, 0.0472935028, 0.2921140492, -0.0183160249, 0.0919951126, 0.0525066964, 0.0060258429, 0.0559065528, -0.0493851043, -0.0249548834, 0.1318877041, 0.0037148295, 0.0254804865, -0.2187557817, -0.0113438545, -0.0273358729, 0.0055174981, -0.0586842597, 0.0237036776, 0.1698618233, 0.1535372436, -0.0585669205, -0.1403239369, 0.0581869036, -0.1018478349, -0.2030217350, 0.2150691152, 0.2742230892, -0.0304435417, 0.1029562727, -0.1605851501, 0.0597187094, -0.1347825080, 0.0558326542, 0.0057048034, -0.0021276809, -0.0794172883, -0.0740859061, 0.0580819622, -0.0554633960, -0.0216853041, -0.0650729612, -0.0079557560, 0.1803771853, -0.3001646698, -0.1715236008, 0.1123368815, -0.1525593996, 0.0262124855, 0.0982746407, 0.0756561458, -0.0151170632, 0.0697002932, -0.0266328435, -0.0586591437, 0.0066513130, 0.1745603681, 0.0384175144, 0.0562023073, 0.0019579376, -0.0037230409, -0.0241538621, -0.0843849778, 0.2131991088, -0.0130567914, -0.0843387172, -0.4100640118, 0.1729165316, 0.1323583871, -0.1484654993, 0.0758637562, -0.1770250797, -0.3716926873, -0.0490932912, -0.0159051605, -0.0367201604, 0.1353550106, -0.2017530948, -0.0919409841, -0.0562087670, 0.0097506279, -0.0021278455, -0.3067940772, -0.2332176119, -0.0306411758, 0.1479960680, -0.3453241587, 0.1792186201, 0.0802639350, -0.1760046780, -0.0265193880, -0.0038342467, -0.2292019427, -0.1134749353, 0.0265933722, 0.0755294710, 0.2125000060, 0.0068642059, -0.2254485786, -0.0430729464, -0.0352832414, 0.1078495383, 0.1536235064, -0.1038570479, -0.0675067604, 0.1078207791, 0.0393865444, 0.0331076458, -0.1146449745, -0.0033102296, 0.1390835643, 0.0655860379, -0.0785912573, -0.1482780874, 0.0638913810, -0.0025442184, 0.0899215341, 0.1173161194, -0.0592145137, 0.0761760250, 0.1376797706, -0.1090168953, -0.2211783826, 0.0484668277, -0.0638662800, -0.1079858840, 0.0773026496, 0.1210727841, -0.0371620432, 0.0603349991, -0.1500250995, 0.0908071995, -0.1205613390, 0.1524198353, -0.0895197988, 0.1265407950, -0.1359808892, -0.2371045351, 0.0282472651, 0.0702590719, -0.0083706556, 0.1410446316, -0.0739922151, 0.2025542110, -0.2455943376, -0.1717121303, 0.0473220125, -0.0066752792, -0.0079325959, 0.0694760457, 0.0693953410, -0.0418108515, 0.2345447093, 0.0379981548, -0.0448097512, -0.1109363511, 0.2252080142, -0.1593987048, 0.0616453588, 0.0024670996, -0.0558377020, -0.2444902509, -0.2308423221, 0.0805571750, -0.0745063052, -0.0890593901, -0.3139235973, 0.2366983294, 0.1121845394, -0.1290886700, 0.0942445174, -0.0369069539, -0.4903238118, -0.0171537772, -0.0689854622, 0.1078237668, 0.3444868624, -0.3084279895, -0.3000827730, -0.0606795326, -0.0302957110, 0.1313332021, -0.2667431235, -0.2067527175, -0.1978248358, 0.0482911095, -0.2349314094, 0.0249046702, 0.0744851679, -0.1497819126, -0.3162903488, 0.1546800882, -0.2126817703, -0.2176311165, 0.0147842392, 0.1675856411, 0.3162993193, 0.0174652543, -0.0443129800, -0.0763464645, -0.1433836669, 0.0429054610, 0.1670959294, -0.1578893661, -0.0030882861, 0.1607782245, -0.1401069015, 0.2524863482, -0.1858471334, -0.0692316443, 0.2515435219, 0.0806030706, 0.1495722085, -0.0664577335, -0.0936456174, -0.1225090921, -0.1619556844, 0.1763936877, 0.0675940588, -0.0393666476, 0.0491863154, -0.2162613273, -0.0905952230, 0.0913237706, 0.0355257355, -0.1312970668, 0.1898911446, 0.2318074256, 0.0010673291, 0.0257619787, -0.3816389740, 0.0207102895, -0.1416822821, 0.2033289820, -0.0885762870, 0.0832559615, -0.1542627662, -0.2801444232, 0.1580699831, 0.1798867136, 0.0363085754, 0.3666566312, 0.0365338065, 0.2133001387, -0.1219780818, 0.0088367080, 0.1809268445, 0.0930194631, -0.0666352436, -0.1120798215, -0.1054229364, -0.1049718335, 0.2984822094, -0.0744533613, 0.0616931021, 0.0932924002, 0.2157555073, 0.0613744855, -0.1003925204, -0.1037846431, -0.0261495598, -0.0483704135, -0.3231889606, 0.1116014868, 0.1580546498, -0.2265411168, -0.3584732711, 0.2136523128, 0.1746701747, -0.0900338367, 0.1808378249, -0.2081661820, -0.3687905967, 0.0323046781, -0.2195925713, 0.0516410768, 0.3554035127, -0.2920588851, -0.1111350060, -0.0602210686, -0.0691426247, 0.1590645462, -0.1974441409, -0.3774845600, -0.0507626534, -0.2137666792, -0.3428394496, -0.0337814428, -0.0141027439, -0.0931736827, -0.1966918558, -0.0699305013, -0.1068506688, -0.1689122915, -0.0043439358, 0.2705195248, 0.1752294153, 0.1440089792, 0.1704176217, -0.1260496825, -0.1942333579, 0.1107340157, 0.3059554994, -0.0708812177, 0.1345176846, 0.1100682616, -0.1422954202, 0.2457472533, -0.2591673434, 0.0598704517, 0.0036565030, -0.0585583411, 0.0078131659, -0.2327373326, 0.0857227594, 0.1663385928, -0.0956915170, 0.2468576282, -0.2549251914, -0.2127249539, 0.1436936259, -0.1311381012, -0.1159772649, -0.1018331721, 0.1967244744, -0.0090636080, 0.0229239203, 0.2496362180, -0.0883677527, -0.0729633421, -0.3238935769, -0.1488851905, -0.2312706560, 0.1479647458, -0.0607446283, -0.0771671981, -0.1765761971, -0.2906092703, 0.0683750510, 0.1084193215, 0.0091792038, 0.2102091461, 0.0287224744, 0.1484132707, 0.0343974642, 0.0846518278, 0.2359222919, 0.0708332807, -0.0073634842, -0.2379115224, 0.0946581513, -0.1440363526, 0.0027532235, -0.1546078324, -0.0071783806, 0.1199862584, 0.0144879716, -0.0238717422, 0.0145942904, -0.0959303156, 0.0672322512, -0.2183092535, -0.1015377268, 0.0934723318, 0.0743353218, -0.1510792822, -0.2662717104, -0.0023127247, -0.1597352326, 0.1082083285, 0.2257995009, -0.1678195149, -0.1786599308, -0.0657916889, -0.1565178633, -0.0737579241, 0.0367234088, -0.0963804722, -0.0073036673, -0.0733124912, -0.0178018156, 0.0518068820, -0.0899580717, -0.3214727044, 0.1168204695, -0.2574394345, -0.1885223091, -0.1875061095, 0.0445584655, -0.3382752836, 0.0982997864, 0.1302456856, 0.1108128503, 0.0394131057, -0.0394449681, 0.1694172323, -0.0203503203, -0.0187490676, 0.0379262157, -0.1664589047, -0.0755820721, 0.1241482943, -0.0103470627, -0.0704170391, 0.2162946016, 0.0327552184, -0.0073069856, -0.0093182279, -0.2163795978, -0.0052715242, -0.1647366136, -0.1587721407, -0.0236509237, -0.1916513592, 0.2181452513, 0.0350314155, -0.0144175636, 0.0363836735, -0.0328064561, -0.1958103627, 0.1029180884, -0.0167151932, -0.2381329685, -0.2056229711, 0.1631219536, -0.1500726789, -0.1851436347, 0.2451681346, -0.0296121575, -0.1433223486, 0.1839111894, -0.0160577614, -0.0864044055, 0.1058303565, -0.0099630756, -0.1049350128, -0.0308641121, -0.1743734181, -0.2293389440, -0.0403137654, -0.0937364399, -0.1313668638, 0.1760692149, -0.0213643685, 0.1157211810, 0.0248886067, 0.1357800215, -0.1386752576, 0.1950670630, -0.1291791052, 0.0989822373, -0.0390632637, -0.1154912859, -0.1675939560, -0.1122219935, 0.0610809997, -0.0912660137, -0.1214701235, 0.0556737222, -0.1739282012, 0.0767009109, -0.3113558590, 0.1059229076, 0.1459577084, 0.1568057388, 0.1557385474, -0.0285519119, 0.0905124769, 0.0452485718, 0.2379762679, 0.1388027519, 0.0233464558, 0.0613422580, -0.0660143942, -0.0532847792, -0.1243199855, -0.0790616050, -0.0523622297, -0.0401337780, -0.1288000196, -0.0097639197, 0.0499170497, -0.0997274816, -0.0457994491, -0.0153945545, -0.1845646203, -0.0874505416, -0.0551221259, 0.1369472593, -0.2315688282, 0.0342471264, 0.1662555933, 0.2087413073, 0.0081376033, -0.0565755740, 0.1597791463, 0.1005147398, -0.2013581991, 0.0983324796, -0.0557539575, 0.0117034949, -0.1085606143, -0.0966744199, -0.1121416241, 0.0013489843, -0.1291401684, 0.1660103649, -0.2051492035, -0.2493959218, -0.0371998847, -0.0938520208, -0.0235475376, 0.0210821088, -0.0740898252, 0.1358292401, 0.0342183150, 0.0982668623, -0.0121743567, -0.0888608396, -0.0402222015, -0.0721888915, 0.0499204062, -0.0677003041, -0.1602705121, 0.0103972750, -0.1284065843, 0.1188215762, 0.0344606191, -0.1608357579, -0.0247890987, 0.0874896944, 0.0146991462, -0.0087191984, 0.0526141636, 0.0487574413, -0.1259553879, 0.1310963929, -0.1111262068, -0.0183581747, 0.1313535124, -0.1095271632, -0.1072810590, 0.0137428483, -0.2421819717, -0.0799793005, -0.0703573748, 0.1255032569, 0.1076533571, 0.0760092959, -0.1531060487, 0.1699697673, -0.0567815155, 0.0902881622, 0.1350086033, -0.0090702325, 0.0584021658, -0.1623815596, -0.0449043475, 0.1967135817, -0.0765122175, 0.2692187130, -0.1853205860, 0.0122611374, 0.0500802547, 0.0749412328, 0.0408042222, 0.1368765384, -0.0183708686, 0.0666229799, -0.1440344751, -0.0901545212, 0.0434683785, 0.0534477606, 0.0142144309, -0.0742000490, -0.0743547156, -0.0117407199, -0.0091792997, -0.0644274801, -0.1495396495, 0.0419007093, -0.0205824189, 0.0998281986, -0.0134894820, -0.1809275150, 0.0685293227, -0.0665124506, -0.0425165519, 0.1365699768, -0.1009407043, 0.0112692052, -0.0678460523, -0.1040769741, 0.0037765293, -0.0882789046, -0.0854927078, -0.1039733589, -0.0158515871, 0.0246836375, 0.0324207656, -0.0084154941, 0.1000343859, -0.0399305150, -0.0865297914, 0.1715941727, 0.0440758765, -0.0198314097, -0.0719022155, 0.0225924682, -0.0555684045, -0.1259242147, -0.1408730000, 0.0018085266, 0.0225624964, 0.0382532477, 0.1680098772, -0.0190872289, 0.0360775404, 0.0374972820, -0.0228629466, 0.0150758838, 0.1767172366, -0.0675821677, 0.1690447032, 0.0560218841, -0.1195473224, 0.1106037870, 0.0044044866, -0.0273973439, 0.0528757311, 0.0025456112, -0.0261265282, -0.0732802600, 0.1577341557, 0.0492365062, 0.0273920652, -0.0891735703, 0.0065925149, 0.0198832173, -0.0170035381, 0.0936314389, -0.1690680832, -0.0715650469, 0.0234626513, -0.0041257627, -0.1246008873, -0.0500782840, -0.0897006989, 0.0836012885, 0.0200226344, 0.0009185549, -0.0604277030, -0.0935491845, 0.0797783136, -0.0966031477, -0.0239449330, -0.0552988090, 0.0188642442, -0.0395365097, -0.0942622423, 0.0654169172, 0.0171823446, 0.0533585213, -0.0051034335, -0.0328063518, -0.0525721088, -0.0144099295, 0.0823434591, -0.0643857718, 0.0352949500, 0.0078442618, 0.0264135972, 0.0606703237, 0.0416877754, -0.0441028923, -0.0783299357, -0.0746797398, -0.0781896561, 0.0102091087, -0.0300451256, -0.0488408171, 0.0892082304, -0.0339750312, 0.0071593141, -0.0723833814, 0.0718926564, 0.0081446655, -0.0446593724, 0.0527562238, -0.0582072288, 0.0172061101, 0.0748429894, 0.0130754234, -0.0633991361, 0.0642856658, 0.0554952323, -0.0315801986, -0.0030600009, 0.0724999011, 0.0796705633, 0.0916460752, 0.0270784143, -0.0330886543, 0.0510937423, -0.0014961790, 0.0966426805, -0.0506808609, -0.0459628217, -0.0946911052, -0.0610882267, 0.0168233197, -0.0265737902, -0.0812489763, 0.0186995491, -0.0697199181, -0.0284166262, -0.0576309413, -0.0131237805, 0.0166396014, -0.0477110371, 0.0045766020, 0.0056974869, 0.0981455445, 0.0424616933, 0.0502653718, -0.0139918793, -0.0390501991, -0.0399084762, -0.0014851615, 0.0734902322, -0.0173848718, 0.0383119062, 0.0571412109, -0.0198636353, 0.1300138831, -0.0444938019, -0.0742037967, 0.0777565688, 0.0390846841, 0.0741773844, 0.1549902558, 0.0719934404, 0.0230098441, 0.0399449542, -0.0190416686, -0.0648721531, -0.0712922439, 0.0629174411, -0.0315797776, 0.0046269563, 0.0532227159, 0.0392940156, 0.0023597369, 0.0729460344, -0.0278374515, 0.1874134839, -0.0587604828, 0.0615427457, -0.1883312315, 0.0465324223, -0.0304466877, 0.0900586769, -0.0422545932, 0.0341596939, 0.1238854527, 0.1665161252, 0.2007474303, 0.0564178899, -0.0627811626, -0.0369998217, 0.0329879820, -0.1598653197, -0.0140456436, -0.0539401174, 0.1334489584, 0.0760918185, -0.0551004410, 0.0707950071, 0.0421600565, 0.0369622596, -0.0413802937, -0.1300821602, 0.0008544018, 0.0913833454, 0.0313534737, -0.0984947011, -0.2088725567, 0.2438354790, 0.0684784502, 0.1260293275, 0.1175230891, 0.0822729766, 0.1543477625, -0.0512693413, -0.0585959964, 0.1424694210, -0.0504047871, -0.1056271642, -0.0295314360, 0.1087079942, -0.0982066393, -0.1423291564, 0.0525250137, 0.0005991617, 0.0234105345, -0.0376762711, 0.0069557000, 0.0727247670, -0.1261418462, 0.0126218870, -0.0726389587, 0.0747055113, 0.1154588833, 0.1329374015, -0.0189780984, 0.1862425059, -0.1351237893, 0.0774061829, 0.0959981382, 0.0299906563, -0.1644008607, 0.0072066388, -0.0220017824, 0.1455503851, 0.1444623321, -0.1793114245, 0.1577153951, -0.0030801073, 0.2380161136, 0.0163531434, -0.0156200537, 0.0229578428, 0.0224036444, 0.0146286469, 0.0050227488, -0.0755508542, -0.1685977727, -0.1768317521, -0.0530711561, 0.0133033022, 0.0376383364, 0.0978298262, -0.1508759409, -0.0760603026, 0.0303044915, 0.0456702672, -0.0018688354, 0.1397311687, -0.0516112521, 0.0502224863, 0.0039397469, -0.1381915957, 0.0200128686, 0.0630285442, 0.0062777530, -0.0640121549, -0.0832086578, 0.0066464180, -0.0587681495, 0.1737957895, 0.0464340784, -0.1284654737, -0.0916024894, -0.0904147178, 0.1736830473, 0.1255996376, 0.2027325481, 0.1188608035, 0.0116774924, -0.1074050665, -0.1520822197, -0.1638856381, -0.0545730107, -0.2167915851, 0.0875379518, -0.1426835656, -0.2145036906, 0.0209759492, -0.1458568871, -0.1337382644, 0.0009306989, -0.0351107270, -0.0039715627, 0.1765882224, -0.0436686836, -0.2050694525, -0.1996076405, 0.0549151003, 0.2316595912, -0.0736835301, -0.0973446891, 0.0093422839, 0.1838246137, 0.0993830785, -0.0761807337, -0.1207986027, -0.0768570751, -0.2126379311, 0.0489476360, 0.2321379483, -0.0667846873, -0.0546884798, -0.0475464016, -0.0161646660, 0.1088462472, -0.1354837567, 0.1762265712, -0.1240292192, 0.1172225103, 0.0043838993, -0.1243721247, -0.0313962922, -0.0943290740, 0.1653473228, -0.0147600798, 0.2224693596, -0.1110738590, -0.0817539319, 0.0976746231, -0.1968922168, -0.1832093894, 0.0876585618, -0.0033702487, 0.1890327185, 0.1612183750, -0.0486755818, 0.0313144401, 0.0287850276, 0.2618732154, 0.1303367913, 0.0762366727, -0.0288429875, -0.0662649199, 0.0342606492, -0.0976055190, -0.0893116519, -0.0892705321, -0.1860352010, -0.1213733181, -0.0090938769, 0.0777500495, 0.1005267873, -0.0436928831, -0.1408628970, -0.0620534346, -0.1453504115, -0.0896909237, 0.2375174165, 0.0264370758, 0.0035760999, -0.1472032368, 0.0813094154, -0.0793453977, 0.1750413477, -0.1174153462, -0.0365899876, -0.0228150077, 0.0179322120, 0.0197145026, 0.0405872501, -0.0201933216, -0.0694646463, 0.0122119905, -0.0497845002, 0.0849894136, 0.0642026961, 0.1034857929, 0.1002251804, -0.1000094861, 0.0223957617, -0.0280893091, -0.0005746225, -0.0360469893, -0.0553602315, 0.0615222752, -0.1792137474, 0.1785768718, 0.1306477636, 0.0083847586, 0.1529581249, -0.0915166512, 0.0422846712, -0.1026165634, -0.0510403700, -0.0749458894, -0.0805560127, -0.1228562593, -0.0768830404, 0.1436491609, -0.0894024000, -0.1062344089, -0.2756559849, 0.0996401757, -0.1487418562, -0.0599874891, -0.0722900480, -0.0610009134, -0.0352621004, -0.1273816675, 0.0051378286, 0.2358471304, -0.0795118660, -0.0985248759, 0.1540962309, -0.0540007427, 0.0695036352, 0.1045422405, -0.0044952412, 0.1999707967, 0.0306269675, -0.1701825112, -0.0486919172, 0.0495866276, 0.1040623188, -0.1317713559, 0.0532683432, -0.0902462900, 0.0470915437, 0.0169897657, -0.1435714364, -0.1578927636, -0.0514030866, 0.1965810657, 0.1153793186, 0.1091132089, 0.0216670539, 0.0979195833, 0.1709468514, 0.1492701173, -0.0284734536, -0.1816448867, 0.1477902830, 0.0117974766, 0.0788135976, 0.0606330186, -0.1141730025, -0.0011824542, -0.0221689064, 0.0811352581, -0.0779854432, 0.0900575370, 0.1984100789, -0.2068064064, 0.0392031595, -0.0308651254, -0.1554993838, -0.0894529521, 0.0918688104, 0.1232548952, -0.2107900828, -0.1113563478, -0.0376767181, -0.1938873529, -0.0408124216, 0.0787341520, -0.0041351845, -0.0434869975, -0.2373045385, 0.0729990751, 0.1012450159, -0.1674409956, -0.0800201818, -0.0641674325, -0.2751990259, -0.1342195421, 0.1035737246, -0.0000849377, 0.1408218145, 0.0354664512, -0.0938921422, -0.0293275099, 0.0094961273, -0.0097864410, -0.2082585096, 0.1355258971, -0.1476782858, 0.1202530861, 0.0892819092, 0.0197249483, 0.0817601681, -0.2755673528, -0.0951053128, -0.1873243153, -0.0276057143, -0.0351498015, 0.2702794671, -0.0751467124, -0.1155570298, 0.2180609852, -0.1761960834, -0.1754516810, -0.1420344263, -0.2908533812, -0.2938760221, 0.0051808693, -0.1730557978, 0.1130581275, -0.1198597774, -0.1818380952, -0.0720246807, -0.0244050976, -0.0803436413, -0.0869771689, 0.0556409657, -0.2814196050, -0.0694058836, 0.1115407795, -0.0160733350, 0.1843161285, 0.0122757806, -0.0870217010, 0.0251426585, 0.2664773762, -0.2029561251, -0.2839558721, -0.0136081818, -0.1839409471, -0.0445346013, -0.0502205566, 0.0754979476, -0.1645063907, -0.0343703963, 0.2424186021, -0.0032029501, -0.0137336180, -0.2019935399, 0.3231768906, -0.0453814678, 0.2338430882, 0.0111162597, -0.1941379011, 0.1075283438, -0.2591392100, -0.0580951460, -0.0415557325, 0.0990526006, -0.0127469739, -0.0984525979, 0.1100683957, 0.0311775412, 0.1005855873, 0.3214689791, -0.4206859767, -0.0025752506, -0.0071732504, -0.1316692084, -0.0104232049, -0.0085194474, 0.1765386611, -0.2728089392, -0.1324435323, -0.0526693016, 0.0188610218, 0.0054060365, 0.0511376970, 0.1039547175, 0.1066911221, -0.0931208059, -0.0989372581, 0.0054983585, -0.0578206740, -0.0396850035, -0.0531465039, -0.0624170303, -0.0733287483, -0.0021272302, 0.0028439341, 0.2073995471, -0.0633190945, -0.0945108905, 0.0035523227, 0.0129861487, 0.1470762044, -0.0959649757, 0.0046896599, -0.0281617325, 0.1192183569, 0.0090914275, 0.0045421221, 0.2015801072, -0.2089820504, 0.0311186388, -0.3224916756, -0.0278857239, 0.1399709284, 0.0237621553, -0.2105707377, -0.0115478570, 0.1580274403, -0.0970853195, 0.0973514318, -0.1768068522, -0.1269602031, -0.2674905360, 0.0714455545, -0.1044974625, 0.1695684195, -0.0022426390, -0.1251655519, 0.0853722841, -0.1186524928, 0.0510146841, 0.0557752512, -0.0454477333, -0.1195374131, -0.0556590520, 0.1235336810, 0.0417062305, -0.0622753985, -0.1064546853, -0.0890925154, -0.0306700356, 0.1585606486, 0.0201535411, -0.2438226044, 0.1397945881, -0.2488793582, -0.2114570886, -0.1105735302, 0.0332708135, -0.1695190817, -0.0879011452, 0.2096500695, -0.1067651063, 0.1026325300, -0.1065182537, 0.1381949335, -0.0451430269, 0.2086040825, -0.0365871750, -0.1974493116, 0.0458476767, -0.1458979845, 0.1490119249, 0.0218283851, 0.0489247814, -0.0706015974, 0.0426008552, -0.0988294408, -0.1180445999, 0.0892947018, 0.1113731340, -0.4773457348, -0.1262118369, -0.0830227882, -0.1603927165, -0.1555093080, 0.0870719329, 0.1281183660, -0.2265782654, -0.0979895517, -0.0309510808, 0.1338363886, 0.1630630046, 0.0448732451, 0.0441382155, 0.0834540948, -0.1536058486, 0.0067910501, 0.0081929378, -0.0001516871, 0.1621324122, -0.1104722917, 0.0270437747, -0.1173265055, -0.0775912926, 0.0229264963, 0.2470552176, 0.1078747511, 0.0509187058, -0.0945492089, 0.0007420986, 0.2982402444, -0.1059888229, -0.0127088688, 0.1711824685, 0.0978517234, -0.0555016361, 0.0111484025, 0.1332181096, -0.1585211456, 0.1172732785, -0.1162867993, -0.0572682954, 0.1021309346, 0.0497150570, -0.1016040295, 0.0183774233, -0.0479530022, -0.1634251177, 0.1202837899, -0.1312702894, -0.0955223441, -0.3269212544, 0.0236579217, 0.0136781372, 0.0869983658, 0.0713596791, -0.1691708118, 0.0852985084, 0.0419836715, 0.0113997729, -0.0289237872, 0.0633443147, -0.1868991703, -0.0203122515, 0.1583575457, -0.0121327303, 0.1783549786, 0.0028675450, -0.0805010274, -0.0658991188, 0.1113833040, -0.0358141474, -0.2723477483, 0.1411679089, -0.3302038312, -0.0316740759, -0.0375205502, -0.0238315705, -0.0856954306, -0.0659208968, 0.1812774688, 0.1522841901, 0.1611167789, -0.0288604852, 0.0984449759, -0.1644319445, -0.0587310567, 0.0965149552, -0.1557315141, 0.0898677260, -0.1838763654, 0.0908508450, -0.0002110201, -0.0145108979, 0.1583323628, 0.1433498859, -0.0333598107, -0.0597542226, -0.1451295167, -0.0271995738, -0.3887541592, 0.0178663936, -0.1403447986, 0.0114388224, -0.3743608594, 0.1305357218, 0.0665128902, -0.2102874368, -0.1544231176, -0.0334397741, 0.2100173533, -0.0003320168, 0.0490724146, 0.1452326924, 0.0016781748, -0.1743080020, -0.0012647581, 0.0007307073, -0.1182092652, 0.0896574706, -0.0588315204, 0.0343660042, -0.1503906995, 0.0906531289, 0.0708149001, 0.1844929308, 0.1172612533, 0.1284279972, -0.1374847591, 0.0849222690, 0.1880082190, -0.0624910519, 0.0139146531, 0.2877494991, 0.1041757539, 0.0342262127, 0.0247100852, 0.1807502657, -0.1475450993, -0.1151665896, 0.1905251145, -0.2827054262, 0.0345106907, -0.0025268267, -0.0456965007, 0.1049911827, -0.1204696596, 0.0015016140, 0.1260914505, -0.0940237641, 0.0317898355, -0.1994403899, -0.1321727782, 0.0058488725, 0.1638064384, -0.0896970257, -0.0329144262, 0.0097515136, 0.0664087608, 0.1128879040, -0.0177581739, -0.0966204107, -0.2488100827, -0.1139490381, 0.1851349324, -0.0001412975, 0.0915393308, -0.0136747882, 0.0860547423, 0.1066639349, 0.1423962563, -0.0629049391, -0.1863676012, 0.0301033389, -0.2422363907, 0.0067892456, 0.0105949203, 0.0954647213, -0.0622076392, -0.0803742111, 0.0286138766, 0.0486677811, 0.0145077324, -0.1138215512, 0.1261511892, -0.2500493228, 0.0030169655, 0.0187722724, -0.1443430483, 0.0092705991, -0.1709913760, -0.1345186383, -0.1798169613, 0.0853103027, 0.1988495588, 0.0987418145, -0.1580762565, 0.0316221714, -0.0986015722, 0.0913570747, -0.3895885348, -0.0237653721, 0.0587970689, 0.0591778085, -0.0873547345, 0.0992045626, -0.0586240180, -0.2870567441, 0.0195429213, 0.0534725972, 0.1625804603, 0.0664538518, 0.1485667825, 0.1048477888, -0.0170869958, -0.1497318298, -0.1206804737, -0.0943103731, 0.0116601735, 0.0381267630, -0.0167469457, 0.2225365937, 0.0181593131, 0.0907635763, -0.1178233251, 0.1232893690, -0.0427444987, -0.0338698886, 0.0756346583, 0.1147768348, 0.1439785808, -0.1692637205, 0.0826743990, 0.1444782615, -0.0291029755, -0.0784935057, -0.0366262123, 0.2153769881, -0.1716879606, -0.0940480828, 0.1268100739, -0.1567558646, 0.0828248933, -0.0892586485, 0.0201457497, 0.0314890966, -0.1697541624, -0.1074538231, 0.1555494517, -0.0052476372, 0.1050284281, -0.2358226329, -0.0283459425, 0.0238198079, 0.1692803651, 0.0793625787, -0.0709833354, 0.0075016180, 0.1024433225, -0.1181606650, 0.0576702207, -0.0865401924, -0.1542706490, -0.0469050445, 0.3363091648, 0.1191258579, -0.0177161749, 0.0178293157, 0.1359591633, -0.0998586193, 0.1316152364, 0.1182185039, -0.0669011399, 0.0061014500, -0.2203537375, -0.1900140345, -0.0074894601, 0.0472132005, 0.0532346144, -0.0974979401, -0.0435343720, -0.0090588089, 0.0175444167, -0.1023552492, 0.0352985077, -0.1985236108, 0.0405593514, -0.1111772433, -0.0665215030, -0.0092957588, -0.2485646307, -0.0225481279, 0.0067770877, 0.0668679178, 0.0409902595, 0.0076171341, -0.0860183910, -0.0569574274, -0.2161843777, -0.0414395258, -0.3762942553, 0.1479957551, -0.0134881651, -0.0399514325, -0.0054675629, 0.0848160088, -0.1995873302, -0.1515518129, -0.0607289225, 0.0851238668, 0.0601324812, -0.1100610793, -0.0007233260, 0.0597422533, -0.0278108381, -0.0917284265, 0.0242763795, -0.1855080128, 0.0388059169, 0.0252203103, 0.0046368442, 0.1632513851, 0.0672152266, -0.0772510916, -0.0796809867, 0.1189695001, 0.0508271717, 0.0390790403, 0.0250590649, 0.0403166115, 0.1084895357, -0.2116170526, -0.0713148788, 0.2611820400, 0.0874468908, -0.0251693353, 0.0073193498, 0.0748605207, -0.1850056052, -0.0507216305, 0.0884106457, -0.0625644997, 0.1049340665, 0.1019368693, 0.0181526728, 0.1249323636, -0.0504726395, -0.0122199170, 0.0030251248, -0.0562607162, -0.0778710842, -0.1329159439, 0.0183161739, 0.1571689099, 0.1699319631, 0.0622493029, 0.0335048698, -0.0095521417, -0.0330388136, -0.1071375757, 0.1452574134, -0.0253582820, -0.1883790344, 0.0311560798, 0.2786948383, 0.0180638004, 0.0174740385, 0.0093138553, 0.0812448114, -0.0409417413, 0.1246388257, 0.0460372120, -0.0168871507, 0.0783408433, -0.0472937524, -0.1113088578, -0.0472444855, -0.0262924489, -0.0302578602, -0.0829663277, -0.0785509795, -0.0529079959, -0.0691422373, 0.0516898260, -0.0587010607, -0.0989117250, 0.1291707009, -0.0004159086, -0.0506686158, -0.0160727166, -0.4983186126, -0.0167690553, -0.0333812088, 0.0114821224, 0.0343198180, -0.0072531314, -0.0481026471, 0.0349561572, -0.1585030258, 0.1144214496, -0.3508232832, 0.0677080527, 0.1469049305, -0.0650883093, 0.0808181763, 0.0933203846, -0.0872726217, -0.1517260373, -0.0059119500, -0.0070409323, 0.0092398031, -0.0115733463, 0.0529785119, 0.1541985422, 0.0244155154, -0.1223692894, 0.0933011696, -0.1264619678, -0.0176672060, 0.1358478218, 0.0590204038, 0.1297782958, -0.0273713246, -0.0721506551, -0.0694660842, 0.0174602438, 0.0861087292, -0.0690063760, 0.0829800889, 0.0536336228, -0.0991070643, -0.0266490765, -0.0606709607, 0.2798951566, 0.0416146368, 0.0146044930, 0.1138581112, 0.1644492447, -0.2120723426, -0.0028874467, 0.2652672529, 0.1342067420, 0.1998896301, -0.0036918495, -0.0749899521, 0.0350522883, -0.0585666113, 0.1252186745, 0.1108036116, -0.0496354513, -0.1280324757, -0.0680594072, 0.0718120784, 0.1601885706, 0.1086292788, -0.0715697035, 0.0361283161, 0.1101953834, -0.0208749138, 0.0322017111, 0.0688091218, -0.0528948270, -0.2852878273, 0.0099002616, 0.2879877985, 0.0466736592, -0.0180003140, -0.0806718618, 0.0352277569, 0.1288566440, 0.2456305325, 0.0486405753, 0.1088042110, -0.0208761338, 0.0949930176, -0.0808085576, -0.0809147656, 0.1510149688, 0.0631254315, -0.0705298781, -0.0682058185, 0.0037878435, -0.3115290999, -0.0212104358, -0.0056602606, -0.2070065439, 0.0857614949, 0.0665442273, 0.1205353886, -0.0051827827, -0.3195359707, -0.0010460918, -0.0684461668, 0.0055147773, -0.0538587272, -0.1710899174, -0.0713285580, -0.0547019653, -0.2108331919, 0.0995949656, -0.3034518659, 0.0444937460, 0.1271240711, -0.0265923347, 0.1974747926, 0.1845050007, -0.0322326608, -0.1955499351, 0.0292132180, 0.0896104351, 0.0389704555, -0.0352262072, -0.0019396567, 0.0204588715, 0.0865410939, 0.0333690755, 0.0093435422, -0.0886907578, 0.0787489265, 0.0312915891, 0.0253965370, 0.0247388333, -0.1045902520, -0.0648809075, 0.0523351990, -0.3832388818, -0.0320957638, 0.0877904072, 0.1807260811, 0.0878740251, -0.0686462000, -0.0553392768, -0.1467396915, 0.1027479842, 0.0782954171, 0.0359266102, 0.1761272401, 0.1668101549, -0.1047074124, 0.0529124662, 0.1349256337, 0.1923813820, 0.1155549288, -0.0685888007, 0.0156392250, -0.0759781599, -0.1594537348, -0.0723561272, 0.2459307164, 0.0438258238, -0.2282200158, -0.1953868270, -0.0179750621, 0.2263379842, -0.0375701897, 0.0492811427, 0.1315414608, 0.1164356470, 0.0124671385, 0.0138815707, 0.1518387794, -0.0586694852, -0.1817358583, -0.0586447120, 0.2041338384, -0.0467009544, -0.0065995227, 0.0243254434, 0.0210695099, 0.0732430965, 0.2301445752, 0.0492333509, 0.1729541421, -0.0909790769, -0.0167551748, -0.0327681489, -0.1826356798, 0.0148423659, 0.1014574543, -0.1101881936, -0.0816914961, -0.0001455350, -0.4889504015, 0.0505679436, -0.0058935275, -0.0579818077, 0.0010794195, 0.0857794955, -0.1115288958, 0.0842260048, -0.0155487889, -0.1792249084, -0.1297927648, -0.0936466604, -0.0191332530, -0.1563631296, -0.0157726482, 0.0131855467, 0.0793930218, 0.0370147787, -0.0578523502, -0.1147600487, 0.0734634399, 0.0154882669, 0.2088758796, 0.0249186195, 0.1016159430, -0.1766744107, 0.0859830827, -0.0895048305, -0.0257682875, -0.0296255946, 0.0856392980, 0.0213948824, 0.0959386304, -0.0427790545, 0.0141743561, -0.0550203212, 0.1589967906, -0.1095794588, 0.0457318500, 0.1213764325, -0.0793624669, -0.0217852127, 0.0637356341, -0.4066443443, -0.0627147481, 0.0594969131, 0.2878567576, -0.0464703627, -0.1055506468, -0.0347182527, -0.1334534138, 0.1555514485, -0.0027278063, 0.2252394408, 0.1012331694, 0.0922336131, -0.1111452430, 0.0731786117, 0.0983720496, 0.2278944105, -0.0301983971, 0.0371896625, 0.1474596262, -0.1644361466, -0.1527200043, -0.0415672436, 0.2360864580, 0.0856148675, -0.1022313684, -0.1910489500, 0.0317533351, 0.3688201010, 0.0487587824, 0.1189029291, 0.0866067410, 0.0096091907, -0.0688250214, 0.0092445565, 0.0393632092, -0.1310891658, -0.1179075763, -0.1305738240, 0.1263425350, 0.0613499247, 0.1394110620, 0.0041359426, 0.0180967208, 0.1418360025, 0.0994619280, -0.1608138531, 0.1250052303, -0.3987968862, 0.1090797037, -0.0629101843, -0.2366864681, 0.0733713433, 0.1419291794, -0.1225651130, 0.0334366038, 0.0633598045, -0.2550580502, 0.1352609098, 0.1205734536, 0.0628183186, -0.1004197523, -0.0780740157, -0.0561453775, 0.0479408167, 0.0081732608, -0.1992290467, -0.1403822750, 0.0166156404, 0.0591963194, -0.0698413849, -0.0009052510, 0.0009240141, -0.0034086071, -0.1088248491, 0.0966001302, -0.0294654947, 0.0744082630, -0.0113763213, 0.2683879733, -0.2155009359, 0.1019997299, -0.2093386501, 0.1097207367, -0.0047452720, 0.0745090321, -0.1823800206, 0.1221130416, -0.0391418375, 0.1272502095, -0.0573609844, 0.1589354426, -0.0318668596, -0.0434690639, -0.1135272309, 0.1193408147, -0.0139188329, -0.0635489970, -0.1025981754, -0.1095773205, -0.3833084404, -0.0442506149, 0.1007408574, -0.0788992271, -0.0856405646, -0.0577476248, 0.1951867491, -0.1241029724, -0.0430448465, 0.1785515994, 0.2303856313, 0.1888805181, 0.0193794332, 0.0662056357, 0.1800215691, -0.0202567615, 0.1486725807, -0.1805942059, 0.0512969084, 0.1935760081, -0.1665516049, 0.0520447716, -0.0655709505, 0.0461916588, 0.0558960587, -0.0763773695, -0.1357469559, -0.1286268681, 0.0428119861, -0.0262864809, 0.0774066746, 0.0630263537, -0.1120261028, -0.2262950689, 0.1016769260, 0.1105851755, -0.0895079523, 0.0486109480, 0.0296306275, 0.0238387100, 0.0165417399, 0.1537809372, -0.0926024094, 0.1283143461, 0.1521598250, 0.0403170511, -0.3909945190, 0.0211538393, -0.2345027775, 0.0511042029, 0.0027924180, -0.0773311257, -0.1314459890, 0.1088890135, -0.1049159616, 0.1181849614, 0.0463346019, -0.1722174287, 0.2226106375, -0.0604525208, 0.1084571779, -0.2079412490, -0.0248637274, -0.1372918189, -0.0109253395, 0.1180617511, -0.0442564897, -0.0086920168, -0.0640474558, -0.0435569026, -0.0386249125, 0.0702612922, -0.0288546253, -0.0240881816, -0.1889998466, 0.0302653294, -0.1864291728, 0.1508289278, 0.0748089477, 0.2055308968, -0.3401454091, 0.1504209042, -0.1358793825, -0.0089831213, 0.0589485653, 0.1522217542, -0.1114358529, 0.1202541888, 0.0049445448, 0.1560104787, -0.0419696942, 0.2031632066, -0.0064163557, 0.1264365613, -0.1007052809, 0.1514536440, 0.0992931947, 0.1035630330, -0.0830216035, 0.0022919641, -0.2739853263, -0.0967679992, -0.1274556816, -0.2134118676, 0.0639116913, -0.0055202390, 0.1713328063, -0.0451955795, -0.0947562009, -0.0097945621, 0.2154638767, 0.0890962034, 0.0699341670, -0.0608793236, 0.0056401077, 0.0156226931, -0.0535285510, -0.2054692954, 0.2482372075, 0.1977442801, -0.2289777398, 0.1575080454, -0.0684724227, 0.0137897916, 0.0265213102, -0.0178967789, -0.1135286987, -0.1434757710, -0.0138841243, -0.0979162753, 0.0457474962, 0.0697401986, -0.3508457839, -0.0695376173, 0.1176814735, 0.1644325256, -0.1397257447, 0.1204234958, 0.0187755506, -0.0013898414, 0.0350746326, 0.1696123481, 0.0483787097, -0.0320267305, 0.0605551228, -0.0017174599, -0.2277798057, -0.0691851005, -0.0872876644, 0.1376929283, -0.1627713144, -0.0356714204, -0.1380357742, 0.0216624234, 0.0265015569, 0.2163155973, 0.1815422177, -0.0568590164, 0.1225320250, -0.0160640012, 0.1140023023, -0.0999770015, -0.0533256568, -0.0874190405, -0.1210088432, 0.0633021370, 0.1194832623, 0.0109866057, 0.1115454137, -0.1091743782, 0.0746427476, 0.1917924285, -0.0421062186, 0.0878698453, -0.0726226494, 0.0518491343, -0.1973864287, 0.1780738235, 0.1852514148, 0.1483148783, -0.3000426590, -0.0149953598, -0.0157490410, -0.1444249302, -0.0180862751, 0.0874050558, 0.0422040485, 0.0244856551, 0.1709050685, 0.0661857352, 0.0168569777, 0.1309106499, -0.0396886207, 0.1128796563, -0.1039842889, 0.0605985969, 0.0268721282, 0.0414038301, -0.1243905649, 0.0246637724, -0.1713507771, -0.1289735138, -0.1223433986, -0.1395018846, -0.0205899850, 0.1165516824, 0.1623746008, 0.0824129879, 0.0272180326, 0.0628227666, 0.1137270853, -0.0071474863, 0.1164978668, 0.0034408735, -0.0606990308, -0.0901982263, -0.1786268055, -0.1138902083, 0.1862583011, 0.1087358594, -0.1340612173, 0.1270886064, 0.0160686504, -0.1378114671, -0.0170064308, 0.0075130863, -0.1732946634, -0.3379061222, -0.0003994860, -0.0604951680, 0.1075449064, 0.0569877252, -0.1741889119, -0.1342490762, 0.0901567489, 0.1228746697, -0.0854118094, -0.0335519947, -0.0621180125, -0.0627787039, 0.1357615888, 0.1486272961, -0.0197446235, 0.0854460374, 0.0214787275, 0.1472277492, 0.0299823675, -0.1600765735, -0.0346348248, 0.0007327683, -0.1341811270, 0.0083826147, -0.1719375551, -0.1291593313, 0.0500659421, 0.1172385365, 0.0525097810, -0.0600103065, 0.1383651048, 0.1400772929, 0.0204722863, 0.0511813760, -0.0605949052, -0.1264823526, -0.2859038711, -0.0156439897, 0.1758753210, -0.1183853000, -0.0186203979, -0.1045189276, 0.1627278477, 0.1204030812, -0.0517777726, -0.0940924510, -0.0441625975, 0.0163044948, -0.1145620793, 0.0754105598, 0.0720185041, 0.1584930271, -0.1133409888, 0.1467095762, -0.0767439678, -0.1139587611, -0.0159573294, -0.1107405126, -0.0024522229, -0.0983811766, 0.0571739264, 0.1787786484, -0.0289192032, 0.1074278727, 0.1586130261, 0.0139171146, -0.0253761522, 0.0613580383, -0.0151841603, 0.0959668383, -0.1013723388, -0.0380132012, -0.0115364101, -0.2317577899, -0.2926930189, -0.0147799104, 0.1380034089, 0.1639775038, 0.1306256205, 0.0574149787, -0.1224953309, 0.0505590700, 0.0536186174, 0.0452013239, 0.1577186584, -0.0064735315, -0.0088424711, 0.0475193411, -0.0725761056, -0.0644920990, 0.1375246197, 0.0328788161, -0.1241229624, 0.0927020609, -0.0250763167, -0.0046592839, -0.0165023506, -0.0451147743, -0.1211427823, -0.3383483887, -0.1441794336, -0.0385390110, -0.0890542567, -0.1787741929, -0.1380123049, -0.0400387086, 0.0944017172, 0.0918753743, 0.0827679113, 0.1085392460, 0.0471173376, -0.1254709959, -0.0191066060, 0.1386768371, 0.0552541241, 0.0410911813, -0.0099562667, -0.0431220792, 0.1521371454, -0.0213459618, -0.0186446551, -0.0396690890, -0.1438559592, 0.0656941235, -0.2864519358, 0.0058901701, -0.0492695980, -0.0277748294, 0.0615960769, -0.0187416468, 0.1058232412, 0.0927272514, 0.0784933716, 0.1431400329, -0.0552621298, 0.0027762093, -0.4175275862, 0.0792335495, -0.0255033318, -0.1615949273, -0.1619358361, -0.2121172547, 0.0773696527, 0.0654658228, -0.1229683757, -0.0379714929, 0.0952142701, -0.0953668207, -0.0064187767, 0.0696430728, 0.0943120494, 0.0832762122, 0.0114668738, 0.0824229121, -0.0431065410, -0.0611266941, 0.0519724824, -0.0356283486, -0.0573335178, -0.1249455065, 0.1049448475, 0.0249905493, -0.0249171685, 0.0243577603, 0.0587706305, -0.1246307790, -0.1170825437, 0.0196021628, 0.0171631128, -0.0073579606, 0.0408879519, -0.0220093057, -0.1287890673, -0.2224701196, -0.1986849755, -0.0716422573, -0.0208742265, 0.0142056020, 0.1430638880, 0.0957071707, -0.0817918107, -0.0225008074, 0.1071268246, 0.0226332005, 0.0077551911, -0.0415000841, -0.1171833128, -0.0015825360, 0.0604554191, 0.0375261568, 0.0715833828, 0.0042255628, -0.0310529601, -0.0230421629, -0.0133727510, 0.0673675835, -0.0953245163, -0.1256530732, -0.1687203795, -0.1189154163, -0.1550158560, -0.0032885375, 0.0612371489, -0.2367944866, 0.1903796941, -0.0711935759, 0.0130672036, 0.0592901483, 0.0118570691, -0.0014233686, -0.0020664551, -0.2308285832, -0.0383238047, 0.1692360491, 0.0362082571, 0.0988701805, -0.0920388028, -0.0576430187, 0.0069161877, 0.1282882541, -0.0153998304, 0.0461830571, -0.0896197036, 0.2164806128, -0.1271661818, -0.0196435060, -0.0382902212, 0.0468707420, -0.0765698850, 0.1043687239, -0.0273249503, 0.0014058133, 0.1403274089, 0.1338913441, -0.0750286058, -0.0012193677, -0.1579144448, 0.0797134712, 0.0657414794, -0.0426310673, 0.0067694616, -0.2037133276, -0.0406308323, 0.0431666896, -0.1129310429, -0.1741576046, 0.0441243760, -0.1554257870, -0.0351264328, -0.0820351616, 0.2070179284, -0.0642651320, -0.1075442433, 0.0586012378, 0.1175475195, -0.1153840050, 0.0794334561, -0.0298255961, -0.0818184316, -0.0491945855, 0.1338130385, 0.0193851236, 0.0232921634, 0.0665457174, -0.0287636481, 0.0394792110, -0.1248264313, 0.1478597373, 0.0305863358, 0.0033803110, 0.0475598127, -0.0327837504, -0.0790424496, -0.0992640629, -0.0365375802, -0.0661025792, 0.0036873282, 0.0950436741, 0.0029243655, 0.0496026389, -0.0437157005, -0.0135487635, -0.0360650122, 0.0874759555, 0.0671568662, -0.0259426069, -0.0378981605, 0.0878200009, 0.0896010399, -0.0688712299, -0.0427662246, -0.0958989412, -0.0537273958, 0.0127071580, -0.0738973618, 0.0290388167, -0.0588333458, -0.1916680783, -0.0685455203, -0.0478260107, -0.1423119158, 0.0039672554, -0.0069818655, -0.0508157425, 0.0871278569, -0.0756031275, 0.0910636783, 0.0248139556, 0.0370004587, 0.0274902303, 0.0969406143, -0.1991236508, 0.0095058149, 0.1561509818, 0.0391125865, 0.1639072448, -0.0318078212, 0.0258608162, 0.0500117317, 0.0163860265, -0.0631927699, -0.0262821261, -0.0478778854, 0.0051829172, -0.0345601663, 0.0397088341, 0.0545199923, -0.1163051501, -0.0442940556, 0.0220934954, -0.1305099875, 0.0261232201, 0.0042460370, 0.0615298674, 0.0378586501, -0.1081714854, -0.0138259148, -0.0634199902, 0.0994322225, -0.0169879459, -0.0001406908, -0.0322272591, -0.0151362624, -0.1849142015, -0.0645240694, -0.1677554548, 0.0200104509, -0.0480452925, 0.0264122654, -0.0584345534, 0.0147715881, -0.1185341179, -0.0240810961, 0.1999166310, 0.0863227248, -0.1604721248, 0.0954617932, 0.0094075669, -0.0568162687, 0.0043316595, 0.0692189634, 0.0676743016, -0.0784358606, -0.0358923599, -0.1885438412, -0.0263736863, -0.0086686108, 0.0357543826, 0.1415636539, 0.0424213521, 0.0236796699, -0.0842868388, -0.1469805092, -0.0152952429, -0.0948809236, 0.0249491539, -0.0934810936, 0.1254831553, 0.0423858054, 0.0482505150, 0.0730406791, 0.1171818972, 0.0109565491, -0.0494271666, 0.0495147631, -0.0057493662, 0.1079246402, 0.0769913122, 0.0050424091, -0.0575147122, 0.0693135783, -0.0802882090, 0.0905516222, 0.0485020690, -0.0715507343, -0.1904447526, 0.0375979505, -0.1806123704, -0.1208156943, -0.0099784629, -0.0918355957, -0.0032698757, -0.0008623713, 0.0204400290, 0.0077997651, -0.1036475375, 0.0519877188, 0.1160597280, -0.0737473592, 0.0637190789, -0.0256360639, -0.1957786530, -0.0784584358, 0.2263090312, -0.0917447507, 0.1100155413, -0.1051540971, 0.1831143945, -0.1355073601, 0.0347881503, 0.0483314954, -0.0302896686, -0.0713252202, -0.0661151856, 0.0738555342, 0.0453454778, 0.1890387535, 0.0371984504, -0.1031475067, -0.1151776090, -0.0842735916, 0.0872697532, 0.2000541389, -0.0966697112, 0.0837694481, -0.2344735265, 0.2508868277, -0.0248585865, 0.0986976922, 0.0370592177, 0.1322737783, -0.0187368393, -0.0632677004, -0.3080472052, 0.0138483020, -0.1520177126, 0.0891204551, -0.1161286086, -0.0455183052, -0.2948143780, -0.0672471225, -0.1579891145, -0.0069529321, 0.0505278409, -0.0767085701, -0.1391111016, 0.1061883494, 0.1099692509, -0.0132766236, 0.0579557531, -0.0389695801, 0.0391785726, -0.0107487850, 0.1174754053, -0.1012969241, 0.2396880388, -0.0124636600, -0.0229622498, 0.1410984993, 0.0896966904, 0.0100944480, 0.0124282204, -0.1787083894, -0.0025630726, -0.2005050927, 0.0083243912, -0.0151764182, -0.0531294346, 0.0232890714, 0.1170328408, 0.0132484520, 0.0099103330, -0.1623769850, -0.0019732662, 0.0497377515, -0.0292443763, 0.0076769679, 0.0099256961, 0.0353964344, -0.0766869336, 0.1299558133, -0.1559185237, 0.0637493581, -0.0046660877, -0.0182126369, -0.1438625753, -0.1593692452, -0.2289303392, -0.1217215806, -0.0487173945, -0.0775140077, -0.0953944325, -0.0024427520, 0.0515384339, -0.0240902714, -0.1267688274, 0.2055640370, 0.0790047720, -0.0343787298, 0.0073695490, -0.0662464723, -0.0663419440, -0.0092097372, 0.0645999014, -0.0676791370, 0.1872227788, 0.0444635376, 0.1212405115, -0.2325610816, -0.0705551356, -0.0271668863, -0.1387911588, -0.0550765321, 0.0664555058, 0.0393505804, 0.0304365270, -0.0144651011, 0.0343016759, 0.0031291966, -0.0120425047, -0.0069533372, 0.1802703887, 0.3496905267, -0.0414634272, 0.1502172798, -0.0713969916, 0.1041015014, -0.1361652017, -0.0150253670, 0.0283065867, -0.0597965121, -0.0408363938, -0.1716056317, -0.1858634800, 0.1040756032, 0.0456685200, -0.1321023107, -0.0530325547, 0.0214262642, -0.1042338014, -0.1256813854, 0.1143561676, -0.0509055667, -0.1197259277, 0.0386213847, -0.1364535391, -0.0044321502, 0.0392233320, 0.0631174520, 0.0515703000, 0.0001711003, 0.0978109315, 0.0356206372, 0.0582027808, 0.1010517478, 0.0708504319, 0.1146743149, -0.0158138238, 0.1036166176, 0.0174002293, -0.0608317889, -0.1933761239, 0.0010819094, 0.0817528814, -0.1775945872, 0.0236024056, -0.1421623230, -0.1325380653, -0.0066099591, 0.1122251078, 0.0135868788, 0.0097411042, -0.1889462620, 0.0291941836, 0.0941398069, -0.0609271266, -0.0037754953, -0.0590420328, -0.0975429043, -0.0515656061, 0.0122785438, -0.3428392708, 0.1602954268, -0.0246070102, -0.1139633805, -0.0480803326, -0.1242833585, -0.1952543706, -0.1259593368, -0.0522203930, -0.0376439542, 0.1890605837, -0.0828999877, -0.0870232061, -0.0149013251, -0.1407705843, 0.2705093622, 0.2486310154, 0.0635416359, -0.0139908791, -0.0750290006, 0.0206515323, 0.0083247740, 0.0726769492, -0.0568231568, 0.2379147112, -0.0415288396, 0.0426192172, -0.1370388120, 0.0296980795, -0.0166855063, 0.0748956501, 0.0155229578, 0.0124990949, 0.1518476605, 0.0709598362, 0.0095330402, -0.0995766670, 0.0220604222, 0.0463784076, -0.1058121771, 0.0821432322, 0.2045517713, 0.0781823620, 0.0840436071, -0.0243648924, 0.0756555945, -0.1779605746, 0.0957809836, -0.0585534647, 0.0501327403, -0.0365878455, -0.2508553863, -0.0302197784, -0.0235941429, 0.0717409700, -0.1447249353, 0.0128275082, 0.2311359346, -0.1373967826, -0.0638360456, -0.0538313612, -0.1111064628, -0.1037733704, 0.0771468654, 0.0082405768, -0.0385730676, 0.1205747947, 0.0201123580, 0.0509852022, -0.0765814111, 0.1250177920, 0.0883510932, -0.0577902459, 0.1428999156, -0.1115962863, 0.1104792356, -0.1121811867, 0.1225510687, 0.0647089407, -0.1610979587, -0.2048402727, 0.2107259631, 0.2312117070, -0.1199326739, 0.1107658669, -0.1862358153, -0.1860796064, -0.1428991258, 0.0241758879, 0.0163970441, 0.1533166617, -0.3195594847, -0.1729530096, 0.0340046361, 0.0487303436, 0.0506502315, -0.2132323980, -0.2236820906, -0.0388088077, -0.0302821416, -0.2044984102, 0.0470305867, -0.0050543617, -0.0129090762, -0.0464065000, -0.0761252791, -0.2436825186, -0.0099659497, -0.0044844141, -0.0586916357, 0.3166245818, 0.1042500809, -0.1533269733, -0.0852308199, -0.0448695980, 0.2036025673, 0.2904418409, 0.0017042606, 0.0466719382, 0.0887919441, -0.0115647390, 0.0212125909, -0.0581870452, 0.0253763292, 0.1731231213, -0.0841271430, -0.0194152649, -0.2245365232, 0.0129294172, -0.0000837888, -0.1106713414, 0.1417459846, 0.0166054387, 0.0670454279, 0.1552446932, 0.0425436199, -0.2399540544, 0.0621680506, -0.1181876734, -0.1731901020, 0.1635593623, 0.1798317730, 0.0893355608, 0.0920765847, -0.3652991354, 0.1110285521, -0.2368338406, 0.0969582722, -0.1134485006, 0.1029210761, -0.0302375574, -0.3006918728, -0.0945394337, -0.0323423706, -0.0222560223, 0.1189957112, 0.1282230169, 0.0153668607, -0.0283163898, -0.0223314129, 0.0282108467, 0.0711985901, 0.0963827074, 0.0619624443, 0.0380788334, -0.1451108009, 0.0329096280, 0.0513192900, 0.0510972403, 0.0003970994, 0.1646367311, 0.0914346576, -0.0146760233, 0.1017259285, -0.1005969718, 0.0148732206, -0.0793892741, 0.1429328471, -0.0069679129, -0.1027625203, -0.0938020945, 0.2183520496, 0.2405028641, -0.1416972727, 0.0153916376, -0.1643856615, -0.1719515175, -0.1107662022, -0.2022861987, 0.0982920006, 0.1100639775, -0.2453176677, -0.1271849424, -0.0420944020, -0.0053081340, 0.0923301280, -0.1860642433, -0.3099837005, -0.0801371261, -0.1759643704, -0.2390692681, -0.0022724941, 0.0531036630, -0.0405271798, -0.0003010335, -0.0769066140, -0.3558142781, -0.1865174472, 0.0432870947, 0.2182234973, 0.2364381254, 0.1339813769, -0.0173966363, -0.1554268003, -0.1345538199, 0.0466655120, 0.2568921447, -0.0948530659, 0.0608766265, 0.0795832798, -0.0803670138, 0.0681977645, -0.2235952765, 0.0024466179, -0.0107164253, -0.2128386647, 0.0371363685, -0.1323357821, 0.0167809557, -0.0114776175, -0.0424013510, 0.2725640833, -0.0281156246, 0.0536764227, -0.0049063829, 0.0580223948, -0.1608041078, 0.0484871045, -0.1158361733, -0.1520139575, 0.0691528395, 0.2044135183, -0.0063733542, 0.1138262451, -0.2395697236, -0.0123631489, -0.3495240510, 0.2668413520, -0.1200073138, -0.0886195228, -0.1066802889, -0.3015618026, -0.0220009442, 0.1757831573, 0.0215901807, 0.2257808596, 0.0315901041, 0.1350600570, 0.0261992849, -0.0766267255, -0.0730055943, 0.1101818904, 0.1873458177, -0.0772565007, -0.0842106193, -0.2746157348, -0.0045845988, -0.0316696651, -0.0960793495, 0.0504272021, 0.0156693235, 0.0980626196, -0.0458380468, 0.0695109740, 0.0190046690, -0.0054365797, -0.0035247132, 0.1007310003, 0.0380381234, -0.1104661822, -0.2789553106, 0.1781705916, 0.0807842985, -0.1945393682, 0.0682923421, -0.1185422465, -0.1035390273, -0.1219806820, -0.1981865019, -0.0809194446, -0.0761333108, -0.1637069583, -0.2519912124, -0.1741714925, -0.0024822729, 0.0062224157, -0.2308520526, -0.2808648944, -0.0177806541, -0.2705329359, -0.1525512338, 0.0862828866, 0.0584842339, -0.2066597939, -0.0622677468, -0.0644051209, -0.2049104124, -0.1182798594, 0.0552391224, 0.2662249506, 0.0557995848, 0.0183903202, 0.2016641945, -0.0797666013, -0.2052070796, 0.1557237208, 0.1164749488, -0.1531492919, 0.1461514682, 0.1512447596, -0.1100375503, -0.0666169375, -0.1598214060, 0.0019975842, -0.1374987811, -0.1948973984, -0.1026070267, -0.2100450099, 0.1753187329, 0.1047671363, -0.0559641272, 0.2308908552, -0.1039708927, -0.0025226518, 0.1396966875, -0.0494797416, -0.1008273736, -0.0359957740, 0.0209464468, -0.0162117779, -0.0916866139, 0.1944427341, -0.0577469803, 0.0759237930, -0.0156489033, -0.0168720540, -0.3040438592, 0.1821656823, -0.1088976935, -0.0070621939, -0.1622588336, -0.2766813636, -0.1253966093, 0.1609438360, -0.0607441776, 0.1853612959, 0.2110336423, -0.0750266314, 0.0881370157, -0.0739570856, 0.1249955222, 0.1793827862, 0.0981279239, 0.0631044954, 0.0987892598, -0.2906062305, -0.0601510294, 0.0665038526, -0.1552177966, 0.0023979358, 0.0139536671, 0.0022693090, -0.1172324494, 0.0292383712, 0.0817779377, -0.0624134094, -0.0566675812, 0.1085120067, 0.0257047676, -0.1711096317, -0.2211110741, 0.0516954586, -0.0245272461, 0.0984596461, 0.0588484332, -0.0634870976, 0.0199113023, -0.1602584124, -0.1821525693, -0.1892071217, 0.0119018434, -0.0788918510, -0.1447575539, -0.0893691182, 0.0525089353, -0.0797980800, -0.0401712023, -0.2917324603, -0.0681469589, -0.2051368207, -0.2038156390, -0.0329928361, 0.0817478970, -0.1884049773, -0.0006634383, -0.0009659263, 0.1089354455, -0.0704054013, 0.0516322963, 0.1092559323, -0.0877558440, 0.0538617559, 0.0906740502, -0.0786539838, -0.1659530699, 0.1315179318, -0.0086384229, 0.0995860174, 0.1991244406, 0.0147596681, -0.1576288044, 0.0005544134, -0.1154556349, -0.0000721887, -0.1158207059, -0.1304803044, -0.0007931979, -0.1634269059, 0.1686865985, 0.1766229123, 0.1015380621, 0.1486656666, -0.2011354864, -0.1691900641, 0.1316050887, 0.1214134842, -0.1473623663, -0.1658195704, 0.1631277502, 0.0012363835, -0.0874473900, 0.1275501251, -0.0620330088, -0.0359375440, 0.0740210414, 0.0295698140, -0.2410233021, 0.1022836566, 0.0529464930, -0.2501210272, -0.0263772346, -0.0538073517, -0.0821092501, -0.1334369332, -0.0957182348, 0.0269258134, 0.1000574306, -0.0966351628, 0.1931772083, 0.0089479024, 0.0207604617, -0.0227669142, 0.1518867463, 0.1112895608, 0.1547676176, -0.1692361087, -0.2016121447, -0.0034706774, -0.1162071675, -0.0381509066, -0.1131607592, -0.0865397677, -0.0997705013, 0.0536723211, -0.0441071801, -0.2283489108, 0.0378445424, -0.0843587145, 0.1196130738, 0.1583422422, 0.0820672810, 0.1117898524, 0.1817547530, -0.0032367506, 0.1747528315, 0.0171258040, 0.0403053798, -0.0025717362, -0.1467348337, -0.1854042560, 0.0824714974, -0.0804750770, -0.0680496693, 0.0039704116, 0.1817791909, 0.2537644506, -0.0041735861, -0.2297433466, -0.2451345623, -0.0573079325, 0.0380149037, -0.2693183422, -0.0674773455, -0.1960430592, 0.2402334213, 0.2001060545, 0.0719575137, 0.1309385449, -0.1016531512, 0.0805688128, -0.0666990131, -0.0259560831, 0.2096362263, -0.0620301180, 0.0476748310, -0.1749975979, 0.1214001551, 0.0933940336, 0.2230455279, 0.0180010218, -0.0023754511, -0.1836939752, -0.3394970596, -0.0196686909, -0.1225834340, -0.2232099175, -0.0319744460, 0.0243119374, 0.1407231688, 0.2165421098, 0.1702073365, 0.2336521149, -0.0161918774, -0.0065821963, 0.0849826559, 0.1113779172, -0.1354384124, -0.2467962354, 0.0245232303, -0.1158322245, 0.0055109495, -0.0081938691, -0.1759710461, 0.0337568186, -0.0331868902, 0.0831816718, -0.0627673492, -0.0601538643, -0.0449131802, -0.2128160298, 0.1061055213, 0.0771146268, -0.1252058297, -0.0330862030, -0.0396728106, -0.1908253729, -0.0110515505, -0.2159970552, -0.0800022706, -0.1886212975, -0.0318968408, 0.0355667882, 0.2166969478, 0.1314052492, 0.2541115582, 0.0228543207, 0.0243606959, 0.0883545801, 0.0364297815, -0.0025453249, -0.0038227560, 0.1750849187, -0.0190173220, 0.0968240798, 0.0905099362, -0.0426699817, -0.0934977233, -0.1012634560, 0.2185058594, 0.0834432095, 0.0677834898, -0.0262579508, 0.2555761337, -0.1266316622, 0.0946482345, 0.0373451337, 0.0555584580, 0.1052856073, -0.2091782242, -0.0124465749, 0.2750008404, -0.0074377474, 0.0287270807, -0.1305156052, 0.1545865238, 0.2201995105, 0.0465543158, -0.1045056805, -0.0715498552, 0.0572369806, -0.0387977473, -0.0228333641, -0.0676276833, -0.0446764976, 0.1477493048, 0.0637530386, -0.1340065747, 0.1294467151, -0.1160031110, -0.0048847594, -0.0984852090, 0.1947717816, 0.0828683153, -0.1131875962, 0.0089427186, -0.1002804637, 0.0787606239, 0.1502496153, 0.1575148702, 0.1163122207, -0.1338497400, 0.0411906838, -0.0795339048, 0.0163899437, 0.0860037953, 0.0493761972, -0.0465735272, -0.0353196189, 0.0237900801, 0.0470636748, 0.1423921734, 0.1489360631, -0.0937945470, -0.0280073192, 0.0799995586, 0.0885053575, 0.0297589153, -0.0236976054, -0.0273567960, 0.0567395538, -0.0008022623, 0.0246220548, -0.1308853477, 0.0589162372, 0.0846328288, 0.0665669292, -0.0319586955, -0.0192730930, 0.1013625339, -0.0448405147, 0.0534344576, 0.0996573567, -0.0118829999, -0.1269944608, 0.0389434025, -0.0298333969, -0.0624769442, -0.0586863533, 0.0323620774, -0.0285468362, -0.0465266816, -0.0541728213, 0.2038796246, 0.1299269646, 0.1660567969, -0.1232374832, 0.0738218129, 0.1437146068, 0.0253952015, 0.0604299158, -0.0372110866, 0.0106897652, -0.1096758991, -0.0369549654, -0.0030234591, -0.0070720925, -0.1473987550, -0.0435524695, 0.0914828628, -0.0556534305, 0.1405839622, 0.0484718382, 0.0910751522, 0.1297241151, -0.0010780168, 0.0436790213, -0.0446937345, -0.1272995472, 0.0411360487, 0.0363055319, -0.1286906004, 0.1594103277, -0.0353818238, 0.0658324957, 0.0082519343, 0.0094036330, 0.1357808858, 0.0210732352, 0.0168075934, -0.1099399999, -0.0809533522, -0.0816078931, 0.0035291382, -0.0062128017, -0.0530264303, -0.0670839846, -0.0093220621, 0.0050314590, 0.0844870210, 0.0361371264, -0.0522665605, -0.0272852443, 0.0436588302, 0.0321794823, 0.0765044466, 0.0670141578, -0.0839537904, 0.0352601819, -0.1207802668, -0.1344795674, 0.0307560097, 0.0456929617, -0.0232048389, -0.0370378383, -0.0566118471, -0.0591153800, 0.1278427839, -0.0069637001, -0.0214457903, 0.0289414302, 0.0148785785, -0.0277006142, -0.1109518707, -0.0686200410, -0.1008500010, -0.1164374128, 0.1278081685, 0.0462612957, -0.0169795826, 0.0558453016, -0.0802692622, 0.0274893418, 0.0347073004, 0.1503563523, 0.0753487200, -0.0339417905, 0.0089283725, -0.0483499244, 0.0339144617, 0.0270802863, 0.1360126287, -0.0036003359, 0.0158272907, -0.0497327521, -0.0600894615, -0.0467622578, 0.0033145174, 0.0707882047, -0.0642712116, -0.0202763919, 0.0486151837, 0.1585846096, 0.0495589375, -0.0254028477, 0.0619178712, -0.1297432482, -0.0292538106, 0.0470995381, 0.0473148189, 0.1240082011, -0.0303545073, -0.0224782433, -0.0259150993, -0.0118799908, 0.0634224936, 0.1270396709, 0.1208926439, -0.0697311386, -0.0158047918, 0.0035502496, 0.0065782168, 0.1528925002, -0.1083789989, 0.0207485687, 0.0291212089, -0.0229879152, 0.0412640683, 0.0215874147, 0.1698257625, 0.0147986906, -0.0768261030, -0.0345367528, 0.1274468601, -0.0312617831, 0.0459193252, -0.1018137857, -0.0694501773, -0.0574668460, 0.0659510344, 0.1193614677, -0.0832015574, 0.0246715825, -0.0110440198, 0.1282610595, 0.0570280924, -0.0032362845, 0.1627723277, -0.0510184839, -0.0811732039, -0.0351733305, -0.0472192802, -0.1087568253, -0.0894509405, -0.0556688569, -0.1349197179, 0.0315376855, -0.0054273456, -0.1164085865, -0.0214804914, -0.0561499782, 0.0526960418, -0.0076959110, -0.0270034317, 0.0791872591, 0.1732077152, 0.0812343210, -0.0197206456, 0.1399932355, 0.0341338143, 0.1827805340, 0.0717656165, -0.0604764856, -0.0273831636, 0.0058394386, -0.1494774371, -0.0502377339, 0.0080283480, 0.0257648956, -0.0241016150, -0.0617599674, 0.0287507791, -0.0408243164, 0.0984326676, -0.1137991920, 0.0128205502, -0.0888920501, 0.0386410281, -0.0688199997, 0.1464674771, 0.0391258299, -0.2017541677, -0.1794792265, 0.0677548200, 0.0116436696, 0.0677612424, 0.0722343922, -0.0662167817, 0.0521560162, 0.0529369600, 0.1395460367, 0.0523938127, 0.0665538758, -0.0450029224, -0.1023657769, -0.0706173033, 0.0436897688, 0.1467657387, 0.0874806643, -0.1447752863, 0.0765333250, -0.0254081395, -0.0188481193, -0.0751391053, 0.0075848741, -0.0236297660, -0.0993521735, -0.0415635668, 0.0758956298, 0.0810799152, 0.1174806133, 0.0366104916, 0.1671789885, 0.0408563279, -0.1054177731, 0.0353901871, -0.0441108271, -0.0992583409, -0.1507823318, 0.3429006338, -0.1780686826, -0.2824893892, -0.0673333332, -0.1553306133, -0.1676718742, -0.0062419334, 0.0098029766, -0.0902609974, 0.0378948040, 0.0848616064, 0.0484906994, -0.1883587092, 0.1354930699, 0.3068165779, -0.0752514899, -0.0794984102, -0.0128141334, 0.1315985173, -0.0417258292, -0.0534422509, -0.0213826392, -0.1554497778, -0.1793021560, -0.1133614108, 0.2032864392, -0.0939935446, -0.1314195096, -0.0867488235, -0.1124584824, 0.0902433246, 0.0723003075, 0.0641973913, -0.1355015337, -0.0147559345, -0.0032529980, -0.1703564674, -0.0804597065, -0.1414481103, 0.1043436602, 0.0770881474, 0.2205318213, 0.0956325531, 0.0277278107, 0.1586627811, -0.2396908849, 0.0142816156, 0.0973566100, 0.0397622325, 0.1598871648, 0.1169938296, 0.0356736369, 0.2277015895, 0.1073242128, 0.1649258137, -0.1044519916, 0.0529638864, -0.1360376924, 0.1296218187, 0.0592652969, 0.0127177751, -0.0537323058, -0.1134255901, -0.0826263055, 0.0931664258, 0.1147674620, 0.0945326909, 0.1470473260, -0.1144183800, 0.0022008817, 0.0013795138, -0.1334826946, -0.0883437172, 0.1394189596, -0.0535822809, 0.0623938851, -0.1596601158, -0.0396209657, 0.0096840095, 0.2235850543, -0.3168335259, 0.0098643713, -0.0407773815, 0.0234001596, -0.0168287326, 0.0489869267, -0.0391264632, 0.0474066176, -0.0364923552, -0.0087016923, -0.0707079023, 0.0049056243, -0.0686965659, -0.0233160947, -0.0728065148, 0.1055307165, -0.0817369372, -0.0340824984, -0.0654936954, -0.0814787149, 0.0270854216, -0.0698715374, 0.0330078527, -0.0888501033, -0.0472189933, 0.1304865777, -0.1598794907, 0.1484490633, -0.2233930379, -0.0040733516, 0.0550466180, -0.0107513648, -0.0774650425, -0.0098988423, 0.1161966845, -0.1083256453, 0.0507296734, -0.2123316973, -0.0125444280, -0.2540458143, -0.0653431267, -0.1351896375, -0.1526934654, 0.0736695006, -0.0720078424, 0.0983924195, 0.1280539483, -0.0519450791, -0.1984115988, -0.0057113022, -0.1140034348, 0.1173056290, 0.0951316133, 0.0522887222, 0.0458611026, 0.0148963425, -0.3210487664, -0.0285911486, 0.0746686012, 0.0348205566, -0.0469337068, 0.0602695532, -0.0990861654, -0.1303301156, 0.0341660082, -0.2424082160, 0.0483388901, -0.0554207377, 0.0902272537, 0.1877955198, 0.1704884171, 0.1334157884, 0.0881549567, 0.1271950454, 0.0519492626, 0.1277148724, -0.1026256159, 0.0552672334, 0.0140169822, -0.0844542235, 0.0712249205, -0.0672388747, -0.0175000858, -0.0567037463, 0.0265498031, -0.0181937590, 0.0798509195, 0.2080219984, -0.0785964355, -0.0169331152, 0.0760489628, 0.0098046446, -0.0371457376, 0.0681666285, -0.0182840768, -0.1493170112, 0.0601568297, -0.0137051418, -0.1428644806, 0.0051937117, 0.0445586331, 0.0147928931, 0.0285545252, -0.1775482744, -0.1741433591, 0.0463394038, -0.0833844021, -0.0499498881, -0.1319580674, -0.1428559422, -0.3228440583, 0.0216046385, 0.0351482779, 0.0910857096, -0.0748115331, -0.0591061562, 0.0436894298, -0.0387397893, 0.0376847833, -0.1174014285, 0.1048017517, -0.1021155044, 0.1022155508, 0.1328664273, -0.0717965141, 0.1632474512, -0.2629553974, -0.0439690091, -0.2718747854, -0.0506897420, 0.0510817841, 0.1822315305, -0.2382404655, -0.1935677528, 0.0904836655, -0.1717533469, 0.1770541817, -0.0932147950, -0.0041818172, -0.2559942603, 0.1643647850, -0.1167122945, 0.1340010762, 0.0183114503, -0.1158747301, -0.0378306322, -0.1882192492, -0.0769771188, -0.0356192701, 0.1287853867, -0.3721815348, -0.1374773234, 0.0740196034, -0.0192121938, 0.1372103989, -0.0091715818, -0.1431526691, 0.0098736547, 0.1900791526, -0.0427761972, -0.2291531712, -0.0371076390, 0.1753344983, -0.0076093744, 0.0214235261, 0.0620341115, 0.0538460203, -0.0757207647, 0.0832912326, 0.0445753895, -0.0680978224, -0.1401790231, 0.0674871728, -0.1335336417, 0.2552449405, 0.0909392685, -0.1722592115, 0.1508916765, -0.2344962955, -0.0656966865, -0.0941158533, -0.0184908975, 0.1080123410, -0.0394756645, -0.0649626106, 0.0445036404, 0.0696039274, 0.2514441907, -0.1250968128, 0.0883911178, 0.1001579612, -0.0615342893, -0.0525315814, 0.1099691018, 0.0922783539, -0.1336214840, -0.0776186213, -0.0618866757, -0.0572170727, -0.0558958314, 0.1471602172, 0.1373171061, -0.0279948711, -0.0314950570, -0.2386247218, 0.0161778741, 0.0465538949, 0.0655263215, -0.2383988649, -0.0018989494, -0.2066291571, -0.1725968868, -0.0934227407, 0.1424150765, 0.1562783420, -0.0467220396, 0.1318219453, 0.0304945782, 0.1288483739, -0.2189130187, -0.1015184820, 0.0853960067, -0.0028605408, 0.0771493018, 0.1895073056, 0.2148595899, -0.1292131096, 0.1030743569, -0.1556654125, -0.0314851664, 0.2391785085, -0.0202433206, -0.3083087206, 0.0042058825, 0.0014700551, -0.0694256201, 0.2652341127, -0.2050487995, 0.0088984594, -0.2857770622, 0.0583217517, 0.0181917455, 0.2294723541, 0.0822737515, -0.0217950344, 0.0731589645, -0.2782379091, -0.2041572481, -0.0079260394, -0.1297322363, -0.2993197441, 0.0513066836, 0.2164706737, 0.0735840425, -0.0223686472, -0.0074761282, -0.0069283615, 0.0184390005, 0.1680931300, 0.0719773695, -0.2762924731, 0.1005748957, -0.0471207462, 0.0762241781, -0.1381607801, 0.0587897450, 0.1564155370, -0.2095790654, 0.2837966383, -0.0094172088, -0.0374582857, 0.0580075234, 0.0431191400, -0.1884907782, 0.1819600016, 0.0031043841, -0.1263473183, -0.0529660322, -0.0304396451, 0.1923235804, -0.1043202803, 0.0413682312, -0.0031510643, -0.0394304805, -0.0474063344, -0.0828749090, -0.0193713959, 0.0785264596, -0.2067194581, -0.0008150925, -0.1340675354, 0.0300271008, -0.0295701530, 0.1787362695, -0.0393021852, -0.1726329923, -0.1397714913, -0.1992894709, 0.1333593577, 0.1146095470, 0.0310158208, -0.0651528984, 0.0422879383, -0.0646822304, -0.1084803492, 0.0332529992, -0.0831431150, 0.1018786132, -0.1175070405, 0.0527184829, -0.2163110971, -0.1198957935, -0.1183114573, 0.2234151661, 0.1070662811, -0.0349774137, -0.0500511676, 0.0008843125, 0.1888473481, -0.1627820283, -0.0378315002, 0.0510592647, 0.0966597795, 0.1256895959, 0.0772055089, 0.2596535087, -0.2430790663, -0.0249132235, 0.0193513650, -0.1452259421, 0.2048912346, -0.0704756826, -0.0377934761, -0.0100595113, -0.1571002007, -0.0705025122, 0.0789993033, -0.2168922126, -0.0233938564, -0.3496037424, -0.0714494586, 0.0449080877, 0.2054275870, 0.0603190362, -0.1956947893, 0.0724967048, -0.0263640266, 0.0658695996, 0.0363098271, -0.0976349115, -0.2660437226, 0.0582689904, 0.1629668772, 0.1295525283, 0.0125990268, -0.0583035238, -0.0194303971, -0.0198423807, 0.1716581285, 0.0710323378, -0.0972913653, 0.0123586720, -0.0759156346, -0.0629959852, -0.0660783201, 0.1406126320, 0.0792416707, -0.1576029062, 0.1812026203, -0.0166474134, -0.0465199612, -0.0227131471, 0.0800835863, -0.1526696384, -0.1070876196, 0.1163903996, -0.1691116393, 0.0904321522, -0.0595037490, 0.0899306163, -0.0464458056, 0.1044767499, -0.0047109043, 0.0551268235, -0.0574625321, -0.1030362174, -0.0678901151, -0.0438058786, -0.1583536416, 0.0768652633, -0.0178838912, -0.0320160426, -0.2691314220, 0.0663046688, 0.0727686435, -0.2501518726, -0.0928246677, 0.0693225637, 0.2411121279, -0.0403700769, 0.0283978824, 0.1056844592, -0.1166614965, -0.0393160656, -0.1351159662, 0.0108044809, 0.0064271060, 0.1538377553, -0.1249675602, 0.0062039355, -0.3200317621, -0.0785971358, 0.0049374448, 0.1134302467, 0.0189722851, -0.0315337107, 0.0624403842, -0.0447260737, 0.2436388135, -0.1963425875, -0.0595312454, 0.0566980429, 0.1180769727, 0.0473100133, -0.0257463604, 0.1704527885, -0.3652502298, -0.0733750835, 0.0306550376, -0.0663359463, 0.0379981138, 0.0354125723, -0.0390941352, -0.0523308851, -0.0778088644, -0.0909814164, 0.1529804170, -0.0570917949, 0.0642547235, -0.1530900896, 0.0093877111, 0.0612054020, 0.0707036257, 0.0331173241, -0.0064687282, 0.0726895481, -0.1365818679, 0.0874597430, 0.0394521207, -0.1238014475, -0.1822377741, 0.0197655577, 0.0194069520, 0.0143115167, 0.0704728067, -0.0192060303, 0.1538012624, 0.1442335844, 0.0561499633, 0.0681369081, 0.0247012619, -0.1476230770, -0.0298123043, -0.0634467453, 0.0513454117, 0.1618727297, 0.1573223472, -0.0535928868, -0.1130051538, -0.0621228032, -0.1140637398, -0.1284297705, -0.0031340255, -0.2449269891, -0.0132989129, 0.0963251144, -0.0676536709, 0.0323028602, -0.2475569695, -0.0547728464, -0.1302022040, -0.0754628927, 0.0946189761, 0.0167078301, -0.1014684141, 0.0286731366, -0.0747307837, -0.0433333553, -0.0242952444, 0.1195489168, -0.0141399130, 0.0185703840, -0.0725866035, 0.2133343369, -0.0865169019, -0.1953613907, -0.1247966141, 0.0873410553, 0.2390804738, -0.1216180176, 0.0755455866, 0.1404736042, -0.0828158483, -0.0688012764, -0.0531081408, -0.1465987265, 0.0045907674, 0.1731359363, -0.1096603647, 0.1463541687, -0.2347427458, -0.0543689318, -0.0119635994, 0.0871178210, 0.0933892801, 0.1184159741, 0.0891733095, 0.0579680875, 0.2362899631, -0.0837078169, -0.0335190184, 0.2159196585, 0.0966915339, -0.0152135687, 0.1134143621, 0.0927622169, -0.3988357782, -0.0278845076, -0.0552229956, -0.0616542697, 0.0876077414, 0.0691207796, -0.0324119963, 0.0621209778, -0.0896561444, -0.0074359179, 0.1114080921, -0.0839300305, 0.0578954332, -0.2114970684, -0.0993485078, 0.1188826039, 0.1570750624, 0.0665715486, -0.1343779266, 0.0632140934, -0.1429947764, -0.0183762293, 0.0498609208, -0.0673156381, -0.1529990584, -0.0585230067, 0.2859252393, 0.0013699244, 0.0244613457, 0.0455292203, -0.0266523473, -0.0228862502, 0.0915198028, -0.0000019487, 0.1046349034, -0.0884186700, 0.1197045594, -0.1233524606, -0.0932975784, 0.0277736727, 0.1970600784, -0.0606319457, -0.0281885639, -0.0288485754, -0.1486370862, 0.0837635547, -0.0281341802, -0.2497683764, 0.0180315319, -0.0064124619, 0.0611430109, 0.0031051603, -0.3032674789, 0.0214598309, -0.0619629435, -0.0312361103, 0.0356551930, 0.0863678306, -0.1595501453, 0.0020265614, -0.0644506589, -0.0233459845, 0.0140566360, 0.1596343070, 0.0892607197, 0.0730559379, -0.0291770846, 0.1386340559, -0.1548674852, -0.1927745491, 0.0269532278, 0.0190883558, 0.2307701111, -0.0746650994, 0.0528000370, 0.0550239198, -0.0585789792, 0.0123682199, 0.1305097044, -0.1306698918, -0.1177881211, 0.1308209002, -0.0866912976, 0.2158576548, -0.1856316477, -0.1072652042, 0.0236085411, 0.0639878139, -0.0448704436, -0.0364421345, 0.0717048869, 0.0042487700, 0.0775625557, -0.1158179566, -0.1177541316, 0.1188157648, -0.0449263789, -0.0276719201, 0.0731560290, 0.1493441463, -0.3132606745, -0.0055424692, 0.0563939586, 0.1903069913, 0.2131241262, 0.0839579403, -0.1427865773, 0.0909500122, -0.1603330970, 0.0266356226, 0.1311463565, 0.0215097349, 0.0532108098, -0.1825436354, 0.0296147075, 0.0441777930, 0.0659166351, 0.2036683708, 0.0348556563, 0.0224597212, -0.2323638648, 0.0030142141, 0.0220682137, -0.0457427017, -0.1080990881, -0.0682147071, 0.1397418529, 0.1374853551, 0.1216427162, 0.0163327977, -0.0328960866, 0.0046201595, 0.1268105656, 0.0009800333, 0.1756527573, -0.0448622070, 0.1819094270, -0.0484185033, -0.0333621316, -0.0147051178, 0.1594898254, 0.0012716872, -0.0634707436, 0.0061018574, -0.4257394671, 0.0364514887, -0.0869166479, -0.2872160673, 0.0678653345, -0.0497319289, 0.1638700068, 0.0147017827, -0.3669310808, 0.0124199698, -0.1758834273, 0.0358370692, 0.0377012342, -0.0843126774, 0.0531933568, 0.0571328513, -0.0302398689, 0.0652917773, 0.0650852323, -0.0229064245, -0.0447327904, -0.0039611999, 0.0761781707, 0.0495872870, -0.0537839644, -0.1463296413, 0.0140963579, -0.0383048356, 0.2342325449, -0.1174574792, 0.0189606827, 0.0964526534, 0.0305788759, -0.0306552239, 0.1356964707, -0.0435684212, -0.0172250886, 0.1105954871, -0.1153537482, 0.1149158403, -0.1480240524, -0.0502359383, 0.0236672480, 0.0132275503, 0.0942686573, -0.0617026836, 0.1848093122, -0.0209415127, -0.0219344832, -0.0974741280, -0.1360594779, 0.2052110136, -0.0737389997, 0.0740025491, 0.0725293010, 0.1758320034, -0.1369543374, 0.0002428648, 0.1085931957, 0.2276984453, 0.1275915056, -0.0563868880, -0.0613754131, 0.0056238626, -0.0462964736, 0.0366260745, 0.2159397453, 0.0480980873, -0.0608926862, -0.1298011094, 0.0306430161, 0.1395362765, 0.0593663454, 0.1300290525, 0.1250631660, 0.0954515114, -0.1662852019, 0.0289451014, 0.0775607377, -0.1333377212, -0.1449144632, -0.0970214829, 0.0397782661, 0.1639763862, 0.1028533876, -0.0563813560, 0.1837925166, 0.1821677238, 0.0266399756, 0.1156079546, 0.2140487283, -0.1070763767, 0.1768988371, 0.0500959679, 0.0564407557, -0.0097065056, 0.1864532977, 0.0457719564, -0.1045889184, -0.1066384539, -0.3494731188, -0.0864542797, -0.0453580879, -0.1443115920, 0.1161093935, -0.0099061662, -0.0483821109, 0.0238400102, -0.3475678563, 0.0417837799, -0.1442680359, -0.0144999828, 0.0132917119, -0.0138443457, -0.0140551478, 0.0881480873, -0.0934080929, 0.0762273669, 0.0539577231, -0.0527802855, 0.0079662064, -0.0651859790, 0.0530395880, 0.0755369812, -0.0141136032, -0.1563806534, 0.0200644173, -0.1487908661, 0.1744924486, 0.0500766635, 0.0061831977, 0.0090730842, 0.1147184968, 0.0719151571, -0.0362939276, -0.0000414662, 0.0099114394, 0.1549740583, -0.0624884740, 0.0699910522, -0.1086529642, -0.1214772314, 0.0562665947, -0.2363646924, -0.0423511192, -0.0012877141, 0.2316937298, -0.0701429620, -0.2203463316, 0.0478530079, -0.0968899280, 0.1741313338, 0.0872298777, 0.0803466365, 0.0476260521, 0.1765490919, 0.0479519628, 0.0233934503, -0.0239799339, 0.1604810804, 0.1814451814, 0.0074724038, -0.0087347850, -0.1157963052, -0.1112755835, -0.0350645520, 0.0750568658, 0.0244550593, -0.0939841196, -0.1457595527, 0.0522816069, 0.1585978270, 0.2174774110, 0.1007339433, 0.1478319913, 0.0657879934, -0.1527157277, 0.0047968309, 0.0820665658, -0.1110644862, -0.0878084973, -0.0783764124, 0.1245734319, 0.0844903663, -0.0001136293, 0.0694307014, 0.1418832242, 0.1815836430, 0.1377276629, 0.0428033210, 0.1015926898, -0.0842267200, 0.1408873051, 0.1384928972, -0.1105314046, 0.0614915267, 0.0606725402, -0.0197320469, -0.0717519447, 0.0437144712, -0.3358988166, -0.0626379102, -0.0201209765, -0.1408596039, -0.0168078523, 0.0693612993, -0.1717342138, 0.1373776942, -0.1500435770, -0.0286373775, -0.1047694534, 0.0370877162, -0.0521585532, -0.0904380828, 0.0149031691, -0.0545266271, -0.0062260940, -0.0390865430, 0.1110944822, -0.0852934495, -0.0968816504, 0.0136816818, 0.0284072496, 0.0254896898, 0.1137188151, 0.0092860768, 0.0700261369, -0.0281090103, 0.0234836489, 0.0469598398, 0.0126743531, -0.1451499313, 0.0241579656, 0.0750797614, 0.0896397680, -0.0233651958, 0.0644049272, -0.0149290143, 0.1044806093, 0.0933613032, -0.1207020283, -0.1568172723, 0.0062952903, -0.1252468824, 0.0773815140, 0.0210572388, 0.0537334606, 0.1017643586, -0.2101973146, 0.0061383792, -0.0639981031, 0.0634816214, 0.1094361842, 0.0555869788, 0.0660354346, 0.1604216099, 0.1339512467, 0.0816337913, -0.0465044975, 0.1367942840, 0.2213926017, 0.0871527642, -0.0154965632, -0.0099054212, -0.1154023707, -0.1091991812, 0.1226419955, 0.0532396920, -0.1268866658, -0.1679270267, 0.0585062467, 0.0350286998, 0.1640413553, 0.1334322989, 0.1256296337, -0.1233138144, -0.1850202084, 0.0324107930, 0.1496912092, -0.0245054606, 0.0072591379, -0.1000313163, 0.0182903558, -0.0268550068, 0.1026760042, 0.0157155041, 0.0680502281, 0.0220439862, 0.1474722624, -0.1498814225, -0.0028617720, -0.2893485427, 0.1972100437, 0.0113971233, -0.0746748373, 0.0250472166, 0.0745971948, -0.0018076876, 0.0752603114, 0.1067479774, -0.2221589237, 0.0510388464, -0.0660049245, -0.0124968393, -0.0451718606, -0.1773395091, -0.1475538760, -0.0223119594, -0.0673148185, 0.0928803608, 0.0329974592, 0.0002923317, 0.0609901883, -0.0835424289, -0.1143467426, 0.0490295626, 0.0134734372, -0.0933315158, 0.2276254743, -0.0624955148, -0.0610855296, 0.0024502906, 0.1316909194, -0.2113938034, 0.1810004711, 0.0660221875, 0.0586337969, 0.0074547757, 0.1740700901, -0.0788657069, 0.0478928834, -0.0850343630, 0.1134170294, 0.0790802687, 0.0825256258, -0.1064426899, 0.0398959033, -0.0680531561, 0.0897952616, 0.0101435483, 0.0535259917, -0.0196129847, -0.1019481644, -0.1703380346, -0.0080149556, -0.0754991919, -0.0917091817, 0.0792995095, -0.0571555942, 0.1632462591, -0.1787066013, -0.1413089931, 0.1387328207, 0.1225830466, 0.1217923909, 0.1186520979, 0.0702745467, 0.1318947971, -0.0611675344, 0.0922267586, 0.0593432225, 0.0860695317, 0.1723414063, -0.1271512508, -0.0198099967, -0.1052581817, 0.0411693566, -0.0334799178, -0.0658022240, -0.1199930906, -0.1006075367, -0.0817964599, 0.0215881132, 0.1309873164, -0.0219272804, -0.1702064723, -0.0036050482, 0.0901083201, 0.2110216171, 0.0034880373, 0.2250706404, 0.0087470599, -0.0884042904, -0.0130261509, 0.1710391492, 0.0397782288, 0.0784774646, 0.0939465538, 0.1266867816, -0.1677992642, -0.0897316188, -0.0862898752, 0.0690415055, -0.0649327710, -0.0626062453, -0.0236307532, 0.0249495264, 0.0288568605, 0.1109993383, 0.0553175285, -0.1307563484, 0.1203120947, -0.1764786392, 0.1631703079, -0.0826195106, -0.1259096712, -0.1860236079, 0.0166412555, -0.0239438452, 0.1563182473, 0.0874752030, 0.0385367684, 0.0646125376, -0.0570170842, 0.0306061022, -0.0047606588, 0.0176232569, -0.0389034115, 0.1789394468, -0.1032181904, 0.1414158791, 0.0907979533, 0.0802787319, -0.2789342999, 0.1035929769, -0.0544227883, 0.0197560452, -0.0392853171, 0.1770375073, -0.1510132253, -0.0371404290, 0.0429526269, 0.0684304014, -0.0509484895, 0.1742159873, 0.0097707035, 0.2030145973, -0.0992626622, 0.2049118876, 0.0568641983, -0.0492823757, -0.1222126111, -0.1269571781, -0.2770457268, -0.0765280202, -0.1768143028, -0.1823622435, 0.0909445584, 0.2416482419, 0.0547130369, -0.1028467715, 0.0324543528, 0.0658270642, 0.0113193970, 0.0227250569, 0.1059900895, 0.1374656260, -0.0388468541, -0.0992496610, -0.0736735314, -0.0330840535, 0.2125368416, 0.1052448675, -0.0983372554, -0.0260635130, -0.0983535200, -0.0026232398, -0.0009235823, -0.0023526656, -0.0896497071, -0.2524365187, -0.0560051873, -0.0758449957, -0.1303877085, 0.0057183695, -0.1336796731, 0.0286820587, 0.0613402687, 0.2057612985, -0.0119546382, 0.1259330511, 0.0907408148, -0.0982658789, -0.0064362856, 0.1437767297, 0.0540519096, 0.0503705852, 0.0156281125, 0.0614449382, -0.1161547676, -0.0117097199, -0.0152906505, 0.0935836509, -0.1807317734, -0.0971797183, -0.1023002490, 0.1287758648, 0.0158041529, 0.1383192241, 0.0858199671, -0.2494434863, 0.2475514561, -0.2276049554, 0.0929465890, -0.1096814573, -0.0771393403, 0.0388950594, -0.0051621646, -0.0855858251, 0.2055417895, 0.1789128482, 0.0100651439, 0.0496079996, 0.0306914393, 0.0718616620, 0.0489988886, 0.1116682813, -0.1380501986, 0.1331235021, 0.0444938727, -0.0175960679, 0.2442955375, 0.1885682940, -0.3104701340, 0.0802776590, -0.0235770456, -0.0638147295, -0.0755392835, 0.0987044051, 0.1128371209, 0.0710529238, 0.0542838871, 0.1468270421, 0.0578674451, 0.0981089845, 0.0216671955, 0.0604885370, -0.0634740442, 0.1898643374, 0.1000992209, 0.0392362811, -0.1466682851, 0.0167613495, -0.1321931630, -0.1393793076, -0.1068350524, -0.1675595045, -0.0562002324, 0.1091823578, 0.0292644352, -0.0136276530, -0.0630024150, 0.0887337029, 0.0507678837, 0.1384285688, 0.1927047968, -0.0264437255, 0.0743624792, -0.0862060785, -0.0796844065, -0.0927709192, 0.1447365582, -0.0054534185, -0.0619757064, 0.0898456648, 0.0819488317, 0.0559809655, 0.0292442776, 0.0894375220, -0.0809354559, -0.1700158268, -0.0607935153, 0.0305030234, 0.0342253298, -0.0099119935, -0.0536237620, -0.0676820874, 0.0627738461, 0.0508560799, -0.0454490855, 0.0271032881, 0.1216642633, -0.1989888698, -0.0748380348, 0.1097223014, -0.0554054454, 0.0468588732, 0.1337423921, 0.1434858143, 0.1659858227, 0.0150113050, -0.0498894975, 0.0654313639, -0.1883186847, 0.0187104512, -0.1619505733, -0.0245040450, -0.1533381045, 0.1123219132, 0.0795800835, -0.1135571003, 0.2016951889, -0.0809014812, 0.0294421446, -0.0852760300, -0.0523118600, -0.0698929206, -0.2519670129, 0.0629234239, 0.0537148267, -0.0253934823, -0.0686693341, -0.0776035637, 0.0722236037, 0.1969420314, -0.0685398206, -0.0313655995, -0.0687942877, -0.0141281933, 0.0570132695, 0.0151702436, 0.1515300572, 0.0624753945, 0.0094070612, 0.1245235130, -0.0173997283, -0.1015929952, -0.0101279514, 0.1418428123, 0.0817700997, 0.0489622131, 0.1385586709, 0.1446049958, 0.0139215747, 0.0913228020, -0.0007988024, 0.0125535121, -0.0124968188, 0.1381711513, 0.0823854208, -0.0220484491, -0.0063787377, -0.0650438741, -0.2662679851, -0.1940737814, -0.1820294261, -0.0886982381, 0.0524620935, 0.0365514383, 0.0236102175, 0.0395529456, -0.0067509883, 0.0081709092, -0.0566935353, 0.0260295682, 0.2572817504, -0.0884185880, 0.1016645133, 0.0059444769, 0.0414498821, -0.0034528179, 0.0849520341, -0.0140586942, -0.0540121756, 0.0322370194, -0.0020630483, 0.0690275356, -0.0826210380, -0.0927196518, -0.1264562011, -0.2623065412, -0.2257657349, 0.0826794729, 0.0359568372, -0.0404092669, -0.0939921737, -0.0844274312, -0.0205027964, 0.1184620112, 0.0278429333, 0.0716778785, -0.0123405168, -0.2723806798, -0.1072952002, 0.0723302513, -0.0944051370, 0.0928563550, 0.0939507112, -0.0500253290, 0.0951825082, 0.0385374241, -0.0735787451, -0.0549300052, -0.1093280911, -0.0062380605, -0.1908974499, 0.0517335236, -0.0261809006, 0.0199444331, 0.0010370889, 0.0433785431, 0.1420830786, -0.0104722520, 0.0200708173, 0.1896250099, 0.0074059833, 0.1305750906, -0.3247401118, 0.0710043758, -0.0337418206, -0.1392870545, -0.0389327407, -0.1203813627, -0.0119570279, 0.0554411039, -0.0912239403, -0.0002710703, -0.0113475053, -0.0638504475, -0.0452609956, 0.0747002065, 0.0597364493, -0.0415205099, -0.0748367906, 0.1699315310, 0.0537946522, -0.0030756656, 0.0597522780, 0.0301462319, -0.1129722521, 0.0968930721, 0.1065094769, 0.0925041065, 0.1154679582, -0.0309076738, 0.0548311323, -0.0245967936, 0.0370371267, 0.0673143640, 0.0195426159, -0.0636157393, 0.1132072136, -0.0799241140, 0.0266351327, -0.1659435034, -0.0987241939, 0.0362058468, -0.0080898739, -0.0203091763, 0.1406598836, 0.0585606731, 0.0946740806, -0.0152180195, -0.0834321305, 0.0217218343, 0.1631027311, -0.0544721298, -0.0318308808, 0.0428794660, 0.0010623889, 0.0867198259, -0.0024746933, -0.0485998653, 0.0162657518, -0.0068839486, 0.0669699460, 0.1057979688, 0.0661261603, -0.0116772726, -0.0916708708, -0.1171368584, -0.0733479187, 0.0113408631, -0.0536095053, -0.0606606044, 0.1332352012, -0.0968917981, 0.1123852432, 0.0954038575, -0.0030739580, -0.0392798521, 0.0771180615, -0.2296559662, 0.0777188689, 0.2337294668, -0.0443097688, 0.1783353984, 0.0740447566, 0.0283974446, 0.0073439809, 0.0246373620, -0.0124655385, -0.0582998395, -0.1858721972, 0.0623243041, -0.0260249898, -0.0487753153, 0.0200677607, -0.0873979554, -0.1865781546, -0.0505181774, -0.0638816655, -0.0396160223, 0.0705570057, 0.2128777057, -0.0291608199, 0.0540046878, -0.1891350001, 0.0243055746, 0.1054547653, -0.1343770921, 0.0000691690, -0.0563397929, -0.0154065881, -0.1139105484, -0.0836043805, -0.0632718727, -0.0376385637, -0.0655508488, 0.0136842206, -0.0712085441, 0.2106366009, -0.0395930000, -0.0152055565, 0.0451358967, 0.1134664193, -0.1004220694, 0.1012604013, 0.0444559902, -0.0034067617, 0.0846547708, 0.0995323658, 0.0668486729, 0.1123270914, -0.1450487822, -0.0350515284, -0.1410774142, 0.0160263702, 0.0722654015, -0.0161855686, -0.0571871027, 0.0978753194, 0.0897786766, 0.0169213638, -0.0935713947, -0.0816040412, -0.1250980645, -0.0997706279, -0.0132521540, 0.0650497228, 0.0283404775, 0.1205905899, -0.0046804040, 0.0139008192, -0.0521336719, 0.0975610912, -0.0277577788, 0.0394829661, -0.0369994640, 0.0543379262, -0.0537532754, -0.0798342228, -0.0664872378, 0.0770850405, -0.2016270012, 0.0201153196, -0.0695341825, 0.0482644662, -0.1445111334, -0.0437929705, -0.0626669079, -0.0787771642, 0.0806578025, -0.0279874261, -0.0526022911, 0.0845691338, -0.1062036455, 0.0264728200, -0.0356442481, 0.0334757008, 0.0432021655, -0.0475782305, -0.1925590783, -0.0569008552, 0.2464731038, 0.0466858633, 0.0570846573, -0.1065742075, 0.0762607306, 0.0917703286, -0.0239613466, -0.0401198231, -0.0421800241, -0.0057476182, 0.0508961789, -0.0490539446, 0.1176057830, 0.1353418082, -0.1027504131, -0.1794483215, 0.0199917424, -0.0317290276, 0.1145919785, -0.0389656015, 0.1268840581, 0.0924650058, 0.0230058059, 0.2225572765, -0.0356934667, 0.0459824130, -0.1104315668, 0.0557752810, -0.0122533869, -0.1580100358, -0.3418582976, -0.0261777751, -0.0422723703, -0.0096003767, -0.0934768319, 0.0690764114, -0.0489259288, -0.0457439460, -0.1062554270, -0.1277468204, 0.1449322253, 0.0484533869, -0.1791399270, 0.0658562928, 0.0832191631, 0.0006013908, -0.1174662486, 0.0602998212, 0.1210430786, 0.0552403703, -0.1247705892, -0.0569388159, 0.0613624230, -0.0356967039, 0.0276988763, -0.0032548895, 0.0465974510, 0.0458652228, 0.0137880603, -0.1616898030, -0.0104023144, -0.2315735668, -0.0786299184, -0.0860034600, -0.0194397774, -0.1161369234, 0.0525067337, 0.0965936035, -0.0039403504, 0.1489294916, -0.0703699663, 0.1419201195, -0.0873255581, 0.0835319087, 0.0777229145, 0.0397947282, -0.0228251014, -0.1048582271, -0.2251588553, 0.0039832243, -0.0963771343, -0.0816411749, -0.0502955355, -0.0074371388, 0.0346360803, -0.1182368919, -0.1251521111, -0.0317274332, 0.0615580454, -0.0414906219, -0.0767870247, 0.1241836026, -0.0675781518, 0.1128425226, 0.1020988673, 0.0726954415, 0.0306853857, -0.0355906039, -0.1229706630, 0.0747324824, 0.3189312220, 0.0314956270, -0.0049464121, -0.0153982062, 0.0830770656, 0.0512298942, 0.0769591630, 0.0529098473, -0.0001732906, -0.0538096875, 0.0502752401, 0.0371594168, 0.0942745432, 0.1292572618, -0.1263757795, -0.0451017991, -0.0235345550, -0.0651131794, 0.0908794627, 0.0061871540, 0.1700414270, -0.0425028615, -0.0843361244, 0.2069891542, -0.0540443994, 0.0775075927, -0.0940909162, 0.0563390143, -0.0979913399, -0.1571516842, -0.3547384739, -0.1025486961, 0.0324410200, -0.0051633595, 0.0181553941, 0.0407339185, -0.1221227720, -0.0133586582, -0.0098030083, -0.0232423525, -0.0198295247, 0.0634034723, -0.2122946084, 0.0436359458, 0.0166850109, 0.1163002849, -0.0358806774, -0.0682299137, 0.0680162162, -0.0298733488, 0.0225240439, -0.1010946557, -0.0237746630, -0.0076515405, -0.0411036648, 0.0638173297, 0.0910794213, -0.0393529236, 0.0577556118, -0.0843263194, 0.0631355569, -0.1912447214, -0.0041366476, -0.1478455663, -0.0006195185, -0.1316425949, 0.1207503155, -0.0033341730, -0.1014166400, 0.0732881352, -0.0821017027, 0.0042339824, -0.0343444459, -0.0249189809, 0.0065510226, 0.0988980532, -0.0228014048, 0.0141507033, -0.2254312187, 0.0729918852, -0.0008165597, 0.0360019393, -0.1402554214, 0.0999866202, -0.1394982189, -0.3163397610, 0.0409607664, 0.0123627651, 0.1143725663, -0.1381870955, -0.0399542823, -0.0165660810, -0.1199680418, 0.1870641410, 0.0546047986, 0.0566364937, 0.0294843130, 0.0460824892, -0.1070609167, 0.0734123513, 0.1488030702, 0.0669536144, 0.0522719584, -0.1027745605, 0.1791010499, -0.1545592695, -0.0172579288, -0.0746883079, -0.0420809798, -0.0799987018, 0.0837231502, 0.1316475868, 0.1635398418, -0.0010832665, 0.1418791711, 0.0834469348, -0.0260209944, -0.0626674965, 0.0066317781, 0.0899301171, 0.1250904948, 0.1064299047, -0.1013313234, 0.1863317788, -0.0168208815, 0.1726639271, -0.1099380031, 0.0641810149, -0.0905623212, -0.3432467580, -0.1860034168, 0.0096499370, -0.0463675186, -0.0968561023, -0.0323762931, 0.1633692682, -0.0956958458, 0.0235166177, -0.0500541106, 0.0331655033, -0.1563254297, -0.0827168748, -0.1674761176, -0.0873240307, -0.0550467633, 0.1144829616, -0.1321899742, 0.0169390105, 0.0980222225, 0.0412696302, -0.0754610673, 0.0393959768, -0.1866694838, 0.0799104273, -0.0751001313, 0.1738848239, 0.0718268231, -0.1459736377, -0.0301960185, 0.0138175329, 0.0754123852, 0.0164455045, 0.0150997192, -0.0682644397, 0.0531121865, 0.0204531178, 0.0061820927, -0.0197964441, -0.0640008673, -0.1310581118, -0.0759224519, -0.0843956545, 0.0189001746, -0.0802367181, -0.0659897551, 0.0325789303, -0.0939610898, -0.0457176715, -0.2033348531, 0.1886617243, 0.1181708425, -0.1412372142, -0.1356144547, -0.0228547193, -0.1962298602, -0.2772463858, 0.0607898459, -0.0078125298, 0.2002393603, 0.0872752964, -0.1025203988, -0.0665690228, -0.2175139487, 0.1763224751, 0.1257898808, 0.0702497065, 0.1032184437, 0.0851854905, 0.0664416626, -0.0383085124, -0.0398850329, -0.0095479451, 0.0601262003, -0.1040782556, -0.0374602377, -0.2605863512, 0.1004190147, -0.0271257311, -0.0016375143, -0.0573188700, 0.0659062862, 0.1240079328, 0.1578456014, 0.1682363003, -0.0684839338, 0.0221919827, 0.0455788635, 0.0099836262, 0.0329766013, 0.0748902783, 0.0439849049, 0.0296756625, -0.0212449767, 0.0893815756, 0.0311469249, 0.1230760142, -0.1244535521, 0.0607578419, -0.0549645796, -0.2649771571, 0.0414155498, 0.0319772400, 0.1254411340, -0.1716004312, -0.0671575144, 0.1698030084, -0.0784377307, 0.1557433456, -0.0452811047, -0.0323880315, -0.0579035729, 0.0185787752, -0.1323223263, -0.1785997301, 0.0971816853, 0.0020013256, -0.1126886979, 0.0184122603, 0.0145057933, 0.1845827252, 0.0534820184, 0.1117447093, -0.1363050640, 0.1506419778, -0.1380627602, 0.0578588136, 0.1386037767, -0.2199213952, -0.0801838487, 0.1531440765, 0.0502685308, -0.0732841119, 0.0648404136, -0.0486380048, 0.0618638881, -0.0659256205, 0.0344115458, 0.0619555749, -0.0531808846, -0.2708576620, -0.2056350112, -0.0687426999, 0.0190002229, 0.0257033017, -0.2350373417, -0.1195310652, -0.0437934175, -0.0353517272, -0.1770871729, 0.1408828795, 0.0841867775, -0.0711252987, 0.0168320164, -0.1803061813, -0.2312223017, -0.2202957124, -0.0283362865, -0.0884425268, 0.0753754005, 0.1010612398, -0.0392404161, 0.0513944291, -0.1998098344, 0.1261654496, 0.2439157814, -0.0128848422, 0.0974856988, 0.0099653900, 0.1517976224, 0.0388119556, -0.1574120075, 0.0215179678, -0.0788341314, -0.1109134629, -0.0067107687, -0.0288300086, -0.0220956299, 0.0005982519, -0.0672285184, 0.0097263306, 0.1711362898, 0.0804456919, 0.1327454299, 0.0610200390, -0.0860366002, -0.0586876422, -0.1875487268, -0.0127958460, 0.1448153108, -0.0635652766, 0.1090461314, -0.0164862275, -0.1494258642, -0.0432819836, -0.1869038194, 0.1498189121, -0.1568881273, 0.0605161823, -0.0998563021, -0.1976027489, -0.0359015204, 0.0547644943, 0.0634238347, 0.0360370316, 0.0102977548, 0.1329821646, -0.0996743143, 0.0590168126, 0.0492138825, 0.0531965047, 0.2037284821, 0.0273717046, 0.0712150559, -0.1303725988, 0.0724085495, 0.0289666727, -0.1793198884, -0.0375807285, -0.0130198821, 0.2036564201, 0.0069418182, 0.1511840671, -0.0292332284, 0.0692813918, -0.0913145915, 0.0330611654, 0.1013720855, -0.0337523222, -0.0043251039, 0.2366462648, 0.0798534751, 0.0051550963, -0.0006051746, -0.0867125094, 0.1031516269, -0.1385226101, -0.0630522147, 0.0540257543, -0.1228412986, -0.1779801995, -0.1875861436, -0.1122553125, -0.0865828991, 0.0429134704, -0.2268009633, -0.3465978801, 0.0697464347, -0.2384167016, -0.0692383051, 0.1140390784, -0.0559430234, -0.0655361563, 0.0846209601, -0.0184688810, -0.1567332298, -0.2913663387, -0.0066471230, 0.0991539508, -0.0889447257, -0.0610553473, -0.0257339217, 0.0651959702, -0.2232417613, -0.0223350450, 0.0861429349, 0.0250343271, 0.1132896170, -0.0190028716, 0.0514794849, -0.0615985729, -0.1298961192, 0.0575108193, 0.0245057885, -0.1461175084, 0.0533189140, -0.0544728525, 0.0282983296, 0.1747417599, -0.0671732798, 0.0794380754, 0.0168093368, 0.0283914041, 0.1058060601, 0.0834922865, -0.1413080394, -0.0422803424, -0.2845328152, -0.1311306655, 0.0881586969, -0.0473242365, -0.0510747358, 0.0650676563, -0.0652984306, -0.0385306627, -0.2451867461, 0.1174621508, -0.0964824483, -0.0056586829, -0.0305011198, -0.2692289054, -0.0297693796, 0.2010348886, -0.0198888052, 0.1697805971, 0.0448094718, -0.0057106321, 0.1866185814, -0.0616783015, 0.0155217042, 0.1407915056, 0.0876423270, 0.0060355882, 0.0544243082, -0.1122752801, 0.1027228534, 0.0708132759, -0.1950933486, -0.0718672574, 0.0226062275, 0.1238682792, -0.1495692134, 0.1433729976, 0.0603809804, -0.0525374524, 0.0009340472, -0.0520290509, -0.1178725809, -0.0550586693, -0.1155562922, 0.1445988417, 0.2002993077, -0.0065623675, -0.0483355299, -0.1465331018, 0.1134174839, -0.2183814943, -0.0708827749, 0.0137636308, -0.1409917325, -0.0860217363, -0.2232133299, -0.0734678134, -0.1708374619, 0.0215704981, -0.1810974777, -0.2600415945, 0.1307486147, -0.3928364217, -0.0167612880, 0.0732603297, -0.1525780708, -0.0776753202, 0.2205471545, 0.0633164495, -0.1708810031, -0.2456781566, -0.0381308906, 0.1747080535, -0.0170079209, -0.0414510444, 0.1332404613, -0.0140767358, -0.3384124935, 0.0844235048, -0.0109636709, -0.0204243697, 0.0320573375, -0.0796505213, 0.1092132479, -0.1039803177, 0.0032907184, -0.0513625257, -0.0537195168, -0.1985149384, -0.0980266556, -0.0656032264, 0.2010470033, 0.0730764940, -0.0319449008, 0.1757724732, 0.1098434925, 0.1106055900, 0.1006902978, -0.0592958219, -0.0445736498, -0.1412864327, 0.0220704023, -0.0690122396, -0.1065200269, 0.0730639994, -0.0414949507, 0.1586542875, 0.1070095375, 0.0191351529, -0.1973222196, 0.0033349395, -0.2452341765, -0.0029180485, -0.0611732118, -0.2635836899, -0.0923643410, 0.1867595762, 0.0280412845, 0.1585431248, 0.1526357532, -0.0652355701, 0.1989208609, -0.0225494541, 0.0686519593, 0.1874117851, 0.0481019132, 0.0533191860, -0.0241482966, -0.2257164419, 0.1013035178, 0.0684148744, -0.1298735291, 0.0794969872, 0.0806693435, -0.0146160200, 0.0535522737, 0.3043618798, 0.2090066820, 0.1456157416, -0.0407828875, 0.0735781714, 0.0096153459, -0.0129626533, -0.0258603599, 0.0687976778, -0.0074947486, -0.1115137264, -0.1512133628, -0.1553859115, 0.0274991412, 0.1291218996, -0.2503024042, -0.0746622309, 0.1413338482, -0.0389819071, -0.1748279184, 0.0663917214, 0.0685149878, 0.1204784364, -0.0593506582, -0.1971349865, -0.0008858882, -0.2298390567, -0.0258171950, -0.1393522769, 0.0702742934, -0.1082384437, 0.1298096180, -0.1871496886, 0.0342087746, 0.0678947568, 0.0070353532, 0.0296882316, -0.0573111735, 0.2369532585, 0.1644862294, 0.0624815822, -0.0992336348, -0.0100362273, 0.1340951324, 0.0120699052, 0.0364857316, 0.0481885299, -0.1312723458, 0.1757439524, -0.1522682905, 0.0166448802, 0.0687048137, -0.1452284604, 0.0542489775, 0.1020054221, 0.1536754370, 0.0184047259, 0.0641336292, 0.1558218300, -0.0837102830, -0.1146219373, 0.0956240222, -0.0572931170, 0.0469126999, -0.0590870306, 0.0922386199, 0.0168151334, -0.0064415210, 0.1534730792, 0.0576497018, 0.0670812130, 0.0211963914, 0.0674379990, -0.0988223478, 0.0232545026, -0.1467680037, -0.3182595074, -0.0828645155, -0.1011843979, -0.0345438644, -0.1084063351, -0.0299219023, 0.0063730017, 0.0643096045, 0.1534438580, 0.1575541347, 0.2339538783, -0.0816744044, -0.0374445058, 0.1933876574, 0.1508114189, 0.0824003667, -0.1670894623, -0.1438399553, 0.0075754160, -0.0787660331, -0.0117105171, -0.0951610282, -0.0479641482, -0.0493350215, 0.2863467634, -0.0106043182, -0.2065470666, -0.0374711901, -0.2189455777, 0.2420649081, 0.2070085555, 0.0173345115, -0.0835276321, 0.1625105292, -0.2112281919, -0.0616010539, -0.0008180707, 0.0299108177, 0.1542356610, -0.1770484149, -0.2196443826, 0.2814650238, 0.0053551700, 0.0530017763, 0.0353789181, 0.3236418664, 0.2424048185, 0.0596444383, -0.1564783454, -0.0969576612, -0.0853903890, -0.0792257413, -0.1510303617, -0.0270564929, -0.2596505880, 0.0373419598, 0.1113415286, -0.1783997118, 0.2665991485, 0.0102043096, -0.1338844895, 0.1787703335, 0.0765037090, 0.1771336496, -0.1438468993, 0.0301005431, -0.2696324885, -0.0728332400, 0.0827522278, 0.2613449097, 0.2255554646, 0.0655916333, -0.1984754205, -0.2703188956, -0.0741256475, -0.0008802830, -0.1814891249, -0.0827001035, -0.0683866888, 0.1724824905, -0.1061216667, 0.0173955951, 0.4087542593, 0.0918890238, 0.2323193550, 0.2399322987, 0.0370888412, -0.0209954046, -0.1143626124, 0.0834854096, 0.0340637304, -0.1668469757, -0.0421309099, -0.1850246936, 0.0302048121, 0.0647056103, 0.1074537709, -0.0391862616, -0.1097584218, 0.1193002760, -0.0908407271, 0.2248129994, 0.2445383966, -0.1170975938, -0.1302609146, 0.0372510403, -0.2036342919, 0.2476654947, -0.2432526946, 0.0055014356, -0.1334211230, -0.1686953306, -0.1212294772, 0.4118524194, 0.2327606976, 0.3538972735, -0.1034540087, 0.0049931337, 0.0163212791, 0.0185532905, 0.0271743815, 0.0048088729, 0.0445940830, -0.0488611981, 0.1511599571, 0.0083221048, -0.0393002070, -0.0624057315, -0.0834109411, 0.1884593219, 0.0775097981, 0.1487381756, -0.1437430382, 0.1287596077, -0.1191363484, 0.0393952131, -0.0475324318, -0.0098810252, -0.0619338341, -0.1454691887, -0.1174803823, 0.0362876169, 0.0090157464, 0.0011820523, -0.0836962759, 0.1155707687, 0.1283157766, 0.0268477798, -0.0651581138, -0.1088669896, -0.0388628207, -0.0791326016, -0.0515644178, -0.0211542621, -0.1211279184, 0.1012044027, 0.1274185032, -0.1357834786, 0.0116738975, -0.0355759487, -0.0472503863, 0.0200260133, 0.1268408298, 0.1637648344, -0.0705658421, 0.0766770840, 0.0332024246, 0.1090794504, 0.0557283983, 0.0312954858, -0.0350660495, -0.0916838869, -0.1752746403, -0.1555591077, -0.0673884004, 0.0551235341, -0.1523064077, -0.1608251482, -0.0499714240, 0.0125561841, -0.0147942994, 0.1548161507, 0.0431342870, 0.0288881194, -0.0658132136, 0.1165530831, 0.0388352200, -0.0085770488, 0.0266332664, -0.0427864715, 0.1508613825, -0.1096135601, 0.0220339615, -0.0946568847, -0.0009727359, 0.0828176215, 0.0851251036, -0.0293759555, 0.0273285583, -0.0800016597, 0.0806020349, -0.0385011099, 0.0957913399, -0.0619826317, -0.0811934248, -0.0510452017, -0.0858048201, -0.0484290570, -0.0104893968, 0.0577186830, -0.0721596256, -0.1043849140, -0.0068290094, 0.0564301834, 0.1774752438, 0.0524081662, -0.0419792049, -0.1465370357, 0.0623216704, -0.0654748753, 0.0985572562, -0.0068032010, -0.0603673235, -0.0223640800, -0.0262312237, 0.0486386567, 0.0767047852, -0.0239330865, -0.0305419397, 0.0259979218, -0.1215539724, 0.1028467044, 0.0809613764, 0.0366485268, 0.0780501217, 0.1034444198, 0.0483665951, -0.0508842468, -0.0482861847, 0.0557665713, 0.1596789211, -0.0365086645, 0.1293764114, -0.0760070682, 0.0136751262, -0.0259010848, 0.0201572403, 0.0731420070, 0.0474248007, 0.0200682040, -0.0022999588, 0.0051455596, -0.0188913234, -0.0657420233, 0.1044985130, -0.0454680026, 0.0307108462, 0.0937506631, 0.0765288770, -0.0060624201, 0.0450664721, -0.0171252042, -0.1113434806, 0.1049424633, 0.0822779089, 0.1077868119, 0.0602962524, 0.0165146980, 0.0134696197, 0.0181888621, -0.0322563685, 0.0161907747, 0.0551046506, -0.1161951870, 0.0072214678, -0.0298520215, 0.0816055089, 0.0617159046, -0.0172439814, 0.0505207330, 0.0928924158, -0.0340342931, 0.0036236271, -0.1121019498, -0.0063756704, 0.0177610125, 0.0048606391, 0.0632498935, -0.0539417192, -0.0243488140, 0.0106303068, -0.0847275853, 0.0663703829, -0.0549748540, 0.0726381540, 0.0874064267, 0.0113015976, 0.0171606913, 0.0118793920, 0.0231908094, -0.0154642705, 0.0161830522, -0.0141119277, -0.0732298419, -0.0426323079, -0.0284558572, 0.0188531689, 0.0748325288, 0.0048183799, -0.0554340668, -0.1470438391, -0.0071163457, 0.1026781946, 0.0057485774, -0.1187836081, 0.0054610521, -0.0255266037, -0.0678404719, 0.0565181337, 0.1093493775, 0.0062709241, 0.0501286760, -0.0131741716, 0.0405368693, -0.0179881696, -0.0213268660, 0.0586545058, -0.0040913266, 0.0590346046, 0.0115022836, 0.0546551384, -0.0040465817, -0.0781136751, -0.0710189417, 0.0403021537, -0.0423317552, 0.0579827279, 0.0823393613, 0.0148594314, 0.1484446675, -0.0164778139, -0.0478503332, 0.0164406467, 0.1425421238, -0.0591780320, -0.0461980551, -0.0206070226, -0.0983433947, -0.0004206374, 0.1425734907, 0.0445462465, 0.0701951534, -0.0397804230, -0.0290964395, 0.0107852528, -0.0188963003, -0.0741745159, 0.0770700276, -0.0908844247, 0.0194856152, 0.0444658957, -0.0153172370, -0.0080202287, -0.0671875775, -0.0981252864, -0.0232761856, 0.1140724197, -0.0765467510, -0.0627491251, 0.0393836312, -0.0321179256, -0.0115014296, -0.0203110091, 0.0935134366, -0.0672435760, 0.1534090787, 0.1226582527, -0.0414839797, -0.0740228593, 0.0241376590, 0.0812172741, 0.0011474236, 0.0717869997, 0.0116005186, -0.0294918865, 0.0437558815, -0.0500226505, 0.0424100831, -0.0385868773, 0.0334585980, 0.0545931943, 0.0384260714, -0.0409712233, 0.1124259159, -0.1380695254, 0.0281158462, -0.0382812060, 0.1149518490, 0.0151998997, 0.1138945669, 0.1474568248, -0.1309287548, -0.0823811218, 0.0633783340, 0.1069315001, -0.0380977690, -0.0253537335, 0.0259984378, 0.0009647405, -0.0539144538, 0.1282751262, -0.0511325635, -0.0857883990, -0.0059116334, -0.0974198058, -0.1214788035, 0.0764538199, -0.0002531077, 0.0356573388, -0.0848193392, 0.1860134453, -0.1551146954, 0.0037368971, 0.0834453478, 0.1224386543, 0.0092322007, 0.1222374588, 0.0299109686, 0.0273943730, -0.1433890164, -0.1618259549, -0.1261769831, 0.0719760731, -0.1000678614, -0.0332827643, -0.0253878385, 0.0202917363, 0.1439507902, 0.0031699559, 0.1760323197, 0.1099238172, -0.1542651057, 0.0630540028, 0.0922768041, -0.0756787732, -0.1515005529, -0.0129831368, -0.1742570251, -0.0999228880, 0.0149092237, 0.0765418708, 0.1252521724, 0.0687000230, 0.0869755745, -0.0747862682, 0.2256090343, -0.1559391618, 0.0926254019, -0.1042920500, -0.1288725883, 0.0943104401, -0.1111460626, 0.0646708086, -0.0444402099, 0.1983303875, 0.0765880048, -0.0550133884, 0.0021921676, -0.1555528939, -0.0410895012, -0.0724516287, 0.0599144213, -0.2321978062, -0.0945832431, 0.0733225495, -0.1792227477, 0.0585244447, -0.1022745743, 0.0190291442, 0.0181253944, 0.1761757135, 0.1790516824, -0.1114468351, -0.0382052213, -0.0585104041, -0.0544758961, 0.0460892208, 0.1041900888, 0.1162643805, 0.1177034453, 0.1245663762, -0.1048864946, 0.1127919704, 0.1341654360, -0.2049330026, -0.0354093388, -0.1383284628, 0.1654712856, -0.1294590086, 0.0582547076, -0.0673780516, -0.1031500399, -0.0942404643, 0.0487899147, -0.0404075384, 0.0508968122, -0.2520146668, -0.0136254374, -0.0170168132, 0.0416676328, 0.1316839159, -0.0196863282, 0.2158546001, 0.0671150014, -0.1037738621, 0.0274834689, -0.0813826397, 0.1533335894, 0.0119251674, -0.0934183970, 0.1668400466, -0.1126415506, -0.0191709120, -0.0636363253, -0.0311241057, 0.1495954096, 0.1446379125, -0.1125772446, 0.1899500042, -0.0322793759, -0.1763670743, -0.0004329286, 0.0861378610, -0.0021498792, -0.0984690562, 0.0463643782, -0.0442558080, -0.0147777684, -0.1219150797, 0.0574976951, -0.0619405396, -0.0491721034, 0.0667352974, 0.0507248901, 0.1617685556, -0.1459197998, 0.1476843655, -0.1252946705, -0.0150819700, 0.1258999258, -0.0342957601, -0.0532250255, -0.1045967713, 0.0152208107, 0.0634621605, 0.2176259458, -0.1521406621, -0.0267263930, 0.0432624035, -0.0537944846, 0.0510086007, -0.0494106449, 0.0789541751, 0.0514756925, 0.0708825141, -0.0301804971, -0.1270136386, 0.0829603449, 0.1431175917, -0.0169572737, -0.0757962987, 0.0195845626, -0.0069284528, 0.0069242259, 0.0383723266, -0.1779402345, -0.0274254512, 0.0055745067, -0.1649246216, -0.0307635143, 0.0439061858, -0.0253963824, 0.0026362422, -0.0064656418, -0.3375323713, 0.0777594671, 0.0746016875, -0.1371235102, -0.0465242565, 0.0866419077, 0.2536191642, -0.1058833599, -0.0112902271, 0.1252810806, 0.1772790998, 0.0179293547, 0.3666505218, -0.1596903652, -0.0179418735, -0.0739850774, -0.2494450063, 0.1031161919, -0.0894043669, 0.0713445842, -0.0988368616, 0.1089675426, 0.1064149141, 0.0057685273, 0.0019899856, 0.0882931724, -0.0491854660, 0.0314893089, 0.0973997265, -0.0059951688, 0.0262063555, 0.1085120663, 0.1483362466, -0.1370768100, 0.0513227470, 0.0255676135, 0.0342681035, -0.0844885260, -0.2039780617, -0.1063100547, 0.0746802092, 0.0516296923, 0.0372321308, 0.0315104611, -0.1598445475, -0.2913932800, -0.2102576941, 0.1186254248, -0.0225305241, -0.0840108097, -0.0416878536, 0.1308013648, -0.0802778751, 0.0414423868, 0.0205191523, 0.0057295291, 0.0074671586, 0.0082785040, 0.1897252500, 0.1319169402, 0.0481342189, -0.0702509955, -0.0618876889, -0.0777603537, 0.0408147536, 0.1411139667, -0.0836174339, -0.0603052564, -0.0482254364, -0.0491396189, -0.1151151434, 0.2546170652, -0.0567068569, -0.0235813484, -0.1962038875, -0.0057590581, 0.0616649762, 0.1313199103, 0.0794167593, -0.0434050150, -0.1465681791, -0.2789694667, -0.1190588921, -0.0743407756, -0.0244088080, -0.1406414658, -0.0512992553, 0.0489885285, -0.0221746303, 0.1252367646, -0.0530143268, -0.0765313506, -0.0550623052, 0.0953136384, 0.1658443958, -0.0979821831, -0.1057362035, 0.1172034219, -0.0146506885, -0.1049952656, -0.0463724621, 0.1123027429, -0.1118688658, 0.0632724240, -0.0937361717, -0.1328016222, -0.0128338635, 0.0759839267, -0.1278395802, 0.1421684921, -0.0455001108, -0.0152985547, 0.0123573933, 0.0970414504, -0.2663486600, -0.1646558940, 0.1027574912, 0.0335620940, -0.0691910982, 0.0669912398, -0.0342645273, -0.0009700803, 0.2430034131, 0.0358335599, -0.0806219354, 0.1198051199, 0.1064283773, 0.1212453023, -0.0264126286, -0.1787839532, -0.0192169603, 0.0291981008, 0.1314730495, 0.0417510197, 0.0176900886, 0.2387748063, -0.0897419006, 0.0008989033, -0.1083164364, -0.2436728477, 0.1268251091, -0.0382059962, -0.0328862593, -0.0994656309, -0.0373369716, -0.2213380188, -0.1296645254, 0.0445661321, 0.1553960890, 0.2412997335, 0.0179757643, 0.0523169748, -0.1755666435, -0.0005419692, -0.1215042174, -0.1238063201, -0.0343480557, 0.0578362308, -0.0011185819, 0.1300121248, 0.1225666627, -0.1085490957, 0.0494451597, 0.1131984070, -0.0055453358, 0.2082324028, 0.0391843021, -0.2060952485, 0.0558690950, -0.1440418959, -0.1436212510, 0.1267351210, 0.0066261678, 0.0787036344, -0.2310110778, 0.0175483413, 0.0979392081, 0.0845838636, 0.1352627426, -0.0111954780, 0.0146826394, -0.3406689763, -0.3123482168, -0.0908964276, 0.0190044399, -0.2558706999, 0.1215101779, 0.0239091069, 0.0360899717, -0.1526271403, 0.0118651399, -0.1252381802, 0.0064410884, 0.0424493887, -0.0335481651, -0.1201403886, 0.0931315199, 0.1119599044, 0.0575530753, -0.0515908673, 0.0633300766, 0.2092384100, -0.2630474567, 0.1891887039, -0.2518201470, -0.1503511369, 0.0288068801, 0.0074351821, -0.0349874310, 0.0331196710, 0.0160470344, 0.0744170472, 0.0277980603, 0.1569229513, 0.0181801226, -0.1618712246, 0.2185783386, 0.1338295192, 0.0656945631, -0.0767389759, -0.0222770795, -0.0843792483, 0.1669092327, 0.0721480921, 0.0822480395, -0.0667324662, 0.0074270824, -0.0340556279, 0.2195284218, -0.0996406600, -0.0680192560, -0.0737877190, -0.1195644662, 0.0665540099, 0.1111918911, 0.1923501194, -0.1422897428, -0.0457255170, 0.0488443375, -0.1392025799, -0.0637092814, -0.0608972795, 0.1257018745, -0.3189355433, 0.1365798563, -0.3149231970, -0.1309233159, -0.0860525146, 0.2241554707, -0.0145655572, 0.0635109469, -0.0065291771, -0.1419061422, 0.1063091159, -0.2299010605, 0.0871288106, -0.0509727746, 0.0024579850, 0.0274796821, 0.0797464848, 0.1455382854, -0.1599566340, 0.0156243555, 0.0236718599, -0.0343738981, 0.1674306244, -0.1053183675, -0.1759730726, 0.0642979741, 0.0590904281, -0.0575504862, 0.0155076152, -0.0214097779, 0.0404354557, -0.1895015836, -0.1065037027, 0.0499885716, -0.0344974361, -0.0159654114, -0.1889096349, -0.0092164706, -0.2200354040, -0.1368278414, -0.0108693521, -0.0182510093, -0.0909573510, 0.0241909493, -0.0352008566, 0.0776336119, -0.1787937284, 0.0315638296, -0.0493726879, 0.0786816850, 0.0902066007, 0.0819052309, 0.1039631814, -0.0196359046, 0.0041122553, -0.0923318490, -0.0364316739, 0.0196617749, 0.2696102560, 0.0438750722, 0.0443057008, -0.2893323898, -0.2831127942, 0.0946739167, 0.0298414845, -0.1339649409, -0.0553059764, -0.0178685896, 0.0229904596, 0.0919939131, -0.0371070541, 0.0795055479, -0.1754699796, 0.0417341664, -0.0052440660, 0.1420951039, -0.0056692688, 0.0145099293, -0.0669203177, 0.0470791608, 0.0972143114, 0.0718980134, -0.0574494675, 0.0470737219, -0.2064087689, 0.0639037713, -0.0454191826, -0.2550960779, -0.1293137670, -0.0197214838, 0.0407865047, 0.1196460798, 0.1188497394, 0.0625213906, 0.0353565551, 0.0114379702, -0.0726780295, -0.0152573697, 0.0843413696, 0.1197440922, -0.4693703949, 0.1833323240, -0.3003198206, -0.1482944787, 0.0999674425, 0.1140277013, 0.1483816057, 0.0096374340, 0.1051894575, -0.2859463394, 0.1567328274, -0.1903315187, -0.0346851610, -0.1038126498, 0.1245779693, 0.0819942877, 0.0155895222, 0.1645826995, -0.2915240824, -0.0575834997, -0.0354846902, -0.0486699305, 0.1083323285, -0.2137673795, -0.1726716459, -0.0363499708, 0.0094699096, -0.0345672294, 0.1131523550, 0.0711521357, 0.0085408110, -0.2036143988, 0.0332535841, 0.1279595494, 0.0617609210, 0.1507038176, 0.0704469532, 0.0435699970, -0.3321154118, -0.0502600223, 0.0578098148, -0.0031552236, -0.0812889934, -0.0169890262, -0.1018739790, 0.2166815996, -0.0667810366, -0.0991382003, -0.0963046402, -0.0593464933, 0.0411087573, -0.0397084504, 0.0545346551, -0.0160609391, 0.0967398584, -0.0360040106, 0.0045228680, -0.0532158911, 0.2181132585, -0.0639079809, 0.0225603245, -0.1141253337, -0.1612445563, 0.1190193370, 0.1281871349, -0.1801492274, 0.0192056894, -0.0181506705, 0.0286075994, 0.1413051188, -0.0432920381, 0.0029965818, -0.0936933085, -0.0345322452, -0.0638977438, 0.0594805963, -0.0232108068, -0.1077300608, 0.0230603013, 0.0688615665, 0.2151412517, 0.2156425416, 0.0421661548, 0.0422121584, -0.1819331199, 0.2010606229, -0.0090586143, -0.1616524607, -0.0995340124, 0.0272769872, 0.0436420962, -0.0402703360, 0.0598105229, 0.0066900617, -0.0270248633, 0.0059212632, -0.0189874731, -0.0877466351, -0.1261148155, 0.2233695835, -0.4570587575, 0.2041537166, -0.2585557699, -0.1468531191, 0.0369818620, 0.1119359881, 0.0507783107, -0.0058884304, 0.1222010329, -0.1241367087, 0.0980668962, -0.1437283456, -0.0399805754, 0.0268712081, 0.1758436412, -0.0338055193, -0.0173433572, 0.1211287826, -0.3443315327, -0.0685341805, -0.0183386933, -0.0128370998, 0.1782787591, -0.0834735334, -0.0657751635, -0.0309536252, 0.0228074566, 0.1130926013, -0.0164310522, 0.1470480114, 0.0528546609, -0.1243753284, -0.0324415006, 0.1170009971, 0.0214156192, 0.2727084756, 0.0429992639, -0.0228134077, -0.1929663867, -0.0006962788, -0.0652624369, 0.0174579639, -0.1942659765, -0.0789003298, -0.1671347618, 0.1340730041, 0.0073232851, -0.0272635035, 0.0260288455, 0.0698386207, 0.1666130126, -0.0390973799, -0.0027161061, -0.1393129826, 0.1781024337, 0.0037998895, -0.0662064403, -0.0445982367, 0.1339845955, -0.0221497864, -0.1095457375, 0.0154850241, -0.2881610096, 0.0610843450, 0.0179691035, -0.1395778507, -0.0121839177, -0.0225793496, 0.1414602846, -0.0026415824, -0.1441013515, -0.0701030940, -0.1618986726, -0.0237993039, -0.0193072502, 0.0744704530, 0.0726652369, -0.0691524297, 0.0383650512, 0.0378243886, 0.1319444478, 0.1831439734, -0.0192374010, 0.1208050326, -0.0828115642, 0.1175345629, -0.1439270377, -0.1699106693, -0.0125488406, -0.0256440882, 0.1583539695, -0.0226698853, 0.0308376718, 0.0727659911, 0.0226478837, -0.0965822190, 0.0999595299, -0.1717069000, -0.0522075221, 0.1799416691, -0.3711588979, 0.0537765399, -0.0882254615, -0.1100664884, 0.0711625591, 0.0947659388, 0.1102924868, 0.0579307899, 0.0777175277, -0.1565151215, -0.0109491348, -0.0743718669, -0.0423352234, 0.1763617247, 0.0909278318, 0.0600924939, 0.0039604590, 0.0739664584, -0.1819349825, -0.0037243250, -0.0075786123, 0.0948740542, 0.1705747247, -0.0350482874, -0.1465235054, 0.0043626218, 0.0745309666, 0.0690588951, 0.0445058011, -0.0024840403, 0.0730026439, -0.1289538443, -0.0430835374, 0.1211337000, 0.1782253534, 0.1786431521, 0.0571968853, 0.0717164725, -0.2351035476, -0.1296730936, -0.1400715262, 0.0544559918, -0.1252417564, -0.1114662066, -0.0977484584, 0.0943019316, 0.0961447209, -0.0433512405, 0.0590113141, 0.0423125066, -0.0018993247, -0.1212368086, 0.1480606496, -0.1541662663, 0.1215793565, 0.0544843264, -0.0305997711, -0.0837903470, 0.0628485680, -0.0944667906, -0.0892886296, -0.0083465930, -0.2488641739, -0.0095339930, 0.0166716650, -0.0452276468, 0.1063835844, 0.0161277018, 0.0696722418, 0.0877453014, -0.1893625557, 0.1068435162, -0.0985288844, -0.0539755225, 0.0066801333, -0.0048158066, 0.0012737963, 0.0262975395, 0.0361865386, 0.0509571061, 0.1505694240, 0.0758861676, -0.1071773395, 0.0092129624, -0.0495096818, 0.1012035534, -0.0331917591, -0.1635023803, 0.1496055722, -0.0424243920, 0.1158830225, -0.0498454683, 0.1146616563, 0.0356051698, -0.0554767549, 0.0967225358, 0.0634972155, 0.0529952794, -0.0349719115, 0.1356930286, -0.2474315614, -0.0567265041, -0.0631097332, -0.0195690095, 0.0758310556, 0.0703040510, -0.0045607137, 0.0448064618, 0.0709821284, 0.0563709103, -0.1602446288, -0.0687946603, -0.0251632798, 0.2485064864, 0.0785079077, 0.1391375065, 0.0084852036, 0.0411927067, -0.0173295382, -0.0624848306, -0.0162713155, 0.2077014148, 0.2451068163, 0.1186285391, -0.0741368085, 0.0510215499, 0.0092667993, 0.0904399902, 0.1828449816, 0.0141679645, -0.0535370111, -0.0204309430, -0.0468875393, -0.0334423184, 0.1875664145, 0.1099892110, 0.0774006844, 0.0693665743, -0.2058439404, 0.0583516620, -0.1267249733, 0.1887878329, 0.0239977986, -0.1402521878, -0.1428328753, 0.0691908374, 0.1079731882, 0.0041131931, 0.0103544118, 0.1869640350, 0.1386454105, 0.0114718853, 0.0490761101, -0.1738444865, 0.1750630736, 0.1598475724, -0.0071664257, -0.1581997126, 0.0911014974, 0.0205961727, -0.1701374650, -0.1182428896, -0.3375961483, -0.0489511564, -0.0835035294, 0.0244095344, 0.1080657616, -0.0478218719, 0.1115334854, 0.0844951048, -0.3280546665, 0.0559549592, -0.1932050586, -0.0605675168, 0.0434300564, -0.0077368217, -0.0034113519, 0.1813303530, -0.1018022299, -0.0385884047, 0.2446889281, -0.0899717957, -0.1779595017, -0.1344040632, 0.1577236950, 0.0932532847, 0.0122720310, -0.0228189379, 0.1017001495, -0.0891170129, 0.2680537105, 0.0124740796, -0.0190297626, -0.0262990892, 0.0651978925, 0.1236193404, 0.0557203554, -0.0055577452, -0.0307672694, 0.1071933359, -0.0230830126, -0.0410608724, -0.0250078943, 0.0149388574, 0.0268157125, -0.1108708680, 0.0533072613, -0.0026027558, 0.1138999984, 0.0344708413, -0.1375028491, -0.0240753777, -0.0782505497, 0.1964593679, 0.0840145648, 0.0712701157, -0.0804097876, 0.1756650954, 0.0689017251, -0.0191442911, 0.0579232089, 0.0759824291, 0.2042032629, 0.0213281363, 0.0062214094, -0.0613137595, 0.0762742832, -0.0663902238, 0.0955631286, 0.0483845621, -0.0761449337, -0.0901813135, 0.0946113095, -0.0473455489, 0.1351201683, 0.1839004308, 0.0759699717, -0.0597964078, -0.1872941554, 0.1045420095, 0.0574048869, 0.0691383481, 0.0291061830, -0.0130736260, -0.0905340314, -0.0335589834, 0.2280232608, -0.0897898823, 0.1425245851, 0.0584653579, 0.1794043630, -0.0386440754, -0.0375772566, -0.1584518403, 0.1535346806, 0.1825587004, -0.1017275304, -0.2105156034, 0.0383108445, -0.0110319871, -0.2257738262, 0.0192267299, -0.2024908066, -0.0697758347, -0.0528025851, -0.0109869018, 0.0305770580, -0.1211487576, 0.1119272113, 0.1331376731, -0.2675102651, -0.0673212633, 0.0353632793, -0.0128125139, 0.0514543913, -0.0287351105, 0.0290428046, 0.1473939717, 0.1246659979, -0.0417910032, 0.1414352506, -0.1494342536, -0.0053850645, -0.0896443576, -0.0935032293, -0.1047714725, 0.0352775306, 0.0603322499, 0.1164693534, 0.0144557143, 0.1496555209, -0.0117408484, 0.0384133644, -0.1422658563, -0.0378854536, 0.0806376860, 0.1420830190, 0.0404676162, 0.0392047614, 0.0874647796, -0.0188614912, 0.0008581988, -0.0818464011, -0.1126414016, 0.0030103896, -0.0711657554, 0.0628511608, 0.0155439340, 0.0059563313, 0.0335783437, -0.2019958347, 0.1446536630, -0.1549451351, 0.0760783404, 0.1433975846, 0.0518356003, 0.0781120136, 0.0755820051, 0.1598706543, -0.0576339513, -0.0589700416, 0.2007626742, 0.1869726181, 0.0104307709, 0.1427151561, -0.0699000806, -0.0661341399, -0.0421496555, 0.0709053576, 0.1091449857, -0.0583019145, -0.0948440507, 0.0064203166, -0.0669888034, 0.1237745956, 0.1516391337, 0.0154753476, -0.3514958024, 0.0046370164, -0.0153252576, 0.2188357562, 0.0644242615, 0.0580106601, -0.0786360353, 0.0269060824, -0.1320061684, 0.1937780082, 0.0074396743, 0.0849840567, 0.0611000992, 0.1394725144, -0.2700898945, 0.0017380128, -0.2262377441, 0.0575400218, 0.1234070137, -0.1167363450, -0.1910241693, 0.1030565873, -0.0665236935, -0.0018558647, 0.1538429558, -0.2652480900, 0.0227997042, -0.1746435463, 0.0766223297, -0.0712821782, -0.0742039680, 0.1252156347, -0.0696792901, -0.2459836006, 0.0641743764, 0.0878237709, -0.0333470255, 0.0059209308, -0.0109261684, 0.0294756554, 0.0622800700, 0.1797083914, 0.0094724540, 0.1835319996, -0.1053005084, -0.0858819857, -0.0913622379, 0.0121695017, -0.1601064950, 0.2425388247, -0.0612712540, -0.0228728149, -0.1340940148, 0.1915171593, -0.1921550632, -0.0261721611, -0.0790605992, 0.0590086281, 0.0707057342, 0.1974823922, 0.0390418582, 0.1435084939, -0.1166732758, -0.0201371796, 0.0555838794, 0.0741895661, -0.0226911604, -0.1584675759, -0.0260174572, 0.1101947725, -0.0565542541, -0.1979745328, 0.1088732183, -0.0482843556, 0.1567186117, -0.0827848464, 0.0319143794, 0.0745227188, 0.0353992842, 0.1175602227, 0.1790138632, 0.1128548756, 0.0651828796, -0.0529735833, -0.0598900914, 0.0848982558, 0.1468291879, 0.0724193528, -0.1432267725, 0.0087402752, -0.1377970725, 0.0639404878, 0.0320134796, 0.0012862210, -0.0701923519, -0.0640456527, -0.1140808016, 0.1252135038, -0.0347448811, 0.0048137321, -0.2602299750, 0.2145089656, -0.0036909922, 0.2241675705, 0.1407191902, 0.1177247763, 0.1166551113, -0.1316270679, -0.1840392202, 0.0890898407, 0.0538183823, 0.0716694966, 0.0553354658, 0.0381731838, -0.0824986100, -0.0666884705, -0.0064108185, 0.1302845925, -0.2054152042, -0.1254871488, -0.2583551407, 0.1426246166, 0.0849119201, 0.0017642113, 0.0846235156, -0.2077278495, 0.1604450643, -0.1762846708, 0.1879888326, -0.0120406710, -0.0824863389, -0.0850347430, -0.0527178198, -0.1656451970, 0.1023647338, 0.1334953904, -0.0013399372, 0.0624614432, -0.0496800728, 0.0545336977, 0.1129322127, 0.0069961711, -0.0483636893, 0.0433343612, -0.0362018310, 0.0594707355, 0.1186416298, 0.0017352038, -0.2703026235, 0.1976264417, -0.0512695275, -0.0049706227, -0.1550896764, 0.1436575502, -0.1186305806, -0.0115024876, 0.0938091949, 0.0893203840, 0.0866251811, 0.0439939760, -0.0819020420, 0.1811109632, -0.1292537600, 0.1303478181, 0.1021880060, 0.0779193342, -0.0747316554, -0.1341795921, -0.2149765342, -0.0083544524, -0.1460217535, -0.1181997806, 0.0903635100, -0.0324610323, 0.2120227218, -0.2199258059, -0.0291931350, 0.0562781915, -0.0572802387, 0.1475320905, 0.1663213968, 0.1847015023, 0.1454467624, -0.1108341888, -0.0725609735, 0.0912392884, 0.1961993277, 0.1390037090, -0.2425514609, -0.0385749564, -0.0267489832, 0.0778881982, -0.0019342087, 0.0716446713, -0.0369802490, -0.1546242237, 0.0124152740, -0.0934840664, -0.0109675219, -0.1495793760, -0.0972674713, 0.1711932868, 0.1703865975, 0.1576005816, 0.1057957634, 0.0572493821, 0.1197520792, -0.1027197242, 0.0034734006, 0.0160522815, -0.0428191051, 0.1190947369, 0.0369499810, 0.0970738307, -0.1465225369, -0.0634205788, 0.0888820738, 0.0390259251, -0.2053604424, 0.0064945235, -0.1714330912, 0.1172206253, 0.0596858785, 0.0084885070, 0.0831786692, -0.2598524988, 0.2688398659, -0.1915080994, 0.1637363136, -0.0603430830, -0.0758299008, -0.0061823442, -0.1466431022, -0.1058581173, 0.0016267262, 0.1394294053, -0.0492926128, 0.0164418221, 0.0486280508, 0.1382077783, 0.0524976552, -0.0910143033, -0.0513667502, 0.0950942338, 0.0344211534, 0.1083161086, 0.1468071491, 0.1208866760, -0.2289749086, 0.1634910405, 0.0620900504, -0.0199836139, -0.0935974792, 0.1342963278, 0.0523707643, -0.0037031961, 0.0949849933, 0.1015953571, 0.1525610536, 0.0407191925, -0.0791982859, -0.0296206325, -0.0245992392, 0.0961510167, -0.0186477136, 0.0132136047, -0.1636101604, -0.0312506035, -0.2107349038, 0.0337772928, -0.1907328963, -0.0833291635, 0.0425914526, -0.0340149626, 0.1064112559, -0.0635485351, -0.0036354729, 0.0733894035, -0.0793613940, 0.0998679772, 0.0740175694, 0.0999641195, 0.1016571149, -0.1683368832, -0.1050249711, 0.0934039131, 0.0424030386, -0.1204439029, -0.1799620688, -0.0304231644, 0.0648911521, 0.1322793514, 0.0792718828, 0.0757758170, 0.0028816902, -0.2533041239, 0.0539487302, -0.1259258389, 0.0129488884, -0.2318954915, -0.0597997457, 0.0455988683, 0.1981668472, 0.1079919636, 0.1048386768, 0.1747664660, 0.0416153669, -0.0384117402, -0.0208083168, 0.1342926770, 0.0249202661, 0.0806979239, 0.0581046157, -0.0475079268, 0.0834141672, 0.0184554104, 0.0573644675, 0.0157860518, -0.1332426816, 0.0049316813, -0.0940554515, -0.0084022470, -0.0154361352, -0.1084968001, 0.0677739605, -0.0781566426, 0.0546083972, -0.0884524211, -0.0265255161, -0.0565063953, -0.0278625917, 0.0660529286, -0.2642171681, 0.0235195216, 0.1290745139, 0.0243451372, -0.0865033790, -0.0545592308, -0.0403885134, 0.1272706836, -0.1099906266, -0.1140817702, -0.2391277254, -0.0341566391, 0.0416001193, 0.0879914835, 0.1396891475, 0.1652743220, -0.0225472096, 0.1348246634, 0.0173020493, 0.0368538424, 0.0209812224, 0.0395101495, 0.0249456428, -0.0077166450, -0.0074969302, 0.1103057489, 0.0812843814, 0.0864178985, 0.1264385879, -0.0298985038, 0.0136880670, 0.0454342775, -0.1092899218, -0.0940496400, 0.0000071989, 0.1464442462, -0.1738977730, -0.0096908584, -0.1580569893, -0.1307825446, 0.0594307557, -0.0456531979, 0.1347957700, -0.0545828789, 0.0415124558, 0.1698174924, -0.0880415142, -0.0318060815, 0.1779022515, 0.0160479527, 0.0111252973, 0.0164026543, 0.0378523767, -0.0109220110, 0.1928356439, -0.0530068539, -0.1508240998, 0.0408926122, 0.0464785211, 0.1319650114, -0.0635655820, -0.0735254809, -0.1356994808, -0.1142316908, -0.1917299926, 0.0400422178, 0.0106520951, -0.0450861305, 0.0304380562, -0.0412027761, -0.0686827973, 0.0941352695, 0.0289066695, 0.1336323768, -0.0236905813, -0.1951485872, -0.0511322282, 0.2173807323, -0.0302496292, 0.0981433988, -0.0686047971, -0.0783637762, 0.0995751619, 0.0543896258, -0.1138911545, -0.1279309392, 0.0683844388, 0.0549433641, -0.1653306484, 0.0490153804, -0.0096037118, -0.1381415278, -0.0925616920, 0.0522986539, -0.0051793819, -0.0352152251, 0.0745845363, 0.1504934132, 0.0527180173, -0.0435265861, -0.3303731978, -0.0593043156, -0.0143144308, 0.0017783090, -0.0872672647, -0.1543392986, 0.0176031329, 0.1119457111, -0.1084105968, 0.0203595832, -0.0693870187, -0.0141195562, -0.0017789520, -0.0621712878, 0.1665341407, 0.0865689144, 0.0059016817, -0.0040315632, 0.0895438790, 0.1140543893, -0.0339989848, 0.0262127612, -0.0799940526, 0.0675683841, 0.1287506223, 0.1058964133, 0.2144183964, 0.1080496982, 0.0892137513, -0.0966560543, 0.0174088404, 0.0130211143, -0.0742659718, -0.0587347448, 0.0918790177, 0.1246473491, -0.1794425249, -0.0687739104, -0.1599556357, -0.0304868314, -0.0402070507, 0.0131659312, 0.0017819809, 0.1187735870, 0.0355537422, -0.0380138382, 0.0181089137, -0.0133503526, 0.0440448225, 0.0044565503, 0.0160222426, 0.0763557851, 0.0609336942, 0.1431159675, 0.1083106846, -0.1568329483, -0.0948198587, -0.0328796171, -0.0431101061, 0.1778537631, -0.0603190400, 0.0357140452, -0.0400183722, -0.0533369817, -0.1540843546, 0.0116830366, -0.0875096694, 0.0241207965, 0.1370153129, -0.1354276538, 0.1736299694, -0.0377425440, 0.0065275934, -0.0242333990, -0.0306537431, -0.1013188139, 0.0156032741, 0.1804400682, 0.0255289935, 0.1551634967, 0.0134989209, -0.0714555457, 0.0574827828, 0.0479293987, 0.0189244244, 0.0739813894, -0.0953268036, 0.0331337228, -0.1050833911, -0.0020285167, 0.0258715209, 0.0053566755, -0.0781107247, -0.0757833123, -0.0991935953, 0.1082245037, -0.1093907580, 0.2469634861, -0.0467456244, 0.1179466620, -0.0100732148, -0.0294108987, 0.0124491015, -0.1093717515, -0.0375141911, -0.0981221497, -0.0537347794, -0.1588066816, -0.1736788154, -0.1637718827, 0.0558114611, -0.0730176196, -0.0113864755, -0.0247452129, 0.0148976920, 0.0290283337, -0.1368058622, -0.0692767575, 0.0848205388, -0.0065689879, 0.1132737845, 0.0146738980, 0.0105628632, 0.1128850505, 0.0302220769, 0.1067660451, 0.1731689423, -0.1357194036, -0.0616401136, -0.0143242935, -0.0228059161, 0.0832265317, -0.0814663619, 0.0989480168, -0.0228198990, 0.0625182167, -0.0984900594, -0.0049763522, -0.1604903489, 0.0302442424, 0.0171596128, 0.0083559910, -0.0808744133, 0.0690571740, -0.0194896404, -0.0283919964, -0.0136471856, -0.1888826936, 0.0253616516, 0.0815219730, 0.0474428385, -0.0242125560, 0.1774541140, 0.1155671701, -0.0402107984, -0.1531080604, -0.0843045339, -0.1641323268, -0.0345864780, 0.0252227318, -0.0218120720, 0.0275735538, -0.1889539957, -0.0177764408, -0.0114823980, 0.0576543100, -0.0088841412, -0.0705550015, 0.1119858101, -0.1583726555, 0.1378291547, -0.0251335278, 0.0771360397, 0.0443992242, -0.0662760586, -0.0362125821, 0.0043767956, 0.2718192935, 0.0097838193, 0.0528040081, 0.0111615350, 0.0823183432, 0.1152176037, 0.0701011643, 0.0915553272, 0.1393576413, -0.0513692126, 0.0130998855, -0.0647625104, 0.0567468181, 0.0765744746, 0.0553934760, -0.1924641132, -0.0445754938, -0.0773320124, 0.1181779876, -0.0366416499, 0.0410539694, 0.0542267226, 0.0352484807, 0.1843271405, -0.0421980582, 0.0505506918, -0.0543157645, -0.0192726143, -0.0608529337, -0.2078433335, -0.2155422121, -0.0641364902, -0.1553156227, -0.1047981009, -0.1072116345, 0.0493629500, -0.1061557382, 0.0156328846, -0.1151003540, -0.0813308582, -0.0434588976, 0.0123114092, -0.1552292556, -0.0124746356, 0.0316025354, 0.1096442863, -0.0638982132, -0.0219832454, 0.1659790277, 0.0482817590, -0.1768555343, -0.1543453932, -0.1416108310, -0.0141472220, 0.1584729850, -0.0234526824, 0.2172587365, 0.0171648469, -0.0078443736, -0.1922766417, -0.0281201228, -0.1289610565, -0.1681216955, -0.0882655531, -0.0646254793, 0.0244356282, 0.1068355069, -0.0898346379, -0.0859953389, 0.0313080400, -0.1122737750, 0.1333585232, 0.0342970565, 0.0368545316, 0.0456233546, 0.0914310515, -0.0299258456, 0.0190098770, -0.0047729108, 0.0362130515, -0.0279173926, -0.0767613500, -0.0432624742, 0.0571990721, -0.0046303561, -0.2365453243, -0.0112080202, -0.0621054173, 0.1152331233, 0.0588632673, -0.0979350582, 0.1270977408, -0.0039657261, 0.0853007585, 0.0248722490, 0.0851157308, 0.0056581912, -0.0062586740, -0.1027697772, -0.0340346135, 0.1971331090, 0.0550669916, -0.0555999801, -0.0756419003, 0.1414400041, 0.0051704212, 0.0217976868, 0.0508825108, -0.0773092061, -0.0670800582, 0.0242932867, 0.0280417502, 0.1100654677, 0.0350895859, -0.0443092957, -0.0779306516, -0.2206417918, 0.1213628352, 0.0452550352, -0.0952796936, 0.1088244915, 0.0147896055, 0.0073622470, 0.3723132312, 0.1414880306, -0.0769180059, -0.0483718254, 0.0323221050, -0.0599908940, -0.2085158080, -0.2553943992, -0.0105555346, -0.2194888294, 0.0500747375, -0.0379434079, 0.1621545702, -0.2261111736, -0.0545253679, -0.1559415758, -0.0788267702, 0.0142565127, 0.0595189147, -0.0820546299, -0.0451247357, 0.0564417802, -0.0019936196, -0.0931822434, -0.1302032769, 0.0020910176, 0.0469046608, -0.1685702950, -0.0180468000, -0.2338784784, -0.0051300838, 0.0675713867, 0.1073516011, -0.0508173890, 0.0616087727, 0.1858539283, -0.0564492084, 0.0066125728, -0.1380358934, -0.0871543884, -0.0809266567, 0.1282282621, -0.0399620496, 0.1148491949, -0.1361773163, -0.0914544687, 0.1535550505, -0.0688713938, -0.1368396133, 0.0277419500, 0.0139889959, 0.1317848414, 0.0760814399, 0.0070670242, -0.0471631810, -0.0408676676, 0.1512296349, 0.0326098539, -0.0576667339, -0.0534515418, 0.0582793206, -0.0314227119, -0.3536792397, -0.0586731434, -0.0574628264, 0.1303535849, -0.0607642122, -0.0823948011, 0.0894084200, -0.1749996394, 0.0524532981, 0.0000892202, 0.1002696827, -0.0520120487, -0.0295963008, -0.0120157190, 0.0738153905, 0.1206067577, 0.0635071248, -0.1150520891, -0.0129317148, 0.0363004953, -0.2710052431, 0.0493535809, -0.0512094833, -0.0911280066, -0.0132926628, 0.0199860632, 0.1328625977, -0.0062200278, 0.0732997954, 0.0735962391, 0.0523833595, -0.2186181843, 0.0034990960, 0.0494330563, -0.1806771010, 0.0126047526, 0.0623014495, -0.0495290048, 0.1824131012, 0.1039482802, 0.1010643914, -0.1648002267, 0.0660801604, -0.1690485030, -0.2279610783, -0.0515562780, -0.0046093455, -0.2471402287, 0.0383440927, -0.0115776258, 0.1343262643, -0.1141900718, 0.0568407550, -0.0055662347, -0.0736459270, 0.1106222793, 0.1147190258, -0.1601695120, -0.0558453910, -0.0258146562, 0.0680163428, -0.2256354094, -0.0977708027, 0.0037833841, 0.2333071232, -0.0194034502, 0.0965045094, -0.2823841572, 0.0284878947, 0.0556194186, 0.1781253219, 0.0441967174, -0.0370375253, 0.2039024830, 0.0500970557, -0.0559761152, -0.0511687100, -0.0639607161, -0.0215662476, 0.2174480259, -0.0170623623, 0.1648365706, -0.0729963630, -0.1375954300, 0.1022981629, -0.0547796227, -0.0208290461, -0.0072449585, 0.0040463777, 0.0572118647, 0.0962311178, -0.0393347330, -0.0685828105, 0.0478543118, 0.1873258203, 0.1027583182, -0.1469082832, -0.0318407677, -0.0019119426, 0.0350337811, -0.1640322357, 0.0184902027, -0.0196876246, 0.0337575115, -0.0188554153, -0.0546960235, 0.0274303183, -0.1321046501, 0.2450882941, 0.0116811227, 0.0561657548, 0.0490527861, 0.1033190861, -0.0007618431, -0.1153822169, 0.0624824353, -0.0075213341, -0.1253332794, 0.0691423938, -0.0466855951, -0.2061318904, -0.0008831356, -0.0618197843, 0.1072036028, 0.0171619635, 0.0117143989, 0.1239029840, 0.1894427389, 0.1215646490, -0.1344993263, 0.0043802080, -0.1753706038, -0.0478962697, 0.0485824533, -0.0750222281, 0.0502080694, 0.0301868115, 0.1180173829, 0.1017391607, -0.0549881905, 0.0113747371, -0.1412124634, -0.1010169461, -0.0209439732, -0.3424943388, 0.0496803559, 0.1851563156, -0.0476531871, 0.0532758050, 0.1196414232, 0.2302774042, 0.0627766997, 0.2408915311, 0.0451970287, -0.0850270241, 0.0997290090, 0.0653696433, -0.0359087810, -0.1092135310, 0.0010956724, 0.0111246472, -0.2307531089, 0.0217898469, -0.0225336272, 0.2925074399, 0.0658907816, 0.0396638326, -0.2121298462, 0.0261328276, 0.0477717407, 0.0053231367, 0.1127003431, -0.1207845658, -0.0199309327, 0.1491855830, -0.1009568349, -0.0261231586, 0.0189871453, 0.0044304072, 0.2025446743, 0.1441420466, 0.1809443533, -0.0170047395, -0.1843658090, -0.1846686900, -0.1076619402, -0.0581344180, -0.0037441633, -0.1285675466, -0.0963498577, -0.0982548818, 0.1004672721, 0.0381012596, -0.0517275184, 0.1154367998, 0.1099369451, -0.0039016053, -0.0774169639, -0.0134184519, -0.1098430976, -0.3047848046, -0.0151219023, -0.0444177240, -0.0768688172, -0.0425764918, -0.1850293875, 0.0526598208, -0.1344319433, 0.1431755871, 0.0146983601, 0.0107473377, 0.0653190017, 0.0525706038, 0.0575790964, 0.0887924060, -0.0562663451, -0.0334666781, 0.0399370939, 0.0426293835, -0.1091656983, -0.1450751871, 0.0528371073, -0.0489147417, -0.0678334534, -0.0446299091, 0.1306554824, -0.0466954000, 0.0740945488, 0.0609807633, -0.2372350395, -0.0579125993, -0.2122388035, -0.1023143008, 0.0445791744, -0.0938093141, 0.0253214370, -0.0181097891, 0.0547482669, 0.0982179940, -0.1103119776, 0.0420619771, -0.0454386882, -0.0167709384, -0.0617022812, -0.2986100614, 0.0129612507, 0.1265414804, -0.0901229158, -0.0046525034, 0.0161114037, 0.0955779180, -0.0081701819, 0.1486832052, 0.0846521854, 0.1276988238, 0.1020471305, 0.1715876013, -0.0767128766, -0.0946352109, 0.0349672958, 0.0789513811, -0.1180825755, 0.0786925778, -0.0595677383, 0.1343867928, -0.0521555096, 0.0924065337, -0.1684807539, 0.0624357909, 0.0173431169, 0.0260914676, 0.0772230774, -0.0174242798, 0.1130875945, 0.1679078788, 0.1436226219, 0.1069800779, 0.0956714600, -0.0113204429, 0.2284010202, -0.0005585140, -0.0427090786, 0.0672592893, -0.2297475636, -0.1331950724, -0.0405013338, -0.0679505244, -0.0417786166, -0.0685598329, -0.0559595861, -0.1472786516, 0.0471249707, -0.1041950658, -0.0751027688, 0.0462435111, -0.1706484407, -0.0187206212, 0.1980531961, 0.0001741425, -0.1899537891, -0.2351684719, -0.0466754586, 0.0023858398, -0.0810350031, -0.0314174108, -0.1170002371, -0.0272956435, -0.1788358986, 0.0862249732, 0.0058848173, -0.0139956763, -0.0566946566, 0.0598010831, 0.1214990914, 0.0447823815, -0.0099807503, 0.0028673173, -0.0464988947, -0.1080684811, -0.1543835700, -0.1779330969, 0.1354872733, 0.0215582922, -0.0064519192, 0.0598976985, 0.0484803133, -0.0344883427, 0.0284849759, -0.0789077207, -0.1827609986, -0.1394007653, -0.2751973867, 0.0073853703, 0.0932021663, -0.0131524876, 0.0316477008, 0.0340094119, 0.1494540423, -0.0967217833, -0.0624622591, 0.0309051145, 0.0483884625, 0.0602142774, -0.0253523421, -0.3253709972, -0.0464798696, 0.1786334366, -0.0355381183, 0.0157542005, 0.0930404365, -0.0680390447, 0.1580277085, 0.0349786170, 0.0373573117, 0.1903724521, -0.0056791641, -0.1090394855, 0.0477822497, -0.0096943490, 0.0973200276, -0.0268400777, -0.1721557975, -0.0587137118, -0.0530185066, 0.1339013875, -0.1104619130, 0.1932908297, -0.2086849213, -0.0723619014, -0.0396244004, -0.0082818065, 0.0610136911, 0.0612332262, 0.0737771392, 0.0665147454, 0.1242454275, 0.1111613512, -0.1452874392, -0.1280940026, 0.0019736271, 0.0014496631, -0.2372561693, -0.0775218382, -0.0537600778, -0.1303340048, -0.0752111599, -0.0349721573, -0.0657714084, 0.0622738227, 0.0995006785, -0.1005352139, -0.1323819458, -0.1666535586, 0.0997928083, 0.1921067834, -0.1362790465, -0.1575776786, 0.1946628839, 0.0677140877, -0.1600345075, 0.0598639660, 0.0791195557, 0.2446042001, -0.2691756487, -0.0423821472, 0.2049437463, -0.0460849740, -0.2134813368, -0.0212518126, -0.1130114421, 0.1581072658, 0.0913191214, 0.0903582200, 0.1284798682, -0.1056362391, -0.1250367612, 0.0661888421, -0.0890181586, -0.1422999799, -0.2294041067, -0.1235675365, 0.1355344951, -0.0339186713, 0.0579756647, 0.2443408668, -0.0127990199, 0.0850284398, 0.1200155094, -0.0677548572, 0.0357590653, -0.2035565823, -0.0935726911, 0.0075239264, 0.0094622504, -0.1395033598, -0.1381561607, 0.2350984663, -0.0820817500, -0.1026573405, -0.2826172411, 0.0057070311, 0.0092572831, 0.1478836089, 0.0679775402, -0.2596675754, 0.0656483024, 0.1597144604, 0.0006485358, -0.0327496119, 0.2975520492, -0.1410706639, 0.1970718801, -0.0430285409, -0.0647208914, 0.0176936686, 0.1513344347, 0.1180620566, 0.1039248779, -0.0289149359, -0.0347882286, -0.1334858388, -0.0606957525, 0.0629935861, 0.0209420137, 0.1389880180, 0.1420288384, 0.2602383196, 0.1643891037, 0.0030947786, 0.0264690965, 0.0751345977, 0.0363657251, -0.0811977610, 0.0597885996, 0.1200774461, 0.0585334226, -0.1025366932, -0.2836306691, -0.0839463472, 0.1235366091, 0.0550785288, -0.2727017999, -0.0306144170, 0.2040038705, -0.0577889085, -0.1384502947, 0.0530865714, -0.0625252575, 0.0603021681, 0.2009941638, -0.1699136496, -0.2111587822, -0.1343384534, 0.1366400272, -0.0544366539, 0.0209966525, -0.0546908081, 0.1464470029, -0.2187330127, -0.1919281632, 0.2024173886, -0.1335685253, -0.0226284489, -0.0858213231, 0.3361268640, 0.2008719891, -0.0576631911, -0.0461270064, -0.0011928014, 0.0240976159, 0.1690388769, -0.0103900535, 0.0489756316, -0.1154658422, 0.0586107560, -0.0806695148, -0.0792468935, -0.1481864750, -0.1759939939, -0.0195292328, 0.0011434158, 0.1491631269, 0.0856133103, 0.0470965244, 0.0234075654, -0.0788747594, -0.1603097618, 0.0543703437, -0.1638841927, 0.0170678515, -0.2544509172, 0.0710856691, 0.1772100776, -0.0373883136, 0.0822788328, -0.1396664381, 0.0797591805, -0.1316982806, -0.0363254398, -0.0540948771, -0.0129259434, -0.0067506479, -0.2985615134, 0.0208758879, 0.1062601134, -0.0290223733, -0.0058232807, 0.0135251740, 0.0294122845, 0.0247056931, -0.0615712926, 0.1791574657, -0.0205540843, -0.1315173805, 0.0722320229, 0.2082151026, 0.0013366921, 0.1416760832, -0.0619777404, -0.1822138429, -0.1911962926, -0.0596293621, 0.2153922170, 0.0541509688, 0.1073768437, 0.0172919165, 0.2687273622, -0.0288220067, -0.1718141288, 0.0340318941, -0.2744195163, 0.0471122302, 0.1189304590, -0.0407439545, 0.0136777135, -0.0548588149, -0.1400850713, -0.2160792798, 0.0688900501, 0.0028509835, -0.0503779724, -0.0027997505, -0.0275520794, 0.0099952351, 0.0928215384, 0.0218457561, 0.1730332524, 0.1025414616, -0.0081407679, -0.0454696119, -0.1283998638, 0.1060110033, -0.0254197419, -0.0753300488, -0.2153825909, -0.1448875517, -0.2604534626, -0.0019491789, -0.0723724365, -0.1032889485, 0.2714611292, 0.0822744071, -0.0982773975, 0.2004316449, 0.0134246154, -0.0426664390, -0.1774683446, 0.0455701500, -0.0192973074, 0.0395824164, 0.1312978119, 0.0742337108, 0.1599436998, 0.0328833908, -0.0856901631, -0.1202643588, 0.0411975011, 0.0292964149, -0.0867227092, 0.0256160796, -0.0536319688, 0.1683011204, -0.0250595491, 0.0802948847, 0.1230828613, 0.0239338521, 0.1017012820, 0.0846165419, -0.1503181010, -0.0502227992, 0.0504218265, 0.0870095342, -0.0543842278, -0.0542136542, -0.0532782748, -0.0269845985, 0.0353413187, 0.2279902995, 0.0213182941, -0.0193480104, -0.2003496140, 0.0542032532, -0.0156089896, 0.0586016886, 0.1170170754, -0.0999816954, 0.0342300683, -0.0096047325, -0.0267268494, 0.1574895680, -0.0390177444, 0.0668442473, 0.0001210787, -0.1861924827, -0.1867695153, 0.1989531815, 0.1757197827, 0.3635022342, -0.0410287119, 0.0268641859, -0.1534522176, 0.1085082069, 0.0521417446, -0.0327320173, 0.0796350613, 0.0290677790, 0.2708106339, 0.0825405046, -0.1309287101, -0.0866056532, -0.1719267070, 0.1727538109, 0.1959668249, 0.0006421387, -0.1154117957, 0.1879116148, -0.0367334560, 0.0517942831, -0.1060620174, -0.1303085685, 0.0632700846, -0.1946754158, -0.1503015608, 0.0732671693, 0.0869129300, 0.0513114929, 0.0601373352, 0.1317899674, 0.2443038374, 0.1166107059, -0.0541961454, -0.0400473475, 0.0375085548, -0.0355448015, -0.2303501219, -0.0586716868, -0.0779613778, 0.1344566345, 0.1210050285, -0.1184248850, 0.1471282542, -0.0617326796, 0.0073918835, 0.0822610557, 0.0329050161, 0.0740319192, -0.0130762933, 0.0256432071, -0.1657822132, -0.0195439979, 0.1238126457, 0.1607125700, 0.0983078182, 0.0711011812, -0.1349671185, -0.1150976717, 0.0242408812, -0.0064438693, -0.2002420723, 0.0770233497, -0.0426759981, 0.0832756162, -0.0331765115, 0.1637029946, 0.1488419771, 0.1602775753, 0.0514651015, 0.2369861901, -0.0159435868, 0.0556410998, -0.0881640762, -0.0237104222, 0.1250096709, -0.0656294301, 0.1356607527, -0.0945373550, 0.0461008474, 0.0381161496, 0.0373531953, -0.0132376105, -0.1225966513, 0.0936467946, 0.0139509048, 0.1939885914, 0.1387663037, 0.0738880485, -0.0546197556, -0.0305849500, -0.2113371342, 0.1247290522, -0.0681692436, 0.1001135260, 0.0120065752, -0.0247512516, -0.0954749808, 0.2228544801, 0.2200336605, 0.1561813653, 0.0356367044, -0.1190377995, 0.0325728059, 0.0174586065, 0.0062613646, 0.0306503978, -0.0596581623, -0.0539644025, 0.0088227913, -0.0292899590, -0.0867343917, 0.0170239508, -0.0537541807, 0.0087621827, 0.0342128202, 0.0866734684, 0.0317440927, -0.0026775056, -0.0017656494, 0.0748834312, 0.0186333936, 0.0251351614, -0.0697879717, 0.0740317479, 0.0586118288, -0.0801213011, 0.0365217030, -0.0494528897, 0.0090229288, 0.0252113994, 0.0478347093, 0.0113801360, 0.0452235788, 0.0603557006, 0.0093188584, -0.1233667731, 0.1130127162, -0.0071266466, 0.0378075577, -0.0014421807, 0.0899459049, -0.0264009945, -0.0499646477, 0.0703033805, -0.0706826001, -0.0564724691, 0.0354697853, -0.0363823771, -0.0216422584, -0.0040731407, 0.0452666171, -0.0733805597, -0.0475848988, 0.0139800236, 0.0819884390, 0.0701498091, -0.0630639717, 0.0357137360, -0.0702517927, -0.0685255826, -0.0042074905, -0.1062480882, 0.0642977953, 0.0779244006, 0.1182850599, 0.0665069520, 0.0467502475, 0.1014365628, 0.0481314212, -0.0777436942, 0.0281609483, 0.0068748966, 0.0256153420, 0.0581457168, -0.0326438248, -0.0335453413, -0.0545982048, 0.0732928589, 0.0741909742, 0.1318335086, -0.0420016982, 0.0931742191, -0.0104893520, -0.1095816270, 0.0332867466, -0.0298231486, -0.0900510922, -0.0414530635, -0.0252825096, 0.0432989746, -0.0571434125, 0.0454813987, 0.0104210004, 0.0019777343, -0.0058440566, -0.0405852385, 0.0876795575, 0.0101120695, 0.0106885014, 0.0310693830, 0.0155402515, -0.0161736142, 0.0550341345, -0.0304244217, 0.0123808263, 0.0749099627, -0.0176345408, 0.0420049503, 0.0650562719, 0.0557718463, -0.0319808982, 0.0490945280, 0.1130048931, -0.1099117547, -0.0954151526, 0.0224338844, 0.0303897485, -0.0581545383, 0.0266204365, -0.0555268824, 0.0868145823, 0.0356204361, 0.1135893837, 0.0761644468, -0.0541488342, -0.0604557991, 0.0340468399, 0.0136532858, -0.0068936041, -0.0340736881, 0.0349175744, -0.0445589609, 0.0415208451, 0.0083351210, -0.0127173224, 0.1100690663, 0.0246156994, 0.0383167006, -0.0006246268, 0.0648324266, -0.0326390192, -0.0458587557, 0.0030162670, -0.0361184254, 0.0630181879, -0.0729019493, -0.0876547173, -0.0692177266, -0.0043870970, -0.0957237408, 0.0496806353, 0.0134158386, -0.0781585053, -0.0166647434, -0.0134851327, -0.0257406291, 0.0196941439, 0.0290796570, -0.0328822210, -0.0168144703, -0.0373739414, -0.0493415929, 0.0159138050, -0.0340967029, 0.0419484153, 0.0845027864, -0.0313214660, 0.0294260420, -0.0447120182, -0.0061385799, -0.0540164188, 0.0792989805, -0.0213349573, -0.0485464633, 0.1257911772, 0.0620627813, -0.0471836329, -0.0183118619, 0.0121274227, -0.0161965769, -0.0777195022, 0.0181625281, -0.0227217171, 0.1303724051, 0.0391128734, -0.0104332929, 0.0940990299, 0.0637508705, 0.0740337595, -0.0197994094, -0.0897068009, -0.0205158684, 0.0268240757, 0.1043974161, 0.1832557619, -0.0220009349, -0.0530094355, -0.0496644340, -0.0548219495, -0.0980265886, 0.0679558292, 0.0094267558, 0.0672804043, -0.1460410357, 0.0430361442, 0.0657298267, -0.0163894892, 0.1173823550, 0.0345225483, -0.0277227405, -0.0064959303, 0.1723627299, -0.0413033329, -0.1019678786, -0.0645833090, -0.0386807807, 0.0732656196, -0.1119650304, -0.0172068197, -0.0648995265, 0.1132921800, 0.2098497152, 0.0952489525, 0.0725195184, 0.0037594407, -0.0200478602, 0.0270443987, 0.1004570052, -0.0710559785, -0.0684797391, -0.0842731595, -0.2092355043, -0.1042518392, 0.1644109339, 0.0387055241, 0.1805557758, -0.0216903426, -0.0091098947, -0.0760973543, -0.0125042610, -0.0130113875, 0.0062193451, -0.0662312210, -0.1119989827, -0.0095108794, -0.0469400175, 0.0740809292, -0.0723700076, 0.0074627320, -0.0076301349, 0.0133914733, -0.1012892947, -0.0201332960, -0.0372011550, 0.0554131493, -0.0245300606, 0.0223915093, -0.1378709078, 0.0773348957, -0.0565210171, -0.0563406460, -0.1361302286, -0.0376116931, 0.1059822142, 0.1004055962, 0.1608567089, -0.0664857775, 0.0480453819, 0.0167922135, 0.1152449399, -0.0336509421, 0.0671110600, 0.0912171826, 0.0921744704, 0.0707561523, -0.0236803014, 0.0439005457, -0.0834824145, -0.1367524117, 0.0037373928, 0.0284709428, 0.0085029602, -0.0821724534, 0.2661085725, 0.1341440082, -0.0025544958, 0.0008270192, 0.0494028889, 0.1104535833, 0.0494592302, -0.1302528381, 0.1733694375, -0.0060591190, 0.1005416363, 0.2452738434, -0.0308720767, -0.0266189128, 0.0824641287, -0.0334973373, -0.0781440362, 0.0357576013, 0.1582809538, -0.0203943513, -0.1018765867, 0.1809740365, -0.0431838073, -0.0441123135, -0.1325632781, -0.0366183408, 0.0834719166, 0.0362750292, 0.0243555512, -0.0300512891, -0.0170740820, -0.1858444810, 0.0477626026, 0.0971437320, -0.0772984847, -0.0031991743, 0.0943979770, 0.0019843788, 0.0722715780, -0.0234743170, -0.0006541308, 0.0770310163, 0.0055522788, -0.0142798536, 0.0532303527, 0.1131580845, -0.1359517723, 0.0180488601, 0.0019209008, 0.0119701009, 0.2129591405, -0.0499213301, -0.0576894358, -0.1828125119, 0.0340660661, -0.1854177713, 0.1567820907, -0.1393909305, -0.1241652444, -0.0199122485, 0.0514730886, 0.0347536393, 0.0325571708, 0.0538651124, -0.1772504002, 0.0194866993, -0.0577917956, -0.0112393880, 0.1024987400, 0.1330350339, -0.0656342283, -0.1238851696, -0.0209918264, -0.1140971705, -0.1944133043, -0.0670678467, -0.0147624975, -0.0981687456, -0.0454546101, -0.1000340059, 0.0104324268, -0.0058498601, 0.1351836622, 0.0316386148, -0.0748300105, -0.0918120220, 0.0170434974, -0.0228485614, -0.0066155139, -0.1484791785, -0.0092996685, 0.1213441789, -0.1443557739, 0.0846812874, -0.0263595004, 0.0648934096, 0.0577962212, 0.1945088804, -0.0058018826, -0.1685919464, 0.0381240994, -0.2283718884, 0.2272022814, -0.1587114036, 0.0102141453, -0.0512553118, -0.0867106393, -0.0186164994, 0.0007388114, 0.0147741279, 0.0498373210, 0.0194229484, 0.0667672604, -0.0119398506, 0.1321320087, 0.0247311611, 0.0295756571, 0.0418100543, -0.1000129506, 0.0024067282, 0.0195730180, 0.1586474031, -0.0153505085, -0.1235055551, -0.2372447699, 0.0461341739, -0.0199427437, -0.0463193394, -0.0145676676, -0.1194434613, -0.1242201328, -0.1797962934, 0.1801065803, 0.1905238479, -0.1075621843, -0.0212438144, 0.1372380108, -0.1873495132, 0.0215373430, -0.0067779073, 0.0996849090, -0.2147122324, -0.0314651951, 0.0328083448, -0.0723422468, -0.0511371046, -0.1555084884, 0.0288782232, -0.1814232022, 0.1757923216, 0.1418661922, 0.0024608071, -0.1185327396, -0.1256057918, 0.1184249073, -0.2457015514, 0.1511183530, -0.1488864124, -0.0214277320, -0.2113848329, 0.0075023198, -0.0363019444, -0.1353655308, 0.0614154451, -0.1084110141, -0.0355760641, -0.2393495291, -0.1172095686, -0.0063860198, -0.0394005962, -0.0227562431, 0.0119936774, 0.0619330555, -0.0338776223, -0.0431176499, 0.0072239069, 0.0103352005, -0.0130136581, 0.0183093231, 0.0267475080, -0.0162769854, -0.0272934958, 0.0786272958, -0.1109088212, -0.0192950778, 0.0416253805, 0.1879842877, 0.0975774974, 0.0867947116, -0.0986085758, -0.1017523259, -0.0974996313, 0.0745226592, -0.1323974878, 0.1037535816, -0.0473425388, 0.1186885014, 0.1253518760, 0.1089549586, -0.0501065776, 0.0608660057, 0.0693000033, 0.0689045414, -0.0858960599, 0.0809427574, -0.1045425758, -0.0390876606, 0.1102761254, 0.2010038346, 0.0846348703, -0.0180029199, 0.1758902520, 0.0772163719, 0.0420682058, 0.1378072798, 0.1185153499, -0.0585726202, 0.0708805174, -0.1172413081, 0.0826787874, 0.0805626735, 0.0242187493, -0.0468301028, -0.0359908305, -0.4392690063, 0.0875912160, 0.0747912154, 0.1454921812, 0.0079832459, 0.0886439532, -0.3301897645, -0.0746822581, 0.1990741342, 0.2056847811, 0.0990654454, -0.0148274545, 0.1147722304, -0.2435797751, 0.0619243868, -0.1800067574, -0.0276471823, -0.0911441743, 0.0340216756, 0.0191790946, 0.0471886508, -0.0183628947, -0.1803737283, 0.0582272336, 0.1043131799, -0.0110945115, 0.0962275416, -0.0405764803, -0.1771385074, 0.0252910201, -0.0547884889, -0.0898753926, 0.1684781909, -0.0544965975, 0.0372465961, -0.0851619765, 0.0303431060, 0.0880734921, 0.0682788640, 0.2218031436, -0.0508111306, 0.0541094840, -0.2400521785, -0.2758879662, 0.0460921749, 0.0272597466, -0.1127858683, 0.0975796878, 0.0249648951, -0.0800587311, -0.2335962504, 0.0056723752, -0.1243150681, -0.0731588826, 0.1738229990, -0.0601342581, -0.1281423867, 0.0272839274, 0.0534485765, -0.0368977487, -0.0559827313, 0.0187959038, 0.2617253661, -0.0243747402, 0.1939658374, -0.0527649969, -0.1756592840, 0.0934848487, 0.0301575232, 0.0306959096, 0.0085832542, -0.1540685594, 0.0582827590, 0.0260049049, 0.1470393836, -0.0239338744, -0.0844080448, 0.1238167882, 0.0344757065, 0.0118768187, 0.1483010203, -0.1869260967, -0.0113447811, 0.0665476769, 0.1202181876, 0.1909234226, -0.1164937913, 0.0034168523, 0.0841902792, 0.1155133396, -0.0497437231, -0.0842323750, -0.0042088367, 0.0420539305, -0.3076870441, 0.0779379457, 0.0761409029, 0.0262004267, 0.0037705444, 0.0287896916, -0.2509948313, 0.0081773279, -0.1067325175, 0.0282811727, -0.2581967711, -0.0887317285, -0.1985618770, -0.1799262613, 0.0060317600, 0.1072661802, 0.0496426076, -0.0964463800, -0.1313256621, -0.2596215308, -0.0256435703, -0.0568809025, 0.0858720914, -0.0576774292, 0.0906862020, -0.0849049464, 0.0645522326, 0.0583131127, -0.0630333200, 0.0145551292, -0.0909087881, -0.0887512937, 0.0846456811, -0.1248686388, -0.2105826139, -0.0740566254, 0.0935803354, -0.0921178758, 0.0666527823, 0.0445847213, 0.0242117569, -0.0011459171, -0.0893928334, 0.0891233683, 0.0077922191, 0.1928374916, -0.2159980983, 0.0128190778, -0.2121139467, -0.1144244298, 0.0690828785, -0.0060213329, -0.0756496042, -0.0380551703, -0.2404001355, 0.0784934983, -0.2199636549, 0.0014753677, -0.0459917560, -0.0207530316, 0.1059228182, -0.0608065650, 0.0264872275, 0.0548640229, 0.1143301353, 0.0414638370, -0.0716150105, -0.0359411985, 0.1621289700, -0.0125696901, 0.1521655172, -0.0686694533, -0.2574180067, 0.1273546368, 0.0721505433, -0.0210274402, 0.1046610251, -0.0016524912, 0.1371496022, -0.0417357385, 0.0221616365, 0.1294982731, -0.0742780194, 0.1230845526, -0.0590395965, 0.0449517332, 0.1304888725, -0.0778002515, -0.0676390976, 0.0869658440, 0.2089949846, 0.0334683545, 0.0061152414, -0.0158107616, -0.0717702657, 0.1127215549, -0.0674965978, -0.2061152756, -0.0105100516, -0.0664281845, -0.0642135739, 0.0179393999, 0.0794765577, 0.0457863547, 0.0885520205, 0.0597634315, -0.2010762095, -0.0088535929, -0.0827518255, 0.1895896196, -0.3143209219, 0.0162783861, -0.1907420903, -0.1108485982, 0.1200920194, 0.1566976309, 0.1010075957, -0.0512496717, -0.0782686546, -0.3902617097, 0.0202336553, -0.2021669894, 0.1418895721, -0.2068191767, 0.0494635999, -0.0051825033, 0.0169614516, 0.0495070256, -0.1909294426, -0.0016596797, -0.0733267963, -0.0354477465, 0.1166988313, -0.2208949178, -0.1394703686, -0.0459045582, 0.0208778046, -0.0013272150, 0.0730021670, 0.0508694202, -0.0247953124, 0.0467353538, -0.1137789935, 0.0565884598, -0.0863464624, 0.1348919570, -0.0529398769, 0.0550844297, -0.2186054587, -0.0791178197, -0.0802635774, 0.0456702039, -0.0693722516, 0.0144246910, -0.1443649977, 0.1435139775, 0.0176068097, -0.0449766368, -0.0124376751, -0.0735898092, 0.0878429115, -0.0884642228, 0.0571765602, -0.0650404543, 0.0735434592, 0.0286150612, -0.0203099251, -0.0982664227, 0.0846398622, -0.1471191794, 0.0540936776, -0.1325377524, -0.3138532639, 0.1450064480, 0.1106925085, -0.1404484361, -0.0283402968, -0.1455377489, 0.1068044603, 0.0490510166, 0.0044600158, -0.0457668193, -0.1455209106, -0.0713685751, 0.0023552829, 0.1876768172, -0.1044297144, -0.1283629388, -0.0799897164, 0.0110871810, 0.1355173290, 0.2247165143, 0.0164333601, 0.0663883835, -0.2366071641, 0.1565076113, 0.0444635786, -0.0926268548, -0.0484628379, -0.0692732111, 0.0096628359, 0.0565710850, 0.0095461495, -0.1120414138, -0.0480160154, 0.0975253284, -0.1937474757, 0.0249176584, -0.1279442906, 0.2566926181, -0.4352845252, 0.0858456269, -0.0035545691, -0.0086378502, 0.1431808025, 0.1736105829, 0.0867962986, 0.0430800728, -0.0841035396, -0.3002595901, 0.0107177040, -0.0982664973, 0.1654186249, 0.0231164880, 0.0707250386, -0.0640128255, 0.0088553475, -0.0484886579, -0.1286443770, -0.0030347782, -0.1435931623, 0.0465555005, 0.0445768312, -0.1328779459, -0.0420839712, -0.0209051669, 0.1382774562, 0.0264002755, 0.0016812994, 0.0935732946, -0.0664150789, -0.0715111420, 0.0091934325, 0.0519731343, -0.1289238632, 0.2737768888, 0.1236002371, 0.1388716996, -0.1845390499, -0.0912557542, 0.0168426745, 0.0699177235, -0.1332699060, 0.0363750160, -0.2711865604, 0.3220749497, 0.0467334203, 0.0052247699, 0.0070117950, -0.0912842304, 0.1497308910, -0.0026534910, 0.1226934567, -0.1515875459, 0.0192281269, 0.1605956256, -0.1040056646, -0.0618245378, 0.0407540090, -0.0402578339, -0.0736718997, 0.0853080750, -0.2249083072, -0.0096423933, 0.1767848134, -0.1116897091, -0.0006747926, -0.0724234954, 0.1150070205, 0.1045278385, -0.0045161047, 0.1154209003, -0.1139125973, -0.0184747782, -0.1422680914, 0.0265560001, -0.0728895217, -0.1652518213, 0.0390637890, -0.0072323498, 0.1100157276, 0.1975211352, 0.0914292932, 0.0763918981, -0.1474478096, 0.0996839404, 0.1026344746, 0.0264605060, -0.0036392095, 0.0098227300, -0.0833180696, -0.0676847026, 0.1348387450, -0.0533483326, -0.0988823920, 0.1144422665, 0.0514361709, 0.0972551405, -0.0975902975, 0.1618536115, -0.3901874721, 0.1503342092, 0.0502309836, -0.0264687035, 0.0125533044, 0.0926769748, 0.0148254763, 0.0392699949, -0.0053816009, -0.2298388630, -0.1244280040, 0.0175629910, -0.0351792648, 0.1084195301, 0.1397936791, -0.0643775910, -0.0546086729, 0.0564524494, -0.0009180660, 0.1224637032, -0.1286810488, 0.0028437662, 0.1279692203, -0.0178520661, -0.1110095829, 0.0963211581, 0.0497749299, 0.1003946811, 0.0175051335, 0.0616015308, -0.0091203237, 0.0171110816, 0.0233999658, 0.0436793789, -0.0277466942, 0.2188987285, 0.1268369704, 0.0665415078, -0.0745037347, -0.1088552848, -0.1015152037, 0.1718809903, -0.0164415389, -0.0438773967, -0.1911358833, 0.1805488169, 0.0498425886, -0.0582817048, -0.0451171882, -0.0259935688, 0.0487995595, -0.0637584031, 0.0863837674, -0.1306359619, 0.0732077137, 0.1856941432, -0.0084385322, -0.1126975566, 0.0138834603, -0.1387675107, -0.2498841882, 0.1037480310, -0.2496657968, 0.0984740108, -0.0797899961, 0.0700513348, 0.0026840684, -0.1176340580, 0.2646971345, 0.0335002914, -0.1181899458, -0.0128460554, 0.0580489077, -0.0679178461, 0.0071582161, 0.1897275448, -0.0157753900, -0.0034863020, -0.0724471286, -0.0827006027, 0.1066625416, 0.0151727116, -0.0018038936, -0.0463618487, -0.1147374138, -0.0808736235, 0.0483953021, 0.0064311377, 0.0764154047, -0.0461816788, -0.0261186045, 0.0163971335, 0.0905947536, -0.0635533556, 0.0621996112, 0.0955970660, 0.0616228543, 0.0936560407, -0.0384630524, 0.0233316701, -0.3818418086, 0.0292333197, -0.0765091851, 0.1463587582, 0.1082629263, -0.1166029945, 0.0277939979, -0.0447157808, -0.0948500335, -0.1663088948, -0.1451378167, 0.0628136024, 0.0958929509, 0.0708782077, 0.0276442356, -0.0598854981, -0.1408101767, 0.0777178109, 0.1439071447, -0.0258074142, -0.0264078658, 0.0882349759, 0.1238573045, 0.0803553537, -0.0972672701, 0.1097984165, 0.0030297991, 0.1401011646, -0.0087835770, 0.0296670832, -0.1253495961, 0.0580480546, 0.0119504938, 0.0127911447, -0.0347799323, 0.2228394896, -0.0111095030, -0.1376426965, 0.0145108858, -0.0494265035, -0.1118511632, 0.2474281639, 0.0773622170, 0.0046531884, -0.1715760678, 0.1992430389, 0.2087569982, 0.0169872660, -0.0027243742, 0.0400948785, 0.1782968938, 0.0579844527, 0.0307886340, -0.2892586589, 0.0045003705, 0.2137213647, -0.0076101115, -0.1199340671, -0.0132150119, 0.0834118128, -0.2808500826, -0.0389697812, -0.0765937194, 0.0182376802, -0.0573560707, 0.0193156619, -0.0241272524, -0.2167723030, 0.1516348720, 0.1501163393, -0.1859904677, -0.0165955555, 0.0588032380, -0.0206573047, -0.0667015612, 0.1313870400, 0.0813256577, 0.0754432529, -0.0267537329, 0.0306669492, 0.2243421227, -0.1286561191, -0.0401580669, -0.1745897979, -0.0463872924, -0.0210560802, 0.1318545789, 0.1752897203, 0.1189030260, 0.0698006451, 0.1187700108, -0.0617654584, 0.0960194468, -0.1597507596, 0.0503924489, 0.1233694851, 0.1742647290, 0.1062587872, -0.0434301719, -0.0169802178, -0.4201894403, -0.0489078723, -0.0186754335, 0.1412041485, 0.0836698487, -0.0160116218, 0.0768525824, -0.0009607225, -0.1163143218, -0.0880270377, -0.2075272799, -0.0413251333, 0.0367780812, 0.1498967856, 0.1853413135, -0.0347867385, -0.1012535766, 0.1587054282, 0.1528936327, 0.1267446727, -0.0620932169, 0.1277426630, 0.0004210742, 0.1574920863, -0.0288428366, -0.1030654907, -0.0662769601, 0.1363070458, 0.0202181675, 0.1369655579, -0.0531895719, -0.0027623053, 0.0963704437, -0.0099765724, -0.0010910985, 0.2492299676, 0.0937433392, -0.1407611966, 0.0443618335, -0.0343790203, 0.1158710569, 0.2475127131, 0.0625386462, -0.0344953947, -0.1544619352, 0.1382943541, 0.3150835037, -0.0741012320, -0.0835983977, -0.0071958364, 0.1964913160, -0.1487330794, -0.0606028438, -0.3566827774, 0.0039336677, 0.2118141502, 0.0433754660, -0.2360633910, 0.0890289098, 0.0574201271, -0.2203169465, 0.0149110397, -0.1601509750, -0.0029320240, -0.0759153739, 0.0472652651, -0.1010158882, 0.0068112421, 0.2673456073, 0.0986473635, -0.2479277551, -0.0764824301, 0.0826921538, 0.0127115147, 0.0299118254, 0.0342896022, -0.0262845419, 0.1087102592, 0.2689895928, 0.0091911228, 0.0651410222, -0.2103031576, -0.0508796312, -0.1236001551, -0.1399643421, -0.1642614752, 0.1766128540, 0.0580540635, 0.0088498173, -0.0585528947, 0.1437050551, -0.0816675723, 0.0498878025, -0.0562167019, 0.0837226585, 0.0510193855, 0.1574731767, 0.0823937058, 0.0019784558, 0.0190249588, -0.3369781077, -0.1529241800, 0.1181333885, -0.0592682920, -0.1927970052, -0.0629237816, 0.1211299449, 0.0690132678, -0.0652059466, 0.0012988114, -0.2327636629, -0.0331034996, 0.0747754350, 0.1248887554, 0.1211087704, 0.0178321227, 0.1023618057, 0.1756204665, 0.2145004869, 0.0228943489, 0.0153889330, 0.1469041407, 0.0137141570, 0.1458761245, 0.0290179458, -0.1748014092, -0.1062182039, 0.1312611252, 0.0834034905, 0.0569172874, -0.0561755002, 0.0998591855, -0.0336762816, 0.0175443534, 0.0981538594, 0.0670892149, 0.0927230567, -0.2353156507, 0.0818030760, -0.0306672398, 0.1927065402, 0.1433593333, 0.0507094637, 0.0730615109, -0.1184949949, -0.1382951587, 0.0990295261, 0.0466691330, 0.0383093990, 0.0037480630, 0.0535023287, -0.2128884047, -0.0761045218, -0.2024499476, 0.0461095721, -0.1364568919, -0.1085031629, -0.1944837570, 0.0028689306, 0.0390669592, -0.0394156650, 0.1338737905, -0.1003188044, 0.1655014306, -0.1768564284, 0.1687279344, -0.2111168951, 0.0727795437, 0.2228799313, -0.0981478095, -0.2129480392, -0.1643622518, 0.0853723511, -0.0613257512, 0.0606561564, -0.0463445969, -0.0268289819, 0.0714105442, 0.1666939408, -0.0502292812, 0.0272909943, -0.0068755378, -0.0115669258, -0.0500703380, -0.0036131898, -0.2607382238, 0.0607761592, 0.0402283780, -0.0111185824, -0.0618332624, 0.2152180821, -0.1813994050, 0.0126363328, 0.0493468121, -0.0777333304, 0.0419941284, 0.1774440706, 0.0958844349, 0.0271692835, 0.0046913712, -0.2732942998, 0.0036218257, 0.1197554618, 0.0042682039, -0.0957230926, -0.0554112606, 0.0098003652, 0.0398521945, -0.0657385588, -0.0220707636, -0.0731715187, 0.1220265999, -0.1282583326, 0.1367684752, 0.0676758140, -0.0235743020, 0.1519706249, 0.0630650520, 0.0925334319, 0.1686211079, -0.1831856668, 0.0626780987, 0.1433833987, 0.0477739610, -0.0089918636, -0.3209046721, -0.0975318924, 0.0346896239, 0.0913358182, -0.0919769555, 0.0938802287, 0.1306347996, -0.2018938810, -0.0518739372, 0.0434683599, -0.0740024224, -0.0226818044, -0.1851679236, 0.2377483398, 0.0586312637, 0.0446431339, 0.1431549788, 0.0335470811, -0.0318013430, -0.0955606326, -0.1236585155, 0.1625885963, -0.0644379258, 0.0330542736, 0.0635748431, 0.0948558375, -0.1902084053, -0.0781924725, 0.1335765868, 0.0537153371, -0.2242720872, -0.0880981088, -0.1013849750, 0.0168096852, -0.0846981332, -0.0016317936, 0.1763273031, -0.1549176723, 0.2048298419, -0.2744568884, 0.2152269781, -0.1892758906, 0.0496050492, 0.1489617825, -0.1126905680, -0.1205468848, -0.0525040515, 0.1862177700, -0.1686708480, 0.0250019226, 0.0459085032, 0.0318293385, 0.1088217571, 0.0355845056, -0.0841930807, 0.0482830480, 0.0773336291, -0.0403715149, 0.0771286190, -0.0255857911, -0.2725092173, 0.1232234612, 0.0626394749, -0.0447521955, -0.1680642962, 0.0553778857, -0.1008100584, -0.0117902011, 0.0695938766, -0.0362758450, 0.0883524194, 0.0925261751, -0.0320501439, 0.0156872291, -0.0663264096, -0.1605015546, 0.0822492614, 0.1445359141, -0.1896161139, -0.0348873958, -0.1483120918, 0.0691418573, -0.1288363487, 0.0216334499, 0.0461585000, -0.0223334618, 0.1376187056, -0.1755328327, -0.0722854212, -0.0050114663, -0.1209325790, 0.0248525366, 0.0660235584, 0.0429366343, 0.2022510171, -0.1079289988, -0.2097059488, 0.0145946713, 0.1063237339, 0.0212500375, -0.1775313020, 0.0245949794, -0.1358241141, 0.0429667905, -0.0692336634, -0.0144621041, -0.0063377172, -0.3468148410, 0.0543054454, -0.0849824771, 0.0516645312, -0.0925686508, -0.0662226453, 0.2089955211, 0.0670445263, 0.1324457526, -0.0257627070, 0.1448702812, 0.0453897305, 0.0034423477, 0.0099161137, 0.0263827033, -0.0433997847, 0.0120562753, -0.0404510722, 0.0217534844, -0.0828369930, -0.0059745503, 0.1423763633, -0.0397341438, -0.1143728569, -0.0574820936, -0.2219116539, 0.1135492325, 0.1201463044, 0.0297822598, -0.1119490564, -0.1594358534, 0.0593741871, -0.1774722785, 0.0481983833, -0.2109252810, -0.0092785517, 0.0466275960, -0.2680574656, -0.1047428921, -0.0142821791, 0.0219783206, -0.1624328792, 0.1376136392, 0.0110621359, 0.1555611193, -0.0921599194, -0.0256534219, -0.1011352390, 0.1021245345, 0.0938882381, 0.0693875626, 0.1231013909, 0.0631340891, 0.0146244448, 0.2099536061, 0.1242384091, 0.0176728964, -0.1511219442, 0.1651840061, 0.0635721684, -0.0159519706, 0.1308623999, -0.0643935576, 0.0929359645, -0.0247256812, 0.1011753604, -0.0558912568, 0.1361537278, -0.0561002083, -0.0060484945, 0.0097942501, -0.0961129069, -0.0022629197, -0.1228461042, 0.0667872429, -0.1744426787, -0.0572967380, 0.0436306223, -0.1046538875, 0.0079479832, -0.0053630406, -0.0092276530, 0.0461986884, -0.1093898639, 0.0121171037, 0.1419879943, 0.0442729741, 0.0339535438, -0.0148453284, -0.1596910655, 0.0400542319, 0.1306646764, -0.1931222975, -0.1223647669, -0.0660437942, 0.1033398956, 0.1368019581, -0.1707153022, 0.0918370560, 0.0233008265, -0.1114890501, 0.0423188843, -0.0340608507, 0.0431121327, -0.1011782140, 0.1952224076, 0.1557107866, 0.0610965081, -0.0338827521, 0.0176492315, 0.0159440953, -0.0738249049, 0.0042523649, -0.0333871767, 0.1237097085, -0.0701642632, 0.0699911341, 0.0875106305, 0.0248854142, 0.0681181923, 0.0129333483, 0.0379855745, 0.0569385253, -0.0569559634, -0.0408323035, -0.1464362442, -0.0630989969, 0.0148044853, 0.0115483422, -0.0687771514, -0.1355717331, 0.0937450305, -0.1149562448, -0.0757720917, 0.1272441149, 0.0701027587, 0.0725843683, -0.2248100787, -0.0779922009, -0.0034555884, -0.0881271437, -0.1095489934, 0.0391297899, -0.0985488892, 0.0417099930, -0.1282553673, -0.0909396634, -0.1932816803, -0.0491755381, 0.0477455929, -0.0710537657, 0.1197749227, 0.1232919022, 0.0612978116, 0.0950089470, 0.1234589219, 0.1747195274, -0.0670781806, 0.0391558483, -0.0159554500, -0.0771000013, 0.0650055259, 0.0893116817, 0.1181915253, 0.0040258011, 0.2424319386, -0.1623977125, 0.1094288379, 0.0126014585, -0.1023683399, -0.0438819826, -0.0494409055, 0.1076165736, -0.1211361140, 0.0773838758, -0.1055789515, -0.1149400100, 0.0618778914, -0.0425349511, 0.0589471608, 0.0603602454, -0.0456415005, 0.1171740815, -0.0426713675, -0.0098014614, 0.2158193886, 0.1113265902, 0.1200917959, 0.1120186672, 0.0559045374, -0.0324820057, -0.0002946688, -0.1215079501, -0.0642065555, -0.0621084645, 0.0946206376, 0.1786739379, -0.1369670928, 0.0673161000, -0.0028497679, -0.0761182979, -0.1883823723, 0.1321656108, -0.0252963882, -0.1173024103, 0.1084982976, 0.0307609327, 0.0295689628, 0.0555445105, -0.0201198962, 0.0433239192, -0.0336362049, -0.1010936275, 0.0332864858, 0.1811524481, 0.0013365408, 0.0962160081, 0.0370259471, -0.1126500815, 0.0378602892, -0.0026962713, 0.2020377517, -0.0274154600, -0.0002710274, -0.0703045726, -0.0926976278, -0.0091383895, 0.0629472807, -0.1091294959, -0.0465119891, -0.0073043024, -0.0351890922, -0.1398404241, 0.0061257961, 0.2278421223, 0.1077171564, 0.1134878993, -0.2191544473, -0.1144396886, -0.0234647766, -0.0518953986, 0.0921740010, -0.0071605616, 0.0496116616, 0.1020114869, -0.2260920703, -0.0300283395, -0.1529578120, -0.0422064476, -0.0922214612, -0.0121598197, 0.0907338485, -0.0292710066, 0.0194314849, 0.0390408821, 0.0177022777, 0.1224776134, 0.0446478650, -0.0737180188, -0.0507035926, 0.1082739532, -0.0091157602, 0.1233807057, 0.1413585395, -0.0359524153, 0.0050162114, -0.2328153402, 0.0777367651, 0.1026449874, -0.0764880553, 0.0054983790, -0.0329819992, 0.0905755833, -0.2550369501, 0.1474559009, -0.0710875019, 0.0486825481, -0.0926636234, -0.0347622856, 0.0079040350, 0.1274344027, 0.0132763796, 0.0036385055, 0.1205032319, -0.0412214957, 0.0812184885, 0.0010365279, 0.0443070643, -0.0383060724, 0.0317997262, 0.0382329077, -0.0153126242, -0.0581452437, -0.0560438372, -0.1602726132, 0.0821744949, 0.1538669318, -0.1726690382, 0.0498260371, -0.0455157943, -0.0516866706, -0.1090409830, 0.1060075164, 0.0194423608, -0.0236743018, 0.1897585988, -0.1279745400, 0.1077969819, 0.1468755156, -0.0241453275, -0.0118948519, -0.0057244403, 0.0176393930, -0.0746706277, 0.0799039230, -0.0159657076, 0.1272291243, 0.0028024141, -0.0355210193, 0.0776850507, 0.0252130572, 0.0743757039, 0.0203191396, -0.0029109139, 0.0596983172, -0.0494611040, 0.1311369240, -0.0617640167, 0.0031064663, -0.1648925543, -0.0246143676, -0.0379224792, 0.1087248996, 0.0093867378, 0.1935762018, -0.0106769279, 0.1797064394, 0.1557195336, 0.0128870858, -0.1217567548, -0.1533327550, -0.0376037434, -0.0871803612, -0.0516076013, -0.2465341538, -0.1445393711, -0.1882773638, -0.0299066212, -0.1260977238, 0.0224858429, -0.1353992522, -0.0313643217, -0.0093657058, -0.0074652997, 0.0300462116, 0.0885659158, 0.1080516279, 0.0759459436, -0.0197326876, -0.0656149983, 0.0343467630, 0.0010935665, 0.1094367281, 0.0651119947, -0.0795370266, 0.0010308595, -0.1928814203, 0.0082957782, 0.0698376074, -0.0625613183, 0.1976106167, 0.0198521614, 0.0334440693, -0.1834988296, 0.0933345407, -0.0848878399, 0.0790739432, 0.0668190047, -0.0173197892, -0.0669854283, 0.2291971296, -0.1082049981, -0.1045330092, -0.0011498923, -0.0402079932, 0.0344755054, 0.1092957109, 0.0690029785, -0.1141626984, 0.2149770707, 0.0641129315, -0.1100067869, -0.0611139871, -0.0080166096, -0.0133247972, 0.1002765298, 0.1224318296, -0.0380705409, 0.1048437655, -0.1806669831, -0.0570294894, -0.0492141284, 0.0683502927, -0.0017470977, -0.0580150113, 0.0858853236, -0.1328536272, 0.0623508058, 0.1052838787, -0.0708778426, -0.0171204805, -0.1565959156, 0.0602067821, -0.0281856842, 0.1576408446, -0.0630073622, -0.0506741144, -0.1127620339, 0.1095364094, 0.0966977030, 0.0533681400, -0.0257832035, 0.2026076168, -0.1454284191, 0.0275617987, 0.0914053768, 0.1411201507, 0.0638990477, 0.0252497327, -0.0722698122, -0.1774358302, 0.0618776046, 0.0067024576, 0.0034615614, 0.0383656174, -0.0324234925, 0.0892886594, 0.2856319845, 0.0962108150, 0.0036830483, -0.0131086847, -0.0133280884, 0.0418673754, -0.1172246262, -0.3016343117, -0.0300488062, -0.1588603109, -0.0640465766, -0.1080780625, -0.0169925485, -0.1121424437, 0.0295009725, -0.1338792294, -0.0736834109, 0.0116243493, 0.0348428525, -0.0403215997, -0.0392648205, -0.0188884828, -0.0146850431, -0.0234291423, 0.1043226495, 0.0528513640, 0.1786385924, -0.0862142742, -0.0255147163, -0.2074660510, 0.1111573651, 0.1166770980, 0.0369437411, 0.1995926946, -0.0623755679, 0.0119938431, -0.1194736809, 0.0448547080, -0.1236778274, -0.1513543874, -0.1569607258, 0.0135906385, 0.0262347013, 0.1387150288, -0.0567498431, -0.0972273722, 0.0234724209, -0.0950722694, 0.0039595682, 0.0076688607, -0.0665648803, -0.1898247302, 0.0499479771, 0.0965930447, -0.2267266214, -0.0090627689, -0.0101416763, 0.0390215404, 0.0852745399, -0.0416078828, 0.0345564932, -0.0355253927, -0.2320883125, -0.1256964505, -0.0569260158, 0.0457874089, 0.0116990637, -0.1059387550, 0.1736084223, -0.0506213605, 0.0718732104, -0.0636553615, 0.0024373455, 0.0113466717, -0.0793215334, 0.0024021261, -0.0128068160, 0.0229215696, -0.0856612548, -0.1222935617, -0.1008444056, -0.0037357837, -0.1586418897, 0.0215594713, -0.0627921447, 0.1448000371, -0.1401390880, -0.0367140621, 0.1065710858, 0.2092435509, -0.0414531939, 0.0344220884, -0.1259621084, -0.0991719738, 0.1361528188, 0.0765582994, -0.1378867030, -0.0091893654, -0.0168161150, 0.0933009908, 0.1490562558, 0.2044185400, -0.0283377878, -0.0476686545, -0.0126396753, -0.1374848187, -0.3389367461, -0.1126877517, 0.0785991251, -0.0174170341, -0.0805897787, -0.0225070845, 0.1400482655, -0.1001496986, -0.0544480458, -0.0890980884, -0.0839051083, 0.0760353059, 0.1242942810, -0.0699245408, -0.1510937810, -0.0471032783, -0.0249118377, -0.1497462094, -0.0938923731, -0.0335630439, 0.0248661749, -0.0690394193, 0.0500309505, -0.2447437495, 0.0228423253, 0.0929564089, 0.0207687039, 0.0527675003, -0.0655054897, -0.0003554959, 0.1341117322, -0.0015546558, -0.0700110793, -0.1316701919, -0.0496949032, 0.1919420063, -0.0897874832, 0.1423112452, -0.1314428896, -0.1371588111, 0.1221522167, -0.1163503602, 0.1182371825, -0.0614817962, 0.0098508606, -0.0382357873, 0.0223504081, 0.0944660902, -0.1154381633, 0.0558095910, 0.0624430813, 0.0957204178, -0.0176484454, 0.0787151903, -0.0188914631, 0.0282411650, -0.2172418982, 0.0546906814, -0.0460542962, 0.0107617620, 0.0924257562, -0.1297833025, 0.0600926057, -0.0214894582, 0.0937765166, -0.0458437800, 0.1315255612, -0.0719300434, -0.0020091434, -0.0609905086, 0.0467425138, 0.1205887944, -0.0042875605, -0.1406004280, -0.0451994911, -0.0247426163, -0.2132046968, -0.0288346969, -0.0548199192, 0.0549806431, 0.0115131829, 0.0642252937, 0.1719072759, 0.1039712206, 0.0434926897, -0.0003954524, 0.0260071419, -0.3032692373, 0.0528418645, 0.0021770187, -0.2009604424, 0.0527132191, 0.0756213814, 0.1507806629, 0.0249462835, 0.1518187821, -0.0766503960, -0.1412007660, -0.0241322536, -0.0848283172, -0.1851161867, 0.0291568432, -0.0136429546, -0.0747400895, 0.0476398170, -0.0174809769, 0.0744506419, -0.0580266640, -0.0068563381, -0.1583603621, 0.0196696483, -0.0337061398, 0.0273036491, -0.0224980805, 0.0083439192, -0.0857359543, -0.0223401822, -0.1129948646, -0.1146421805, -0.1046106145, 0.2971496880, -0.0256996285, 0.1291737109, -0.1895202696, 0.0377507396, 0.1118289381, 0.0989555418, 0.0337781049, 0.0352158323, 0.1103088483, 0.1105516255, -0.0488074832, -0.0605160072, -0.0709453747, 0.0615468659, 0.1309589744, -0.1435450464, 0.0672015995, -0.1238739267, -0.1121293381, 0.1376128942, -0.0445207022, 0.0284264218, -0.0228770226, 0.0974805579, 0.1193838045, -0.2010363340, 0.0141990185, -0.0406307802, 0.0994936377, 0.1806100905, 0.0526556261, -0.2355695963, 0.1652375013, -0.0033594491, 0.0280142296, -0.0777604282, 0.0519761741, -0.1740835905, -0.0113674253, -0.0187568851, -0.0476191416, 0.0219929740, -0.0319308564, 0.0553285591, -0.1339022964, 0.1767414361, 0.0414092727, -0.0323357135, 0.0913932621, -0.0605798103, -0.0240213722, 0.0311914831, -0.0368561074, 0.0458103903, -0.1172088012, -0.1231634095, 0.1830404103, -0.0013194912, 0.0513431914, -0.0053272084, 0.0621877462, 0.0140233180, 0.1859737635, -0.1238073111, -0.0017007873, -0.0078986250, -0.3498236537, 0.0392040461, 0.0039025156, -0.1418669671, -0.0742372125, 0.1721379757, 0.2570353150, 0.0567573309, -0.0848686323, -0.0695376396, -0.1290543675, -0.2551916540, -0.0844722837, -0.0423453599, 0.0307630934, 0.1645812839, -0.0151196131, -0.0765057877, 0.0720155165, 0.0364355892, -0.0461225584, 0.0237642135, -0.0167407598, 0.0049014776, 0.0933045670, 0.1160886437, 0.1950276643, 0.0619015694, 0.0599792823, 0.1340149343, -0.2021407187, 0.0223732684, -0.0425493866, 0.2185421586, 0.0173210651, 0.1566079259, -0.2870207429, 0.0301705655, 0.0398769453, -0.1192700788, 0.0012939509, 0.0162094627, 0.1220983267, 0.0762468949, 0.0181391016, 0.0368778966, -0.0975957364, -0.0807599723, 0.0304778181, 0.0583230406, 0.1495214254, 0.0734868720, -0.1050432026, 0.1149367392, -0.0557258911, 0.0291178897, 0.0283112079, 0.0183714889, -0.0515869521, 0.0021593294, -0.0600794181, -0.0032164960, 0.0809878856, 0.0914011672, 0.0078802388, -0.1678915322, 0.0104481447, 0.0290710684, -0.1663653553, -0.1629932523, 0.0321317986, -0.1000855938, -0.0434149168, -0.0365617424, -0.0301050041, 0.0116268927, -0.1453075856, 0.0905460939, -0.1472105086, 0.1840968132, 0.0078121671, -0.0201192256, 0.1600068659, -0.0993830636, -0.1213333979, -0.0910612196, -0.1052186936, -0.0712650269, -0.2685901523, -0.1181587055, 0.1751036793, -0.0188543648, 0.0286218580, 0.0156820118, 0.1810486317, -0.0696503893, 0.0272537135, 0.0037147398, -0.2043827921, -0.0572619811, -0.3016789556, 0.0924578682, 0.0049109929, -0.1008094996, -0.1368321180, 0.0693413764, 0.0530757457, 0.0729467273, -0.0613157600, -0.1741955727, -0.0330048427, -0.1917049587, 0.0072494131, 0.0253233016, -0.0232229773, 0.1004295051, -0.1198161021, 0.0952337012, 0.0215032194, 0.1413062960, 0.0702293590, -0.0247169752, -0.0323562138, -0.0721167773, 0.1152146980, 0.0927344486, 0.0477753021, 0.1330395043, 0.1042219475, -0.0152217727, -0.0720711425, 0.0541898869, -0.0336658284, 0.2085492313, 0.0810899287, 0.1968888938, -0.2151995301, -0.0143869100, 0.0386475809, 0.0095376968, 0.1307682246, -0.0056556119, -0.0377137922, 0.0458750241, 0.0069294134, 0.0885006413, 0.0373827405, -0.0945768431, 0.0475986972, -0.0308918450, -0.0831850246, 0.0421111993, -0.0171906706, -0.0833537504, 0.0591501817, 0.1035519093, -0.0327921547, -0.0034388215, -0.0266917814, 0.0250042882, 0.0105768330, -0.0879766792, 0.0772099197, 0.0628878549, -0.2428543270, -0.0789431781, 0.0623194948, 0.0092489906, -0.2767994106, -0.1075541750, -0.2123995721, 0.0559135452, -0.0488624312, -0.0028629161, -0.0214034226, -0.2106124610, -0.0785662085, 0.1003936976, 0.0161777269, 0.1275357306, 0.1026685238, 0.1078943834, 0.0766830146, -0.0411093011, -0.0725665465, -0.0233940035, -0.1204573289, -0.0973259062, -0.2366831601, -0.2493009567, 0.1062728241, 0.0412669182, -0.0383037217, 0.0977575779, 0.0267115701, -0.1043757722, 0.0489769764, -0.0507751629, -0.1692232043, -0.1493861377, -0.3555389643, 0.0766144097, 0.0129987439, -0.0269811694, -0.0684931502, 0.0500645712, 0.1264915168, -0.2219749838, -0.0891771689, -0.0331721418, 0.1151895076, -0.1551625133, 0.0918503702, -0.1330266297, 0.0222358350, 0.0663144141, 0.0140734762, 0.0063202470, -0.0066115106, -0.1030414030, 0.1618884802, 0.0128770508, 0.0539206676, -0.0149140954, 0.0074905846, -0.1171488091, 0.1699183881, 0.0012574416, 0.0033468355, -0.2073474675, -0.1096549779, -0.1418282390, 0.0554948300, 0.0348902419, 0.0109699657, 0.2325949520, -0.1002106071, -0.0150044216, 0.0145837693, -0.0902918279, 0.0757763460, -0.0183462650, -0.0111099463, 0.0533850342, -0.0132460408, 0.1380108297, -0.2421495765, 0.0621107221, 0.2361962497, 0.0055886875, -0.0605473034, -0.0889460146, -0.0080493893, 0.0208987631, 0.1475791186, 0.0097781280, 0.0419343002, 0.0250317138, 0.1075507179, -0.1550476551, -0.0406180657, -0.0345174037, 0.0546716452, 0.0553251691, -0.2204501778, -0.0816087276, 0.0486168116, 0.0438474305, -0.3097183704, 0.0685091019, -0.0803295821, 0.0894540399, -0.2343117297, -0.0689379722, -0.0325951427, -0.1645294130, -0.0217274800, 0.2010819763, -0.0734955668, 0.1025441140, 0.1771890670, 0.1788083613, 0.0539886095, -0.0985341892, -0.1818450391, -0.0465479754, -0.1894766688, -0.2174119204, -0.2262406498, -0.2279862314, 0.2504219711, 0.0346951112, 0.1725492030, 0.1241555139, 0.1032759771, 0.0803460553, 0.1021575779, -0.1108932048, -0.0690889135, 0.0334105976, -0.1577605158, 0.1083474234, -0.0575829037, -0.2099590003, 0.0182514396, 0.0885373652, -0.0125930840, -0.0352017991, -0.2955869138, -0.0205456037, 0.1805848479, -0.1388129294, 0.2090689987, -0.1027840897, 0.0973227546, 0.0884284973, 0.0064437110, -0.0563953780, 0.0236826390, -0.0385706462, 0.1119759902, 0.0128123304, -0.1972637624, -0.1020382494, 0.1651019603, 0.0331422277, 0.0254604053, -0.1533457339, 0.0881396383, -0.1259541959, -0.1257775724, 0.1146893799, -0.0867979378, 0.3053984046, 0.0343499929, 0.2702289224, 0.0447560921, -0.0143748317, -0.1726535708, 0.0442587286, 0.1052388847, -0.0009660054, 0.0213342030, 0.0350249149, 0.1451034695, -0.1657189429, -0.2449521720, -0.0762560964, 0.0831930041, -0.0184931904, -0.2912453115, -0.0442318544, 0.1467128992, -0.0022445722, 0.0465944000, 0.2362638414, 0.1339881718, 0.2034043968, 0.1434661150, -0.2884054184, -0.1267082989, -0.1594742388, 0.0951243788, -0.1721069217, -0.1697063893, -0.0649710447, 0.1317685395, -0.0686299428, -0.2305636853, 0.2306098789, -0.1137454659, -0.1178163961, 0.0389112458, 0.3290567398, 0.2516478002, -0.0984015837, 0.0519135147, 0.0478709005, 0.1510350555, 0.3916942775, 0.1611840874, 0.1617103815, -0.1427423656, -0.1330984980, -0.2776380777, 0.0344909281, -0.1371026635, -0.2907997668, -0.0968915522, -0.0202822238, 0.1534218937, 0.0570535995, 0.1091678366, 0.1684494168, -0.1254135966, -0.0699473470, 0.1187308654, -0.1352522969, 0.1183976084, -0.1351165473, 0.0520877503, 0.2117046714, -0.2663567364, -0.0719051883, -0.0438293591, 0.1494846046, -0.1408528537, -0.0782840997, -0.2270658761, -0.0691101477, 0.1352504939, -0.3259719014, 0.2574047446, 0.0737306476, 0.0371939801, -0.2191177756, 0.0710182190, -0.0121365059, 0.0250685290, -0.0735116377, 0.1701780856, 0.0868424624, -0.2118228674, -0.1312585473, 0.3627490997, 0.0722847581, 0.3502349555, -0.0174271371, -0.1974648684, -0.1159847751, -0.0385235734, 0.0434958935, -0.1855083257, 0.2734026611, -0.0490346067, 0.2683411539, 0.0412422791, -0.1075968221, -0.1262388229, -0.3316451907, 0.1557956487, 0.0801853612, 0.0014740634, 0.1051426977, 0.0491197333, -0.1310566217, -0.2275660485, -0.0150344586, 0.0696031898, -0.0964970216, -0.1506273299, -0.1267536432, 0.1054038629, 0.1197955906, -0.0058034924, 0.0854234099, 0.1457164735, 0.0695780814, 0.0465920866, -0.2312972099, -0.0511556752, -0.0364478603, -0.0714672282, -0.1738929451, -0.0613965653, -0.2681570351, 0.0463438630, 0.1716363430, -0.2276828587, 0.2483011484, 0.0474048741, -0.1345351785, -0.0205869377, 0.2175048590, 0.0348389186, -0.1098776981, 0.1580972821, -0.1536594331, -0.1431239098, 0.2088512182, 0.1893061697, 0.1251689047, 0.1330190450, -0.0928401053, -0.3256635964, 0.0397677869, -0.1064873040, -0.2214006782, -0.0277098734, -0.1045306921, 0.1305442601, -0.0674196035, 0.1295669526, 0.1471538246, 0.0469440669, 0.0562568828, 0.2688906491, -0.0864591002, -0.1056232005, 0.1067337617, 0.1118521541, 0.1412145793, -0.1070204824, -0.0522270314, -0.2238082588, 0.0803669319, 0.0422301367, -0.0933973491, 0.0254313890, -0.1553292423, 0.1069028750, -0.1025529429, 0.1307935715, 0.1136917025, 0.0397981703, -0.1253899783, 0.0296480563, -0.0984104499, 0.0201842133, -0.1028896049, 0.1810496598, -0.0269678663, -0.1471435428, -0.2108477950, 0.1072480008, 0.2892843485, 0.4436867535, -0.0199324321, -0.2461388707, -0.0785711408, -0.0586115085, 0.0927626714, 0.0044244505, -0.0606297888, -0.0691139698, 0.1875315160, -0.0321496166, -0.1414297372, -0.0002734381, -0.1079548523, 0.0545855425, 0.1887143701, 0.0169146676, -0.0650920495, 0.0998983383, -0.1585507840, 0.0825225711, -0.0965080932, -0.1008197814, -0.0244358275, -0.2219511122, -0.2076031268, 0.0703066811, 0.0174242891, 0.0266497750, 0.1222046539, 0.1694680452, 0.0999248177, 0.0584223345, 0.0014070227, -0.0321763530, -0.0534282625, -0.0251914244, -0.1309539676, -0.1566384286, -0.1213292032, 0.0945095867, 0.1758077741, -0.0745550990, 0.2142440975, -0.0113591952, 0.0039499551, 0.0148697952, 0.0569790266, 0.0299808495, -0.0648836643, 0.2102392167, -0.1439631879, -0.2273299843, 0.2167720348, 0.1107971668, 0.1369026303, -0.0057472219, -0.2170412391, -0.1964107007, -0.0648966506, 0.0025713642, -0.1849017441, -0.1306411475, -0.0048929001, 0.1965722889, -0.0359547883, 0.0828856081, 0.1525780112, 0.0472519621, 0.1609272510, 0.1091014817, -0.0127842408, 0.0639881417, 0.0089629181, 0.0486756861, 0.0203946978, -0.0558847003, 0.0480259359, -0.0687983409, 0.0759935677, -0.0236514118, -0.0442011021, -0.0922576785, -0.1509773135, 0.0632333532, 0.2055330426, 0.1342634112, 0.1256527454, -0.0976673216, -0.1363688260, -0.0208647996, -0.0812178776, 0.1035161316, -0.0192757323, 0.1418747455, -0.1232477352, 0.0268341228, -0.0093998080, 0.1067271754, 0.2115819901, 0.1431221068, 0.0850599110, -0.0889366493, 0.0012506297, -0.0423632562, -0.0704677403, 0.0204937607, 0.0649341494, 0.0440654159, -0.0742386431, -0.0629005879, -0.0046906099, -0.0291447863, 0.0617597997, -0.0228006579, 0.0052953735, 0.0087961629, -0.0142562687, -0.0663043857, -0.0605105907, 0.0080454573, -0.0730509385, -0.0785738528, 0.0458237976, 0.0523706526, 0.0804540962, -0.0643843040, 0.0155933946, -0.0349541940, 0.0239122659, 0.0119798630, -0.0359554142, -0.0694123432, -0.0479038879, 0.0101167187, 0.0061605349, 0.0584319383, 0.0273088738, -0.0658052787, -0.0696949586, 0.0562322438, 0.0751672089, 0.0023506209, -0.0183655545, -0.0234723017, 0.0455989540, 0.0600234419, -0.0546917915, 0.0113120303, 0.0509950221, 0.0513519943, 0.0472698361, 0.0700760037, 0.0009106323, -0.0306473523, -0.0158896968, -0.0674083754, 0.0729799569, 0.0057186633, 0.0127295852, 0.0684088916, 0.0375024155, 0.0022333339, 0.0740930140, -0.0240738057, -0.0234967358, 0.0426372588, -0.0325337276, 0.0242133215, 0.0573651940, 0.0062986761, -0.0004214421, 0.0031897947, -0.0488957576, 0.0002669767, -0.0618572384, 0.0782276988, -0.0712377131, 0.0531146377, -0.0457950830, -0.0730122477, -0.0459723361, 0.0688270330, -0.0016440302, -0.0638443381, -0.0755099878, -0.0172353387, 0.0687582046, -0.0740028024, 0.0625480562, -0.0147054717, 0.0190575495, 0.0537407547, -0.0705220103, 0.0759822428, -0.0311356783, 0.0823172182, -0.0616233982, -0.0358133242, 0.0217211843, -0.0265018903, 0.0695785135, 0.0308440700, -0.0399352349, -0.0506390408, 0.0912556946, 0.0941761881, 0.0117644947, -0.0078522591, 0.0785554126, -0.0034301912, -0.0699073300, 0.1147302315, 0.1145433858, -0.0315489173, -0.0359824821, -0.0217271633, -0.0567154773, 0.0103002833, -0.0175647922, -0.0077471277, 0.0832179785, -0.0125773596, 0.1315762401, 0.0060047535, 0.0203957167, -0.0530233309, 0.0742177293, 0.1104646698, 0.0220547989, -0.1022719145, -0.0571536459, -0.0862089619, -0.0482242368, -0.0744392499, 0.0945419073, -0.0039528934, 0.0032944356, 0.0488398857, -0.0164785478, -0.0121491281, -0.0116150100, 0.0002255126, 0.0276397970, -0.0225364417, 0.0122069390, -0.0014324144, 0.0169103350, -0.0970864743, -0.0539759062, -0.0230434481, 0.0502267741, -0.0147475246, 0.0430480763, -0.0720930174, 0.0780188069, 0.0748262182, -0.0774823055, -0.0501998104, -0.0787436143, 0.1140132919, 0.1280806810, -0.0865368843, -0.0467367768, 0.0145413587, 0.0241885502, 0.0958358124, -0.1528270394, 0.0672298372, -0.0280819945, -0.0555992387, 0.0772296041, 0.0095674694, -0.0199434254, -0.0091561154, -0.0331935100, -0.0325945988, -0.0020774500, -0.0405698717, -0.1243393049, -0.0537339523, -0.0713649392, 0.0686546937, 0.0334975682, 0.1391377002, 0.0939695835, 0.0184331443, -0.0145274838, 0.0624254756, 0.0483630560, 0.1047803313, 0.0529521219, -0.0043762317, -0.0137957241, 0.0497342534, 0.1466562152, 0.1160638481, -0.0158883091, 0.0459404476, -0.0710855946, -0.1330732852, 0.0966990888, 0.1201964468, -0.0349594243, 0.0096910791, 0.0691779554, 0.0086972434, -0.0418950506, 0.1230443567, 0.0189827457, -0.0881873295, 0.1215237379, 0.1186316311, -0.0771672428, -0.0844824761, -0.0360905416, -0.0733189881, 0.0548829325, -0.0179958828, -0.0250330959, -0.1381102353, 0.0668925419, 0.0609368198, 0.0741859898, 0.0025545452, -0.0119836777, 0.0245675240, 0.0317330770, 0.1422715634, 0.0014012256, -0.0399342030, -0.0531389378, -0.1280203462, -0.0755544230, 0.0789736956, 0.0801916495, 0.1646836996, -0.0331111588, -0.0274789296, -0.0041296692, -0.0065016961, 0.0421789363, -0.0133917518, 0.0083601028, -0.1324492097, 0.0084020216, 0.0869977176, -0.0576967262, -0.1592746526, 0.1014893577, -0.1536808908, 0.0701253042, -0.0061993352, 0.1624788791, -0.0732805952, 0.0332467780, 0.0975075439, -0.0132599976, 0.0249884501, -0.0644092709, 0.0170878340, 0.0717766583, 0.0492013171, -0.0692336559, 0.1039015949, 0.0223476477, 0.1420122236, -0.0869183689, 0.0529405549, 0.0317134596, 0.1019688249, 0.0683634058, 0.0185074266, -0.0094899312, -0.0911170617, 0.1550508291, -0.1354400665, -0.1251811981, -0.0166154467, -0.1799422652, 0.0339804888, 0.0621788539, 0.0151634570, -0.0088004908, 0.1366478801, 0.0155499019, 0.0941835642, -0.0441773348, -0.1456579417, 0.0692835152, 0.1136837155, -0.0668506101, 0.0967770666, 0.1178152114, 0.0485278443, 0.2859519422, 0.0796846226, 0.0109639727, 0.1750089675, -0.0049242214, -0.0834832117, 0.0186284520, -0.0182432421, 0.1038526669, -0.0573203042, 0.1588645875, -0.0927126333, -0.1728338599, 0.0505077168, -0.0231374223, 0.0903537348, -0.1097657308, 0.1077151597, -0.0383259952, 0.0689809546, -0.0474816374, 0.0025189223, 0.0785368979, -0.0229143575, 0.0466610640, -0.1492967159, -0.1223395616, 0.0649915710, -0.0098083103, -0.0561454371, -0.0263113119, 0.0534959808, 0.1828801632, 0.1682595015, -0.0061243223, -0.0546555333, 0.0723655149, 0.0485605933, 0.0320442319, 0.2192225754, -0.0781555772, 0.0403227508, -0.0541892275, -0.0267091747, -0.1558586657, -0.0791967884, -0.0007935869, -0.1355219781, -0.0811506957, -0.0750448853, -0.0097108958, -0.0493304096, -0.0347113907, -0.0877328292, -0.0444287322, 0.0256012026, 0.0297943614, -0.0182049219, 0.0731981173, 0.1193600073, 0.0506813228, 0.0566387214, -0.2695167661, -0.1266178638, -0.0091617322, 0.0123519963, -0.0009705501, 0.0413627252, -0.0148034915, -0.0043849158, -0.0327819027, 0.0849434957, -0.0628823414, 0.0808907747, 0.0245245919, 0.0917617977, 0.0275345165, 0.1274674386, -0.1189844310, 0.0025630854, 0.1180230230, -0.0334902592, -0.0585057773, 0.0982584581, -0.0014706485, 0.0357900374, 0.0914381742, 0.0703887418, -0.1369863898, 0.1549022794, -0.0888141692, 0.1585296541, -0.0863437727, 0.0122954911, 0.0501033701, -0.0495938882, 0.0802509487, 0.1672488302, -0.0575068928, 0.0471980534, 0.0648102015, 0.0984025896, -0.0480634049, 0.0623939447, 0.0287663378, -0.0627159029, 0.0753157288, -0.1363582015, 0.0048659099, 0.1295755953, 0.1286586225, 0.0588766448, -0.1250870526, -0.2612421811, 0.0362095833, 0.1700652689, -0.1334268451, 0.0891470090, -0.0502854995, -0.1706193089, -0.1292545944, 0.0619619302, 0.1111481488, 0.0309084915, -0.0933618695, 0.0985516086, -0.3284450769, 0.0971557572, -0.0498525687, 0.0136818234, -0.1862963438, 0.0993443653, -0.0009157251, 0.0134678883, 0.0230028965, 0.0456522368, -0.0399341024, 0.0463536903, 0.1821813732, 0.1237491593, -0.0166144576, -0.0311848391, -0.1623299271, 0.0188606177, -0.1195758358, 0.1746784747, -0.2129187435, -0.0676210895, -0.0876840577, -0.0102414750, 0.0492406189, -0.1871690899, 0.0242617261, -0.0648365319, 0.0520631783, -0.0761138201, -0.1315773576, 0.0597300492, -0.1070579886, 0.1502415836, 0.0899436921, -0.0355042927, -0.1728553623, -0.0741213411, -0.0248774011, -0.0039567486, -0.0640983656, -0.0876065940, -0.1554621756, -0.0278395545, -0.0127302548, 0.1230381504, 0.0390496179, 0.1301063597, 0.0147232981, 0.0223006979, -0.0008892728, 0.1887500584, -0.0774418190, -0.0393083207, -0.1489889473, 0.0648544505, -0.0426541306, 0.0985187739, -0.0237846654, 0.1144851893, 0.2988286316, 0.2412556559, -0.1558798999, 0.1658088267, -0.0769266635, 0.1098389104, -0.1445925236, 0.2296514362, -0.1465440094, -0.0741393939, 0.0600332692, 0.1073780730, 0.0914921686, -0.0358535610, 0.0760475025, 0.1802156121, 0.1727417558, 0.0093073752, -0.0383433923, -0.0092935544, 0.0128040770, -0.3452840447, 0.0685255826, 0.0012562732, -0.1061258465, 0.0902520269, -0.0064492300, -0.1816950440, -0.0308204610, 0.0989372879, -0.0523294993, 0.0098099913, 0.0744757727, -0.0127634751, -0.1456327736, 0.1142589748, 0.1218952537, 0.0101749478, -0.1041810811, 0.1480689645, -0.2354069650, 0.0010370672, -0.1460515112, 0.0353370383, 0.0119290864, -0.1157237962, 0.0038848952, -0.1052012593, -0.0218080282, 0.0054712929, 0.1840480417, 0.1956216842, 0.0083569884, 0.0155734364, -0.1047263145, -0.0203357022, -0.0142328665, -0.0546733662, -0.0460036360, 0.2574970126, -0.0326159224, -0.0868604705, 0.0319466591, -0.0956699774, 0.1221185699, -0.0541578233, 0.2046573311, -0.0053990963, -0.0241094008, -0.0709999502, -0.2052764893, 0.0395848900, -0.0309625715, -0.0582105741, -0.0347845033, -0.0913738608, -0.1346652955, -0.1971572638, -0.0554071739, 0.0315423645, -0.1302683651, -0.0089942291, -0.0900509208, -0.1539092362, 0.0272135194, 0.0841663256, 0.0985058099, 0.0697092339, -0.0058600651, 0.0472871549, -0.0936172754, 0.0843617469, -0.1538690627, -0.1137004793, 0.0952643082, 0.0979253575, 0.0069619762, 0.0317695029, -0.0688891932, 0.1323225498, 0.0739765912, 0.1422727257, 0.0577708222, -0.0514048561, 0.0458995402, 0.0325334147, 0.0436116606, 0.1612895131, -0.3077041209, -0.0826808736, 0.0202634502, 0.1070076227, -0.0258959923, -0.1121214032, -0.0903873220, 0.1053928062, 0.1530251950, -0.0112087354, -0.1944543570, 0.1681417823, 0.1417646408, -0.4246785641, -0.0149046471, 0.0035428039, -0.1345002353, 0.0987015069, -0.0332960412, -0.2704838216, 0.0488309562, -0.1372526735, -0.0213384703, -0.1068761200, 0.0049330778, 0.0130024273, -0.0910338759, 0.0658429936, 0.0050546951, 0.0001824662, -0.0375381596, 0.0278489590, -0.2766261399, 0.0179157928, -0.1289132088, 0.0930447131, -0.1731265336, -0.0519238450, -0.1721754968, -0.0126828244, 0.0912178084, 0.0112035358, 0.1432099044, 0.1086486652, -0.0063548861, -0.1272048652, -0.2847141922, -0.1726944298, -0.0217468850, 0.0172570124, -0.1364116669, 0.1859500259, 0.0905998275, 0.0006226700, 0.1142314449, 0.0132129043, 0.1339808851, -0.0657989010, 0.0475076474, -0.0827595741, 0.0277996846, -0.1600073427, -0.0162843671, -0.0503825024, 0.0702726319, -0.0273363926, -0.0113237817, -0.1620310545, 0.0735098422, -0.1039399058, 0.0390241556, -0.0654430464, -0.0247024540, 0.0897048265, -0.0119847376, -0.0615811609, -0.0167823359, 0.0509974658, 0.0969836786, -0.0304436497, -0.0584507585, -0.0035049180, 0.0311758872, 0.1974930018, -0.0599436946, -0.1241643280, 0.1097507328, -0.0194517933, -0.1337547004, -0.0777890831, 0.1067002714, 0.0760281608, 0.1049181893, 0.1412163824, 0.0166632421, -0.1375024170, 0.0969462693, -0.0058973152, 0.0295706540, 0.0745421350, -0.2021458596, -0.1258044094, 0.0136676179, 0.1071356013, -0.0174266193, -0.0547657050, -0.0386441499, -0.0891395137, 0.0556225665, -0.0653439760, -0.1430254728, 0.1055549979, -0.0375135541, -0.3189752400, 0.0698075593, 0.0784834772, -0.1681395918, 0.1287663728, 0.0834611878, -0.1569316834, 0.0171351396, -0.3104239106, 0.0926479995, -0.0896877944, -0.0593314655, -0.0590239167, -0.0304109249, 0.1068990976, 0.0226964261, -0.0660413504, -0.1255251169, -0.0719347075, -0.3252463043, 0.0776444376, -0.0233097579, 0.1449259371, -0.1970681995, -0.0779419169, -0.1324741840, 0.0311581362, 0.0647247583, -0.0046603773, 0.1205225810, -0.0749979839, -0.0096535860, 0.0114852954, -0.2298215032, -0.0461166985, -0.0627986714, -0.0084399711, 0.0882099569, 0.0241124611, 0.0546590500, -0.0417584330, 0.1665304899, -0.0111875078, 0.0356042944, -0.1286938488, 0.0534713231, -0.0639704019, 0.0805848539, -0.2232213020, -0.0471796058, 0.0123683019, 0.0900807679, -0.0058223368, 0.0590491705, -0.1301297545, 0.2263457030, -0.2119887024, -0.0667614862, -0.0649239793, -0.0975840092, 0.0716337413, -0.0294443294, 0.0586276688, -0.2498401701, -0.1005085111, 0.1026847363, -0.0694320723, 0.0142121324, -0.0481362939, -0.2718886435, 0.2002222240, 0.0108666793, -0.1636494696, 0.1766041368, -0.0204982366, -0.1835795045, 0.0092400499, -0.0578769371, 0.2876605988, 0.0146469492, 0.1117538884, 0.0417838991, -0.0962154642, -0.0277349949, -0.0829611942, 0.0777294859, 0.0668402240, -0.0898905620, -0.0543823577, -0.1258922517, -0.0534487329, 0.1432357877, -0.0664645806, 0.0382954106, -0.2069072723, 0.0465670116, -0.0167173799, -0.0822617635, 0.0002615434, -0.1541281193, -0.2577190399, 0.1415457428, 0.1646624506, -0.2114788145, 0.0876540244, 0.1057786942, -0.0997312665, 0.0626513585, -0.2535540760, 0.1807956845, -0.0996961221, 0.0879527256, 0.0842840523, -0.0184378549, 0.0750682428, 0.0893454626, 0.0483739972, -0.0423507839, -0.0496652611, -0.3476009369, -0.0312133022, -0.0098849190, 0.1010902077, -0.1664740145, 0.0367903560, -0.2077852637, -0.0362300389, 0.0881019756, -0.0042101457, 0.1138196737, -0.0230685286, -0.0442233346, -0.0052586994, -0.3260354996, -0.0941782147, 0.0381930396, 0.0273152832, 0.1035816297, -0.0510131381, -0.0406397656, -0.0823961347, 0.0440324061, -0.1121707112, 0.0567378104, -0.1016055718, 0.2504414022, -0.0472138263, 0.0957443491, -0.1199773997, -0.1311253607, -0.0617778301, 0.0151796695, -0.0580335669, 0.0183062572, -0.1821981221, 0.1844869852, -0.1157742962, 0.0384103358, -0.0855633467, -0.0151641173, 0.1274656355, 0.0162554849, 0.1215230301, -0.3010092378, 0.0161118135, 0.1376118809, -0.0920004174, 0.0245915204, -0.0194075722, -0.2822539508, -0.0606088266, 0.1152236238, -0.0527914017, 0.1212479100, 0.0245638620, -0.1066374555, -0.1142757982, -0.0519430861, 0.1282447129, 0.0849763080, 0.1684919745, -0.0147843789, -0.0341334417, 0.0549403653, -0.1376949847, 0.1912326962, 0.1267291158, -0.1131420359, -0.0144932866, -0.0177010018, 0.0454483107, 0.1201541871, 0.0830449089, 0.0727208555, -0.2744804025, -0.0558802225, 0.0139168296, 0.0629777908, 0.1448026448, -0.0116239758, -0.2479607761, -0.0294253770, 0.0541340187, -0.2099512815, 0.0361149125, 0.0648554787, -0.1642233729, 0.0792950466, -0.0916546732, 0.2259695232, -0.3611715138, -0.0322455242, 0.1094754487, 0.0644708723, -0.0445611961, -0.0027728335, 0.1591247022, -0.0008561580, -0.1386221200, -0.4258291423, -0.0732733086, -0.0805907398, 0.0753478408, -0.1466848552, 0.1281880587, -0.1590918005, -0.1617061794, 0.0315006711, 0.1113308445, 0.0878736526, -0.0780406073, 0.1185717806, -0.0190022308, -0.1940414608, -0.1403699964, -0.0690841749, 0.0961302742, -0.0051579140, 0.0116971135, 0.1262646317, -0.0380752198, 0.1007791832, -0.0161723476, 0.0488201268, -0.1628986597, 0.3606434166, -0.0111742774, 0.0182674751, -0.1491084844, -0.0852052271, -0.1068730354, -0.0045992718, 0.0410673879, 0.0233070087, -0.1313406527, 0.3006607890, -0.0538038276, 0.0179009810, -0.1585953087, -0.0328433067, 0.0708543435, 0.0727698877, -0.0370071083, -0.2052553147, -0.1355692595, 0.3081024587, -0.0849364251, 0.0475962982, 0.0385090932, -0.2640187144, -0.1505041420, 0.0371025838, 0.0822546259, 0.0155509971, -0.0382654779, -0.0812583044, -0.0297811795, -0.1305365413, 0.1390281320, -0.0012390914, 0.0246130079, 0.0467859954, -0.0277657397, -0.0624721088, -0.0750121027, 0.1036892310, 0.1199751943, -0.2243852168, -0.0571063682, 0.0058053681, 0.0254932866, 0.1105501205, 0.0311152302, -0.0264076833, -0.2469008565, -0.0348609760, 0.0411178917, 0.1732046157, 0.0981531888, 0.0212572850, -0.2884280086, 0.0419427082, 0.1229322851, -0.0246622041, -0.0360750183, 0.1292396486, -0.1379034221, 0.1680731773, 0.1381575167, 0.1172226146, -0.3866817057, 0.0560635552, 0.0835714191, 0.1034511551, 0.0149871269, 0.0598943606, 0.0766681209, 0.0207412224, -0.1394083798, -0.4202403724, -0.1605509967, -0.2471278161, 0.1174670234, 0.0658068731, 0.0365522839, -0.1723141223, -0.1324262768, -0.0650266856, 0.1141664833, 0.1494969726, -0.0253922641, 0.0788042992, 0.0140398126, -0.0521037802, -0.2603453100, -0.0008697584, 0.0463430472, 0.2067902535, 0.1135804504, 0.1668870300, -0.0295166988, 0.1758264303, 0.1152571514, 0.0596110821, -0.0409785733, 0.3060002625, 0.0810267702, -0.1261292696, -0.0301736370, -0.3474592566, -0.0294332691, 0.1621257663, 0.0795691982, 0.0228757951, -0.2290866077, 0.3786351979, 0.2065840364, -0.0584004074, -0.1009983569, -0.0854712129, 0.1225164458, -0.0007449063, -0.1274803877, -0.3574600518, -0.1192666516, 0.2106498033, -0.1287606210, -0.0872698948, -0.0176295526, 0.1051729843, -0.1214770153, 0.0484510958, 0.0595417619, 0.0563317053, -0.1322794706, 0.0929189548, 0.0428968444, -0.1496542543, 0.2455061674, -0.0161563940, -0.0573656186, 0.0330530033, -0.0239929054, -0.0214581545, 0.0128702791, 0.1603555381, -0.0081257159, -0.1690036654, 0.0115976185, 0.0396823771, 0.0583946183, -0.0767998621, -0.1523987651, 0.0022196244, -0.0755346566, -0.1493087262, 0.1187507361, 0.2348118424, 0.1178976521, 0.0239851326, -0.2745844126, -0.0356391408, -0.0042758575, -0.1381496787, 0.0202947818, -0.0209193416, 0.0826206058, 0.0915712789, 0.1206831485, 0.1337980181, -0.5084146857, -0.0688413382, 0.0055331318, -0.0092806183, -0.0687516183, -0.0576475672, 0.0398429632, -0.0230530556, -0.0662124157, -0.5246299505, -0.1874054968, 0.0208846647, 0.0172111299, 0.0597128682, 0.0696336105, -0.1977865398, -0.1930300444, 0.0503531955, 0.2274280339, 0.0364964977, 0.0148417475, 0.0468955226, -0.1323792189, -0.0373034626, -0.2072996944, -0.0377666913, -0.0732380673, 0.2112352401, 0.1265865862, 0.0722055286, -0.0480763875, 0.0777500644, 0.0631720424, 0.0042584506, 0.0050885957, 0.3394383490, -0.0072155297, -0.2668041289, -0.0259702429, -0.3287435770, 0.1592963934, 0.1266254783, 0.0368218459, 0.0195004623, -0.1070233509, 0.3244469464, 0.1301602274, -0.0324054845, -0.1707576066, -0.1355446875, 0.0528816581, -0.2114922851, -0.2355750501, -0.1891960651, 0.0370051563, 0.0792876258, -0.1118087694, -0.1466540545, -0.0071538906, 0.0443710797, -0.0312750340, 0.1326530725, -0.1237002686, 0.0294388495, -0.2027270347, 0.1327256858, -0.1997016221, -0.0634910986, 0.0481969565, 0.0615880042, -0.0774577409, -0.1078119874, 0.0920857638, -0.0877315849, -0.1506276578, 0.0451557413, -0.0542797223, -0.0229723249, -0.0075282785, -0.0716588497, 0.1639911085, -0.0671013296, -0.0728326216, -0.0616952032, -0.0811713561, -0.1769052893, 0.2267678678, 0.1934305429, 0.0366302840, -0.0257400759, -0.2571978569, -0.0959773809, 0.0634444579, -0.0783374980, -0.0662155524, -0.1303675622, 0.1349004060, 0.0869846642, -0.0030840770, 0.0076762303, -0.6106739640, -0.1227146909, 0.0738468617, 0.0211933516, -0.1686602533, -0.0907435566, 0.0578527711, -0.0290382449, -0.0330904983, -0.3597035408, -0.2005791366, 0.0420844071, -0.0854427889, 0.0387125053, 0.1804116815, -0.2530817091, -0.0847232193, -0.0235171318, 0.2014323324, 0.1593740880, -0.0826911628, 0.0188296530, -0.0312617160, -0.0230233241, -0.1339158714, -0.1538458169, -0.1914334297, 0.1726647019, 0.0758898556, 0.1086892560, -0.0415086448, 0.1224102974, -0.0487226434, -0.0575763211, -0.1625673473, 0.1133459583, 0.0973252729, -0.2089758068, 0.0042172642, -0.2633209229, 0.1138737500, 0.2032138258, 0.0398135968, -0.0058286921, -0.0684416816, 0.1546210051, 0.1380316317, 0.0503650755, -0.0769740939, 0.0128482413, 0.0587100722, -0.2790856063, -0.0266190767, -0.0082605267, 0.0849265829, -0.2817699909, 0.0359376036, -0.0994573757, -0.0381815806, 0.1609254777, -0.0566666536, 0.1173259318, -0.0157033186, -0.0493136570, -0.1203352883, 0.1497191638, -0.2239204496, -0.0107895192, 0.0582817607, -0.1685859561, -0.2185224295, -0.0247929450, 0.1619695425, -0.1193937957, 0.0046824371, 0.0258948188, -0.1334952563, -0.0572367720, 0.0434775017, 0.0817456171, 0.0752521157, 0.0511461534, 0.0058687418, -0.0781560466, -0.1057158858, -0.1657304019, 0.1754765362, 0.1749469787, 0.0151871303, -0.1224873737, -0.1814903021, -0.0749328285, 0.0447997935, 0.0742600411, 0.0431506746, 0.0549087040, 0.0371734239, 0.0622990206, -0.0258544274, 0.0968184248, -0.3748364151, 0.0155997481, 0.0784028843, 0.0580223650, -0.2990868092, -0.0890238136, -0.1008503288, 0.0032102356, 0.0785137415, -0.2330313623, 0.0061477381, 0.0676695853, -0.1685650498, 0.0135590723, 0.0769199878, -0.2518541813, 0.0372189283, 0.1244975254, 0.0534163080, 0.0255409777, -0.0421322882, -0.0268313680, -0.0886465311, 0.0880242363, -0.0061167949, -0.2170616239, -0.1076698899, 0.1595490426, 0.1331065297, 0.0243660174, -0.0309899449, 0.0647132918, -0.1147918254, 0.0916069672, -0.1745625436, 0.1246209294, -0.0326692685, -0.1429962814, 0.1870537102, -0.0203071721, -0.0319418795, 0.0214693490, 0.0657534078, -0.0213981681, -0.0523435622, -0.0203710068, 0.0362975001, 0.0089606401, -0.0013141826, -0.0366844907, 0.1352716833, -0.0498253815, -0.1375027299, 0.2545498908, 0.0412447490, -0.2146234959, 0.0399028808, -0.0860877261, -0.0294005759, 0.1149949357, -0.1709957719, 0.0808652341, -0.2054918855, 0.0612105839, -0.0662062019, 0.0491044708, -0.2614220083, -0.0965780839, 0.1099807620, -0.1317736804, -0.1374169588, 0.0238799322, 0.1044109389, -0.2067947239, 0.0771709383, -0.0696077049, -0.1157633513, 0.0404824875, 0.0627649352, 0.0625347123, 0.0685000494, 0.0735679194, 0.1699572951, 0.0520011671, 0.0059900396, -0.3020394146, 0.1687899083, 0.0998392999, -0.0421044044, -0.0565359257, -0.0235793404, 0.0224980563, 0.1109593287, -0.0689863414, -0.1064052954, 0.0895586312, 0.0436242707, 0.1740842313, 0.1072801054, 0.1137543768, -0.3286177516, 0.0952059701, -0.0357419848, -0.0834766850, -0.1035286263, -0.1559342593, -0.0642142892, -0.1456246078, 0.0721278414, 0.0542317815, 0.1327753812, -0.0698576421, -0.1899233162, -0.0402622931, 0.0867579877, -0.1815084964, 0.0158901159, 0.1475240290, 0.0476141535, 0.0526218489, -0.0647017807, -0.0925455168, -0.0479293689, 0.0269322172, -0.0175088700, -0.1257403493, 0.0072170286, -0.0451053865, 0.0795840994, -0.0282208826, 0.1030423194, 0.1571312398, -0.1952982843, 0.0998877957, -0.1951264888, 0.1026753411, -0.2013451457, 0.0282237828, 0.1107443348, -0.0679899976, -0.0501387343, 0.0832685605, 0.0534607433, -0.0113980360, -0.0589535423, 0.0357037000, 0.1025772691, 0.0458307266, 0.0074342713, 0.1153692454, -0.0147763519, 0.0346384495, -0.0401418768, 0.1971148551, 0.0537830666, -0.1328897774, -0.0207915101, -0.1352546513, 0.1164899170, 0.0111219194, -0.0185024925, -0.0291426051, -0.1908612251, -0.0105019007, -0.0455369316, -0.1037936434, -0.1286469102, -0.1470724195, 0.1822162122, -0.1664465666, -0.2075574845, 0.0213219896, -0.0289791059, -0.1433569789, -0.0394854359, 0.0065796473, 0.0679701269, -0.2179123461, 0.0283904094, -0.1040071622, 0.1210185960, 0.0808759779, -0.0018031214, 0.0179364923, -0.0405753441, 0.1002998427, 0.0193514954, 0.0077417055, 0.0535550863, -0.1479401886, -0.0489296019, -0.0148597797, -0.0209592972, -0.0978059843, -0.1105480567, 0.0801473930, 0.0378895253, 0.0572953783, -0.1036908850, 0.0770536214, -0.0540292300, 0.0130365919, 0.0577113293, 0.0100906054, -0.0582194552, -0.0787506774, 0.0995025337, -0.1422732323, -0.0327207893, 0.0403728932, -0.0335496403, 0.0647619888, 0.0494171269, -0.1045311317, -0.0349337980, -0.1376485974, -0.0687010288, 0.1132129207, -0.0366003588, 0.0670543462, -0.0565738007, -0.1434175670, 0.0338373967, -0.0468320213, -0.0641085058, -0.0122970156, 0.0680138171, 0.0230081640, 0.1370127350, -0.0836851522, 0.1165744290, -0.0184664410, -0.1113729849, 0.0225008111, 0.0125749782, 0.0146977650, -0.2603688240, 0.1431942731, 0.0244488306, -0.0951072127, 0.0882004127, 0.0030558314, 0.1162062511, -0.0140345795, -0.0901005641, -0.0304945279, 0.0914132297, 0.0209351107, 0.0460357480, 0.0902156681, 0.0464218110, 0.0704027265, 0.0235331394, 0.0692728311, -0.0870052055, -0.0566028133, -0.0622108020, -0.1218454763, 0.0165647939, 0.0833130255, -0.0399624333, -0.2235833555, -0.0064742384, -0.1139752492, -0.0999689624, -0.0802295655, 0.0214031804, 0.0024591612, 0.0949813277, -0.1871048957, -0.0465724953, 0.0976846740, -0.1585020423, -0.0099418852, -0.0484420061, -0.0531216450, 0.1057736054, -0.1960659623, -0.1470179409, -0.1427639574, 0.1045800149, 0.0257037245, -0.1646727473, 0.0752687976, 0.0129426131, 0.0448914655, 0.0641376525, 0.1023469642, 0.1577315927, -0.1217119619, 0.0002016062, 0.0274624843, 0.0533300228, -0.0369751751, 0.1247605458, -0.0066919695, -0.0413937569, 0.0539338700, -0.1728074551, -0.0050746626, -0.0220777653, 0.0050623259, -0.0111912349, -0.0291162394, -0.1216802225, -0.1865856946, 0.0814820975, -0.1600379348, -0.0128197148, 0.0018431855, -0.0521157682, -0.0191992000, 0.1226341575, 0.0881664306, 0.1303739995, 0.0569585338, -0.0753686056, 0.0362008251, 0.0290248208, 0.0395417102, 0.0476279408, 0.0666833520, -0.0643675774, 0.0564099215, -0.0588614792, -0.0606388859, -0.0825782716, 0.1657159925, 0.1028049961, -0.2276254594, 0.0607314929, 0.0423158929, -0.0033131808, -0.0264607500, 0.1243294701, 0.1005638912, -0.1555466950, 0.1786070466, 0.0428473987, -0.1193635762, 0.0320789628, 0.0646978989, 0.0326086208, -0.0551458634, -0.0535001718, 0.1093674749, 0.0988687649, 0.0172854457, -0.0141644403, 0.1053190604, 0.0613459349, 0.1649042964, -0.0388188362, 0.0896772817, -0.0168204457, 0.0371777341, 0.0187752079, -0.0500609763, -0.0673022568, 0.0368006788, 0.1401287019, -0.1214330792, -0.0530333780, -0.0214361399, -0.0560874008, -0.0790786296, 0.1278396547, 0.0815381929, 0.0372954272, 0.0879706889, -0.0514292456, -0.0374502949, -0.0467387065, 0.1569098234, 0.1049821377, -0.1066177189, -0.0351029858, -0.1747815013, -0.1718367487, -0.0851818249, -0.0679526329, -0.0197167248, -0.0489512347, 0.0479535051, -0.0009143547, -0.0096206544, 0.1204384863, -0.0208366942, 0.1690665931, -0.0605064109, 0.0285888128, -0.1574687958, 0.1004233360, -0.0201780479, 0.0260502659, 0.1107784957, -0.1290132403, 0.0505489372, -0.1654221267, -0.0553386100, 0.1147483215, 0.0388455875, 0.1213079393, 0.0138534838, -0.0838544294, -0.1859013140, 0.1046869457, 0.0138604622, -0.0296970699, 0.0332107507, -0.0614661351, 0.0278207418, 0.2991412282, -0.0651455596, -0.0844467431, 0.0254643429, -0.1363385022, 0.0622652136, -0.1009359434, 0.0351547673, -0.0602993928, 0.0410876013, 0.0365946107, -0.0828116387, 0.0803078562, 0.0327354670, -0.0652169511, 0.1924484819, -0.0034487990, -0.1486147344, -0.0797038451, -0.0545669831, -0.0617823787, 0.0736155063, 0.0291518047, -0.0766908601, -0.0400874279, 0.1221864894, -0.1343971789, -0.0724760666, 0.0520632006, -0.0461778194, 0.0217741579, -0.0188303497, 0.0679038391, 0.0178784914, -0.0133232260, -0.0348698124, 0.0178158712, 0.0311141238, 0.0761098936, -0.0049173548, 0.0590245314, 0.0637829527, 0.0153586445, 0.0467547849, 0.0378173105, -0.0194809176, -0.0384503044, 0.1349343807, 0.1952560544, -0.1233067587, -0.0930936784, -0.0303886253, 0.0771546215, -0.1269935071, 0.0782698393, 0.0247594770, 0.0810401887, 0.1949235052, 0.0666286424, 0.0460959189, -0.0304846521, 0.0382388942, 0.0252600498, -0.0592707023, -0.2933447957, 0.0013771362, -0.1890454441, 0.0061282557, -0.0357552022, -0.0481358208, -0.1933561563, -0.0005356178, 0.0198198445, 0.0504766144, -0.0467472263, 0.0937459394, 0.0254486315, -0.0659617633, -0.0223398115, 0.0229973998, -0.0269013233, -0.0214843042, -0.0398384705, 0.1973883957, -0.1499204338, 0.0838663802, -0.1569346935, 0.0380075946, 0.1487286538, 0.0627923012, 0.0530727655, -0.1111935377, -0.0048474688, -0.0555292256, 0.0789334103, -0.0524919778, 0.0186901726, 0.0457006767, 0.0029411914, -0.1230969355, 0.1632264405, 0.0316146165, -0.0937158167, 0.0957604051, -0.0333377905, 0.0664134324, -0.0752406195, -0.0056498088, -0.1230131984, 0.0729049817, 0.0735158250, -0.1752363592, 0.0026776509, -0.0416630767, 0.0201590173, 0.1777664274, 0.1437552720, -0.1015081778, -0.0505728610, 0.0078885993, -0.0853905305, 0.0741300359, 0.1036046520, -0.0690112114, -0.0319277011, 0.1977870613, -0.0508868471, -0.0560901426, 0.0118711824, -0.1036317870, -0.0518539511, -0.0645545200, 0.0098005580, -0.1607099026, -0.0876213983, 0.0567119606, -0.1768840253, -0.0579446442, 0.1204899400, -0.0101017542, 0.0263920985, 0.1287030131, 0.1389179081, -0.1653355062, 0.0004114936, -0.0170699526, 0.0447037928, -0.0172954258, 0.1703890562, 0.0644492581, -0.2352024615, 0.0805884898, 0.0435403064, -0.0940904841, 0.0348870866, 0.0506986566, 0.1752149612, 0.2433658093, 0.0887352824, -0.0207215622, -0.1813746989, -0.0711649507, 0.0955697000, -0.1318387091, -0.2647621930, 0.1010285988, -0.1185170263, 0.0467894301, -0.0181306973, -0.0847601593, -0.1860220581, -0.0089259334, -0.1412235498, 0.1752463430, 0.0270106308, -0.0528930761, 0.1562630087, -0.1730449498, 0.0846411139, 0.0490324572, -0.0153795863, 0.0090256324, -0.0340257548, -0.0176513176, -0.2042285055, 0.1468226910, -0.2087101340, -0.0227949806, 0.1403888464, -0.0325635597, -0.0890580341, -0.1918827891, -0.0303195491, -0.0077804676, 0.0067884731, 0.0489802361, -0.0111430129, -0.1474836618, 0.1278263032, -0.0780968815, 0.1580320001, -0.0429446474, -0.1093500629, -0.0368960388, 0.0816038847, 0.0767035633, -0.1443037987, -0.0992727280, -0.1670993567, 0.2096708417, -0.0030616678, -0.2271803468, 0.1134680212, -0.0381585583, -0.0520648360, 0.0493777171, -0.0196979865, 0.0092164101, 0.0343381576, -0.1377931386, -0.1159649268, -0.0007490012, -0.0633705258, -0.0433637351, -0.0520076044, 0.0954561457, -0.0272373985, -0.1157832965, -0.1452650428, 0.0277016405, -0.0894581527, -0.0184075832, 0.0841855109, -0.0039711804, -0.0307708569, -0.0165468305, -0.2236150652, -0.0509526879, 0.1108253971, -0.1310290992, 0.0075253816, -0.0635297075, 0.1108644381, -0.1145301908, 0.0146419415, -0.0132354870, -0.0419993512, -0.1154556125, -0.0645776168, 0.1188825071, -0.3053905070, 0.0506345481, 0.0399749465, -0.2109322399, -0.1111034974, -0.0491595417, -0.0151160639, 0.0689141527, 0.1700945944, -0.0337776393, 0.0692666322, -0.0421130210, -0.0820857808, -0.2096880525, -0.1039707065, 0.1224612519, 0.0624620914, 0.0381429084, -0.0066623450, -0.0297576673, -0.0926729217, -0.0028713252, -0.0763587728, -0.0081659378, -0.0738249943, 0.0337188654, 0.1085870266, -0.1539302766, -0.0175347812, -0.1212913990, -0.1377405673, -0.0901556313, 0.0426577218, 0.0047562816, -0.0803589448, 0.1813080609, -0.0623817965, 0.0460028686, 0.1765725315, 0.0092812721, -0.1038394123, -0.1363165677, 0.0961267203, 0.1562626809, -0.0688372403, 0.0130193019, -0.2513466179, -0.0894971415, 0.1718729883, -0.0032612460, -0.0312887132, -0.0619453304, -0.0587946065, 0.0238583628, -0.0101705790, 0.1133432388, -0.1192370877, -0.0752570704, -0.0670898929, 0.0789992660, 0.0109585570, -0.1288661063, -0.0155088017, -0.0315942355, -0.0023623549, -0.0782969072, 0.0131529635, 0.0042405245, -0.0496427454, -0.0179054793, 0.0606299117, 0.0000102006, 0.0910684988, 0.0834065080, 0.0262990557, 0.0623492301, -0.0382373296, -0.0083386218, 0.0075810454, 0.1242327541, -0.0071918224, -0.0529222265, -0.0751998052, 0.0593792871, -0.1299443096, -0.0508372039, -0.1960638165, 0.0992125496, 0.1156415790, -0.1481354237, -0.0504092015, 0.0998358279, 0.0577658415, -0.0243161116, -0.0667851269, 0.0935416520, -0.0310771372, -0.0603943020, -0.0917789564, 0.1576265097, -0.3540861607, 0.0129881203, -0.0073013096, -0.2355325669, 0.0363352969, -0.0237841252, 0.0555187985, -0.1096824035, 0.0479491092, 0.0003703187, -0.0404886752, -0.1550648808, -0.1005442291, -0.1648794264, -0.0042016273, 0.0684974715, -0.0528418534, 0.1008357331, 0.0093019931, -0.0355577245, -0.0012181015, -0.1585990191, -0.1477337033, -0.0071160551, -0.0199959185, -0.0110622719, 0.1674369723, -0.1684714407, -0.0383727178, 0.0852750614, -0.1405843645, 0.0146235954, -0.1229711771, 0.2225209177, 0.0150474217, 0.1893792599, -0.2261916697, 0.1352828294, 0.2320473790, 0.0604939237, 0.0357144214, -0.0906186774, 0.0228610318, 0.1573086083, -0.0742784142, 0.0200477280, -0.1474348009, 0.0060912208, 0.0991927832, -0.0139054218, 0.0464280322, -0.1062927693, -0.1608890146, 0.1121145338, 0.1170152277, 0.1204791665, -0.0807852224, -0.0036541959, 0.0879214853, -0.0876626894, 0.0292721931, -0.0433722772, 0.0798017979, -0.0158520676, -0.0451017022, -0.0621318445, 0.0747342557, -0.0704653934, -0.1524189264, -0.0871999711, 0.0164605901, -0.1612774283, -0.0715304762, -0.0309790242, -0.1772523969, -0.0047467207, 0.0857391879, -0.1030614749, -0.2760479152, 0.2479440868, -0.0641452298, -0.0430120341, 0.1171963885, 0.0835346580, 0.0935525894, -0.0735503584, -0.1161487922, 0.0341913365, -0.2013813257, -0.0064511788, 0.1244302765, -0.0294828117, 0.0678856745, 0.0550270006, -0.0499000661, -0.0234265663, 0.0900547877, -0.0847275257, -0.1824929565, -0.0154226469, -0.3302261829, 0.0763544887, -0.2021144778, -0.1487524211, -0.0458416753, 0.1058360562, 0.0258383490, -0.0268868413, -0.0506235324, -0.0119209420, 0.0465480164, -0.2406033576, 0.0222862624, 0.0585380010, -0.0343907997, -0.0088128122, -0.0863464996, -0.0371413752, -0.0739240423, 0.0213531870, -0.0371064395, 0.0830775127, -0.0990665928, -0.0097125163, 0.1513720602, 0.0029448813, 0.2941942215, 0.0581674725, -0.0448070168, 0.0101335719, -0.1331806183, -0.0033225997, -0.0269770585, 0.1398989409, -0.1436351985, 0.2509760559, -0.2550863922, 0.0948233604, -0.0346523598, -0.0975204781, 0.0102751506, -0.0165535342, -0.0220399238, 0.2504113019, 0.0585169829, -0.0162753779, -0.1823467016, -0.2221551538, -0.0590534359, -0.1142833009, 0.0151468338, 0.0747240707, -0.0365690552, 0.1064770594, 0.0891700611, 0.0486940779, -0.1642745733, 0.0769839734, 0.0241362266, -0.0887162015, 0.0121315243, -0.1180706993, 0.0272036605, 0.0221591424, -0.1404805034, -0.1300470084, -0.0500777774, -0.0634869039, -0.1227489039, -0.0426788479, 0.0367227718, -0.0348295011, -0.1443029046, -0.0426257960, 0.0216695219, 0.0688287690, -0.0031058192, 0.0065029468, -0.0739846453, 0.1249353662, -0.1174583957, -0.0312652886, 0.1420623064, 0.0741908178, -0.2201000601, 0.0040967446, -0.0525889881, -0.0699942708, -0.1274952590, -0.1974337250, -0.0053681289, -0.0066162013, 0.0570540503, -0.0121658044, 0.0757198036, -0.0724445432, 0.0402548015, -0.0941688046, -0.2485062182, -0.0098347468, -0.3211511672, 0.1002941504, -0.1351740658, -0.0788294598, 0.0201235153, -0.0038146623, 0.1189919338, -0.0261899978, -0.1859836727, -0.0704361722, 0.0508772656, -0.0772219747, 0.0588463880, 0.1448837221, -0.0494769737, 0.0550543219, -0.0193068106, 0.0925913006, -0.0054130540, 0.0552421920, 0.0842070952, 0.0021468254, -0.1493918151, 0.0593998916, -0.0373123512, -0.0542558283, 0.1061573401, 0.0437252037, 0.0128902914, 0.0336187817, -0.0685536191, -0.0942431688, 0.0170607828, 0.1040895060, 0.0586893894, 0.0482271798, -0.3029422164, -0.0391199663, -0.0619446337, -0.0497180596, -0.0730262101, -0.1377441436, -0.0732052550, 0.1525183916, 0.0238108262, 0.1673674434, 0.0173507724, -0.1784839183, 0.0899409950, -0.0321925059, -0.0264425632, 0.0754137114, -0.0681279302, -0.1155725196, 0.1562502384, -0.0273699369, 0.0759636760, -0.0300191194, -0.1267067939, 0.0461174883, 0.0202921592, -0.1187076643, 0.0120645594, -0.0011470005, -0.1581941992, 0.0364829488, 0.0230492856, 0.0360966660, -0.1668369919, -0.1249397025, -0.0674391687, -0.0146128349, -0.1622025371, 0.0032956118, -0.0665572733, -0.1685045809, -0.0608582012, 0.1109217182, 0.0005044832, 0.1260916293, -0.0029151619, -0.0135657890, 0.0758905709, -0.0197030287, -0.1980794221, -0.0712933317, -0.0800543502, -0.0751856938, -0.2332944125, -0.1969808191, 0.0567815416, 0.1255144477, -0.0235400945, -0.0333007202, -0.0463248044, -0.2526967227, -0.0162561983, -0.1052936539, -0.2282988578, 0.1073240861, -0.2126586288, 0.0579225793, -0.0636266470, -0.1554016471, 0.0220012907, 0.0432945490, 0.1356969774, -0.2542677224, -0.1943540871, 0.0581950769, 0.2371545136, -0.1074650064, 0.0388844982, -0.0899496973, 0.0305054057, 0.0442986302, 0.0072911200, 0.0705377385, -0.1333962679, 0.0080105308, 0.0835121498, 0.0540976599, -0.2018521875, -0.0022368545, -0.0903463513, 0.0421180278, 0.0883207619, -0.1052089110, 0.0009941278, 0.0330315605, 0.0001734674, 0.0347385928, -0.0009181611, 0.0700398237, 0.1071772799, 0.1336210966, -0.1104055569, -0.0070748408, 0.0833459347, -0.0713176653, 0.0214326438, -0.0084549729, 0.0779794306, 0.1317240596, -0.1821583360, 0.0645513088, -0.2222063988, -0.1212362424, 0.1624964923, -0.0755819008, -0.0969020873, 0.0463788509, -0.0255176798, -0.0079332143, 0.0311445650, -0.0471058823, 0.0344551131, 0.0720101744, -0.0566574298, -0.0168160554, -0.0640699416, -0.0740301535, 0.0299482346, 0.0139378654, -0.1854596883, -0.0072210790, -0.1566390991, -0.1072622016, -0.1499911696, 0.1516466588, -0.0024299114, -0.0129014412, -0.1601962894, -0.0560868867, -0.0588246807, -0.0251073204, 0.0609444305, 0.1540984511, 0.0032542683, 0.1652339101, 0.1686438322, -0.1547001600, -0.0348223709, -0.1755008101, -0.1850699335, -0.0609471239, -0.0306450427, -0.0845589936, -0.1918503344, -0.1551647186, 0.0878446847, 0.1232508495, 0.0594961718, -0.0243715160, -0.0232086964, -0.0060318955, -0.0266627707, 0.0497065224, -0.0873761922, 0.0465876944, -0.0522511788, 0.0613187179, 0.0300676059, -0.1759337187, -0.0488196164, 0.0707247406, 0.1596732587, -0.1158693433, -0.1450891495, 0.1596505791, 0.0941941366, -0.1358761638, -0.0457973555, -0.1305529028, -0.0105952304, -0.0389772318, 0.0720715821, -0.0246110018, -0.0723135844, -0.0710509494, 0.0958240107, 0.0039505986, -0.1439555138, 0.0936699882, 0.0281888451, -0.0250456110, -0.0865378454, -0.2070211917, 0.0910104215, 0.0384971388, -0.1798275113, 0.2636623085, -0.0569135658, 0.4755294323, 0.0848571509, 0.2910592556, -0.0221794304, -0.0250447523, -0.1258186847, -0.0523946211, 0.2476667315, -0.0214217938, -0.0769181773, 0.0065730680, -0.0510991327, -0.2639878392, -0.2070903480, -0.1942841560, -0.0350044742, -0.0697086900, -0.2090982795, -0.1923080683, 0.0371541344, -0.1684442759, -0.0653802007, 0.1296266615, 0.1129498705, 0.2099684924, 0.0255754553, -0.1703767776, 0.0988756865, -0.1230475381, -0.0806342140, -0.1860949844, -0.1209060103, -0.1440223902, -0.1494649202, -0.1367559433, -0.0598469824, 0.3285968900, 0.0811082721, -0.1526098847, -0.0962610543, 0.1403124630, -0.0277337041, 0.0995721444, 0.1602253318, 0.1650334150, 0.0109653454, 0.1926305741, 0.2270870358, 0.0585092343, 0.0789999515, -0.3185479045, -0.2240998447, 0.0190218873, 0.0283966102, -0.0716934353, -0.1974844784, 0.0302841030, 0.1788697094, 0.1621128172, 0.0549815111, 0.2195580304, -0.0347919874, -0.1155159175, 0.1486583799, 0.0274357181, -0.0667185932, 0.1205031648, 0.0287237652, 0.1415292472, -0.1998815238, -0.1053809002, 0.0080298726, 0.1923366040, 0.0427972488, -0.0013084054, -0.1211486757, 0.0292244535, -0.0019416887, -0.1506425589, 0.0201569274, 0.1004412174, 0.0638046935, -0.2602528632, 0.1746695489, -0.1527342945, 0.1590074599, 0.1406083256, 0.1880302280, -0.0386295393, -0.1097953916, 0.0273851827, 0.2953858078, 0.1694882512, 0.2164093107, 0.0385029502, -0.1477379948, 0.0969028622, -0.1716485322, 0.2460816950, -0.1542364210, 0.2646382749, 0.1821531653, 0.1871108562, 0.0124713015, -0.1482170671, -0.0854184702, -0.2890015543, 0.0643282682, 0.0400885567, -0.1266553998, -0.1134474427, -0.1144972891, -0.1512206346, -0.0756537318, -0.0445569903, -0.0011921048, -0.0589211434, -0.1320595294, -0.2422594726, -0.0697188750, -0.0861892775, -0.0141717317, -0.0575753413, 0.1144939438, -0.0211914312, 0.0517716445, 0.0082467096, 0.0192858987, -0.0803876743, -0.1360925585, -0.1372797936, -0.0826478824, -0.2344837338, -0.0059867445, 0.0141435564, -0.0844287574, 0.1006722972, -0.0120475730, -0.1629361957, -0.1205044240, 0.0594510660, -0.0897706524, 0.0375604555, 0.1064766347, 0.0662040263, -0.0931904167, 0.0277401712, 0.2086308599, 0.0189970825, 0.1337113678, -0.1865556091, -0.0887328163, 0.0417615250, 0.0763157383, -0.1236074269, -0.1564921886, -0.2825593352, 0.1627106220, -0.1653326750, 0.1037232578, -0.0355074555, -0.1079177782, 0.0484539159, 0.1237102523, -0.0276213437, -0.0544928610, 0.1935779601, 0.0620602034, -0.0783245936, 0.0078553036, 0.0405131392, -0.0974609926, 0.1567166746, -0.1262223423, 0.0840356052, -0.0086822296, -0.1279665828, 0.0271312185, -0.1049919501, 0.0647856519, 0.1772620231, 0.0195983462, -0.0727844462, 0.1397787631, -0.0660878494, -0.0233429577, -0.0909923613, 0.1489415020, 0.1211902574, -0.0613053627, -0.2013992965, -0.0072885081, 0.2070493400, 0.1148308441, -0.0845710933, 0.0636533126, -0.0537053496, 0.0107231438, 0.0763496831, 0.0123048052, -0.1287474483, -0.0313147902, 0.1431448758, -0.1096257418, -0.2039168924, -0.0557795726, -0.1609578580, 0.0904052258, 0.1201028153, -0.0459210128, -0.0947149619, 0.2373150587, -0.0910333395, -0.0130143045, -0.0832716972, -0.1953942329, -0.0681362674, -0.1399017721, -0.1627641618, 0.2402173430, 0.0776312277, 0.1032275632, 0.0987214893, -0.0435009636, 0.2041389644, 0.0631388202, -0.1241722852, 0.0612093583, -0.0931298137, -0.0085695451, 0.0842381045, -0.1361830384, -0.1790872067, -0.0516559668, 0.0884154364, -0.1538808346, 0.0620651990, -0.0195298307, 0.0769500136, -0.0633676127, 0.1486063302, -0.0051042996, -0.0405623801, 0.1348339617, -0.0310953446, -0.0430120490, 0.2327048182, 0.1671597213, 0.1600023359, 0.0585923195, -0.0579404868, -0.1075077802, -0.0581790656, -0.0569712259, -0.2261551470, 0.0019511048, -0.0853655562, 0.1544768214, 0.0440827385, -0.0748666525, 0.1978957951, -0.0539843105, 0.2562289834, -0.0030480609, -0.1447147131, 0.0441961326, 0.0644261762, 0.0218611732, -0.0724133030, 0.1548436433, 0.0686533004, -0.0633651167, -0.0868623704, -0.0344823971, 0.1098598465, 0.0389613584, -0.2255282253, 0.1762109548, 0.0609826595, 0.0554885790, 0.0588264987, -0.0798559263, -0.0526370332, 0.0467976294, 0.0722794086, 0.0351292565, 0.0020781299, 0.0778924152, -0.1463904530, -0.0005951087, -0.1987426877, 0.0986876041, 0.2425837964, 0.0893798172, 0.1385921240, 0.0375161134, 0.0089455070, 0.1081339791, -0.0834053829, -0.0953348503, 0.0738895535, 0.0520111173, 0.1369272172, -0.1359304339, 0.0003901489, -0.0865279585, -0.0107481992, -0.0904735625, 0.1053750217, -0.0624041185, -0.0108506903, -0.0512569956, 0.0215163641, -0.0314125903, -0.0627979040, -0.1073782444, -0.0055766846, -0.0021874681, 0.0311384425, 0.0373834372, -0.0289658457, -0.1024273932, -0.0979454443, -0.0266393460, -0.0424192064, 0.0642058253, -0.0891996101, -0.0833500698, -0.0365845636, 0.0353495926, 0.0381218679, 0.1335894018, 0.1113336161, -0.0930649117, 0.0313492529, 0.1050964743, 0.0227261055, -0.0275128558, -0.0221408438, -0.0725372806, -0.0615104884, 0.0619088560, 0.0058855209, -0.0943301171, 0.0397008657, -0.1313251406, 0.0164974201, -0.0784419850, 0.0664287359, 0.1013146415, 0.1871814132, -0.0077557163, 0.0569587499, -0.1174193174, 0.0553462543, -0.0091736792, 0.0660859346, 0.0156121459, 0.0923342705, 0.0308123361, 0.0087647643, 0.0779372975, -0.0948034972, -0.0052182721, 0.0346200727, -0.0527396575, 0.0483398214, 0.0645268857, -0.0614599138, 0.0696225837, -0.1035515293, 0.0623219870, -0.0052464320, -0.0157558266, 0.0583100319, 0.0094790636, -0.0615435541, 0.0385361426, 0.0638796762, -0.0912853554, 0.0191673562, -0.0889638066, -0.0801138729, 0.0176988766, -0.0420058332, 0.0204268079, -0.0208360069, 0.0458776690, -0.0287577808, -0.0846843272, 0.1075590029, -0.0631289333, 0.1690387726, -0.0232282951, 0.1580646783, 0.0219775252, 0.1595125347, -0.0582248792, 0.0638176948, 0.0209438317, 0.0085467193, -0.0446318761, -0.0620448515, -0.0505972020, -0.0245581400, 0.0952737927, 0.0329576507, -0.0277663562, -0.0472501889, 0.0136147812, 0.0750312433, -0.0705640763, 0.0518681742, 0.0241908468, 0.0332503095, -0.0022204495, 0.0038377796, -0.0466643758, -0.0373107493, 0.0329378359, 0.0865049884, -0.0090343822, -0.0561919324, -0.0091186278, -0.0499068163, 0.0317874774, 0.0225254111, 0.0621721745, 0.0671966225, 0.1029878482, 0.0666356087, 0.0130990613, 0.0569747351, -0.0348127633, 0.0741894022, 0.0111460825, -0.0514581054, -0.0681752935, -0.0484436937, -0.0180848222, 0.0610479414, -0.1115329713, -0.0397640988, 0.0413162187, 0.0166224986, -0.0192957819, 0.0022567313, 0.0310646165, -0.0538103543, 0.0413621590, -0.0326897874, 0.0193520132, -0.0701451600, 0.0266360156, 0.0006040432, 0.0406143740, -0.0451034419, 0.0074969134, 0.0352839194, -0.0562554933, 0.0179165173, 0.0420473665, 0.1206640229, 0.0662094802, 0.0319580473, -0.0177738983, -0.0151333986, 0.0241805203, -0.0553914793, -0.0553321354, 0.0123813804, 0.0152335577, -0.0853476003, -0.0630029738, -0.0692111179, -0.0108948881, 0.0343157463, 0.0575926378, 0.0374124683, 0.0373785459, 0.0766118318, -0.0332500413, 0.0592020713, 0.0074315201, 0.0661740005, 0.0118537769, -0.0811949447, -0.0392052084, 0.0051392238, 0.0189025495, 0.0416906253, 0.0627611279, 0.0336063802, -0.0733546689, 0.0738505051, 0.0129040079, -0.0532200560, 0.0165583827, 0.0923278108, 0.0217927210, -0.0608907379, 0.1968344301, 0.0635054782, -0.1393933892, 0.1442484409, 0.0051929522, -0.1333356649, -0.1358979493, 0.0037187771, -0.1248009503, 0.0659638569, -0.1321820468, -0.0953135714, -0.0490971170, -0.0547527969, 0.1213743836, 0.1796285212, 0.2335963994, -0.0382066406, -0.1013977677, -0.0300957002, 0.0834463462, 0.0267945640, -0.0747067630, -0.0321453847, -0.1967429966, -0.0760859549, 0.0440262146, 0.2346914262, 0.1131137311, 0.0728996620, 0.1569768339, 0.0457985774, -0.0422819927, 0.0160701107, 0.0081716944, -0.1210117713, -0.1547120512, -0.0732221678, 0.0004572642, -0.1071128845, -0.0453701802, 0.1486886591, -0.2022373378, 0.0520951599, -0.0420006104, -0.0226864833, -0.1135042384, 0.0823063180, 0.0663069189, -0.0292925090, -0.0807487890, -0.0641238689, 0.0346473344, 0.2194037735, -0.0308019035, 0.0741321370, 0.0523989238, 0.1045735255, 0.0768054426, -0.1612235606, -0.0070911115, 0.0259453673, 0.0756462440, 0.0280276723, 0.0499443039, -0.1032831818, -0.1021102294, -0.0189051572, 0.0322044492, -0.0436521173, 0.1322401017, -0.0724270642, -0.0091993194, 0.0771730319, 0.0333736017, -0.0037399852, 0.1176230833, 0.0650408566, -0.0891207829, -0.1059979945, -0.0913071185, 0.0071735363, 0.0777733997, 0.0574610420, 0.0744551942, 0.2129884362, 0.0174622610, 0.2020737380, -0.0148585960, 0.0642200857, 0.0170224048, -0.0119886063, -0.1591315269, 0.1008352488, 0.0609680153, 0.1393266618, 0.0217965003, 0.1195628047, 0.0267064478, -0.0650115833, -0.1106228456, -0.0882492438, 0.0756041706, 0.0591927171, 0.3966037929, -0.1417969316, 0.0387641750, -0.1459255517, -0.0667473748, -0.0369455405, -0.0447317325, -0.0865918398, -0.2392778546, -0.0717643127, 0.1640900522, 0.1364301741, -0.0653621331, -0.1325294822, 0.0713858977, 0.0431736708, -0.0010716933, 0.0758365542, 0.0274791513, 0.0195209607, -0.0030471249, -0.0224237256, 0.1520540863, -0.1344944686, -0.0011805053, -0.0793634355, -0.1096278727, -0.1167553812, 0.0322827995, -0.0333217606, -0.2446716726, -0.0097138640, -0.1389137805, -0.1418116242, -0.0164629947, -0.1063830853, -0.0124452729, -0.1501178592, 0.0609404966, 0.2329604775, -0.0381797217, 0.0909870267, 0.0264073573, 0.1984462738, -0.0452676080, -0.3308601379, 0.0356880240, -0.0419091880, 0.0523397215, -0.1771909893, 0.0296186376, -0.0638245791, 0.0878767967, -0.0821144059, 0.2715738416, -0.1322444677, 0.0611682050, 0.1391652972, 0.3158349991, -0.0145108569, -0.1483537704, -0.1279278100, 0.0271267071, 0.0782754347, -0.1871889383, -0.1332232654, 0.0496245660, -0.0415388793, -0.1426018924, 0.1289720237, 0.1685144603, -0.0163282026, 0.1769631803, -0.0759913698, 0.1527085900, -0.0161839742, -0.1048849523, 0.1911251247, -0.0768478885, 0.0518552400, 0.1237672493, -0.2053644657, 0.0878418311, 0.3098628223, 0.2152537256, -0.0266338401, 0.0161800720, -0.0881907195, 0.0610288344, 0.0024749686, -0.0891542435, -0.1190329567, 0.0171686504, 0.0795500651, 0.1055917144, -0.0165611655, -0.1017007530, 0.1167558730, 0.0044543282, -0.0387795158, 0.1715756655, -0.1020665616, -0.0590161495, -0.0554438196, 0.1041318253, -0.0341687128, 0.0556646511, -0.0821721852, 0.1076626405, -0.0450638533, 0.0886568055, -0.1705286056, -0.0390882827, -0.1196340919, -0.0044630612, 0.0704242662, 0.0090450542, -0.0223975535, -0.0588675290, 0.1498436183, 0.1847099066, 0.0716462135, -0.0289436318, -0.2079427540, -0.0380722471, -0.1757290065, -0.1027979925, -0.1275533885, 0.1135842800, -0.0430521145, -0.2000650316, 0.0544651747, -0.1207585707, 0.1188291237, -0.0788669214, 0.1178195924, -0.0197069254, -0.0864726901, -0.0525580943, -0.0168197118, 0.0680121034, 0.0065171742, 0.1651797444, 0.0421583354, -0.0232959129, -0.2192682475, 0.0755567253, -0.0194097683, -0.0493955016, -0.1823156625, -0.0159365125, -0.0313045904, 0.0060116015, -0.0191870965, 0.0000044955, 0.1957103908, 0.0700881481, -0.0889095366, 0.0436894782, 0.0036705676, 0.1522250623, -0.1755333394, 0.0064764540, -0.1398580074, 0.0523285680, -0.0820799768, 0.1538217366, 0.1027315408, -0.0139135290, 0.1037724838, 0.1293569952, -0.1720792651, 0.0133153899, -0.1374669224, 0.0625633374, -0.0315117761, 0.0927057266, -0.0080773951, -0.0497428216, -0.0838094875, 0.0690932721, -0.0027979000, -0.1245440692, 0.0452120006, 0.1661493927, 0.0760065392, -0.0506298393, -0.0916524604, 0.0402942747, 0.0629304945, -0.1399534941, -0.0354040004, -0.0938157663, -0.0775696412, 0.0395719633, -0.0206850618, -0.1789514869, -0.0910469070, -0.0537227839, -0.1174716279, 0.1245380417, 0.0832842886, 0.0526671484, -0.1447127312, 0.0729871169, -0.0435066931, 0.0108334068, -0.1236831620, 0.0774640664, -0.2422880679, 0.2219474912, 0.0031674530, -0.0184823386, 0.0313067660, -0.1233873591, -0.0288622696, -0.0185874272, 0.0545838252, 0.0548421293, 0.1068753302, 0.1533179879, -0.0347562060, -0.0967154503, -0.2100461870, 0.1382095367, -0.0508001409, -0.0169036593, -0.1082078665, 0.1828361005, 0.1205132455, -0.1056404114, -0.0302716512, -0.0855296105, -0.0291536562, -0.0148461657, 0.1219472215, 0.0557955168, -0.0562034883, -0.0327460468, -0.1455146372, 0.0587159023, 0.0543506369, -0.0010233694, 0.0111293597, -0.0095678531, -0.0936269239, -0.1867315620, 0.0107575590, -0.0614963211, -0.1134896576, 0.0211833846, -0.0185530297, -0.0529061146, 0.0945698321, 0.0571943074, 0.0669547394, -0.0079605030, 0.0080501540, 0.0026975183, -0.2199066430, 0.1213219389, -0.1757459044, -0.1227296516, 0.1763409227, 0.0029539105, -0.1913247108, -0.0858287364, 0.0336753763, 0.0582627133, 0.1860387176, 0.1432939768, -0.0763061270, -0.0140141882, 0.0669500083, 0.1128392518, 0.0405380912, 0.0432861596, -0.1678230613, -0.0031813465, 0.0782090947, 0.1397341639, -0.0885749608, 0.0871107206, 0.0584521443, 0.0850951970, 0.0906554908, -0.0193622354, -0.0549149737, 0.1642706990, 0.1102171317, -0.3556809425, -0.1267372072, 0.1953452080, -0.0951090902, 0.1552417278, 0.0100376606, -0.1724496931, -0.0840318948, -0.1854635030, -0.0382086895, 0.1710259020, -0.0337338038, 0.0534693412, -0.0925655961, 0.1528386474, -0.0163258463, 0.0243226867, -0.0180252306, 0.0091797002, -0.1528144926, 0.1110527813, -0.0235705301, -0.0460858978, -0.1377556622, 0.0099515263, -0.0764054283, -0.1187357455, 0.0226879772, 0.0809589550, 0.1687768847, 0.1001423746, -0.1051447168, -0.0750297606, -0.1558643579, 0.0339509733, -0.1240874976, -0.0868457258, -0.0830069259, 0.1309870631, 0.1311088800, -0.0698032528, 0.1288162321, -0.0248273183, 0.0796855390, -0.1189177185, 0.0261518992, 0.0396736376, 0.0852469429, -0.0655682012, -0.0554759428, 0.0882988945, 0.1763272882, -0.0024319987, -0.0463336110, 0.0398066342, -0.0020780314, -0.3658174872, 0.0758537799, 0.0150138717, -0.1359958351, 0.0713172257, -0.1009760648, -0.1287571937, -0.1402574033, -0.1025407761, 0.2036262900, -0.0040479982, -0.0429095179, -0.1078194529, -0.1228050441, 0.1928418130, -0.1695905030, -0.0685573742, 0.0254594665, 0.0530600250, -0.0144068934, -0.1335733682, -0.0436009094, -0.0361936986, 0.0119323637, 0.2559878230, -0.1535941511, 0.0378988385, 0.0106012765, -0.0325330049, 0.0472237468, 0.0009958483, -0.1800609231, 0.0185716376, -0.0455086567, 0.0656069070, 0.0565619618, 0.0421733819, -0.0566736646, 0.1039194167, 0.0231336989, -0.0095173176, -0.1012540832, 0.0809478536, 0.0840424448, -0.4009422958, 0.0285183806, 0.1987939626, -0.1188662127, 0.0621971376, 0.2478474528, -0.1024814248, -0.0967219844, -0.2262037247, 0.0628724843, 0.0936699584, -0.1050666943, 0.0646127388, -0.0205064286, -0.0181405488, -0.0203319211, -0.0163018107, -0.0324147381, 0.0409553573, -0.0614236668, 0.0821292400, -0.1199014932, 0.0634656996, -0.2665691376, -0.0486902073, 0.0083207637, -0.1127485856, 0.1312420517, -0.0175207760, 0.0463194102, 0.0668849275, 0.0092084352, -0.1776370853, -0.2999161184, 0.0101288566, -0.0459904186, 0.0703192130, 0.0852569416, -0.0178513750, 0.0574123636, 0.0392786488, 0.1783380061, -0.0075375354, 0.1273897886, -0.0746339634, 0.0790059641, 0.0510816500, 0.0055092364, -0.0426129699, 0.0026527487, -0.0631268471, 0.0383905731, -0.0365211330, -0.0258290973, 0.0035406207, 0.0625500455, -0.4133498669, 0.0065496010, -0.0514985397, -0.1633928269, 0.1440645158, 0.0683731064, -0.0533713438, -0.1514545828, -0.1604406834, 0.2652823329, 0.0095027573, 0.1044051498, -0.0479467362, -0.1501231641, 0.2344333977, -0.0254178438, -0.0000429452, 0.0064091128, -0.0891284347, -0.1420551687, -0.1311459094, 0.0040828632, 0.0141762337, -0.0380204767, 0.1067871600, -0.0470288731, 0.0623489544, 0.1311994791, -0.0010790481, 0.0945994332, 0.1064183488, -0.1366625577, -0.0453786701, -0.1086086258, 0.0609253906, 0.1842657924, -0.0042020832, 0.0197668411, -0.0422202423, -0.0454928912, 0.0037674473, 0.0270535778, 0.1252679080, -0.0529176109, -0.4203109145, 0.1294524223, 0.1699053198, -0.1430955082, -0.0444666110, 0.0979617462, -0.1685115695, -0.0114348717, -0.0763808414, 0.0931939408, 0.0812971815, -0.0298517495, -0.0078061088, -0.0401181281, -0.0493214875, 0.0240396019, 0.1046682224, -0.0252491720, -0.0063655144, -0.2015844584, -0.0369142368, -0.1095561683, 0.0007537119, -0.1514046490, 0.0864531174, -0.0509046689, -0.1915008575, 0.0251735896, 0.0455624051, 0.0774504170, -0.0202899240, 0.0584109612, -0.1212991849, -0.3098418713, 0.0714678317, 0.0979041606, 0.0515764989, 0.0100193620, 0.0330872536, 0.1467339694, -0.0140093146, 0.1464307904, 0.0817052945, 0.1027172133, 0.0377652459, 0.0104656797, 0.0081368703, 0.1121477559, 0.0576888658, -0.0505570322, -0.1089542583, -0.0418928750, 0.0374352857, -0.0030061509, 0.0011114376, 0.1274575144, -0.3496423364, -0.0417118445, -0.1160192266, -0.0731574222, 0.0562904887, 0.1475163549, -0.1107642427, -0.2049236894, -0.0121069709, 0.1525067091, -0.0222859159, 0.1068818569, 0.0914735571, -0.3969570696, 0.0692580417, 0.0434189849, 0.1089980677, 0.0991741195, -0.0539015904, -0.1050460041, -0.2104656994, -0.0277150385, -0.1581639796, -0.0728731155, 0.2411268950, 0.0297141057, 0.0009690391, 0.0317364335, 0.0005800743, 0.0566855110, 0.0551127568, -0.2912809253, -0.0688788667, -0.1042299047, 0.0004223968, 0.1736251414, 0.0689762980, 0.1047265753, -0.2179262042, -0.0405880138, 0.0006552029, 0.0272554327, 0.0212660339, 0.0758959949, -0.3619937003, -0.0830488801, 0.1112311184, -0.2558623552, -0.0636594892, 0.0611402690, -0.2032056153, 0.1527087688, -0.0538260415, 0.1544748098, -0.0595774315, 0.0522520579, 0.0497343615, -0.0979689285, 0.0848567933, 0.0302655920, 0.1112642065, -0.0274615865, 0.0120093375, -0.2191692144, 0.0121993395, -0.0861250684, 0.0211102236, -0.1052442119, 0.1409370750, -0.1805222481, -0.1584738195, -0.0432804041, 0.0512573570, 0.0771249011, -0.1004104838, 0.0457138792, -0.1180821061, -0.2392724156, -0.0371900238, 0.0832284540, 0.0395538472, 0.0929705873, 0.0076407683, 0.0134303290, -0.0880582556, 0.1018719599, 0.0203508586, 0.1169120222, -0.1352781951, 0.2055727839, 0.0734435171, 0.0248048212, 0.0182420295, -0.2105303556, -0.0804091766, 0.0313100219, -0.0027250829, 0.0566385686, 0.0036341897, 0.1433301866, -0.2413461804, 0.0474671312, -0.2269256711, -0.0697049499, 0.0111917835, 0.0157073978, 0.0132322935, -0.1499835700, -0.0776434988, 0.1466872692, -0.0454408303, 0.2073508948, 0.0154913086, -0.4239105582, 0.0335377306, 0.1021958515, 0.0629183650, 0.0179301482, -0.0738029629, 0.1104342267, 0.0120395385, -0.0223776884, -0.0422810987, -0.0386416353, 0.1036241129, -0.1136675924, 0.0081536025, -0.0609939136, -0.1599037051, 0.2745794058, 0.1130765602, -0.3448975384, 0.0091875466, -0.0905649886, -0.1170873493, -0.0557834581, 0.0953508988, 0.0903154090, -0.2349521071, -0.1511349231, 0.0464452319, 0.0636406094, 0.1581865251, -0.0436635800, -0.4713526368, -0.0115913088, -0.0432942100, -0.2154821455, -0.0038999685, -0.0930597410, -0.0875392556, -0.0273771565, 0.0386157148, 0.0372059233, -0.1160099059, -0.0521926731, 0.1528938264, -0.0062912297, 0.0035399550, 0.1794825792, 0.0862564147, -0.0958823040, -0.0337975286, -0.4464758933, -0.1025635079, -0.1166120321, -0.0022529918, -0.0548315123, 0.1922708303, -0.1718352437, 0.0056575518, 0.0463437662, 0.1032164469, 0.0965890810, -0.1389963478, -0.0049672462, -0.0903907195, -0.1451928914, -0.1941052526, 0.0965456665, -0.0230382867, 0.2131227255, 0.1025959626, 0.0587074012, 0.0359912887, 0.1037481576, 0.1499755383, -0.1135471985, -0.0332273319, 0.2885947824, -0.0571826994, -0.1183456704, -0.1158309579, -0.3416108787, 0.1326121837, 0.1807390302, 0.0261043571, -0.0028424934, 0.0551032759, 0.1636566222, -0.1842473894, -0.0353886224, -0.1820893139, -0.0000009271, 0.1006046906, 0.0602645874, -0.1282748729, -0.2381264418, -0.0530891232, 0.1548897177, -0.0159017779, 0.0710122883, -0.1448236257, -0.0242011379, -0.0289833918, 0.0072087063, 0.0834220797, -0.0344356783, -0.1335420012, 0.2591568232, 0.0565590709, 0.1202751845, -0.1083853170, 0.0472303405, 0.0010663872, -0.0332855098, -0.0652566627, 0.0371202230, -0.1267197132, 0.1826720834, -0.1107186377, -0.3398046196, -0.0773380995, -0.0324481651, 0.0239122361, -0.1010990590, -0.1148421541, -0.0335262343, -0.1120282561, -0.0988849699, 0.1458163708, 0.2097074091, 0.0465546101, 0.0829501227, -0.5363159776, -0.1632935703, 0.0660422817, -0.0512470379, 0.0319736674, -0.0015718420, -0.1113129184, -0.0926667899, 0.0264020450, 0.0179046411, -0.2029490024, -0.1290186793, 0.0088219438, -0.0238936413, -0.0626311079, -0.0447580107, 0.0552336425, -0.1118410304, 0.0326943547, -0.4601886272, -0.0748795122, -0.0553883985, -0.0145260487, -0.0081995316, 0.1294493675, -0.2893958986, -0.1404001117, -0.0747117400, 0.1872411966, 0.0390154421, -0.0801910087, 0.0034721547, 0.0619300865, -0.0441879630, -0.1840021312, -0.0145610860, -0.0271121562, 0.1741231680, 0.1920711249, 0.1551699191, 0.0915819257, 0.0986404419, -0.0559754483, -0.1516069770, -0.0394829996, 0.1323394626, -0.0982816890, -0.2177826911, -0.0735185519, -0.1257414371, 0.2096753418, 0.1914476752, 0.0955216587, 0.0434341095, -0.0158782452, 0.1720220447, -0.0398746170, 0.0230055805, -0.1266229302, 0.0172616411, 0.0241217427, -0.1871048957, -0.0445576683, -0.0252389815, 0.0321215056, -0.0552292913, -0.0278493743, 0.1350423694, -0.0733129010, 0.1361625642, 0.1754820347, 0.0427961089, -0.0341055468, 0.0142683359, -0.0964491963, 0.2178227603, -0.1716800630, 0.1138703898, -0.0562692359, -0.0824447870, 0.0076104049, -0.0502156131, 0.0278559681, -0.0909746736, -0.1664293855, -0.0063151135, -0.0943421870, -0.3443312943, -0.0119816139, 0.0664693117, -0.0503283665, -0.0400285274, 0.0412063040, 0.0111667113, 0.0275201183, -0.2220077068, 0.1199066639, 0.2011486292, -0.0072923810, 0.0029708431, -0.3412874043, -0.1472429633, 0.1440552473, -0.1246606037, -0.0895489529, 0.0690309927, -0.1234029457, -0.1032330766, 0.1663786322, 0.1336200237, -0.2812661529, 0.0307149924, 0.0297988337, 0.0698912442, -0.1803181320, -0.0383563340, -0.0277406722, -0.1202277467, -0.0043243016, -0.4928459525, -0.0808368549, -0.1258385032, -0.1247669235, 0.0003660915, 0.0841856897, -0.2643562257, -0.0853948072, 0.0836294517, 0.1876717061, 0.0136381630, -0.1089925393, -0.0672046617, -0.0343643613, -0.0888744742, -0.2443617731, -0.0889223441, -0.1383299828, 0.3357488513, 0.1746634394, 0.1981919259, 0.1334986836, 0.1583967209, -0.2037310302, 0.0572868474, -0.1312722862, 0.2099359930, 0.1159298867, -0.1430557370, 0.0106194606, -0.2498722076, 0.1477245986, 0.1194750518, 0.0243577063, 0.0312553495, -0.1536346525, 0.1238573864, 0.0440231450, -0.0844547078, -0.1715635061, -0.0071853064, 0.1259966046, -0.1688893884, -0.1804238409, 0.2147011608, 0.1117026806, -0.3364157379, -0.0514194928, 0.0486534834, 0.0355002023, 0.2376967967, 0.0774119943, 0.1907804459, -0.0150793279, 0.0751855522, -0.0633055419, -0.0071053142, -0.2426891327, 0.0117893601, -0.1469127834, -0.1147306338, 0.0040618246, 0.0214941818, 0.0189579818, -0.1254375577, -0.1598500311, -0.1199315339, -0.0572795495, -0.3265553117, 0.1260463297, -0.0327956602, 0.1271338910, -0.0352424756, -0.0726010054, 0.0073970295, -0.0743132904, -0.2710393667, 0.1590607166, 0.1841564626, -0.1502509862, 0.0117071820, -0.3835473955, -0.1536116451, -0.0047950540, -0.0722631887, 0.0212793835, 0.0072224075, -0.0504699647, 0.0026999686, 0.0435121506, 0.1103208661, -0.2679667771, 0.1247658357, 0.0683672950, -0.0864324048, -0.1681966335, -0.0339695215, -0.2924575210, -0.2192856967, 0.0161747113, -0.1376450658, 0.1467752755, -0.0242014453, -0.2381415218, -0.0462672301, 0.0003874288, -0.1993023008, -0.0168647468, 0.2150306851, 0.0692781359, -0.0151710603, -0.0952575058, -0.0218391158, 0.0245260093, 0.0368420705, -0.1524388790, -0.1956910938, 0.0132580660, 0.1960514337, 0.0950764716, 0.0203289539, 0.1006292254, 0.1061261669, -0.2875501215, -0.0726552755, -0.0838455483, 0.0141835976, -0.0171105806, -0.0963023081, 0.1153431907, -0.1340161562, 0.0002646909, -0.0109140230, 0.0609858446, 0.0795003325, -0.0525184572, 0.1391414553, 0.0920877829, -0.0718846992, 0.0496771187, -0.0307492465, 0.0079871826, -0.0304773636, -0.1140188351, 0.2153069675, 0.0035690637, -0.3163717091, -0.0862355232, -0.0435287952, 0.0765507519, -0.0180901028, 0.0049960366, 0.0558905751, -0.1550374925, 0.1030043066, -0.0419220477, -0.0253858417, -0.2074503005, 0.0576985367, -0.0166221354, -0.1373973787, 0.0396630056, 0.0212999173, -0.0534014031, -0.1271140128, -0.0283872262, -0.0359471254, -0.0587682836, -0.3234811127, 0.1150421202, -0.0553019904, 0.0088795712, 0.0135449087, -0.0140037416, -0.0408017151, 0.0361911952, -0.1254927218, 0.1038426384, 0.0146149760, 0.0572813265, -0.1968142390, -0.2792322040, 0.0262057539, 0.0081157470, -0.0503635518, 0.0022745805, 0.0363203064, -0.0967230350, 0.0914622322, 0.1479244232, 0.2095459104, -0.0509932786, 0.0437422767, -0.0467102230, -0.0324375071, -0.1436019391, -0.2322075218, -0.1585465670, -0.2205784023, 0.0461141169, 0.0563469864, 0.1170756519, -0.1354521513, -0.0172174089, -0.0421058983, -0.0785434395, -0.0949069783, -0.0711265355, 0.0707838982, -0.0346184075, 0.0279798824, -0.1633751839, -0.0820901245, -0.0745495930, 0.0499950424, -0.0699694380, -0.1186398119, 0.0719538778, -0.0334064513, 0.1248452887, -0.0030329344, 0.0143630048, 0.0048248535, -0.2991689444, 0.1150932163, -0.0970746577, 0.0488270745, -0.3259064853, 0.1832577735, 0.0141039025, -0.1113939881, 0.1038800180, 0.0880016983, 0.0092801731, 0.0216351151, -0.0186848100, 0.0890306830, 0.1269909292, 0.0167961195, -0.0591616035, -0.0094265202, -0.0797056258, 0.1148829162, -0.0965397209, 0.1976527423, -0.0560879335, -0.0779610053, 0.0287717450, -0.0534390584, -0.0206943043, 0.0367083475, 0.0809597820, -0.1890558600, -0.1535147578, -0.0137646291, -0.0247246157, -0.1253146678, -0.0857056975, -0.0156411491, 0.1489371508, -0.0777981505, -0.1243355796, 0.1101548597, -0.0877321362, 0.0487527028, -0.0107891215, -0.0384959131, 0.0126145594, -0.3397162259, 0.0577582307, -0.1378814876, 0.0877205580, -0.0133065227, -0.0683041885, -0.1026711911, -0.1008064598, 0.0149961365, -0.0358372666, -0.0256036110, 0.1714165360, -0.1187076494, -0.2873167098, 0.0116808303, -0.0704546645, -0.1427131444, -0.0661994517, 0.0087266918, -0.1627069265, -0.1116324961, -0.1134116873, 0.0225019194, 0.0299647003, 0.1001748592, -0.0004962190, -0.0454322062, -0.1136380583, -0.1851801276, 0.1580338031, -0.0962755755, -0.1166977286, 0.0526760742, 0.1416532397, -0.0457453951, 0.0766301304, -0.0913250372, -0.1081436574, -0.0395226888, -0.1172686964, -0.0362380557, -0.0158041622, 0.1060345769, 0.0775338337, 0.1143084317, -0.1703376025, 0.0506731868, -0.1552654654, -0.0060828994, 0.0698063746, -0.0341901593, 0.1144213378, -0.0192164984, 0.0536686406, 0.0234583654, -0.0030489641, 0.0780876651, -0.0700557679, 0.0075244834, -0.1807773560, 0.1876819283, 0.0924273357, -0.0764179230, 0.0140911797, 0.1131110564, 0.1123192534, 0.0759853199, 0.0721823350, -0.0175907351, 0.0021653366, -0.0443788320, -0.0076253302, -0.0228458252, -0.0892183259, 0.0637128726, 0.0610955767, 0.0827342272, -0.0131056448, -0.0048246649, 0.0116600292, 0.1309414506, -0.0320192091, 0.1467348337, 0.1259351522, -0.3169586062, -0.1950529814, -0.0159893483, -0.1542552561, -0.1444452703, 0.0439321697, -0.0326902792, 0.0898362622, 0.0101825474, -0.0218607429, 0.0016650889, -0.0617657341, 0.1793133616, -0.0241989419, -0.0032762713, -0.0019301041, -0.2303860784, -0.0727708563, -0.1481056809, 0.0866369009, -0.0607728772, -0.1492071152, -0.0289258529, -0.0638797879, 0.0199119542, -0.0457680710, 0.1027151793, 0.1662741899, -0.0059881853, -0.1665218025, -0.0894000530, -0.0985694006, -0.0069982428, -0.0603901520, -0.0372464024, -0.1743984967, -0.1060151607, -0.1083282903, -0.0527431890, 0.0549612679, 0.0938486308, 0.0423522480, -0.0284663364, -0.0716805905, -0.2321589738, 0.0082790824, -0.1269908398, 0.0050585796, -0.0627845824, 0.0582568198, -0.0958480611, 0.1700343788, -0.0444209874, -0.1272636652, 0.0353127122, 0.0343427062, -0.0005244808, -0.0813095346, 0.2177916914, 0.0670938343, 0.0864757970, 0.0092304088, 0.0448878892, -0.0026121635, -0.0173572972, -0.0617403947, 0.0319059938, 0.1388156116, -0.1322084218, -0.1093700975, 0.0453187935, 0.0612101555, 0.0144957965, 0.0729883388, 0.0121353325, -0.0278416257, 0.1086592078, 0.1107511446, -0.1394795328, -0.0594226234, 0.0244811010, 0.1336339563, -0.0090333605, 0.1085636616, -0.0781063065, 0.0048362138, -0.0603338964, -0.0502883680, 0.0092293378, 0.0217122026, 0.1462629139, -0.0198959541, -0.0059834672, 0.1026102677, 0.0281431209, -0.0232376810, 0.0557285622, -0.0122768199, 0.0050495574, 0.1600108147, -0.0931421891, -0.2458012849, 0.0066255871, -0.0272304118, -0.1309058666, 0.0487053543, 0.0072257961, -0.0178726688, 0.2221604586, 0.0060866037, 0.0096494164, 0.0115374029, 0.2172782719, 0.0180686116, 0.0590832196, -0.1661017239, -0.0170811415, -0.1183617562, -0.2209973633, 0.0595906787, -0.0476073734, -0.1961494833, 0.1217288226, -0.0203441307, 0.0503516570, -0.0222758017, 0.0139930900, 0.1249243319, -0.0504086092, -0.0239665136, -0.0886913985, -0.0051260642, -0.1724421233, -0.0050851740, 0.0886930749, -0.1309760958, -0.0000416617, -0.1536532938, 0.0014883138, -0.0117707523, 0.0392614380, -0.0509585515, 0.0115923826, -0.0565887839, -0.1378977150, 0.0732587501, 0.0005157480, -0.1629407108, 0.0511231124, -0.0224757921, -0.0191791262, 0.1884162575, -0.1590445191, -0.0932800099, 0.0017994350, -0.0612633899, -0.0286540091, -0.0050885626, 0.1599593908, -0.0442220867, 0.0659143031, -0.0056264657, -0.0732684806, 0.0569520295, 0.1024627611, -0.0635579228, 0.2233597487, 0.1266740561, -0.0170856118, -0.0419325754, -0.0341251604, -0.0165534578, 0.0603021085, 0.1706027836, -0.1217891499, -0.0771066025, 0.0965041593, -0.0163878184, -0.1395575255, -0.0858515948, -0.0243217759, -0.0188061073, 0.1089837775, 0.1111870557, -0.0429249927, -0.0632505789, 0.0126651889, 0.0347480364, 0.0218123309, 0.0281323828, 0.1262547374, 0.1032247841, 0.1011659801, 0.0832210109, -0.1021154448, 0.0159766320, 0.0245919619, 0.1034576595, 0.1317667365, 0.2311509997, -0.0292205494, -0.2981753051, 0.0482372567, 0.0447284989, -0.1825094074, 0.0791068599, 0.0832983106, 0.0187865794, 0.2876274288, -0.0028468026, 0.0886634961, 0.0070348927, 0.1315021217, 0.0290924218, -0.0494347624, -0.1536664814, 0.0860620514, -0.0659636632, 0.0421254970, -0.0118636200, 0.0656691119, -0.0750071183, 0.0704698488, -0.1002735719, -0.0115303006, -0.0155543834, 0.0743453726, 0.0659911856, 0.0202800781, -0.0533528142, 0.0094247712, 0.0646640733, -0.0890575722, -0.0790058076, 0.1449613869, -0.0184736568, 0.1577676088, -0.0195674524, 0.0747079626, 0.0602587312, 0.1047858894, -0.2319920361, -0.0234591849, 0.0097983023, 0.0817999765, 0.0416205004, -0.0217554178, -0.1630141437, -0.0276400000, -0.0885059014, -0.0095368130, 0.1168867052, -0.1353178769, -0.1409452260, 0.0428932719, 0.0492291339, 0.0477899201, -0.0720999613, 0.1185687408, -0.1933582276, 0.0298474301, 0.0058939322, -0.1296715587, 0.1625327170, 0.0618293844, -0.0193928815, 0.1745906174, -0.0033916372, -0.0604561381, -0.1196679696, 0.0559830442, -0.0057890252, -0.0517986864, -0.0045450232, 0.0901024118, 0.0934143439, 0.2224317789, 0.0127767818, -0.1477363408, -0.1328268349, 0.0541896448, -0.0730308816, 0.0062863710, 0.0146437408, -0.1302591413, -0.1530665010, 0.0455141664, 0.0068919528, -0.0236160904, 0.0129980659, 0.0669038296, -0.0811169744, 0.1599406302, 0.0567628667, -0.0310454946, 0.0202817880, 0.1085748076, 0.0558495894, -0.0595090389, 0.0513911359, 0.0092860032, -0.3293543458, 0.1354432553, -0.0545853414, -0.1869788319, -0.0755797699, 0.0148703586, -0.0228575375, 0.1635656953, 0.0214039050, 0.1187662110, 0.0365921259, 0.0418181270, -0.0144953793, 0.0248282570, -0.2489280552, 0.0890465379, 0.0556232668, 0.0380663201, -0.0321768001, -0.0385594778, -0.0035499535, 0.0005120843, -0.2091673464, 0.0613493249, 0.0572298467, 0.0520955697, 0.0406983830, -0.0665693879, -0.0089363251, -0.1256095767, 0.0727034286, -0.1095492467, -0.0152247855, -0.0302432943, -0.1028593853, 0.0717151910, -0.1108579412, 0.0803506896, 0.0492883697, -0.0917984918, -0.2169870138, -0.0145617826, -0.0861895606, 0.0922948122, -0.0063955644, 0.0776800066, -0.0611746609, -0.0324292742, 0.0442771576, -0.0564755648, 0.0101233479, -0.0124177057, -0.0992588773, 0.0087403981, 0.0256756973, -0.0947927460, -0.1209205538, -0.0424745679, -0.1418039650, 0.1451061368, -0.1188028529, -0.1985491365, 0.1578988880, 0.0892029479, -0.0719172210, 0.0431977361, -0.0720427483, 0.0545580201, -0.1679373831, 0.0987717360, 0.0142962299, 0.0382811725, -0.0225253701, 0.0060553779, -0.0055572144, 0.1115038544, -0.0015397609, -0.0892152861, -0.1694299281, 0.1116238087, 0.0009517912, 0.0780588910, -0.0235178433, -0.0558818728, -0.1835701913, -0.0552402027, -0.1500799358, 0.0291998275, 0.1472873539, -0.1061483026, -0.0559576228, -0.0528424606, 0.1461835653, -0.1811267883, 0.0421460494, 0.0687338039, -0.0007251814, -0.0330997147, -0.0472556762, 0.0822189674, -0.3219826221, 0.1045017168, -0.1466604024, -0.2073605061, -0.0412622616, -0.0287066158, -0.0836947635, 0.1238596663, 0.0695062652, -0.0531986654, -0.0262433849, -0.0919617712, -0.0366116688, -0.0654929131, 0.0361543074, 0.1423872262, 0.0524649471, 0.0310687795, 0.1183865666, -0.0017383784, -0.0141347740, 0.0149445981, -0.1982273012, -0.1095812544, -0.0657497346, 0.1592181474, 0.1031290144, -0.1270975769, -0.1123173982, -0.0239709392, 0.0757822469, -0.0974240899, -0.0325343683, 0.0513377935, -0.1574545801, 0.0478400774, 0.1146477014, 0.0981073454, 0.0974920392, -0.0697611868, -0.1173758879, -0.1348668933, 0.0773920044, 0.1228134409, -0.1162161306, 0.0497146882, -0.2417555749, -0.1410915405, 0.0158293899, 0.0104506323, -0.0515557900, 0.0544730872, -0.0835227817, 0.0660633072, 0.0823386386, 0.1288501769, -0.0612402000, -0.0708381906, -0.2097454369, -0.0924078375, -0.1390709132, -0.0989388451, 0.1065186113, -0.0455960073, -0.1454641074, -0.0624853820, -0.1016633213, 0.0124623459, -0.0746918470, 0.1646825075, -0.0167909451, -0.1127359867, -0.0363790244, 0.0025651094, -0.0444625132, 0.0169456862, -0.0210358370, -0.2059948295, -0.0655114651, 0.0636605993, -0.0969539732, 0.0276054069, -0.0075712400, 0.0141467815, -0.2214199901, -0.0698696673, -0.1721879393, 0.0209011696, 0.0021739367, 0.0198659711, 0.0513940677, 0.0457055345, 0.0906733125, 0.0142743848, -0.0000738011, -0.1077358425, -0.0269363467, 0.0476391241, -0.0904946178, -0.0337181650, -0.3339301348, 0.1565387845, -0.1836476475, -0.1220259517, -0.2278327793, -0.0429940000, -0.0147235906, 0.0461917892, 0.0406795330, 0.0044721840, 0.0044457223, -0.1276385784, 0.0101634469, 0.0105206985, 0.1363268942, 0.1375461370, 0.0613426678, 0.0570517294, -0.0776529014, -0.1323272884, 0.0165326558, -0.0472410172, -0.0245224442, 0.0445601381, -0.1110237315, -0.0621474721, 0.1029137522, -0.0247478709, -0.0607108437, 0.0316629373, 0.0848792195, -0.0486247167, 0.0721916184, 0.1085337773, -0.0530338958, 0.1834874302, -0.1208828688, 0.0496612675, 0.1666231602, 0.0339775831, -0.0198293813, 0.1061077118, 0.0832194537, 0.2042686045, 0.0024452826, 0.0274670739, -0.2037862986, -0.0007390927, -0.0031422456, 0.0045767869, 0.0650834367, 0.0055365320, 0.0169413742, 0.0625623018, 0.1172930300, 0.0466706678, -0.1984842867, -0.0333734490, 0.0463799313, -0.0716091022, -0.1538652629, -0.1449731588, 0.1600806117, 0.0304826796, -0.0482398085, -0.1383173913, -0.1612089127, 0.0822274685, -0.2597064674, 0.1542201638, 0.0351332426, -0.2635313570, 0.0221238099, 0.0117988912, -0.0978859365, 0.0275929887, -0.0078013968, -0.1406207383, -0.1688915193, 0.1864975095, -0.1313823313, 0.0882215872, 0.0643341988, 0.0142576266, -0.0411066711, -0.0415060371, -0.0439549722, -0.0038965454, -0.0896126553, 0.0424210019, -0.0102126747, -0.0231448524, -0.0427383631, -0.0164573584, -0.0529565625, -0.0279768556, 0.0364718698, -0.0202019289, -0.3786999881, -0.0500121005, -0.3130920827, 0.0716522112, -0.1696453243, -0.0328881443, -0.0668225735, 0.0505957790, -0.0094910236, -0.0720757544, -0.0144283408, 0.0169309005, 0.0260412414, -0.1863614768, 0.0760328248, 0.1752040535, -0.0193920340, 0.1279074252, 0.0884185433, 0.0742628351, -0.0218492821, 0.0269843098, -0.0182875134, 0.0138650350, -0.1915308237, -0.0740291774, 0.0393082015, -0.0049121506, 0.2257717848, 0.1181920096, -0.0268218443, -0.0303020794, 0.0660454035, -0.1784046590, -0.0580688231, -0.0006472145, -0.1393209547, 0.0674326792, -0.2806336284, 0.0025312856, 0.0721522942, 0.0066488585, -0.0761786252, 0.1532971859, -0.0083737737, 0.2050065845, 0.0514293015, 0.0648901388, -0.0959290341, -0.0948519409, -0.1050791293, -0.0601603203, -0.0141747808, -0.0041655200, 0.0690323561, 0.0105980579, 0.0388793275, -0.0422456078, -0.0441441424, 0.1018299684, 0.1158863679, -0.2542684078, -0.1480687857, -0.2313946486, 0.0455087498, -0.1144704297, -0.2289297134, -0.1528590620, -0.2173673809, 0.2031767368, -0.1653132588, 0.1352040470, 0.1509134024, -0.1980827898, -0.0920927823, 0.0854374766, -0.0353993811, 0.0315644629, 0.0148386145, -0.0708555579, -0.0663814768, 0.1825653762, -0.1302991062, 0.0214995816, 0.0195503049, -0.1329469830, -0.1246588826, 0.0031669675, -0.0820805207, -0.1187152714, -0.0865478516, 0.0560568571, 0.0390651375, 0.1023921445, 0.0521219112, 0.1223951951, -0.0058385911, -0.0513654575, 0.1172481030, -0.0512457937, -0.3114398718, -0.1665112674, -0.1698046625, 0.0708942041, -0.1867957264, -0.0828348324, -0.0783819556, -0.1032968760, -0.1216193810, 0.0072469674, -0.1134410575, 0.0771590769, 0.0420040563, 0.0113710426, 0.1283214688, 0.0626991466, -0.1826193184, 0.1619525701, 0.0454470292, 0.0828220174, 0.0067448062, 0.1373378634, 0.0783562735, -0.0900976732, -0.1430666596, 0.0134642832, 0.1226362139, -0.0719930977, 0.0805915892, 0.0945662335, 0.0507328548, -0.1047663763, -0.0955926180, -0.1780857146, 0.1334415674, 0.0987633839, -0.0917148292, 0.0643122494, -0.1895331889, 0.0025291468, -0.0759455189, 0.1000894085, 0.0021928407, -0.0447114483, -0.0671215728, 0.0318313725, 0.1131618917, 0.0736533627, -0.0404272825, -0.1059425920, -0.1090752259, 0.0562781096, -0.1621183604, 0.0372805856, -0.0261721648, -0.0672581419, 0.1057799160, 0.1037070528, -0.1303517669, 0.1308899075, -0.0131655233, -0.0500955544, 0.0190483965, -0.2091038823, 0.0351750441, -0.0262421966, -0.1470076442, -0.0828927010, -0.1105249375, 0.1723043919, -0.2241345793, 0.0715832561, -0.0582860485, -0.1153015569, -0.0224429090, 0.1655644625, -0.0822127983, -0.1215516329, 0.0378321074, -0.0540472195, 0.0004508232, 0.0367974825, 0.0205615927, 0.0889963508, -0.1329939812, -0.1186355799, -0.2624027431, 0.0283443052, -0.0611422248, -0.1825103909, -0.1015022248, -0.2228592336, -0.0160278287, 0.0895048827, 0.0122475429, 0.1232574284, 0.0555779077, -0.1761048138, -0.0254387483, -0.0427522957, -0.1726860255, -0.0855694935, -0.0233042073, 0.0973697230, -0.2092404217, -0.1657423526, -0.1486738622, 0.0394800380, -0.0495320149, -0.1295921057, -0.2860164940, 0.1441922188, 0.2638376057, -0.1191547737, -0.0124410614, 0.0714367703, -0.1677295417, -0.0126589201, 0.0509310104, -0.0670119375, -0.1730317473, 0.0013207747, 0.0172864720, 0.0262207575, -0.2183339596, -0.1399775892, 0.1299993247, -0.1050327942, 0.1013605148, -0.0514969490, 0.1192744970, -0.0222984347, 0.0352884121, 0.0767100006, -0.0120733362, 0.0620281398, 0.0564571731, 0.1191152483, 0.1202146113, -0.0855148733, 0.1847224087, 0.0079891896, 0.1042234376, 0.1132374406, 0.0629398599, 0.1938652694, 0.0159445107, -0.0691640899, -0.1332168728, -0.1970188618, 0.0652054474, 0.0444838218, -0.1798821837, -0.1161106825, 0.0135805644, 0.0484722890, 0.1418617964, 0.0057597337, -0.0946275145, 0.1944065392, 0.1404057443, -0.0598613843, 0.1086744890, -0.1695629060, -0.0628562644, -0.0556419194, -0.2360315323, -0.1689786166, 0.0256795622, -0.0692637265, -0.1151956841, 0.2049080282, 0.0226923637, -0.1080563515, 0.0239469856, 0.0059212609, 0.0318531692, 0.0125815561, 0.0755972117, 0.0484297089, 0.0103591774, 0.1627984494, -0.0234212819, -0.0116781173, 0.1160097495, -0.1551090330, -0.2621409595, -0.0204905476, 0.0347478054, -0.1942742020, -0.2118278444, -0.1400395930, 0.0019897257, -0.0069818511, 0.1944565177, -0.0081664771, -0.1114726439, 0.0581286773, 0.1193884313, -0.0167725924, -0.0061721588, 0.0285028648, 0.0019129948, 0.1575173885, -0.0841220543, -0.1410599947, -0.1361539066, 0.2685713470, -0.1198887378, 0.0019941865, -0.1925794333, 0.2219191343, 0.0764030516, -0.0889416188, 0.0979699418, 0.0013033712, -0.0403157100, -0.1680247337, -0.0177045558, 0.0169079360, 0.0673530027, -0.0124795381, 0.0616028719, -0.0680932477, -0.1481280178, 0.0819354653, 0.1876249313, 0.0321075022, 0.0565678515, -0.1706072390, -0.1269319504, -0.1363482326, -0.0178896170, 0.1428420097, -0.1668583155, 0.1224837676, 0.0499303304, 0.3289512098, 0.1194815412, -0.2234520316, 0.0294908881, -0.1298241615, 0.0975794941, 0.0049574645, -0.0169187021, -0.0677145571, 0.1163776293, -0.1707337499, -0.0398949906, -0.3011779189, -0.0575844161, -0.0940280929, -0.2916492820, -0.1173394546, 0.1422455162, 0.0265529752, -0.0422660969, 0.1363871396, -0.1172478348, 0.4318063557, 0.1990568638, -0.0430740416, -0.1149254590, -0.0574885048, -0.0208293442, -0.1124582961, -0.0750840455, -0.1397701204, -0.1385991424, -0.0821277723, -0.1488202959, 0.3281205595, 0.0384177528, -0.1076429337, 0.0436403416, 0.0406844877, 0.1245375425, -0.0142701454, 0.0543027706, -0.0283281337, 0.0709646866, 0.0299133249, 0.1895816475, 0.1611309797, 0.0738553181, -0.4392459393, -0.0957709178, 0.0381258987, 0.0372636020, -0.1585588008, -0.0909994245, -0.1647277921, 0.0578464344, 0.0869856849, 0.3432444632, 0.2354775965, 0.0628102571, 0.0038040031, 0.3907569647, 0.0691751316, 0.0426983535, 0.1305372268, 0.0698941201, 0.2154037356, -0.1983072013, -0.1063005999, -0.0923735425, 0.2192858905, -0.0067290156, -0.0428124331, -0.1711043417, 0.0766859353, -0.0662227720, -0.0628428608, 0.0276552495, 0.1436076164, 0.1321233213, -0.1193461120, 0.1603636295, -0.1439227313, 0.2647292912, -0.0089968126, 0.0128650926, -0.2413333505, -0.0132008875, -0.0492695421, 0.3293669522, 0.0817194730, 0.0881914049, 0.2617444396, -0.2343851477, 0.0585508160, -0.1679380685, 0.0717529207, -0.1074391082, 0.1551724672, 0.1644907743, 0.0286307707, -0.0083662206, -0.0647674426, -0.1524900198, -0.0966812000, -0.0944283307, 0.1221588627, -0.0593141727, -0.2256890684, -0.0037416185, -0.2117210031, 0.0297663603, -0.1692736894, -0.0320545956, 0.1575857550, -0.1814329624, -0.1259987652, -0.0391018167, -0.1228404716, 0.0112854047, 0.0020620404, 0.1371234357, -0.0980003849, -0.0046830839, 0.1758693904, -0.0630082786, -0.0339838602, -0.2030501962, -0.1713173538, -0.0230298396, -0.0799159184, -0.0168360043, -0.0167472623, -0.1031595841, 0.1020817757, 0.0359259285, -0.0168650355, -0.0508780442, -0.0387572274, -0.0849125907, 0.0247599557, 0.0619222634, 0.1781432927, 0.0248552151, -0.0203185007, 0.1408544034, -0.1082707271, 0.1004275382, -0.1509431303, 0.1477956772, 0.0352428928, 0.0398181193, 0.0593792014, -0.1265252978, -0.2778144479, 0.1520885974, 0.0872668996, 0.0434778035, 0.0387454256, 0.0317657739, -0.0171422176, 0.1688832045, 0.0213468447, 0.0622963533, 0.2314511389, 0.2651490867, 0.0267195720, 0.0430977754, 0.0574784540, 0.0220962800, 0.1969457716, 0.1580943316, 0.0337139145, -0.0922264382, 0.0390122160, -0.0441854298, -0.0988281518, -0.0565749258, -0.0413869694, 0.0821527019, -0.0723205581, 0.0814458355, -0.2130632252, 0.1304632127, -0.0925060809, 0.2680035532, -0.0122762201, -0.0839112997, -0.0470127761, -0.0369207039, 0.1613413990, 0.0768377855, 0.1548481286, 0.1581398398, 0.0813782364, 0.1128098071, -0.0354375839, -0.0641598031, -0.0542556718, -0.0007026152, 0.0674839020, -0.1107188463, -0.1704885662, -0.0395214520, -0.0080812667, -0.0036327830, 0.0583034642, 0.0183841959, -0.1740108281, 0.2443313748, -0.0917759165, -0.0068768370, 0.0104146060, -0.0733937398, -0.0618868545, -0.0823670104, -0.1778160036, 0.0517530330, 0.1302845329, -0.0025569934, 0.1243842095, 0.0750151277, 0.2088355124, 0.0936217159, 0.1348846555, -0.0548206158, -0.0065409639, 0.0814344361, -0.1847323477, 0.0319762714, -0.1044024080, 0.0316750519, 0.0717220008, 0.1270122677, 0.0618784167, -0.0659337416, -0.0474697910, -0.0482807234, 0.1706291288, -0.0126136672, -0.1087413281, 0.0772079751, 0.0327112786, 0.0162761454, 0.0430575870, 0.0317683294, 0.0712342188, 0.1790733486, -0.2225662023, 0.0211160053, 0.0764124990, 0.0349627696, -0.0684284419, 0.0348074473, 0.0040739067, 0.0972253308, -0.0376943015, -0.0728042051, 0.0654675364, 0.0441821814, 0.2410348356, 0.0896151662, -0.0209173616, -0.1467220187, -0.0581499338, 0.0309574604, 0.0188285615, -0.0711670816, -0.0791061521, 0.0131105743, -0.0191512816, 0.1241211668, 0.0136772376, 0.0123689901, -0.0308109373, 0.0420577638, -0.1345476359, 0.1003844962, 0.0556136779, 0.0501679480, -0.0710591078, 0.1567770094, -0.1689647585, 0.0151503058, 0.0393783227, 0.1499018967, 0.1182735339, -0.0076839090, -0.0699860603, 0.0403107181, 0.0839775726, 0.1627750248, 0.0361192152, -0.0625448376, 0.0483274125, 0.1197234392, -0.0743371323, 0.0774753988, -0.0414406508, 0.0416220352, -0.0767600611, 0.0465478413, 0.0531667322, 0.0113276392, -0.0452516265, -0.0470493399, 0.0763349235, -0.0313798673, -0.0099088699, -0.0605649278, 0.0597072840, -0.0792008862, 0.0170194954, -0.0507728569, 0.0100235250, 0.0406651944, 0.0157739446, 0.0797657818, 0.0622741878, 0.0449399501, 0.0670113862, -0.0829253718, -0.0574640557, 0.0640276223, 0.0371887907, -0.0674121827, -0.0743955672, 0.0630517825, -0.0536889620, -0.0560426898, -0.0213724934, 0.0405275188, 0.0791925788, -0.0367718972, -0.0249669794, -0.0034799278, -0.0495865941, 0.0179138631, -0.0625228584, -0.0559266359, -0.0794718117, -0.0753857195, 0.0318648703, -0.0069121243, 0.0225752648, -0.0180015340, -0.0273568090, -0.0247075185, -0.0427602679, 0.0658829808, 0.0139843449, -0.0325265117, 0.0077945194, 0.0029816832, 0.0034421533, 0.0777266249, 0.0765219331, 0.0819481090, 0.0587446392, -0.0319569074, -0.0419603996, -0.0360014252, 0.0430625528, -0.0365725495, 0.0045824870, -0.0264749415, 0.0822821558, -0.0152214617, 0.0314659886, -0.0045098145, -0.0446990542, -0.0198488683, -0.0405455939, 0.0495683998, -0.0031908154, 0.0179527495, -0.0162159298, 0.0579898059, 0.0454753824, 0.0718798116, -0.0686990172, -0.0009130052, 0.0432834327, -0.0355307460, 0.0252678320, 0.0748208687, 0.0327079892, -0.0572486036, 0.0282656997, -0.0246415865, -0.0659511313, -0.0370973535, -0.0595403090, -0.0174801294, -0.0125062540, -0.0224192254, 0.0085148755, 0.0290686153, -0.0290606413, -0.1512151659, -0.0510778576, 0.0053027892, -0.0282970462, 0.0027627687, 0.0892322734, 0.1185197607, 0.0205419920, -0.0645089895, 0.0411474332, 0.0886472613, -0.0131955845, -0.0448919721, -0.0928599015, -0.0463933088, 0.0694458261, 0.0049230554, 0.0474600568, -0.0594145283, 0.0119615477, -0.0190989412, -0.0629575327, -0.0092252232, 0.0619826056, -0.0040141819, 0.0506160147, 0.0089178560, -0.0248978883, -0.0642941743, 0.1045858487, 0.0954190195, 0.0663566664, -0.1216505021, 0.0115962131, 0.1027439311, -0.0574597716, -0.0424018167, 0.0584719926, -0.0384031795, -0.0211407226, -0.0105186375, 0.0699159577, 0.0368469395, -0.0372622088, -0.0174435992, -0.0445976146, -0.0148070473, 0.0138873775, 0.1611218601, 0.0324041620, -0.0906369388, -0.0048642904, -0.0676272139, -0.0294776075, -0.0120066162, 0.0978033915, -0.0320705548, 0.0182428937, -0.1315748394, 0.0547660477, 0.1087647974, 0.1331053525, -0.0416249707, 0.1296135485, -0.0612320267, 0.1369719505, 0.0325289927, -0.0939494371, 0.0718145072, -0.0755375028, -0.0366109163, -0.1112068072, -0.0920152962, 0.0016992606, 0.0616526753, 0.0164519250, 0.1483200192, 0.1356932372, -0.0579358898, -0.1086376607, -0.0346030220, 0.0773843527, -0.0008025971, -0.0279526152, -0.0704835951, 0.0583903901, -0.0727598518, -0.1686939895, -0.0176288895, 0.0827641487, -0.0926080793, 0.0244507976, -0.0500184409, 0.0428879485, 0.0598711520, 0.1490304619, -0.0911234766, 0.0014464561, 0.1719222367, 0.0226001777, 0.1487154514, -0.0552500263, 0.0291624237, -0.0588960983, -0.0573472194, -0.1551496983, -0.0444166474, -0.0502936728, 0.0060112281, 0.0938132182, 0.1094399095, 0.1021060497, 0.1127398685, -0.1196192801, -0.0807931423, -0.0270985570, 0.0902488679, -0.1242386028, -0.0383012593, 0.0388580486, 0.0867787302, -0.0106401648, 0.0527339838, 0.0427842811, -0.0016536160, 0.1230215430, -0.0782204717, 0.1205231249, -0.0035038246, -0.1088658348, 0.0523609184, 0.1199141517, 0.1145179570, 0.0425840132, 0.0322537124, 0.0137942871, -0.0910833552, 0.0360717811, 0.1103989780, -0.1589649916, -0.0380578861, 0.0266274307, 0.0754211545, 0.1060248092, -0.0304546151, -0.0521546230, -0.0543885268, 0.0274375603, 0.0857829601, -0.0310211405, 0.0211210493, -0.0483792573, 0.0343459249, 0.0808287188, 0.0507143289, 0.0412527546, -0.0045878328, -0.0557402447, 0.2075394839, 0.0093551390, 0.0282480419, 0.0653875694, -0.0362944491, -0.1117195487, 0.0636627749, 0.0205799043, -0.0364776552, -0.0604203902, 0.0631519780, -0.0295810755, 0.0715497956, -0.0167632494, 0.1485093087, -0.0573229976, 0.0165688787, -0.0392128490, -0.0956825763, -0.0406010970, 0.0780756176, 0.0622244962, -0.0783226639, 0.0576902591, 0.0601022169, 0.0263156276, 0.0510365367, -0.0526346453, -0.0692299753, 0.0925131887, 0.0335757695, 0.0991068780, 0.1123338863, 0.0069233240, 0.0220221505, 0.0101823835, 0.1612191349, 0.0377721936, -0.1435369253, 0.1417322904, 0.0301859509, 0.1004763767, -0.0414544009, 0.0004417152, -0.0172782876, 0.0797655880, 0.4199891686, -0.2524089217, -0.1319942474, -0.1619398445, -0.0049028797, 0.0347845107, -0.1305586845, 0.0336934701, -0.0224095304, -0.0299483389, 0.1523425430, 0.0297588333, 0.0110083790, -0.1194569245, -0.0489786156, -0.0144463088, 0.0523512997, 0.0054484508, -0.0987108052, 0.0058125174, -0.1116026863, 0.0138191199, 0.1401600242, -0.1415148526, 0.1258943379, -0.2311212420, -0.0244436171, -0.0750813857, 0.1157974154, -0.3402078748, -0.2686031461, 0.1994614750, -0.0723223686, -0.2000463158, -0.0933100134, 0.0379910283, -0.0283219181, -0.1577702314, 0.1035317555, 0.2895339727, -0.0405669175, 0.0677357763, 0.0142022036, -0.0503818356, 0.1442053765, -0.2820790112, 0.0405128635, -0.0567333847, 0.0739504248, -0.1139476374, 0.0029889154, -0.1466954499, 0.0579973496, -0.1214362085, 0.1063381061, -0.0719410107, 0.0388138704, 0.0845956355, 0.1588145345, -0.0379633717, -0.0364122987, 0.0735321641, 0.0472271368, -0.0266572032, -0.0412000529, -0.0249638297, -0.0198095553, -0.0257106088, -0.0270707402, 0.0018435487, 0.0033379504, 0.0499936715, 0.0911111608, -0.0874348730, 0.0343389995, -0.0823190957, -0.0540908314, 0.1733748764, 0.1168161556, 0.1593886465, 0.1005561352, -0.1332692951, 0.0070150676, 0.2208151966, 0.0891513079, -0.0659002736, -0.0663044080, -0.0030759447, 0.1531676799, 0.1462630183, 0.0926571712, -0.1902393997, -0.0317776836, 0.0686800703, 0.2169818431, 0.0479075909, -0.0640817657, 0.0830972642, -0.2223416269, 0.0450070202, 0.2496395856, -0.0430298261, -0.0422133207, -0.0272587445, -0.0444169417, -0.0270904694, 0.0795450583, -0.0014253018, -0.1164955348, 0.0300856177, 0.0082992157, 0.0258880928, -0.0582637712, -0.1290596724, 0.0019066777, 0.0824427009, -0.0487577841, 0.0489986576, 0.0630241632, 0.0333566107, 0.0275887083, -0.1401286721, -0.0760853216, -0.0655713305, -0.0184030160, -0.1477965713, -0.1351513714, 0.0182589199, -0.0941904262, 0.0234825630, -0.3027017713, 0.1141231358, -0.2040632218, 0.0504656136, 0.0278787129, 0.1034844741, 0.0219777282, -0.0441769846, -0.0733487234, 0.0816620290, -0.0005046662, 0.0229274500, 0.0793141797, 0.1186981872, 0.1023531929, -0.2145120502, -0.0561219044, -0.0099507738, 0.1124520227, -0.0320620164, -0.0806373656, -0.1732852012, -0.0211590286, -0.0143285999, 0.1320775449, 0.0989839658, 0.0487934798, -0.0154755190, 0.0918620005, -0.1009201258, 0.0522188842, -0.2405535430, 0.0284914151, -0.1644859314, 0.0607934818, -0.2865687907, -0.0323032103, 0.0944660008, -0.0187989138, 0.0633651242, 0.1336563230, -0.0297868568, 0.0083460594, -0.0423959717, 0.1783311367, -0.0466535948, -0.0694925040, 0.0575963818, -0.0397080928, -0.0629173517, 0.1479770690, 0.1812749207, 0.0178863481, 0.1412286907, 0.1012367830, 0.0191222690, -0.0297942087, 0.1377835572, 0.0945487916, 0.1039780453, -0.0362394564, -0.0361938700, -0.0773091838, -0.0344051942, 0.2862097025, 0.0206003617, -0.0962816253, 0.0464001261, -0.2599793971, 0.0374865755, 0.1124599651, 0.0968080610, 0.0181089267, -0.0723401457, -0.0299655162, 0.0753978416, -0.0057965415, -0.0344849266, 0.0150239803, -0.0689486712, 0.1643670499, 0.0143271564, -0.1662479639, 0.0328434333, 0.0007725573, -0.0153823588, 0.0232161507, 0.0056365263, 0.0169689022, 0.0264475755, 0.1018440500, -0.0213881042, -0.2315810472, -0.0146613959, 0.0965977311, -0.0206181854, -0.0211984497, -0.0783549696, 0.0286693815, 0.0357973911, -0.1581113636, 0.0754950196, -0.1938819885, -0.0315926448, -0.0689969957, 0.1140092015, -0.0608183257, -0.0401159339, -0.0361461565, 0.0001962355, 0.1361407489, -0.0433521681, -0.1626989543, 0.0642340928, 0.1879834980, -0.0717635453, -0.2965219319, -0.0378008708, 0.0456467681, -0.0610566139, -0.0852011517, -0.1085859165, -0.0532032177, -0.0514843091, 0.0413901471, 0.0957643911, 0.0089837750, 0.0727927908, 0.0098796217, -0.1563301533, 0.2216829956, -0.1638255119, -0.0071741720, -0.0334271267, -0.0157240611, -0.3730997145, -0.0081325807, 0.0165725444, -0.1106708124, 0.0149216019, 0.1574999690, -0.1323858351, 0.1288350075, 0.1318720877, 0.1578339636, 0.0269737653, -0.0676224530, -0.1894163787, 0.0152197778, -0.0816470087, 0.1811100692, -0.0157452095, -0.0180475842, 0.0523099005, -0.0057327570, 0.1896610707, -0.0883827358, -0.0171090253, 0.0421824642, 0.0727445707, -0.1744030565, -0.1691385359, 0.1536538303, -0.1463955492, 0.0946596116, -0.0682708845, -0.0650536269, -0.0299449861, -0.0489971302, -0.1354404241, 0.1883385777, -0.0408076011, -0.0180782694, 0.0066484190, 0.0762870535, -0.0451813042, -0.0576994009, 0.0743927807, 0.0614947639, -0.0450698771, 0.1082547456, 0.0975751430, -0.0155202262, -0.0605749786, -0.0318007916, -0.0049045766, 0.0253718998, -0.0921451151, -0.0186587926, 0.0593384802, 0.0380098820, 0.0001281622, -0.2467102706, -0.0939766243, 0.1714223176, -0.1087329090, -0.0710665956, -0.1234777644, 0.0966442376, -0.0026682555, -0.1207592934, 0.0652978197, -0.1046355367, -0.0285359956, -0.0129825892, 0.0655883253, -0.0793099105, -0.0472291149, -0.0713869482, 0.0460466705, -0.0949970782, -0.0133449798, -0.0631279796, -0.0495918319, 0.1073612869, -0.1259933114, -0.1423356533, -0.0413457267, -0.0810372382, -0.0711313263, 0.0923788175, 0.0849423036, -0.0901444107, -0.1095777825, -0.0538755618, 0.1639270931, -0.2019453347, 0.0139361313, -0.0992527232, -0.0721332282, 0.0369691513, 0.0181769710, 0.0787184089, -0.0014903650, 0.0291872825, -0.0757095069, -0.1302223653, 0.0181340929, -0.0652030334, 0.1150311306, 0.1297132522, -0.0185567159, 0.0747359544, 0.1040498242, 0.0354510285, -0.0044876011, 0.0483297706, -0.2145951241, 0.1399768740, -0.0271725412, -0.0284589287, 0.0258837957, -0.0837418512, 0.0800004005, -0.0754668862, 0.0313114859, -0.0503431633, -0.0368143693, 0.1230995357, -0.0817437544, -0.2735733986, -0.0605911203, 0.0954048634, -0.0042202175, 0.0407111011, 0.2410472929, -0.1038981527, -0.0552325659, -0.1425565928, -0.0178847685, 0.2191347331, 0.1580887288, -0.0048974985, -0.0622176602, -0.0587841906, 0.0523173176, -0.0363024138, -0.0496230498, 0.0246846862, -0.0143058589, 0.0016230992, 0.0632232726, -0.0219219420, -0.0669139773, -0.0408285297, -0.0822991729, -0.1780044585, -0.0167995077, -0.0192054100, 0.0095622391, 0.0318127684, 0.0604013875, -0.1008281186, -0.1750749946, 0.1335610598, -0.1381740570, 0.0120869307, 0.0506688096, 0.0798660517, -0.0082913134, 0.0057620015, 0.1132690832, -0.0761156902, -0.0248587057, 0.0275336411, 0.0324367583, -0.0305453800, 0.0353682786, 0.0066697798, -0.0005288062, -0.0588963442, 0.0775802508, -0.0435771495, 0.0127693005, -0.0049787699, -0.1115017235, -0.3186786473, -0.0151550733, -0.1202637628, -0.1162347421, -0.0503108688, 0.0309216082, -0.1936158240, -0.2010501027, 0.0206228811, 0.0704296976, -0.1751574427, 0.0653019622, 0.0669241622, -0.1522856951, 0.0179194938, -0.1278284788, -0.0029518928, 0.0049735494, -0.0964310840, 0.0173516590, -0.0925049260, -0.0801929832, -0.1728351563, -0.0097211329, 0.0347921774, -0.0397339724, 0.0655359551, 0.0592812411, 0.0455266684, -0.0140300719, 0.0121891033, -0.1979967207, -0.1356189698, -0.0667824671, 0.0915859491, 0.2068979293, -0.0191451237, 0.0888721123, 0.0585112572, -0.0659738556, -0.0769761279, -0.0906934887, 0.0510352626, -0.0364169590, -0.2887707055, -0.1563324183, -0.0347666033, -0.1603046209, 0.0240753777, 0.1406907588, -0.2160071582, 0.0618136600, 0.0058333455, 0.0099181151, 0.2137479633, 0.1004040092, 0.0459837243, 0.0032036684, 0.0362680443, 0.0526848473, 0.0278612543, 0.0306715220, 0.0370357372, -0.0196533035, -0.0611058921, -0.0798271075, -0.0192927402, -0.0883963704, 0.0269896872, -0.0060863812, -0.1094310060, -0.0814250112, -0.0062430277, 0.0435285866, 0.0916605666, -0.0269313585, -0.0611067414, -0.2650347352, -0.0019557707, -0.0168456417, -0.0647944286, 0.0237882547, 0.0227474291, 0.0889811367, -0.0776572973, 0.2052035183, -0.0056423671, 0.1193183064, 0.1376752555, 0.0449234433, 0.0543988161, -0.0120109646, 0.1080313623, -0.0752827451, -0.0171632878, -0.0375458226, -0.0514453948, -0.0828568265, 0.0975873992, 0.0504194610, -0.4608324468, -0.0782942176, -0.0416507758, -0.0350473486, 0.1065442339, 0.1865583956, -0.1193382218, -0.2237163484, -0.1070278734, 0.2017684877, -0.0694604367, 0.1245813891, -0.0858944878, -0.3951549828, 0.0972785801, 0.0247618277, 0.0772783384, -0.0086358786, 0.0009606884, 0.0700535923, -0.0620410927, -0.1005985737, -0.2008380294, -0.0212759655, 0.0867198855, 0.0749270841, -0.1006450802, -0.0219096653, 0.0046313438, -0.0835321099, -0.0300741140, -0.1859600991, -0.1021611169, -0.0002498342, -0.0260615796, 0.1345103383, -0.0084467186, 0.0695957839, -0.0949468538, -0.0883342177, -0.0953302458, 0.0067327591, 0.1320252717, 0.0257903431, -0.2748345137, -0.0810028091, -0.0576678813, -0.1876310557, 0.0321073309, 0.0282685906, -0.1055400446, 0.0126510626, 0.0420586281, 0.0875244066, 0.1925028265, 0.1049523503, 0.1279320419, -0.0335261375, 0.0090377349, 0.1501750201, 0.1270896792, 0.0489690900, 0.0238494128, -0.0938960761, 0.0292850100, -0.0014563878, -0.0965654850, 0.0585184880, 0.0254791155, -0.1060274690, -0.0224682372, 0.0040314449, 0.1550091207, 0.0891372636, -0.1030323654, 0.0846582651, -0.0513365418, -0.2217318416, -0.1113874465, -0.0114894276, -0.0876674056, 0.0059347646, -0.0050349701, 0.0766422227, 0.0206367578, 0.1576497257, 0.0648510829, -0.0475006327, 0.0877633169, 0.1459422261, 0.0689035431, -0.0682027265, 0.0870643482, -0.0631387979, 0.0407850966, 0.1149878949, -0.0772903338, 0.1356347948, 0.0106682321, 0.1023879722, -0.3597531319, -0.0939127430, -0.0496061407, -0.0642230883, -0.1041041240, 0.1168341935, -0.1269268095, -0.3130021691, 0.0622297898, 0.0765285566, -0.1552928686, 0.1651583016, -0.0454683267, -0.3236574829, 0.0417832024, 0.1074918360, -0.0085698096, 0.0324320719, -0.0248483699, 0.1719223112, -0.0472627915, -0.0604177378, -0.2059236169, 0.0426864773, 0.1360398829, -0.0071092262, -0.0491873138, 0.0609565936, 0.0129714003, 0.0962626487, 0.0733584464, -0.3376234472, -0.0285514854, -0.0380976535, -0.0383701585, 0.0782564655, -0.0588130914, 0.0036042512, -0.1711906642, -0.1627447903, -0.0108834645, -0.0121375313, 0.0653606728, -0.0311684925, -0.2611230612, -0.1761705875, -0.0540088788, -0.1833834499, -0.0367576219, -0.0754391551, -0.1028961465, -0.0769013390, 0.0147067690, 0.0337039270, 0.0774752498, -0.0586946160, 0.1031089872, -0.0763231516, -0.1239615828, 0.1677246392, 0.1526739597, -0.0559867956, -0.0212360322, -0.2884249985, -0.0193942655, -0.0988826528, -0.2316357642, -0.0461772829, 0.1497935206, 0.0282326099, -0.0288966466, 0.0152345765, 0.1796028614, 0.0564581640, -0.2089461088, -0.0097508235, -0.0695500299, -0.2482646406, -0.0363208503, -0.0151102729, -0.0001841669, 0.0734991357, 0.0053921952, 0.0715257525, -0.0174516253, 0.1854684800, 0.0660169125, -0.2052124590, 0.0270318743, 0.1799541861, -0.0617191233, -0.1301857531, 0.0812222734, -0.1240193769, 0.1229999736, 0.1247028857, 0.0434388183, 0.0267680883, 0.0551065840, 0.1195757166, -0.3819206059, 0.0126805669, 0.0023641775, -0.1165176034, -0.0976749510, 0.0163708441, -0.1242283210, -0.1092761233, -0.0121934758, 0.0870947093, -0.0416937657, 0.1568482667, -0.1439639032, -0.0809022263, 0.1071552858, 0.1342240125, 0.1349442452, 0.0553650483, -0.0377174281, 0.1401788890, -0.0384315290, 0.0923317149, -0.3522764146, -0.0156796202, 0.1497358233, -0.0141315795, 0.0271910820, -0.0248662885, -0.0783488005, 0.0589667372, -0.1221471503, -0.3748797476, -0.1313388646, -0.0083369361, -0.0414223447, -0.0261994321, -0.0465518162, -0.1624111086, -0.1660744101, -0.1392619312, 0.1260272563, 0.0557650886, -0.0289549641, 0.1181201860, -0.2821547687, -0.1972352564, -0.0702186897, -0.0238661654, -0.0434893668, 0.1305953264, -0.1329257935, 0.0276700687, 0.1541479081, 0.0057679163, 0.1151289120, 0.0034283567, 0.1904713660, -0.1054249480, -0.0083340500, 0.0660537183, 0.0694802254, -0.1069775745, 0.0880097598, -0.3425747454, -0.0416947156, -0.1925899088, -0.1885137558, -0.0255774502, 0.0084287031, 0.0083724484, 0.0309991743, 0.0097817946, 0.0847118124, -0.0652055815, -0.0707072988, -0.0169548187, -0.0536666512, -0.3167636395, -0.2435995638, -0.1402470767, -0.0442550182, 0.0186831933, 0.0881723315, 0.0401452482, 0.0147575010, 0.1763494164, 0.0416540951, -0.1640580297, -0.0752909929, 0.1093930751, -0.0237939544, -0.1054374278, -0.0233093146, 0.0102737397, 0.0368942842, 0.1281938404, 0.0736794621, 0.0031148817, 0.1066533104, 0.0348836705, -0.0826767236, -0.0497526564, -0.1063928977, -0.0979699194, -0.0151470080, -0.0584676340, -0.0425536036, 0.1977679878, 0.0096137011, -0.2536548078, -0.1006522328, 0.2001916617, -0.1320640296, 0.1111200228, 0.1007433087, 0.2007329613, 0.0212044530, 0.0095113516, -0.0495355614, 0.0599705614, -0.1835102886, 0.1597805172, -0.2907502353, -0.1001085490, 0.0501046777, 0.0656618252, -0.0060728635, -0.1900220513, -0.0349736512, -0.1906439662, -0.0499193817, -0.3453537226, 0.0882440656, -0.0183079969, -0.0361421965, -0.0315636024, -0.1417696029, -0.0387144797, -0.0951779261, -0.1472128928, 0.0817556381, 0.0118264407, -0.0592962243, -0.0302061457, -0.2688710093, -0.1243015006, -0.0327064656, -0.0521776453, -0.0970760360, 0.0224883445, -0.1757850051, -0.0004691292, 0.1065376177, -0.0037363407, 0.0532430708, -0.0278735291, 0.0090449397, 0.0372304730, 0.0609431267, -0.0098737609, 0.0004368354, -0.0736485943, -0.0146452468, -0.2183660567, -0.0012709715, -0.1546579152, -0.2944357395, 0.0880580470, -0.0426627994, 0.0038302764, -0.0370469466, 0.0076760179, 0.0824899152, -0.0426289737, 0.0384286605, 0.1430230886, -0.1717076898, -0.2156995684, -0.1701402813, 0.0722383112, 0.0262792055, 0.1224655807, 0.0541425608, 0.1797641069, -0.0061372160, 0.2349244505, 0.0411958024, -0.0352001972, -0.1551911831, 0.1051747724, 0.1111677513, -0.1773114353, 0.0815204978, 0.0567639545, 0.0389133580, 0.0363969952, 0.0684616119, 0.0375507884, 0.1704909354, -0.0331276543, -0.0263999328, 0.0417725369, -0.0181074906, 0.0378383733, 0.0916327015, 0.0942933112, -0.1095630899, 0.2040752023, -0.1088485196, -0.3210018277, -0.0903121233, 0.1810303330, -0.0001351803, 0.2100061327, 0.0415009186, 0.2480736673, 0.0409934744, -0.0807999596, 0.1284094453, -0.0500883944, -0.2674979866, 0.1663736105, -0.2916632891, -0.1407086551, 0.0118956016, 0.0765255839, -0.0288326088, -0.0787152946, 0.0444219969, -0.1078737825, -0.1108071208, -0.2895740867, 0.0825177431, 0.0848257765, -0.0111753074, -0.0006269267, -0.1048414186, -0.1261168569, -0.1061129719, -0.1340677887, 0.1295621246, 0.0294461288, -0.0497289374, 0.0884015188, -0.1882939041, -0.0460195020, 0.0465151779, -0.1226642653, 0.0744131356, -0.0273305122, -0.1449043900, 0.1023695916, 0.0114543820, 0.1394434869, -0.0020551882, 0.0111876018, -0.0337297581, 0.1256546229, -0.2041679472, -0.1096738055, -0.2255317271, -0.1828608811, 0.0958707407, -0.0598220229, -0.0068795797, -0.1213840842, -0.3154870868, 0.0480619520, 0.0541146621, -0.0122862663, -0.1030781344, 0.0172212236, -0.0156387202, 0.0968546495, -0.1418125182, 0.0197778754, -0.0896472782, -0.0482406132, -0.1063414216, -0.0593300238, -0.1273913234, -0.0056699826, 0.1439010054, -0.1072452590, 0.1069816947, 0.1599216610, -0.0761003867, -0.0813502148, -0.0865633786, 0.0352778360, -0.0486691408, -0.0366468728, 0.1397678405, -0.0203430653, 0.0662778988, 0.0996793360, -0.0118453689, 0.0334284641, 0.0871557444, -0.0534014851, -0.0761462227, -0.0664826483, 0.0466334447, -0.0202292781, -0.0875066146, 0.1075202003, -0.0831613913, 0.1900686622, 0.0250045061, -0.2018181086, -0.0314693525, 0.2441485971, 0.0463178232, 0.0738149285, 0.0508658700, -0.0715020299, 0.0398252755, 0.0213155299, 0.0205691289, -0.0631156117, -0.1856861115, 0.1553298980, 0.0174172167, -0.0857183486, 0.0158322603, 0.1714312881, -0.0270008147, 0.0704003870, 0.0149249062, -0.0426610075, -0.0865539685, -0.3175345361, 0.1783391684, -0.0467311628, 0.0523209348, -0.0992246643, -0.0571498908, -0.0221281331, -0.0733998567, -0.0712818354, 0.0085917506, 0.0350241065, 0.0404561311, -0.1209544018, -0.2687514126, 0.0082013533, 0.0369297042, -0.0982503518, 0.0030380778, 0.0707188547, -0.0278579276, 0.0522832163, 0.0088620065, 0.0331304818, 0.0089183450, 0.0022890696, -0.0428872891, 0.0431333892, -0.0889881328, -0.2092773616, -0.0416261069, -0.3367075026, 0.0019735787, 0.1436124444, 0.0653278232, -0.0147098340, -0.0220669284, -0.0337679908, -0.0544596389, 0.0390647203, -0.1576801091, 0.1078616828, -0.0761277452, 0.0823827982, 0.0169031788, -0.0329136327, -0.0607780553, 0.0877208710, -0.1805879474, -0.0758971199, 0.0335631222, -0.0230990313, -0.0093922112, 0.0112272818, -0.0442918353, 0.1374226063, -0.0068569016, 0.0526046567, -0.0772492141, 0.0601855442, -0.1371049583, 0.0670925453, 0.0606399216, 0.0381866172, 0.1071261168, 0.0306464825, 0.0394669548, 0.0284929015, 0.0616183914, -0.0402526110, -0.0387905650, 0.0194073208, -0.0790832862, -0.0752440244, -0.1489411294, 0.0667210594, 0.0177340973, 0.1606734991, -0.0998510718, -0.0304792188, 0.0649208799, 0.2248590589, -0.0207825247, 0.1205330789, 0.0861549154, -0.2719244659, -0.1481025070, 0.0727794096, -0.1093416512, -0.1911896765, -0.0344881825, -0.0068348572, 0.1671348661, -0.0023981619, 0.0003122388, 0.1822639555, -0.1211654171, -0.0040307841, 0.0114918984, -0.0526462942, -0.0339183435, -0.2568389475, 0.0354536474, -0.0342756100, 0.0104383426, -0.0009194709, -0.0664967075, -0.0059569823, -0.0723709613, 0.0064839511, -0.0643755049, -0.0159965884, 0.1366122514, -0.0578352027, -0.2688888907, 0.0621637963, -0.1172187403, -0.1502839625, -0.1002295241, 0.0014876185, -0.0108843893, -0.0979966745, -0.0691318065, 0.0531134680, -0.0272876974, 0.1019023508, -0.0892843083, -0.0878029689, -0.0847707316, -0.2286012918, 0.0464532562, -0.1779535711, -0.0743581206, 0.0276800785, 0.0936147124, -0.0777197853, 0.1742140055, 0.0545791164, -0.0793235675, -0.0269312952, -0.0339560173, -0.0137040121, 0.0339412093, 0.1679439545, -0.0270056706, 0.1131728664, -0.1005338728, -0.0130545478, 0.0120210545, 0.0459879972, 0.0670852065, -0.1311618239, 0.0495614521, -0.1196171939, 0.0143219260, -0.0441613197, -0.0124470927, 0.0544603243, 0.0405811556, 0.1458526403, -0.1098779514, 0.1088067815, 0.0960842147, -0.0952005461, -0.0005073731, 0.0550244451, 0.1341461688, 0.0689429864, 0.0273649786, -0.0457755886, -0.1288616508, -0.0731031150, 0.0467909053, -0.1304957718, -0.0488026887, 0.0136313597, 0.0258576851, 0.0094387196, 0.0232704636, -0.0406184755, 0.0186348092, 0.0810442716, -0.0008050384, 0.0553167984, -0.0080697304, -0.3558196425, -0.2637928724, 0.0478601269, -0.2206164002, -0.0539871305, 0.0815430731, 0.1029506251, 0.0689673647, 0.1035254002, -0.2120056152, 0.0076450170, -0.0479033254, 0.0165564921, -0.0692467019, 0.1301601082, -0.0182029959, -0.0710381269, -0.2134152800, -0.1489508152, 0.0359010361, -0.0655105487, -0.1846348494, -0.0116069978, -0.0619864576, -0.0550817922, 0.1039568782, 0.0195174888, 0.1078337356, 0.0073185517, -0.1042378843, 0.0138579309, -0.0908406749, -0.1066411138, -0.0673892722, -0.0374663621, -0.1457939297, -0.0494503230, -0.1677511930, -0.0536172129, -0.0234142225, 0.0817763805, -0.0064184275, -0.0730651543, -0.0511158891, -0.0996023118, -0.0274747983, -0.0348061025, -0.1098163873, 0.1856974065, 0.2698596120, -0.0734083578, 0.0902398601, -0.1870455742, -0.0293864403, 0.0303673875, 0.0218381323, -0.0220057406, -0.0038411075, 0.0990113765, -0.0331853442, -0.0215876773, -0.1395091414, 0.0817796066, 0.0203902703, 0.0931809023, 0.0665817633, 0.0084017329, 0.0877474248, -0.0373248123, -0.0748727396, -0.0245962217, 0.1321123391, 0.0844482109, 0.0781719908, 0.0184531771, -0.1277026832, 0.1710199863, 0.1180402189, -0.1819288880, 0.0484516919, -0.0479302332, 0.0056572924, 0.2051151097, 0.0050081341, -0.0672781393, -0.1503230929, -0.0640309453, 0.0068152295, 0.0030381756, -0.1014045700, 0.0492926612, 0.0130964033, 0.0884129703, -0.0039285761, -0.1079787984, 0.1085442826, 0.0684761852, 0.1111610383, -0.0776481703, 0.1974562705, -0.0812766552, -0.2552600503, 0.1126096323, -0.1412247866, -0.0648740605, 0.0866311267, -0.0084788976, 0.0531456843, 0.1141792312, -0.0671285838, 0.0573563986, 0.0436246060, -0.0538319796, 0.0422021337, 0.1643112004, 0.0247170664, 0.1249940023, -0.1770226210, -0.0525259599, 0.0821353048, 0.0760503635, -0.1379443407, 0.1583754122, 0.0111341914, 0.0070640985, 0.0499097817, 0.0852267742, 0.1449456960, 0.0246531460, -0.0272094980, -0.1719407141, 0.0914965644, -0.1559416652, -0.2011626959, -0.0344291814, -0.0910862908, -0.0262716357, -0.1226447523, 0.0087180883, -0.0150416726, 0.1223999336, -0.1473669112, -0.0240260456, -0.1788737625, 0.1084869578, 0.0152187804, -0.0595204495, -0.0489223562, 0.0754938647, 0.0781140551, -0.0936098322, 0.0177701823, -0.1156228334, -0.0523685701, 0.0324451029, 0.0500803813, 0.0393781886, -0.0211673118, 0.1219683588, -0.1460305154, 0.0130788395, -0.0233416986, -0.0843301490, 0.1463150680, 0.0989653096, -0.0038105859, 0.1972742528, -0.0447782092, -0.1165112481, -0.2091598064, 0.0951075405, 0.0253609288, -0.0160598680, 0.0029237983, 0.0362365469, 0.0406746008, 0.0275303144, 0.1037107632, -0.1570112407, -0.0845764056, -0.0478343442, -0.0097180214, 0.1804100275, -0.0032662067, -0.0737372264, -0.1277355850, 0.0185331497, -0.0420503840, 0.1421621293, 0.0461596064, -0.0200612620, 0.0240994655, 0.1517672986, 0.0234407820, -0.0536307096, -0.0526551418, -0.0601495840, 0.0207816996, -0.0055349823, 0.0262937509, -0.0285943300, -0.2106380910, 0.2564997971, 0.0017745056, -0.0505020916, -0.0837229043, -0.0496108383, 0.0754308105, 0.1911072880, -0.0295210220, 0.1017182171, 0.0060310857, 0.0882552043, 0.0984367505, 0.0536390468, -0.1185405999, 0.1127905175, -0.1435244679, -0.1089595929, -0.0111501580, -0.0081685763, -0.1847159415, 0.1043796465, -0.0747000799, 0.0340519696, -0.0864634588, 0.1507715136, 0.0934109390, -0.0034539383, -0.0163412225, -0.0977457017, 0.0691364408, -0.0843500420, -0.0681348145, -0.0567809492, -0.0641611367, -0.0632928610, -0.1335326880, -0.0128534921, 0.1044538692, 0.0635724142, -0.1597830653, -0.0257810242, 0.0082796039, 0.1164246127, 0.0108428262, 0.0344366878, -0.0713157877, -0.0093904557, 0.0133323641, -0.1135396212, 0.0060144765, -0.0125391502, -0.1047167704, 0.0514234453, 0.0659712702, 0.0452117734, -0.0945446268, 0.0495110936, -0.0978465825, 0.0468847081, -0.0600050390, -0.0408877097, 0.1040237322, 0.1157494336, -0.1004115045, 0.1205547005, -0.0280969758, 0.1379267722, -0.2556060553, 0.1155854240, 0.0520603769, -0.1109522283, 0.0522890426, 0.1433673203, 0.0783395693, 0.0250104964, 0.1996905059, -0.1755202115, -0.0332530737, -0.0167139228, -0.0057998626, 0.0689154044, -0.0429984853, -0.0566466674, -0.1077010855, 0.0049867746, 0.0301072504, 0.0593577810, 0.0169511996, -0.1645957977, -0.0553586110, -0.0095421169, 0.0411901884, -0.2010210156, -0.0894582719, -0.0151476525, 0.0262437686, 0.0165291037, 0.0069696130, -0.0741585866, -0.2700249851, 0.0882636383, 0.0640062019, -0.1469149143, -0.0490890034, -0.0625775456, -0.2000981867, 0.1789202839, -0.0583493747, -0.0605624057, 0.0108953072, 0.0085569406, 0.0165470205, 0.1493071765, -0.1000312865, 0.0906995758, 0.0354580022, -0.0320171602, 0.0579302981, 0.0564060323, -0.0406376421, 0.0244888719, -0.2152163088, -0.0763018727, 0.0494040959, 0.0785091892, 0.0840135589, -0.0364126042, 0.0754554719, -0.1774641871, 0.1412473619, -0.0380163901, -0.0485120490, -0.0985372514, -0.0718902349, -0.0603159666, 0.0267392229, -0.0091486536, 0.0419922993, -0.0246363916, -0.1631427705, 0.0532697029, -0.0463521816, 0.0916826800, -0.0758620575, -0.0383542143, -0.2008545548, 0.0923618600, -0.1267109215, 0.0773883685, 0.0446973778, -0.0176647287, -0.0144830300, -0.0514168143, 0.1188215092, -0.0355659537, -0.1534912735, -0.1030698866, 0.0100167766, 0.0046132863, -0.1056116596, -0.0756399781, 0.1373684555, -0.0089589171, -0.1177433282, -0.0557951406, -0.1245657951, 0.0286406837, -0.0613356754, 0.1114908680, 0.0387970693, -0.1537439078, -0.1884130836, 0.0433496162, -0.0501784831, 0.0163924824, 0.1280727684, -0.0860631615, -0.1177481040, 0.0867227018, -0.0014288252, 0.0529585332, -0.0191712566, -0.0119574200, -0.1450987458, -0.0538167544, -0.0678446591, 0.0828917325, 0.1368352920, -0.0884341672, 0.0062816883, 0.0320394151, -0.0289580319, -0.0359273218, 0.0609255508, 0.0480483435, 0.0528290235, 0.0118570402, -0.0666911453, -0.0769275054, -0.1637794971, 0.1417802125, -0.0640816614, -0.1755245477, -0.0764642507, -0.0531717166, -0.2622137070, 0.0304773729, -0.0163663793, -0.0520040095, 0.0087633887, -0.1486024410, -0.0604941733, 0.0645734444, -0.0442362316, 0.1579271704, -0.0064477753, 0.0603343174, 0.0545561612, -0.0537547767, 0.0031789592, 0.0802587494, -0.0668029264, 0.0045539201, -0.1068798900, 0.0583498701, 0.0459372327, 0.0146154212, 0.0813217610, -0.0448697805, 0.0344791375, -0.1299174130, -0.0710371435, -0.1797715873, -0.0620777495, -0.0121157262, 0.0610558428, 0.0799500570, 0.0314631909, -0.0907986239, -0.0923640132, 0.0763818845, 0.1759453118, 0.0841516703, -0.1209851950, 0.0678315461, -0.1205346361, -0.0050765518, -0.0092445631, 0.0134187574, -0.0096417787, 0.1008432806, 0.0451743603, 0.0389286242, 0.0513995141, -0.0974604487, -0.0904553533, -0.0178964380, 0.0066218469, -0.1205696538, -0.0926018208, -0.0296354778, 0.1611864269, 0.0354614705, -0.1025101691, -0.0470288545, -0.2146325856, -0.0175551549, -0.1919974536, 0.2519266903, 0.0330737270, -0.1887752414, -0.0207866207, 0.0377543643, 0.0376709513, 0.0898027569, 0.1289280951, -0.0676311627, -0.2012479156, 0.0539029762, -0.0703603849, 0.0973585546, -0.0966159329, -0.0123801921, -0.1431635767, 0.0246500783, -0.2249695063, -0.0321335420, 0.0629683360, 0.1317585409, -0.0808279887, -0.0327381492, 0.1384691298, 0.0752950013, -0.0271132328, -0.1323238462, -0.0002202314, -0.0470936075, -0.1690375954, -0.0087402975, -0.0970953405, 0.0846660137, -0.0873895437, -0.0171841513, -0.3307232261, 0.0329517014, -0.3459856808, -0.0871401653, -0.0364273116, -0.0546981692, -0.0143310092, -0.0780681521, -0.0205461662, -0.0244943835, 0.0056912331, 0.1327866018, -0.0649323389, 0.0816657171, 0.0326586068, -0.1123407260, 0.1083887666, -0.0921393037, -0.1034540832, -0.0328164287, -0.0672265068, -0.0327354781, 0.1142369360, -0.0021730207, 0.1085487157, -0.0636008829, 0.0716360435, -0.2028234452, 0.0005284389, -0.1598922610, -0.0965105146, 0.0432107300, -0.1106176525, -0.0027325188, 0.0904699564, -0.1436330080, -0.0129682003, -0.0255181678, 0.0393789299, 0.1397773325, -0.0195036549, 0.1145996675, -0.2235984653, 0.0493494421, 0.0116980746, -0.0845788494, -0.0994899794, -0.0076090880, 0.0758308247, 0.0543116853, -0.0105957724, 0.0693527907, -0.0407233573, -0.1051061302, 0.0893416256, -0.2247249931, -0.0574046597, -0.1543080062, 0.1084938273, -0.0841736794, -0.0474312566, 0.0032150170, -0.0838708505, 0.1213796809, -0.1980597973, 0.1740869135, 0.0667250901, -0.1620513350, -0.0570581071, -0.0064030858, -0.0154794008, -0.0152217643, 0.0217244308, -0.0319009013, -0.1864040345, 0.0602195449, -0.1045426354, 0.0372651964, -0.0829334632, -0.0024015736, -0.0150716361, 0.0630585998, -0.0195551272, -0.1743031144, -0.0057991850, 0.0590770952, 0.0047715385, -0.0115329633, -0.0335963406, 0.0378599390, 0.0451106131, -0.0693543702, 0.0372382030, -0.0002281097, -0.2929817140, -0.1191252470, -0.1453207433, -0.0135689117, -0.2071849853, -0.0630646795, -0.1583179384, 0.0260779951, -0.2892041206, -0.0208480470, 0.0050070761, 0.0142044062, 0.0920424238, -0.1656443179, 0.0582397841, 0.1134020612, 0.0320992321, 0.0453740358, -0.0225968789, -0.0114307972, -0.0507422648, 0.1352316737, 0.1074334756, 0.0621003062, -0.1239654124, -0.0158823282, 0.0199131742, 0.0442962237, 0.0019382887, 0.0740326047, 0.0850069001, -0.1054459438, 0.0735094696, -0.2658421099, -0.0620511621, -0.1018261388, 0.0065718330, 0.1292567402, -0.1302565783, -0.0225696266, -0.1371253878, -0.0338959508, 0.0540186316, 0.0757349655, -0.0437824093, 0.1236260086, 0.1687264442, 0.1167127341, -0.1198214740, 0.0822337195, -0.0475304164, -0.0641844496, -0.2297711968, 0.1149000823, 0.1680676192, 0.1050602719, -0.0226783492, 0.1033933088, -0.1387466192, 0.0964589491, 0.0907841697, -0.1386470199, -0.0752684101, -0.2091058046, -0.0468307622, -0.0986581743, -0.1093523428, -0.1105388328, -0.2737719715, 0.2505354881, -0.2129149586, 0.0768183321, -0.0088315653, -0.0994751751, -0.1150816604, 0.0730623081, 0.0623834990, -0.0789037943, -0.0065435758, -0.1474789232, -0.0245695673, 0.0949012563, -0.1787642986, 0.1489415169, -0.1750984937, 0.0506291986, -0.0738837719, 0.0475052260, -0.1049991101, -0.2762400210, -0.1101050898, 0.1244647130, 0.0388509892, -0.0007250581, -0.1408536583, 0.0768691525, 0.0869528726, -0.1834883094, 0.1482682973, -0.1193418354, -0.2599382102, -0.1163352951, -0.0202472527, 0.0063553508, -0.2839578986, -0.1590240598, -0.2418525666, 0.0547462180, -0.3379997909, -0.0133249220, -0.1258892566, 0.0364212617, 0.2065221667, -0.2112981379, 0.0918798298, 0.1461557150, -0.1588048190, 0.0012448883, 0.1007811800, 0.0296852645, -0.1039069369, 0.1178600937, 0.1083098054, -0.0283400789, -0.1820110083, -0.0191578977, 0.0908129364, -0.1264352500, 0.0129452720, -0.1180865243, 0.0154789696, -0.2250946611, -0.0544866137, -0.2104951143, 0.0667155758, -0.0497414097, -0.0754154548, 0.0415249243, -0.0594249628, -0.0614824258, 0.1494675279, 0.0686800033, -0.0037387444, 0.0112575078, 0.0066697053, 0.0709067509, 0.0900963917, 0.1067824215, -0.0072396984, 0.0275071748, -0.0432958379, 0.0249784123, -0.2585328221, 0.0178348329, 0.1666984111, 0.0272553638, 0.1580743343, 0.2181192935, 0.0202875342, 0.0809758827, -0.0952637792, -0.1470012963, 0.0237689707, -0.1223798171, -0.0391398519, -0.1691859961, -0.0993301868, -0.0043341462, -0.1413395405, -0.0039930381, -0.1860098392, 0.1574537903, -0.0544542521, -0.0445767455, 0.0281537604, 0.2327273637, -0.0274275206, -0.1052199081, 0.0298234541, -0.0866106376, 0.0062814746, 0.1510508358, -0.1262301505, 0.0356667191, -0.0436143577, -0.0703411475, -0.3046592176, 0.0055486965, -0.0563042276, -0.1835960597, -0.0199600980, -0.1023208424, -0.1028601155, -0.0621592775, -0.1125767231, -0.0596730150, 0.0376711786, -0.0831104964, 0.0821819678, 0.0744124725, -0.1734615415, -0.2562604845, -0.0657431483, 0.1140756607, -0.2426273376, -0.0103176907, -0.2649350166, -0.0529869534, -0.1394940466, 0.0803907216, -0.1767727882, 0.1150867343, 0.1657546014, -0.1738538295, 0.0492005907, 0.1613684893, 0.0156339109, -0.0307905655, 0.2242740840, -0.0262184925, -0.0977686495, -0.0210598707, 0.0113787837, -0.1296352446, -0.2038950324, -0.1757102460, 0.0761039183, 0.0146821262, 0.1089073196, -0.0866038874, -0.0978871211, -0.1451456696, 0.0759726316, -0.0255938545, -0.0922392979, -0.1005703583, -0.0172554236, 0.1317466646, 0.1674907207, -0.1544038355, -0.0181238949, -0.0663273185, -0.0697117373, 0.0371341296, 0.1078047678, 0.1812254190, 0.0744213611, 0.0136142820, -0.0680257231, 0.0453432947, 0.1409299225, -0.1362880021, -0.0707580000, -0.0831686184, 0.0643672273, 0.1104027629, 0.1054214910, 0.0459318310, 0.0167088993, 0.0198050775, 0.0030754807, -0.0415321141, -0.0125561785, -0.0877620652, 0.0264320094, -0.0717364475, 0.0269736703, -0.0620036162, -0.0041730814, -0.1143014580, 0.0201535486, 0.2149540037, -0.0778517276, 0.0171806533, -0.0486312658, -0.1135272756, 0.1327061653, -0.0412408933, 0.2305096537, 0.0803193152, -0.0825912654, 0.0482633710, 0.0469608307, 0.0372899696, 0.0867771059, -0.1970407814, -0.3815843761, 0.0308396388, -0.0968495756, -0.4222105145, 0.1691747010, -0.0411349908, -0.0573731959, -0.0949722975, 0.0447846688, -0.2041395009, 0.0106027210, 0.0378537886, -0.0413637757, -0.0220981557, -0.1213102937, 0.0353884622, -0.1139483303, 0.0557275936, -0.0039870911, -0.0261503253, -0.0029790816, 0.1407075375, -0.3045999706, -0.0026608882, -0.2208107710, 0.1682191938, -0.0110317077, -0.1222131625, 0.0281394087, 0.0899125040, 0.0730622411, -0.0743904412, 0.1662614644, 0.0029183156, 0.1196322143, -0.1197296605, 0.0004618253, -0.2152374834, -0.1626545042, -0.0689984187, 0.0747392848, -0.0441821180, 0.0485678613, -0.0228086077, 0.0069526667, -0.1393328011, -0.0080674449, -0.1316003650, -0.1317528635, -0.1100612283, -0.1691385806, 0.1418933123, 0.2130543441, -0.0854959041, 0.0159642994, 0.0077481559, 0.0727148876, 0.0320772566, 0.1473420113, 0.0305685289, -0.0671073347, -0.1046156883, -0.1104658395, 0.1158130839, 0.1245312542, -0.1130689010, -0.0856917948, -0.1611299515, 0.0651939735, 0.1733575165, -0.0559536703, -0.0287102964, -0.0465613268, 0.2048294842, -0.0205091815, -0.0036065415, -0.0784864128, 0.0916318223, 0.1056990772, -0.0500346683, 0.0121458024, -0.0732354969, -0.2185871303, -0.0175010320, -0.1352988183, 0.1205684394, 0.0494103357, -0.2044878304, -0.0426458344, 0.0281892475, 0.1290506572, -0.0384333991, 0.1420874298, -0.0133697866, -0.0543229878, -0.0751998872, 0.1223511174, 0.1066914201, 0.0129273580, -0.2455399036, -0.0572532862, -0.0795433298, 0.0185150262, -0.1986305416, 0.0454882868, -0.0871249884, 0.0536976904, -0.1201758757, 0.1846442521, -0.0239027869, -0.0554557219, -0.0742646679, 0.2103574574, 0.1342879683, -0.0531772636, 0.1078420132, -0.1487868130, 0.1723519713, 0.0016066028, 0.0713674352, 0.0693337768, 0.0682926401, -0.0556167811, 0.0984200761, -0.1344795823, 0.1016863212, -0.1176642478, -0.1693768799, 0.0798474103, 0.2003952265, 0.1146362573, -0.0789178088, 0.1510147303, -0.0663670897, 0.2199162990, -0.0101119531, 0.0553999133, -0.0307391547, 0.0331450552, -0.1377508193, 0.2087862045, -0.1205851212, 0.0147723863, 0.1384886652, 0.0177860297, -0.0134831686, -0.1014063656, -0.0471316501, -0.0689870045, 0.1325327456, 0.0761154369, 0.1443118602, -0.0234486312, -0.1540710628, -0.1383571625, -0.2222810537, 0.0328703225, -0.0693405122, -0.0396406502, -0.1815093309, 0.0986211076, -0.1144091040, 0.0107845971, -0.1818508357, 0.0750772953, 0.0197022911, -0.0440992936, -0.2131295353, 0.0038007090, 0.1547040790, -0.0290780049, 0.0728253052, 0.0523849949, 0.0631244779, 0.1249809563, -0.1620486081, 0.0858865902, -0.0388567932, -0.0570390113, -0.1267577708, 0.0190599225, -0.1184566468, 0.1030985042, 0.1112746224, -0.0720540434, 0.2401760966, -0.0407444127, -0.0693565831, -0.0445206873, 0.2119720727, 0.1668677628, 0.0102083823, 0.1198995039, 0.0414196737, -0.0701609775, 0.0368990563, 0.0569916703, 0.0372703709, 0.0983530208, -0.0630462691, 0.0713820457, -0.0167422444, -0.0567514822, -0.0843079090, -0.1184549406, -0.1371433586, 0.1493730247, 0.0297523998, 0.1759919375, 0.0003269800, 0.0553597063, -0.0571089834, 0.1996601373, -0.0844010338, -0.0279996600, 0.0596638694, 0.1332642734, 0.0930302665, -0.0523994416, -0.0180874411, -0.0365174673, 0.3006280363, 0.0001809620, 0.0754915923, 0.0266704131, -0.1037472263, 0.1277802587, -0.0961859077, 0.0420199260, 0.0387196876, 0.0973359644, 0.0136809815, 0.1236666813, -0.1626390964, 0.2018461972, -0.0974403396, 0.0028345641, 0.0682223514, 0.0409400165, -0.1469495893, 0.1074068248, 0.1643091440, 0.2609718442, 0.0472573079, -0.0641064942, -0.0777675062, 0.0046849307, 0.0305207148, -0.0685393065, 0.0011150450, -0.0160354115, 0.0630905628, 0.0047535812, 0.0073965834, -0.0965440422, 0.0148943653, 0.0432364382, -0.0224166624, 0.0494792946, -0.0753202960, 0.1552470624, 0.0962460116, -0.0518059880, -0.0878001302, 0.0188985914, -0.0399080142, 0.0388317667, -0.0862115324, 0.0298455153, -0.0047784010, -0.0000964038, -0.0241402164, -0.0193953589, 0.1599715054, 0.0297771450, 0.0777377188, -0.0731060728, -0.0002815871, 0.0633367300, 0.0136697767, 0.0625462383, -0.0849143490, 0.1027486548, 0.0409428552, 0.1245115474, -0.0021848485, -0.0070040650, -0.0756004229, 0.0674143434, 0.0786682218, 0.0837510228, -0.0690652058, 0.0353234485, 0.0387896933, -0.0004181787, -0.0438274108, -0.0834163651, 0.1220186651, 0.0702839866, -0.0216377098, 0.0745957568, -0.0324162878, -0.1108937860, -0.0947367698, 0.0179387275, -0.0520368963, 0.0334247462, -0.0794276074, 0.0022844980, 0.1931383759, -0.0467146002, 0.0917005017, 0.0874633417, -0.0244580582, 0.0058246097, 0.0130928708, 0.0293688495, -0.0538482144, -0.0600831211, -0.0671999976, 0.0549233072, 0.0942195207, 0.1228097007, 0.0627852231, -0.0621313155, -0.1039929315, -0.0586778410, -0.0907108858, 0.0330058672, 0.0180236585, 0.0198669992, -0.0449230894, 0.1531616449, -0.1132311150, 0.1193947345, -0.0369465202, -0.0503091738, 0.0721721202, 0.0065471823, -0.0597125813, -0.0355265886, -0.0208236557, 0.0658172294, 0.0753220841, 0.0109074851, 0.0464689843, -0.0083551798, 0.0282210559, -0.0436240956, -0.0064376667, -0.0728359371, -0.0104704946, 0.0756385028, -0.0393432789, -0.0228855908, -0.0682732165, 0.0769903958, 0.0578507185, 0.0035167933, -0.0525216274, 0.0632520318, -0.0163757429, 0.0772098899, 0.0052902102, 0.0571304262, 0.0695895702, 0.0586045384, 0.0039505735, 0.0034538582, 0.0426544845, 0.0430881828, 0.0075221509, 0.0787195563, 0.0623679608, -0.0579224974, -0.0042002797, -0.0507069454, 0.0241991580, 0.0339048505, 0.0721289217, 0.0818500221, 0.0398311093, -0.0758111775, -0.0357268192, 0.0648505241, -0.0498591475, -0.0811076686, -0.0248813927, 0.0295210704, -0.0217797346, 0.0429730862, -0.0366664231, 0.0385274589, 0.0542512834, 0.0527198166, -0.0141464695, 0.0164401680, -0.0216159970, 0.0215392932, 0.0680353940, 0.0696691722, 0.0218510777, 0.0822170079, -0.0640185252, -0.0695229694, 0.0458490402, -0.0605732687, 0.0568151176, -0.0716310069, 0.0185643286, 0.0068324357, -0.0143099502, -0.0299728028, 0.0671065301, -0.0283406936, 0.0658205599, 0.0743314177, 0.0524732620, -0.0365477055, -0.0776100457, 0.0361321941, -0.0002412871, -0.0697090775, -0.0292006694, 0.0010223165, 0.0194672048, 0.0302908048, 0.0151270255, 0.0189486071, 0.0139583796, -0.0238430090, -0.0480966978, 0.0472027212, -0.0444646813, -0.0025399104, -0.0477054641, -0.0139619708, 0.0401850864, -0.0588632599, -0.0720926225, 0.0597570986, -0.0486675948, -0.0472268835, -0.0621732809, -0.0026911572, -0.0713788643, 0.0113536492, -0.0626587495, -0.0065763849, 0.0157130733, -0.0608802773, -0.0998494551, 0.0403458737, -0.0084326146, 0.0814330131, 0.0720096454, -0.0165030006, -0.0332002714, -0.0866644010, 0.0193973333, 0.0720411167, 0.0600725450, 0.0136306761, -0.0601866469, 0.0355155356, 0.0585261248, -0.0220593866, 0.0372480266, 0.0202817786, -0.0328500308, -0.0641270503, -0.0996116474, 0.0298261009, 0.0005600071, 0.0140078850, 0.1160717309, -0.0723649561, 0.0210321229, 0.0314205252, 0.0203507263, -0.0543604940, 0.1055896580, -0.0210901964, 0.0873020142, 0.0800651237, 0.0778366476, 0.1056988165, 0.1515773684, -0.0711684227, 0.0092656082, 0.1112906933, -0.0206509344, 0.0724824890, -0.0600720569, -0.0153081734, 0.0219820980, -0.1106074154, 0.0249898136, -0.0237354580, 0.1262047440, -0.0371746384, 0.0274696052, -0.0067380834, -0.0362367816, 0.0333975889, 0.0355147012, -0.0560652241, 0.0724953040, 0.0008781850, 0.0305260867, 0.0869547725, 0.0360532440, -0.0027162062, 0.0651743785, 0.0863538831, -0.0235359669, -0.0356132463, -0.0938330814, 0.0931299776, 0.0310279261, 0.0453904495, -0.1194318235, -0.0650420710, -0.0776355267, 0.0049924022, 0.0457934365, 0.0642057955, 0.1462692469, 0.0147428736, 0.0053738053, 0.0483540408, -0.0443920493, 0.0559896529, 0.0116222054, 0.0712507889, 0.0469190441, 0.0075522326, -0.0797926709, -0.0889103711, -0.0307451505, -0.0174369346, -0.0841343403, -0.0705833584, 0.0101120528, 0.0106473491, -0.0089594154, -0.0871331394, 0.0649551451, 0.1108595058, -0.0139210057, 0.1776303351, -0.0462509207, -0.0010631625, 0.0264144875, -0.0944299400, -0.2398539037, 0.0226937439, 0.0515267514, -0.0080941319, 0.0896225423, 0.0903473794, -0.0180146229, 0.0721182972, -0.0056036487, -0.1835694462, 0.1200406328, -0.0232302211, -0.0905576721, 0.2226690352, 0.0246852450, 0.0737064481, -0.0515675731, 0.0415648781, 0.1176525205, -0.0031963969, 0.0065338286, -0.1503824145, 0.0540201776, 0.0457402915, -0.1286697537, 0.0589450337, -0.0033918815, -0.0196949318, 0.0867082551, -0.0538307205, 0.1928729564, -0.0778156593, 0.1017718017, 0.0431470908, -0.0914277434, -0.0415497720, 0.1089083478, 0.0432916544, 0.0476941355, 0.0706924945, 0.0600600876, -0.0493734963, 0.0484303609, 0.0597728193, 0.0184132792, 0.0934124887, 0.0311815497, 0.0044674557, 0.0032163481, -0.0745158866, -0.0131737515, 0.0972813293, -0.0344317257, 0.0539499372, 0.0588006638, -0.0098624947, 0.0404555202, 0.0238949601, -0.0464580953, -0.1325196177, -0.0387053527, -0.0545591488, 0.0304853059, -0.0932995602, -0.0899223089, -0.0158535205, -0.0211008303, -0.0205556098, 0.0291268993, -0.1579265893, 0.1219140887, 0.0104359882, -0.0312868245, 0.2496048659, 0.0193391293, -0.0640593395, 0.0112106800, 0.0752792880, 0.2043136507, 0.0711137354, 0.0593217649, -0.0712343752, 0.1183924899, 0.0086299507, -0.0292859059, 0.0750294998, 0.0031222873, -0.0363870598, 0.0728886649, -0.0148893083, 0.0015248546, 0.0422688238, 0.0125498939, 0.0664154589, 0.0561939664, 0.1298815310, 0.0919514522, -0.1722261310, -0.0294685643, 0.2067823261, -0.1250585914, -0.1473264694, -0.0657070279, 0.0003548258, 0.0386265405, 0.0100175105, 0.0795968473, -0.0678386465, 0.0082361596, -0.0044454788, 0.0678799599, 0.0805669874, -0.1415057778, -0.0722691044, -0.0269449297, 0.1062783003, 0.0357441716, 0.0499658547, 0.0623291060, -0.1626966596, -0.0799429119, 0.0228147507, -0.0500888564, 0.0907200128, -0.2147823274, -0.1813018620, 0.0214903522, -0.0191997942, -0.1970420629, -0.3372178078, 0.3517614603, -0.1274407357, -0.1837285608, -0.1990909874, -0.0031274990, 0.0324361585, -0.0002443476, 0.0474738404, 0.1251750141, -0.1636524349, 0.2364449054, 0.0931272507, 0.1936519593, 0.1853991151, -0.2041930705, 0.1881518066, 0.0574057586, -0.0488432609, -0.1292993277, -0.0500742458, -0.1932505667, 0.0950114578, -0.0264274850, 0.2485774159, -0.0004736568, -0.0110059446, 0.1726795733, 0.0909319967, -0.0315220207, -0.0968649387, -0.1547825485, 0.1818653345, 0.0452054329, -0.0242046174, -0.1166818365, -0.0422080830, 0.1600427926, -0.0102294320, 0.0363064893, -0.0791633278, 0.0638776794, 0.0249890666, 0.0532560050, 0.1982966959, -0.1114849299, -0.1501331180, 0.1593977958, 0.0801070258, -0.0498180389, 0.2137342989, -0.0799981952, 0.1179461405, 0.2375000566, -0.0406526364, 0.0212361570, 0.0608341619, 0.1081741378, 0.2540222108, 0.0331929326, 0.2041613460, -0.1377944797, -0.1107753217, -0.0826331154, 0.1135983691, 0.0167577043, 0.2092500925, 0.1724201143, -0.3671530187, 0.0239062775, 0.0642832890, -0.1133558080, 0.0058934176, -0.0171811152, 0.0593301468, 0.0349606238, 0.0135401934, 0.1496581286, -0.2704883516, 0.0176014621, -0.1539054662, 0.0034587241, -0.1050868854, -0.2706314027, 0.0845633224, -0.0096551310, -0.0393770151, -0.1137861684, 0.0068482030, 0.1535958052, 0.1255777031, -0.0793467611, -0.1733804047, 0.0820026845, 0.0887932107, -0.2257236093, -0.0086442623, -0.1026269048, -0.0050411588, -0.0345066674, -0.3671477139, 0.1584621072, -0.0874354541, 0.0106579065, -0.0230440870, 0.1300431639, 0.0017558562, -0.1610345691, -0.0394169055, 0.0832716450, -0.0883312300, 0.0548459701, -0.0260844827, 0.1615316868, 0.0603556782, -0.1561103761, 0.0745049343, 0.0726287961, 0.0649390072, -0.0513181277, -0.1094156578, -0.1405904889, -0.0614398718, -0.0520095713, 0.0547449701, 0.0987593904, 0.0282787494, 0.0952280313, 0.0119544463, -0.1017850190, 0.0882222131, -0.0215280876, 0.1317590773, -0.1832143962, 0.0780524835, -0.2002253830, -0.0107674859, 0.2872166634, -0.1061196625, 0.0702452064, -0.0095036058, 0.0498120487, 0.0204203781, -0.0507075004, 0.2465930879, -0.0296668783, -0.1371059120, 0.1141463816, 0.0446636304, -0.0378854051, 0.1173476428, 0.0584732257, -0.0431680121, 0.0461144634, -0.1340944618, 0.0623907186, -0.0139135802, 0.1536853760, 0.2009812742, -0.1085125655, 0.0974759683, -0.1532966197, 0.0294551216, -0.1650363952, 0.0897016972, -0.0557429716, 0.0100546991, 0.0985379145, -0.2426740229, -0.0504894257, 0.1743319929, -0.0415606946, -0.0169955827, -0.1045494974, -0.0526454262, 0.0097497785, -0.0290666614, -0.0035685806, -0.0599988103, 0.0592126027, 0.0002919624, -0.0500261746, -0.0423071943, 0.0214006286, -0.0347675607, 0.0725242049, -0.0723255873, -0.0761110261, -0.0566263236, 0.1020165384, 0.0650468096, 0.0053504808, -0.1688773632, 0.0537303351, -0.0266597085, -0.1200462282, 0.1055214182, -0.1442953050, -0.0736133605, -0.0144013455, -0.1665648818, 0.2140779644, -0.1351171136, 0.1186490953, -0.0038332425, -0.0300607048, 0.0975375921, -0.0691237748, 0.0783762932, 0.0642147511, -0.0150929112, -0.0894883350, 0.0173296984, -0.0518043675, 0.2034500092, -0.1778397709, -0.0760451853, 0.0707529336, -0.0714377239, 0.0351864100, 0.0771357194, -0.1417223364, -0.0084831491, -0.0561911874, 0.0928166509, 0.1330619901, -0.1233387068, -0.0040714638, -0.1017213091, -0.1398427635, 0.1913834810, -0.0801633820, 0.0898363888, -0.2892976999, 0.0949453712, -0.1779820919, -0.0713587552, 0.0942168981, 0.0056321784, 0.1406304836, -0.0245658904, 0.0750330836, 0.0875275135, 0.0839731172, 0.2314041406, -0.0380000174, 0.0993844122, -0.0193235837, 0.0089288792, 0.0829174295, 0.0944812670, 0.0621868074, -0.0057179611, 0.0500451028, -0.0672545061, 0.0657258555, -0.0719803572, 0.0148641095, 0.0905693695, -0.0368651636, 0.0152751049, -0.1965829134, 0.0554773249, -0.1721973419, 0.0093302662, -0.1559767574, 0.0604048148, -0.0771771222, -0.0185852032, -0.0451311246, 0.2197422087, 0.1441826373, 0.0240842197, 0.0845764130, -0.0990394205, -0.0400414541, 0.0200253464, -0.0150788100, -0.1334433109, 0.0973177403, 0.1036103219, 0.0385803208, -0.0215577483, 0.0778129995, -0.0040029208, 0.0651254654, 0.0223975237, -0.0830434784, -0.0777968392, -0.1341695338, 0.0185126476, -0.0349802189, -0.0961741209, -0.0127798161, 0.0393455885, -0.1472608000, -0.0784707442, -0.1893354356, 0.0039745974, -0.0736691281, -0.1106663868, 0.0651820377, -0.0368485786, 0.0423873439, 0.0265886206, -0.0316115990, 0.0335131437, 0.0317944549, -0.0375640802, 0.0361580811, -0.1625099927, -0.0356321931, 0.0095063262, 0.0293044522, 0.1256092638, -0.2407161891, -0.1376650184, 0.0029336025, 0.0003281285, -0.0808616951, -0.0807618424, -0.1587773561, -0.1687860787, -0.2225236595, 0.1392148584, 0.1302941591, -0.0336917676, -0.0466354676, -0.0345321149, -0.0389359519, 0.1739197373, -0.0609575398, 0.1058164760, -0.0086473580, 0.0152127873, -0.0808565542, -0.0692730546, 0.0031551979, -0.1406032741, 0.0901725143, -0.0751213208, 0.0897015557, 0.1902723759, 0.0770336017, 0.1309510171, 0.0194441415, 0.0982248634, -0.1744095385, -0.0129431318, 0.0916900635, 0.0248540435, 0.0561622791, -0.0883833840, 0.1433037221, -0.0977244526, 0.0574469306, -0.1520864964, 0.0075816712, 0.0769461170, -0.0331847481, 0.0087162079, -0.1582367718, 0.0289175157, -0.0757651553, 0.1694197357, 0.0645651445, -0.0213773157, 0.0353007689, -0.1389355510, 0.0292444713, 0.0782615095, 0.0866418555, 0.2170911133, -0.0725327060, -0.1187401190, -0.0365338847, -0.0440413095, 0.0254714284, 0.0299696438, 0.0516360514, 0.0738397092, 0.1269226819, -0.1159241125, 0.0392644182, 0.0135621130, -0.0658711419, 0.0079714078, -0.0794688761, -0.0244113617, -0.0219216254, -0.0519599207, -0.0250484422, -0.0179526433, 0.0951986536, 0.1150660291, -0.1810437590, -0.1052712947, -0.2138149291, 0.0133778462, -0.1300951242, -0.1164957955, 0.0516011044, -0.0388605744, -0.0053471276, 0.0298468228, -0.0056489552, -0.0543397367, 0.0906697437, 0.0707113892, -0.0893251002, -0.0863635018, 0.0832319707, -0.0834118053, 0.1216766611, 0.0169710536, -0.1589897573, -0.3023955524, 0.0550585799, -0.0007238730, -0.1934975535, -0.0640136451, -0.1068597659, -0.1011396945, -0.1852215230, 0.0402021632, 0.1300682575, -0.0528319292, -0.0442486480, -0.0456586853, -0.2777832150, 0.0852525234, -0.0750662237, 0.1237979233, 0.1307512671, -0.0087798033, -0.0340287425, -0.0109965634, -0.1022882834, -0.2141230106, 0.0497653857, 0.0124369999, 0.0922093093, 0.1882297099, 0.0817917734, 0.0725597590, -0.0351405554, 0.0071788128, -0.0882318690, -0.0328340940, -0.0151104098, 0.0441661589, 0.0788144469, -0.0042776442, 0.1291171610, 0.0506588183, -0.0530053042, -0.1573438644, 0.1267581433, 0.1587805897, 0.0353628732, -0.0347587988, -0.0159261972, -0.0530094542, -0.1372863799, 0.1257170588, 0.1038612947, -0.1231128424, -0.0199383516, -0.0593199804, -0.1177501157, 0.2435322106, 0.0026869490, 0.0873461664, 0.1146024764, -0.0637638569, 0.0133573888, 0.1366706043, 0.0052953162, -0.0006720584, 0.0667988136, 0.0525905043, 0.0351392217, -0.2186999470, 0.1002283320, 0.0575656146, -0.0615757182, 0.0636900142, 0.0071968976, -0.0473876335, -0.0173676293, 0.0220200401, -0.0025875473, -0.1599787921, -0.1135253757, -0.0845130682, -0.1412732750, 0.0023453815, -0.1622878760, 0.1101231873, 0.0165250637, -0.1728079617, 0.0661772117, 0.0040255548, 0.2194666415, 0.0072564585, 0.1068285480, -0.0489828661, 0.0264938083, 0.1346272528, -0.1326314062, -0.0415668860, 0.1080532372, 0.0340779014, -0.0567426607, 0.1699684411, -0.1235515252, -0.3420636654, 0.0140530569, 0.0469158441, -0.1234779209, -0.1083116829, -0.0440736152, -0.1008678973, -0.1912461668, 0.0147695355, 0.1864855438, 0.0107569210, 0.1472569853, 0.0120273102, -0.3788635433, 0.1289023757, -0.0004014467, 0.0792865455, -0.0755310953, 0.0008769962, 0.0848143250, 0.0005917743, 0.0662503690, -0.1940941215, -0.0440770574, 0.0677948669, -0.0447569974, 0.0920134261, 0.0280561019, 0.0617800206, 0.0099759968, 0.0503477789, -0.0867922455, -0.0329187289, -0.0495632738, -0.0288487580, 0.1208327264, -0.0965890214, -0.0361869819, 0.0300896429, -0.1004386768, -0.0774246603, 0.0824899375, 0.1903733611, -0.0698901042, -0.1569400132, -0.1037255451, -0.0128297647, -0.0719622672, 0.0554654635, -0.0558937527, -0.0709213540, 0.0044371020, -0.0753171965, -0.0326397344, 0.1275870055, 0.0632720515, -0.0246404167, -0.0457468033, 0.0088949995, 0.0037967456, 0.0949344188, 0.1444039196, 0.1054298282, 0.0018861840, -0.0009242691, 0.0481119975, -0.2542118430, 0.0216237735, 0.0458133332, -0.0211732592, 0.0458444208, -0.1194925383, -0.0632047653, 0.0555746593, -0.0965880156, 0.0261462554, -0.1199362427, -0.1287982762, 0.0029481787, -0.1086014733, -0.0738944933, -0.1297672838, 0.0494909286, 0.0916438624, -0.1043788269, 0.0828288794, 0.1305250227, 0.1171449125, 0.0810988992, 0.0732287690, -0.0017049257, -0.0706380978, 0.1052234992, -0.0423693173, 0.1487658769, 0.1013677791, -0.0336209238, 0.1995875239, 0.0438433625, -0.0408343673, -0.3707477748, 0.0523067713, 0.0662911907, -0.1396274567, -0.0568344295, -0.1064102203, -0.0530492850, -0.1445119977, -0.0590437911, 0.0982979983, 0.0244086292, 0.1216127947, -0.0460290685, -0.3714580834, 0.0584674291, 0.0971018299, -0.0042465110, 0.0896526501, -0.0454632156, 0.1298214197, 0.0725367740, -0.0772666261, -0.3369199932, -0.1055838615, 0.1974469572, -0.1021637693, 0.0626054108, 0.0933868214, 0.1362720281, -0.0995778665, -0.0532253906, -0.1543495953, -0.0687680990, 0.0029404371, -0.0128345881, 0.1001359001, -0.0004205674, -0.0324045680, 0.0275439452, -0.1494838595, 0.0093054706, -0.1098047420, 0.0507561900, 0.0297633652, -0.0943961218, -0.1620194167, -0.1274485290, -0.1214402691, 0.0096316412, 0.0196380429, -0.1342874765, -0.0940553695, 0.0664381236, 0.0390398838, 0.2212795019, 0.1056655124, 0.1354697645, -0.0673786029, -0.0014920222, 0.1248255000, 0.1458963454, 0.0841257647, 0.2227993608, -0.0825409070, 0.0205484852, -0.0181177761, -0.3639337420, 0.0305551793, 0.0954546332, 0.0359942354, -0.0325514078, -0.0873726085, 0.1584902704, 0.1166359708, -0.0672041699, 0.0366313048, -0.1053204238, -0.2345650792, -0.0533530563, -0.0578698292, -0.0862969235, -0.1397399455, 0.0392731130, -0.0415161699, -0.0710696280, 0.1266234666, 0.1849238873, -0.0751984790, -0.0413981229, 0.0574374497, 0.1277646720, -0.0967535079, 0.0775417909, -0.0553822108, 0.2164926529, 0.0471920483, 0.0624402836, 0.1570968926, 0.0464704223, -0.0806073546, -0.3128066659, -0.0645085648, -0.1178306267, -0.0726173446, -0.1574295759, -0.0700181648, -0.0772831067, 0.1155076772, -0.0159745961, 0.0391877964, 0.0037489054, 0.1154872403, -0.1044636667, 0.0033417058, 0.1482360512, 0.1418286264, 0.0371690094, 0.0235114414, 0.1174767017, 0.1285537779, -0.0259138066, -0.0063439352, -0.4787283838, -0.1024173722, 0.0605954714, -0.0989749357, 0.1168241203, 0.0325940475, -0.0428793132, -0.0758125782, 0.0196103323, -0.2334477007, -0.0113894027, -0.1102018952, -0.0855492949, -0.0320009626, -0.0355208814, -0.1692092568, 0.0017233483, -0.0914173573, 0.2260944694, -0.0544121750, -0.0536063127, 0.1398845315, -0.0527388714, -0.0566460565, -0.1219083220, -0.0070182104, -0.0854418874, -0.0152223743, -0.1239955947, -0.0350384191, 0.2492023408, 0.0568596944, 0.1512941867, 0.0526950993, 0.1456662416, -0.0023601607, 0.0066082184, -0.0033982790, 0.1191621721, 0.0442052521, 0.0476570874, -0.0145461876, 0.0478943028, -0.0281671118, -0.4071343839, 0.0106685515, -0.0190648567, 0.0928327367, -0.0837978050, -0.0179995410, -0.0004116544, 0.1160964966, 0.1278149337, 0.0724397823, -0.0114512304, -0.2022843510, -0.1140865013, 0.1053149179, -0.1033331826, -0.0480718948, -0.0178123564, 0.0939649343, -0.0356997102, 0.1919951290, 0.1883554608, 0.0042399592, 0.0393401086, 0.0578374378, 0.1431184113, 0.0259751752, 0.0943392143, -0.0178135466, 0.0858713165, -0.0145178260, 0.0977712423, 0.0488745682, 0.1206851825, -0.1446511596, -0.2343390584, -0.0678417757, -0.0286498964, -0.0844433233, -0.1205072477, 0.0458482876, -0.0670586452, 0.2025877386, -0.0091802347, -0.0234158430, -0.0068851174, 0.1659732312, -0.0731687024, 0.1873208433, 0.1880814880, 0.1357797086, 0.0603576265, -0.0229206588, 0.0866363123, 0.0566058718, -0.1082283333, 0.0627756566, -0.3882437050, -0.1413850635, 0.0432402678, -0.0766247213, 0.1248829886, -0.0483703688, -0.0070219748, -0.0191304330, -0.0866225734, -0.1732368022, 0.0833693743, -0.1076767370, 0.0678907260, -0.0025010752, -0.0353869796, -0.1867578179, -0.0139586432, 0.0319003016, 0.1154843867, 0.0321713127, 0.0153808752, 0.0161879808, 0.1010558605, -0.0792011842, -0.1234700531, -0.0855852962, 0.0212804060, 0.1262827814, -0.0685062334, 0.1346651763, 0.1578167528, -0.0022896922, 0.0848115310, 0.1207732558, -0.0156482030, -0.0990916044, -0.0023398153, 0.0608386807, 0.0557331592, 0.0701485425, 0.0628587753, 0.0328067914, 0.0296880938, -0.1313650906, -0.3550634980, 0.1041747332, -0.0093033705, 0.1326491684, -0.0353086889, 0.0605067387, 0.0494884364, -0.0709432587, 0.0744814500, 0.0626326203, -0.0449621528, -0.1637545079, -0.1324009299, 0.0574896485, 0.0225557256, 0.0847334638, 0.0593464263, -0.1578535289, 0.0624792427, 0.2523140311, 0.1821781695, 0.0537521131, -0.0598888472, 0.0665423945, 0.1130941436, 0.0436233357, 0.0300061814, 0.0088567268, 0.0060236594, 0.0460785776, -0.1087422073, 0.0934514478, 0.1310096234, 0.0102046356, -0.1893411577, 0.0605940446, -0.0629630238, -0.0616683960, -0.0651420429, 0.1398529261, 0.0170996077, 0.2586027086, -0.1322315335, -0.0068144286, 0.0285274275, 0.2085670531, -0.0835250244, 0.1908644587, -0.0036295569, 0.0772728175, 0.0744888037, 0.0238874648, 0.0804586038, -0.0644897968, -0.1377612203, 0.1194485351, -0.2239657193, -0.0376216061, 0.0323167704, 0.1478357166, 0.0520304441, 0.0216696579, 0.0890952274, -0.0220657066, 0.0400382653, -0.1343813241, 0.1128796414, 0.0420692042, -0.0157372728, -0.0272393487, -0.0197203904, -0.0639896914, -0.1472015381, -0.0022324042, -0.0834193304, -0.1173556298, -0.0022653814, 0.0311532356, 0.0224516038, -0.0086439531, -0.0768418461, -0.0248744059, 0.0389582105, 0.0736256316, -0.0448754430, -0.0861543715, 0.0264747888, 0.0334694460, 0.1554628462, -0.0118715828, 0.0769591779, -0.0716841519, -0.0635248199, -0.0662138537, -0.0251702871, -0.1122491285, 0.0274248589, 0.0858805031, 0.0639252588, 0.0240045059, -0.2314993292, 0.1659829468, -0.1163882241, 0.1758069396, -0.0263102669, 0.0982953012, -0.0183658544, 0.0462966971, 0.0419219434, 0.0555807389, 0.0662873685, -0.1623935550, -0.0152690560, -0.0237396508, 0.0051806453, -0.0346030593, -0.0160151906, -0.0112285344, 0.1062372625, 0.0888274461, 0.0922448114, 0.0478361547, 0.0531044826, -0.0911746770, 0.0360788256, 0.0656043515, 0.1066734418, 0.0799531192, 0.0108798193, -0.0029452776, -0.0400726125, 0.1303124577, 0.1075324565, -0.0904246643, -0.0936676115, -0.0055842479, 0.0088161677, -0.1152609885, -0.1244242042, 0.0671572238, -0.0324281640, 0.1364661306, -0.0449243896, -0.0118486984, -0.0335768424, 0.2639025152, 0.0110601038, 0.0929994807, 0.0502613783, -0.0941632837, 0.0126225669, 0.0855759084, 0.1087795869, -0.1131650135, -0.1728884429, 0.1697250456, -0.0975497365, -0.0871283263, 0.0307101328, 0.1423383653, -0.0230359193, 0.0935830325, 0.0124990661, -0.0279688202, -0.1173824072, -0.1552394778, 0.0798237547, -0.0424294770, 0.0314472839, -0.0495101959, -0.0683487505, -0.1502486020, -0.1054531410, -0.0344161168, -0.0006083600, -0.0763942525, -0.0749624223, -0.0344399214, 0.0515938587, 0.0444092937, -0.0964718983, -0.0452750996, -0.0863203555, 0.0582681857, -0.1036483869, 0.0298689511, 0.0128034512, 0.1367137581, -0.0144658899, 0.0499888435, -0.1183147356, -0.0056804535, -0.0112749105, -0.1253900528, 0.0489977412, -0.1711724401, -0.1528790891, 0.0595464036, 0.1485985368, 0.0196339916, 0.0904009268, -0.0309302025, -0.0151892826, 0.1007940769, -0.0796090737, -0.0293513425, -0.0575849116, 0.0216508675, 0.0282278042, 0.0171467513, -0.0537853204, 0.0574386120, -0.0660409033, 0.0642685965, -0.0328623876, 0.0877854005, -0.0899877474, -0.0180307422, -0.0126496479, 0.1166622713, 0.1718251705, -0.0631297529, 0.0243950188, 0.0418721400, -0.0354128107, -0.0659694821, 0.1244715378, 0.0557543375, 0.0149926702, -0.0087816464, -0.0101461476, 0.1727497131, 0.0907844976, -0.0915418938, 0.0090492386, 0.0376586057, -0.0880844593, -0.1028452739, -0.1518511921, 0.1016164944, -0.0446049608, 0.1539611965, -0.0538166277, -0.0108230365, 0.0334830321, 0.0919016749, -0.0647555366, 0.1566545963, -0.0177246910, -0.2200418860, -0.0111043155, 0.0576696619, 0.0120809292, -0.1982376128, 0.0243046749, 0.0462434441, -0.0054562790, -0.0846499801, 0.0122748455, 0.0846175849, -0.0051793675, 0.1250255853, -0.0397710241, -0.0291322153, -0.0114487922, 0.0039599282, -0.0183277987, -0.0196541063, 0.0209773760, -0.0260369107, -0.1217317432, -0.0626181439, -0.0543675907, -0.0095553314, -0.1067834646, -0.1102604419, 0.0003729504, -0.0109787583, -0.0141390860, 0.0416208953, -0.1510088146, -0.2873007059, -0.0953526720, -0.0181292780, -0.1354545504, 0.0025992577, -0.0632289648, 0.0929805711, -0.0587125085, 0.1246208549, -0.0026692669, -0.0775036961, 0.0335831568, -0.0003487179, 0.0187746584, 0.0675896853, 0.0230344683, 0.1155213043, 0.1166237071, 0.0270737037, 0.0411685780, -0.0637102053, 0.0720632523, 0.1132917479, -0.0786887482, 0.0252888482, -0.0545927063, 0.1382480115, 0.0218810178, -0.0711723045, 0.0143245626, -0.0568909235, 0.0623592883, 0.0064803325, -0.0324821360, -0.1301220804, -0.0508323833, 0.0137817124, -0.0075673247, -0.0562041029, 0.1759886146, -0.1044927165, 0.1171354055, 0.0932895616, 0.0404732116, 0.0147438273, 0.0683493838, -0.1036742702, 0.0024016961, 0.0242700316, -0.0266427398, 0.1674614996, 0.0970068797, 0.0003789534, -0.0942035168, -0.0483546443, -0.0138317114, -0.1554062665, -0.0213838965, -0.0959111899, -0.0299867354, 0.1045768410, -0.0834371373, -0.0940364003, -0.0346540026, -0.0356928073, 0.0094928499, 0.0538021103, 0.0804768354, -0.0867202580, 0.0007584963, 0.0732566863, -0.1496930718, -0.0072533488, 0.0997237638, 0.1756406277, 0.0903058797, -0.0626194626, -0.1599577218, 0.0954489261, 0.0576676093, 0.0086885253, -0.0382102579, 0.0949788317, -0.0489481464, 0.0478692204, -0.1035150290, -0.1089925244, -0.0554000065, -0.0966109410, -0.1600467116, -0.0696856081, -0.0461295992, 0.0306225270, -0.1599234790, -0.0093877120, 0.0320033729, 0.0496716611, -0.0500842072, -0.0398051552, -0.1014515236, -0.1399290115, -0.1989968717, -0.0214267503, -0.1610229313, -0.1455739886, -0.0189513322, 0.0751180872, -0.0542019606, 0.1258579046, -0.1866580248, 0.0539519414, -0.0465568043, 0.0701890662, -0.0149055347, 0.0952502862, -0.2019411176, 0.1924732178, 0.1110767424, 0.0378581360, 0.0687869638, -0.0969806910, 0.0418752171, 0.0131920660, -0.0673991591, 0.0265319217, -0.0863602534, 0.0768287778, 0.0002127079, -0.1095309928, -0.0729853213, -0.0320952013, 0.0851268098, 0.1547821760, -0.0507774465, 0.0565487780, 0.0011060938, 0.0061301901, -0.1703314036, 0.1090747342, 0.1451519281, -0.0786262602, 0.1692661941, 0.0611898117, -0.0300639179, 0.0859007463, 0.2207667679, 0.0211745109, -0.1106586456, -0.0250800680, -0.0349698924, 0.1679181457, -0.0427574329, -0.0631555393, 0.0281268712, -0.0662914366, -0.0821299702, -0.0440478064, -0.0180428941, -0.1545179486, -0.0078565078, 0.0964048207, -0.0255123880, -0.0436757840, -0.0070861615, 0.0822149664, -0.0682139397, 0.0699214935, 0.0324728638, -0.0698899552, -0.0221583527, 0.0815729052, -0.1062072217, -0.0873646215, 0.1043006405, 0.0209818743, -0.0547661036, 0.0788058862, -0.0918076634, 0.0575256571, -0.0120744500, -0.1069956198, 0.0958368629, 0.1880612373, 0.0704342872, 0.0758757144, -0.0742861927, -0.1451987922, 0.0483403616, -0.1219437122, -0.1103869453, 0.0450655892, -0.0093715983, -0.0451860167, -0.0731471628, 0.0439848937, 0.0139263496, 0.0090690916, -0.1500583887, -0.0258176439, 0.0759277269, 0.0640519261, -0.1478742808, -0.1119058132, -0.0795086101, -0.2429303229, 0.0046572224, -0.0198713727, -0.0318390056, 0.1010017172, -0.2203949988, 0.0604249686, -0.0697378889, 0.1609874070, -0.0964207873, 0.0714988559, -0.0961837620, 0.1646367460, 0.1254338473, -0.1129670888, 0.0342455320, -0.0759967491, 0.0476580523, 0.0863141418, 0.0957523510, -0.0014838270, -0.1389414221, -0.0399711877, 0.0165090896, -0.0734798461, -0.0428826697, 0.0688309744, 0.1069121137, 0.1311015636, 0.0760050789, 0.1164361015, -0.0003077453, -0.0067306939, -0.1870351732, 0.0791301206, 0.1171892285, -0.0068538729, -0.0214495324, 0.1431663483, -0.0113128386, 0.0181268621, 0.1817214936, -0.1547395885, -0.0632677153, 0.0865137577, -0.1487664431, -0.0244411211, 0.0658287555, -0.0209435597, -0.0934704766, 0.0317653492, -0.0658783093, 0.0803641453, 0.0735914782, -0.2335814238, -0.1123682261, 0.0912220478, 0.1230878681, -0.0969048142, -0.0509064533, 0.0764878392, 0.0160681773, 0.0477355160, 0.1748490036, -0.0686593056, -0.0332530811, 0.1251692027, -0.0469476618, -0.1051962301, 0.0968954861, -0.0567680746, 0.0405856445, 0.1483712792, 0.0726291463, 0.0422189087, 0.0051306607, -0.1023742259, -0.0530973077, 0.0909590274, -0.0238067135, 0.1225983500, -0.2058374733, 0.0023909111, -0.0542510860, -0.0084663071, -0.0105034485, 0.0728159100, -0.1027557403, -0.0345123634, -0.0816369429, 0.0243203510, 0.1117737442, -0.0716517642, 0.0046051079, -0.0872918218, 0.0914413854, 0.1020889208, -0.1270093769, -0.0708880648, 0.0252026785, -0.0672376901, -0.0371768065, -0.0135709923, 0.0435494781, 0.0283572022, -0.1178696305, 0.0353258476, 0.0693067014, 0.0878366157, -0.1081919000, 0.0559092686, -0.1947776675, 0.2369198948, 0.0320763327, -0.0780895203, 0.0213503595, 0.0279663187, -0.0742871314, 0.0959944725, 0.0525028631, 0.1161689237, -0.1065743268, -0.0635533631, 0.0130970441, 0.0699366927, -0.0574851371, -0.0565558895, 0.0783863068, 0.0295668263, -0.0390742123, 0.1406129748, 0.1168194562, 0.0175367016, -0.1552323252, 0.0952515155, -0.0560290553, -0.1613640040, 0.0163464230, 0.0755705982, 0.0738585815, 0.0322253481, 0.3141790628, -0.0939016417, -0.0757295862, -0.0011460063, -0.0085530821, 0.0102784233, -0.0963424742, -0.0265868288, -0.1048325002, -0.0775469169, -0.0207291972, -0.0293809306, 0.0683846697, -0.3554354012, -0.0714847967, -0.0573623776, -0.1157820597, -0.1441708654, -0.0099113733, -0.0011040025, 0.1245792434, 0.0002300418, 0.0486013703, 0.0372038633, -0.1280081570, 0.0613278858, -0.0810944736, -0.0614482462, 0.1130662188, -0.0068475120, -0.0908826217, 0.0458909161, -0.0625698566, -0.1678887308, 0.1135698855, -0.0570710599, -0.0302435048, 0.1653938591, -0.1624314636, 0.1002359763, -0.1173454449, -0.0093509369, -0.0152722625, -0.0160171315, -0.0097906031, 0.0259935018, -0.1729501933, 0.1199563667, 0.0730855241, -0.1193490550, 0.2036258429, -0.1053578630, 0.0199469663, -0.0428987220, -0.0247801151, 0.0519140363, -0.0725215077, -0.0704960898, -0.0291323476, -0.1921819746, -0.0321538970, -0.0312235150, 0.1557031274, -0.0405381769, -0.1277117282, 0.1245567128, 0.0764450580, 0.0219775029, -0.0090279542, 0.0717636868, -0.1194598228, 0.2166115344, -0.0388834886, -0.0818765163, -0.0452467017, 0.0062987343, 0.0009018416, 0.0341722220, -0.0331554972, -0.0872821435, -0.0639083460, -0.0517807752, -0.0214554556, -0.0989586040, -0.1072985157, 0.0023147631, 0.0321799889, -0.0305220503, -0.1230795681, 0.0929767042, -0.1733530462, 0.0556327999, -0.1115423441, 0.2080614120, 0.0402209274, -0.1711816639, -0.1351268291, -0.0202946514, 0.1177321672, 0.0588303916, 0.1291735321, -0.1636069715, -0.0953491628, 0.0651142225, -0.0098201521, 0.0537690669, -0.0936926454, 0.0111313099, -0.1602116674, -0.0487790480, -0.0668766946, 0.0019975463, -0.0120083969, -0.0430686623, -0.1332456172, -0.1101109758, -0.0574011691, -0.0487833209, -0.0030135419, -0.0591876619, 0.0115698064, -0.0142737897, -0.0876508504, -0.0772648007, -0.1429814547, 0.0846488476, -0.0692107081, -0.0142736044, -0.0965310410, 0.0316145308, -0.2979591787, 0.0742194131, -0.0470517874, -0.0704505593, 0.0516196899, -0.1529707313, 0.0833891556, 0.1034112498, -0.0923168808, 0.1311942339, -0.1246890947, 0.0439729467, 0.0620485917, -0.0293567609, 0.0485089123, 0.0078654448, -0.1014911383, 0.0291085131, 0.0194668975, -0.0063574361, 0.0740496516, 0.0555427745, 0.0107737770, -0.0175553896, 0.0955740288, -0.1869244426, -0.0404886641, -0.1669870764, -0.1252482533, -0.0512335524, -0.0283186622, 0.0427908264, 0.0856538340, 0.0567451157, -0.1724943519, 0.0160646401, 0.0359328724, -0.0053169969, -0.0610039793, 0.1418891847, -0.1234992594, 0.0315174423, 0.0251883902, 0.0326431431, -0.1428648233, 0.0713409111, 0.0056688362, -0.0230061058, 0.1099979356, 0.0079126684, -0.0696232766, -0.0640346780, 0.0342042930, -0.1651511192, 0.0330933779, -0.0135670835, 0.0213380195, -0.0580688417, -0.0888691247, -0.0492649153, -0.1706844121, -0.0015669006, -0.0969220251, 0.2066442817, -0.0287876073, -0.1732130200, -0.1550860256, 0.1563445181, 0.0650413707, 0.0163406413, 0.1102007702, -0.0897071511, -0.1751738489, -0.0081403553, -0.1248380244, 0.1239304096, -0.0434533134, 0.0628959760, -0.1846249998, 0.0293790083, -0.2384874225, -0.0217502043, -0.0156097049, -0.0958151147, -0.0424923338, -0.0282661207, -0.0218017790, 0.0647848770, 0.0478262752, -0.1243077740, -0.0143832704, 0.0454204306, -0.3756078184, 0.0210399348, -0.0560924150, 0.0369179808, -0.0761934370, -0.1164427325, -0.3429231346, 0.0123255281, -0.2114369422, -0.0865677074, 0.0110562965, -0.0728569180, 0.0544716455, -0.1780954003, 0.0717872679, 0.0683361739, -0.1422816664, 0.1409765631, 0.0125816315, 0.0135912774, -0.0689763501, -0.0863990411, 0.0565761141, 0.0158380121, -0.1665226817, -0.1407760084, -0.0571599677, -0.0747052059, 0.1171109974, -0.0135669969, 0.0126180211, -0.0765414983, -0.0185613818, -0.1435492933, -0.0677858442, -0.1001891270, -0.1075099483, -0.1657830477, -0.1606733501, 0.0340623409, -0.1175881028, 0.0176668726, -0.0319796167, 0.0029433770, 0.0510280728, 0.0674805716, 0.1399060041, 0.1007590815, -0.0636746734, -0.0012704001, -0.0303885601, -0.0066248747, -0.0800696090, 0.0382528976, 0.0251891240, 0.0217797980, 0.0050774035, 0.1707615703, -0.0941838101, 0.0664150417, 0.0538141094, -0.1191119701, 0.0449703187, -0.1264773011, -0.0572597980, -0.2695487440, -0.0796719193, -0.1272121817, -0.1335936785, 0.1658253074, -0.0726093203, 0.1550130695, 0.0246627349, -0.1363031417, -0.0947481692, 0.1663194597, 0.0167824365, 0.0628112555, 0.0805699676, -0.1162975580, 0.0378608257, 0.1044977009, -0.0812233761, 0.0511629768, -0.1465132385, -0.0548475869, -0.0381685607, -0.0421714485, -0.1326791942, -0.1700462997, -0.0219878461, -0.0350936428, -0.1244150251, -0.1580719501, 0.0402136669, 0.1668039560, -0.0804296136, -0.2270444334, 0.0641798228, -0.0506711118, -0.3452358246, 0.0404084399, -0.0091513265, 0.0212056749, -0.1450500488, -0.1183183938, -0.1807414591, -0.0329807661, -0.3558310568, 0.0085998885, -0.1748818159, -0.0956301913, 0.1647274196, -0.2190148234, 0.0335069224, 0.2045767754, -0.0907332599, -0.0377504081, -0.0676735118, 0.0662813261, -0.0481467620, 0.0538392439, 0.0895119235, 0.0897081718, -0.1978671104, -0.0201611146, -0.1169691980, -0.1267169416, -0.0001851462, 0.0430178791, 0.0572037064, -0.1910007298, -0.0328221172, -0.2519915700, 0.0162991472, -0.1389942914, -0.0130111761, -0.0340953283, -0.2180047035, -0.0267614257, -0.0013366905, -0.1482268125, 0.0857800245, 0.0165614225, 0.0228219312, 0.0678048804, 0.0544775687, 0.0763195977, -0.0231607947, 0.1073647141, -0.0402820073, -0.0284344591, -0.2231262326, 0.0562818199, 0.0203175005, 0.0454974845, 0.0050612814, 0.1625845432, 0.0294632018, 0.0334539823, 0.0328595601, -0.1160750762, -0.0189933628, -0.2188919187, -0.0296745114, -0.1767255813, -0.0268384013, -0.2094518840, -0.1331622303, 0.0752034113, -0.0204631463, 0.1474950016, 0.1187294945, -0.0710881129, 0.0660913736, 0.0230108444, 0.0281797778, -0.0645507351, 0.1356407553, -0.0314073972, 0.0641450882, 0.1419912279, -0.1936193407, -0.0529281311, -0.0821574405, -0.0963717699, -0.1315625757, -0.0421839431, -0.0409328938, -0.2377544343, -0.0261489023, 0.0326545052, -0.0446904898, -0.2304349691, -0.2294102609, 0.0290383231, -0.1191008240, -0.1864211261, 0.0028080507, -0.1218349785, -0.1815107018, -0.0730547383, 0.0557613857, -0.0117341215, -0.1708690971, -0.1646783799, -0.2601419687, 0.0247216877, -0.1803832054, 0.0688768923, -0.3099643886, 0.0345638394, 0.1164732426, -0.2284931540, -0.0275834277, 0.1483132988, -0.0109176142, 0.0194331575, 0.0182795282, 0.0508576743, -0.0204674061, 0.0618080050, 0.0715011060, 0.0228304844, -0.1498685181, -0.0942591652, -0.0082096672, -0.1161430702, 0.2035326660, 0.0012220039, 0.0203122124, -0.1184207574, -0.0326824337, -0.2451636940, -0.0916944295, -0.1467928290, -0.0342600010, -0.0200082641, -0.0140394438, -0.1047732979, -0.0437084325, -0.1386973858, 0.0077364352, 0.1100731716, 0.0644778386, -0.0146308001, 0.1868834347, 0.2028077394, -0.1689872891, 0.1772853434, -0.0991181359, 0.0655373856, -0.0597053878, -0.1152634993, 0.1007867455, -0.0400388651, 0.1565483660, 0.1366895586, 0.0396488793, 0.0447138362, -0.2386656255, -0.0301881786, 0.0609014519, -0.0447979942, 0.0659084618, -0.1558170617, -0.0905672535, 0.0034333102, -0.1793086082, 0.1130835488, -0.1460552365, 0.1472800076, 0.0931218490, -0.0905036405, 0.0250519253, 0.1392197758, -0.1568360180, -0.0515141524, 0.1929259449, -0.1308653653, -0.0895158276, 0.1740152389, 0.1018197089, -0.1359666586, -0.1434100717, -0.0247914419, -0.0869839042, 0.0563740991, -0.1259019822, -0.3771187067, -0.0468903296, -0.1137216017, 0.0838184059, -0.1182922423, -0.1516610831, -0.1400470287, -0.0139351226, 0.0612170100, -0.0685800239, -0.0262962822, -0.2861336172, -0.2452789694, -0.1138296127, 0.0299783200, -0.3248212039, -0.0564443953, -0.0758418515, 0.0215645619, -0.1519614160, 0.2032330483, -0.3089055717, 0.0089419214, 0.2293099612, -0.2655534148, 0.0636969060, 0.2721058726, -0.0078098192, 0.0098771863, 0.1475506127, -0.0357116796, 0.0131075038, -0.0020517895, 0.0544539317, -0.1192757115, 0.0723189265, -0.1753242314, 0.0335124806, -0.1497343332, 0.2155808955, 0.0981546268, 0.1577283293, 0.0333254933, 0.1596124619, -0.1073866114, -0.1538461596, -0.1501751542, -0.0449439958, 0.2404662818, 0.2145281136, -0.0921714976, -0.0996157527, -0.1935830265, -0.0603858531, 0.1469477862, 0.0167572219, -0.0267174598, 0.0533424765, -0.0838670731, -0.1811789274, 0.0531719401, 0.0240275245, -0.0318173990, 0.0990779921, -0.1934466958, 0.0027984711, 0.0466143303, 0.0672431067, -0.0019610864, -0.0180910695, -0.0663394257, 0.0497714989, 0.0006862452, 0.0146269817, 0.0272152703, -0.0246328712, -0.0812123343, 0.0762396902, -0.1415080279, -0.0898784548, -0.1231424734, -0.1599324644, 0.2202521116, -0.1097541153, -0.1303323507, -0.0243841894, -0.0049339421, 0.0269938596, 0.0507061742, 0.2582182586, 0.0716039389, -0.1277536005, 0.0976839289, 0.1628296822, -0.0530133396, -0.0692330748, -0.1225024760, -0.1670978516, 0.0298097674, -0.0555362068, -0.2533492446, 0.1102779508, -0.2023956329, -0.0493448712, 0.0577997118, 0.0732458085, -0.1581534147, 0.0790053457, -0.0199102666, -0.0173051804, 0.1450517625, -0.2669749260, -0.0061564860, -0.2003312707, 0.0839432105, 0.0216169246, -0.0239028949, 0.0194832981, 0.1065219343, -0.2088894844, 0.1258006394, -0.1094070747, -0.0073082950, -0.0041004173, -0.1808128208, 0.0343218371, 0.1620088071, 0.1016836315, 0.0786677971, 0.1486714631, -0.0667417720, 0.1645258069, -0.1518293917, -0.0644666478, -0.2288260907, 0.0269117188, -0.1245662495, 0.0213778149, -0.0427722633, -0.0211909916, -0.0139510352, 0.1391599178, -0.0697375312, 0.0290089846, -0.0813281089, -0.0967775509, -0.0891377851, -0.1154986545, 0.1159488112, 0.2564516068, -0.1262592226, -0.0238397587, -0.2473330349, 0.0172178168, 0.0688715652, 0.1664641500, -0.0604028888, 0.1011718214, -0.0910656005, -0.1081859395, -0.0074998308, 0.1275558919, -0.0062879161, 0.0617785864, -0.0106293848, 0.0576467887, 0.0240479242, -0.0403820649, 0.0139867580, -0.0735637695, 0.0484441593, 0.0274896380, -0.0608090088, 0.0645362735, 0.0283065382, -0.0753266886, -0.0065973187, 0.0348602757, -0.0816200450, -0.2399778515, 0.1494431347, -0.2240833640, 0.2538903952, -0.0623380765, -0.0975134671, -0.0449272096, 0.0704896599, 0.1175425053, -0.0365226306, 0.1648549139, 0.0827802569, -0.0342992358, 0.0180056449, 0.1885953695, 0.1323142499, 0.0730318204, -0.1295550764, -0.2257659286, 0.0448482782, -0.0552851968, -0.1438238174, -0.0264992230, -0.2354554087, 0.0473204590, -0.0656921268, 0.1096770242, -0.1247993186, 0.1097634062, -0.0184293762, 0.1174028143, 0.0437685139, -0.1044432074, 0.0449848957, -0.0091627240, 0.1068017855, -0.0173888337, -0.0001187636, -0.0518019274, 0.1408307701, 0.0219743960, 0.0332157798, -0.1044801772, 0.0128911464, 0.0850922242, -0.1255163997, 0.0336304419, 0.1507647783, 0.0527227819, -0.0031261451, 0.1587740779, -0.0308174230, 0.0644451082, -0.1001174301, 0.0378355496, 0.0129954610, -0.1352270693, -0.0279311165, -0.0383056998, 0.0148634817, -0.0506687388, -0.0208543371, 0.2214290351, -0.0089325244, 0.0343056321, -0.0294610281, -0.0121811172, 0.1081779078, 0.0116318315, 0.1059090868, 0.0079059452, -0.0739243925, -0.0647361279, -0.0438911691, -0.0450569838, -0.0886283219, -0.0032883093, -0.2102548927, -0.0989077911, -0.0135735581, -0.0444803387, -0.0015016678, 0.0792635381, 0.0816194490, -0.0967070088, -0.0487821922, -0.0286888629, 0.0212534219, 0.0166488998, 0.0024901058, -0.1050148681, 0.0400203504, 0.0509792119, -0.0618935376, 0.1036534384, 0.0133858016, -0.0213559493, -0.0127124693, -0.0135524813, -0.0818452835, 0.0546672717, 0.0102545237, -0.2176292986, 0.0816490576, -0.0325974748, -0.0004256470, 0.0458718352, 0.1693196744, 0.0398483239, -0.0613960922, 0.0474590138, -0.0497845709, 0.0383190811, -0.0374770090, 0.0729480833, 0.0819689706, -0.0280761905, -0.0823016390, 0.1017781422, -0.0112252459, 0.0585459135, -0.0330240317, -0.1132890061, -0.2080006003, 0.1247448698, 0.1176239252, -0.0277029350, 0.0312793739, 0.0008255398, 0.0402740687, 0.0391103849, -0.0659435764, -0.0101603298, 0.0181884542, 0.1718445420, 0.1071652994, -0.1119458452, 0.0358781219, -0.0004297227, 0.1697315276, -0.0296049900, 0.1126915291, -0.0717523247, -0.0731896907, 0.0131208487, -0.0885244459, -0.0638091043, 0.0074969912, 0.0946357399, 0.0119694099, 0.1746392697, -0.1864406615, 0.0650118142, 0.0940176174, 0.0815850794, -0.0049893884, -0.1176900342, -0.0811739862, -0.0391750820, -0.0112812575, 0.1282857656, 0.0089722769, -0.0649768263, 0.0105904071, 0.0581503026, -0.0498940423, -0.0693263486, -0.0196096841, 0.0593971089, 0.0511556603, 0.0187806971, -0.0620937794, 0.0522475578, 0.0001783296, -0.0091540245, -0.0564626418, 0.0327549577, 0.0749287456, -0.0371826589, 0.0450531840, 0.0748157725, 0.0292648245, 0.0492834449, -0.0397735164, -0.0285882521, -0.0504162759, -0.0218724739, 0.0731258094, -0.0439690836, -0.0834414437, -0.0992271081, 0.0213219132, 0.0857805982, 0.0316879414, 0.0330116898, 0.0680908486, -0.0914887264, -0.0675790906, -0.0470611751, 0.0584608279, 0.0281713232, 0.0324594714, 0.0800045654, 0.0192370620, 0.0130821727, 0.0348833315, -0.0812670067, 0.1045492291, -0.0247892626, 0.0760749355, -0.0116937310, -0.0743128806, 0.0470246524, -0.0331655890, -0.0533959717, 0.0487721451, 0.0088301012, 0.0447065942, -0.0514579378, -0.0277944654, 0.0370417982, -0.0922411829, -0.0101880422, -0.0131115625, -0.0514392033, -0.1065593809, 0.0713574663, 0.0219743513, 0.0527322739, -0.0466978215, 0.1073940694, 0.0344677791, 0.0813973248, 0.0021754617, 0.0257579647, 0.0072673280, -0.0217858572, -0.0377244949, 0.0292128008, 0.0587661862, 0.0581334084, -0.0626184717, -0.0382801443, -0.0037640855, 0.0320545509, -0.0252645668, 0.0590523630, -0.0335390493, 0.1198863760, -0.0165397320, 0.0714740753, 0.0673293918, 0.0133074503, 0.0318182409, 0.0023480416, 0.0149224568, -0.0280607548, 0.0767314583, 0.0007261231, -0.0824323818, 0.0290042218, 0.0036475770, -0.0266407356, -0.0025766573, -0.0310692303, -0.0568359494, -0.0760030299, -0.0838639066, 0.0935396999, 0.0002562899, -0.0067235292, 0.0262938682, 0.0753814578, -0.0229132660, -0.0311572682, 0.0028308332, 0.0750338584, -0.0031630993, -0.0046919682, -0.0172736533, -0.0266503301, 0.0780320019, 0.0919538587, -0.0488737524, 0.0432211161, 0.0058335294, 0.0311646108, -0.0374547653, 0.0648411214, 0.0642726868, -0.0897877440, -0.0371994972, 0.0819370002, -0.0804149732, 0.0165902302, 0.0438802689, -0.0250699650, 0.0505397990, 0.0399957076, 0.0690642446, 0.0894188657, 0.0426940769, -0.0514116324, 0.0055082943, 0.0118635371, 0.0667942092, -0.0401646085, -0.0270140208, -0.0222028196, -0.0788287818, -0.0262067001, 0.0687772483, 0.0462632105, -0.0636598691, -0.0019522173, 0.0687414557, 0.0231995415, 0.0233003609, 0.0033591096, 0.0353478864, -0.0413918719, -0.0718032271, -0.0467658415, -0.0193886384, 0.0472985022, 0.0664024055, 0.0636436641, 0.0206277221, -0.0778407529, 0.0225997102, -0.0136129847, 0.0668606982, -0.0631388202, -0.0197581537, -0.0754578337, 0.0326980874, -0.0333101153, 0.0649159029, 0.0205325186, -0.0477221385, -0.0286407694, 0.0753810704, 0.0175099131, 0.0144295916, 0.0621456876, 0.0469227731, -0.0788366720, -0.0537170172, 0.0836103708, -0.0056030303, 0.0770538151, -0.0215066299, -0.0869108066, -0.0326084271, 0.0270146653, 0.0698537603, 0.0725891888, -0.0243500918, 0.0017376428, 0.0325627252, -0.0601380281, -0.0094794407, 0.0068279817, -0.0385936238, -0.0412117951, 0.0381688289, -0.0224292260, 0.0738939792, -0.0267964415, -0.0832996517, -0.0195999946, -0.0000443253, 0.0077452441, 0.0236261338, 0.0625156984, -0.1007557660, -0.0883417428, -0.0248007216, 0.0293022823, -0.0687945187, -0.0761043578, 0.0740100816, -0.0541159734, 0.0979029536, -0.0020184920, 0.1036805212, 0.1164007485, 0.0489018559, -0.0013304242, -0.0270670187, 0.0057387035, -0.0068982118, 0.0088690883, -0.0363245532, 0.0266634449, 0.0256679263, 0.0277758110, -0.0209826641, 0.0213734396, -0.0553256162, -0.0173643548, 0.0534392782, 0.0505672358, 0.0559313372, 0.0816210508, -0.0966425017, -0.0148004126, 0.0330432467, -0.0879705548, 0.0436922275, 0.0398667455, -0.0408635549, -0.0598955564, 0.0332181938, -0.0924126729, 0.0418246947, -0.0275495928, 0.0108325714, 0.0522064045, -0.0429143645, -0.0222845431, 0.0009510345, -0.0783532038, -0.0508211367, -0.0708839372, 0.0535884574, 0.0332896076, 0.0010184371, -0.0432269685, 0.0244226120, 0.1518660784, 0.0260974336, -0.1543752253, -0.0907334462, -0.0578458458, -0.0502764955, -0.1052520499, 0.0192228481, 0.0088942992, -0.0090373633, -0.0349327885, 0.0722926110, 0.0553248636, -0.0630040541, 0.1013851538, -0.0439845957, 0.0308658145, 0.0189212114, -0.0544882640, 0.0709487051, -0.0287886187, -0.0078787953, 0.0594549365, -0.0290424004, 0.0267725140, -0.0122895790, -0.0749816671, 0.0746044442, -0.0825212374, -0.0588255487, 0.0661917925, 0.0843286887, -0.0318843201, -0.0748818293, 0.0236561205, -0.0434203409, -0.0322847329, 0.0282838773, 0.1283930242, 0.0134624783, -0.0799771398, 0.0058746641, -0.0315868184, -0.0940847620, 0.1013437584, 0.1582170874, -0.0830990672, 0.0189295523, 0.0345870443, -0.0566143617, -0.0486016199, 0.0710521787, -0.1597249657, 0.1684181839, -0.0817252472, 0.0362639204, 0.1718245149, -0.1096341014, 0.1396226883, -0.0905160233, 0.1944936812, 0.1446704417, -0.1484398246, -0.1586819589, -0.1343034953, 0.0455426723, -0.0654334128, -0.0073662349, -0.1304308772, -0.0576310717, -0.0641097426, -0.0358303860, -0.0897273123, 0.1472310871, 0.0367594920, 0.1103619114, -0.0088310111, 0.0090072565, 0.0494737625, 0.0456480645, 0.0979267061, -0.1606096774, -0.1239553392, 0.1172820702, 0.0729663074, 0.0912170708, 0.1267951280, 0.1105216369, 0.1814121455, -0.0651046485, 0.0398487784, -0.0111780530, -0.1196507588, -0.0818126127, 0.1154962033, -0.0312105939, 0.0970612168, 0.0163894817, 0.0899182260, 0.0669646338, 0.0407001674, -0.0072748880, -0.1355898231, -0.1702687591, 0.0356333666, 0.0985198244, -0.1758103073, -0.0855555236, -0.0751652643, 0.0147085497, -0.0116712013, 0.0518687479, -0.1571624428, 0.0585110784, 0.0877594426, -0.0406201594, 0.2406050116, -0.0372555219, -0.0448441878, 0.0584546328, 0.0363508686, -0.1321396977, 0.1541722864, -0.0240796302, 0.0702743083, 0.2022607774, -0.0417651236, -0.0282244422, -0.0187040847, 0.1364379376, 0.0534955673, 0.1924163550, 0.1599873006, 0.0352686718, -0.0259531029, -0.1997779757, -0.0944578424, 0.0247027930, 0.0978828445, 0.0077063753, -0.0507675000, -0.0256674830, 0.0858034492, -0.0760058165, 0.0077353725, -0.0664633214, -0.0335336961, -0.0752181038, 0.1443482190, 0.1097932234, -0.1071118712, -0.0248381570, 0.0275307577, 0.1445573568, 0.0448102988, 0.0072376942, -0.0019335869, 0.0027139662, 0.1535915583, 0.0579005517, 0.0361749791, 0.1813666523, -0.0269268956, -0.0316094533, -0.0476377830, 0.0941408649, -0.0025875198, -0.1740093380, -0.1742079109, -0.0533777662, -0.0570709817, -0.1077934280, -0.1477746367, 0.1618960202, 0.0621155538, -0.0243298411, -0.0502187051, 0.0730377287, 0.0250893701, 0.0298339538, 0.1587204635, -0.0491915122, -0.0431275219, 0.2697797716, -0.0440790392, 0.2057103515, 0.1063805148, -0.0875930265, 0.1066893786, -0.0611196943, -0.1503725201, -0.0879186615, -0.1140888184, -0.1223715022, 0.0981280282, -0.1065285578, 0.0945785344, 0.1319438666, 0.0173196979, -0.0280949827, 0.1434387565, 0.0075641070, -0.1466041505, 0.0217364002, 0.1275978535, 0.0954522043, -0.1231395379, -0.1830662936, -0.2064487338, 0.0706356764, -0.1002339125, 0.0641730055, -0.1646351367, -0.1072120294, 0.0427236184, -0.0293258354, 0.2058611512, 0.0968436375, -0.1531677544, 0.0809187442, -0.0018087924, -0.0879325420, 0.0516783446, 0.0452466644, 0.0825690180, 0.1889079213, -0.0935540795, -0.0621182956, 0.0012780409, 0.1404806376, 0.1150648296, 0.0887422711, 0.1335646361, -0.0971714407, -0.0137655111, -0.0786202326, -0.0063127624, -0.0007881970, 0.2086662799, 0.1353620738, -0.2474130392, 0.0612441078, 0.0263922866, -0.0864926353, 0.0387935005, 0.1462330967, 0.1269576699, -0.0742872432, 0.1377084404, 0.1733745188, -0.3314214349, 0.2029007822, -0.0895377398, 0.0098403124, -0.0909615383, -0.0775837824, -0.0310319271, 0.0448909365, 0.0153760416, -0.0122439833, 0.0403573848, 0.1532498449, 0.0349988118, -0.0933895484, -0.0981023908, 0.0815632641, 0.1282812655, -0.1965908259, 0.0266855638, 0.0018259218, 0.0327451862, -0.1230791360, -0.1637384295, 0.2397584617, 0.0163309146, -0.0664871931, -0.0074766357, 0.1226961836, -0.0541987494, -0.1629551053, 0.1749782711, 0.0045885919, -0.1242861897, 0.1490448564, 0.0824448615, 0.1021637321, -0.0941714272, -0.0688372254, 0.0887895226, -0.0532902218, -0.1337577403, -0.0099634947, -0.1341994554, -0.1775922328, -0.1026534736, -0.1224444807, -0.1088055223, 0.0603722073, -0.1421542019, 0.0029398466, -0.0195445716, -0.1163560301, -0.0869730785, -0.0137631372, -0.0527409986, -0.1064188257, 0.0261989348, -0.1944277883, 0.0537737124, 0.0802993178, 0.0057642506, -0.0142618734, -0.0695463791, -0.0777659416, -0.0214014370, -0.0062579596, 0.2827336490, 0.1607344002, -0.1303039938, 0.3106219172, 0.0354424156, -0.0939530060, -0.0638366640, 0.1692536324, -0.1197420284, 0.0144654661, -0.0187370963, 0.0163939148, 0.0793517977, 0.0072393706, 0.1310279518, -0.0354598090, 0.3246305287, -0.2132048011, 0.0566304438, -0.0685725361, -0.1074241251, -0.0955494866, 0.1262421608, -0.0366180986, -0.2777913511, -0.1090308204, 0.0792860687, -0.2222006321, -0.0941633508, 0.0345549546, 0.0916829705, 0.0635061786, 0.0245855749, 0.0240068734, -0.2906249166, 0.1698782295, -0.1187426448, -0.0465514548, -0.0013607375, 0.0572865866, -0.1702480912, -0.0176487509, -0.1255303621, -0.0279210974, 0.0215325579, 0.1510020494, 0.0687870756, 0.0849331319, -0.0579185560, 0.2560665011, 0.0581218824, -0.0964925140, 0.0576210283, -0.0957176462, 0.0545716509, -0.0860001892, 0.0666217357, 0.1820306331, -0.0463068336, -0.0118528623, 0.0823535696, 0.0406853668, 0.0417360440, 0.0040772050, 0.1975722611, -0.0075718104, -0.0986603647, 0.0102616334, -0.0099248504, -0.1947841942, -0.0371688046, -0.1690277606, -0.0477126539, -0.0874678865, -0.0967920199, -0.0653522089, 0.0268216450, -0.2057127208, -0.0524922721, -0.1647564024, 0.0074103046, 0.0827321708, -0.1005264297, -0.0670263842, -0.0746997297, -0.1660639048, -0.0311996695, 0.0104124844, 0.1680395156, -0.2627570927, -0.0284952763, -0.2194766700, -0.1039141864, 0.0844916403, -0.0878965184, 0.0896139443, -0.0618629158, 0.0428472124, -0.0253151823, -0.1403260976, 0.1376061738, 0.0883911476, 0.0366583876, 0.0933066532, -0.0606724322, 0.1608558744, 0.0766385496, 0.0979461223, -0.0599312447, 0.0390829444, -0.0698187798, 0.0402495228, -0.0928695202, 0.0056539383, 0.1712635458, -0.0992520601, 0.2537038624, -0.1762987971, -0.0552193411, -0.1900401115, 0.1217383444, -0.2551803291, 0.1368659288, -0.1655326486, -0.1699438840, -0.1640888304, 0.1422070712, -0.0610744208, 0.0726649836, -0.0173114166, -0.0359820388, -0.0721315444, -0.0524776876, 0.0097411033, -0.0749084875, 0.0985483453, -0.1713015735, 0.0331283472, -0.1686823219, 0.0661975890, -0.0050645508, -0.1586448550, -0.0548124202, -0.0269327220, -0.0633911416, 0.0738926232, -0.0073641585, -0.0031817497, -0.1559351832, 0.2152712345, 0.0907606333, -0.1406607628, 0.0651491731, -0.2825757563, -0.0431636870, 0.0405319110, 0.0256331097, -0.0369993225, 0.0009638333, -0.0041962233, -0.0229061674, -0.0096258959, 0.0143462634, 0.0079937261, 0.1328707337, -0.0503721423, -0.1554025263, 0.0023968625, 0.0778417364, 0.0430561602, -0.0538603030, -0.1827930808, -0.1758439541, -0.0543521717, -0.0443609878, 0.0167321600, 0.0593021847, -0.3239530325, -0.1160567030, -0.2147077918, 0.0688278973, 0.0487409122, -0.0544210821, 0.0734804422, -0.0707057491, -0.1626195461, 0.0824727267, -0.0422490314, 0.0776942223, -0.0657478794, 0.0525959134, 0.0923733264, 0.0135068912, -0.0894066542, -0.0602114499, -0.0070097698, -0.1903357953, -0.1077926531, 0.1659686714, 0.0718150735, 0.0271673258, 0.0324304141, 0.0885667354, -0.1334697753, -0.1796325445, 0.0873606503, -0.0703527629, 0.1549040824, -0.0138914436, 0.1015065014, -0.2479759604, -0.0285083484, -0.1264121085, 0.0266673844, 0.0802317113, -0.1311069578, 0.1300173849, -0.1625611782, -0.0897529945, -0.1343450546, 0.1348720640, -0.0460672863, 0.0650937185, -0.0624791384, 0.0540386550, -0.1568620503, 0.0968781784, 0.1088094860, 0.0282215364, -0.0168432258, -0.0922289491, -0.0588304922, -0.0566535331, 0.0829608515, 0.0046852212, 0.1346866637, 0.0482283421, 0.0821569338, -0.2383833677, 0.0595378429, 0.0554810390, 0.0171382278, 0.0424200557, -0.0779889002, -0.0320102237, 0.1107076108, -0.0010310541, -0.1153647155, -0.1029826328, 0.1599386930, 0.0692948475, -0.1842002571, 0.0797709674, -0.2321507335, -0.0437617227, -0.0754933953, -0.0336888358, -0.0704196543, 0.0094387336, 0.0123091675, 0.0490572266, -0.0740161464, -0.0873181149, -0.1037976220, 0.0040108967, -0.0328989252, -0.0446778424, -0.0044870521, -0.0192491338, 0.1414679140, 0.0856560394, -0.1976203322, -0.1759054661, 0.0531121939, 0.0709856898, -0.0377003849, -0.0333949178, -0.4509325027, -0.1227490827, -0.2665165067, 0.0238040574, 0.1275676042, -0.0662390217, -0.0242080968, 0.0269248914, -0.3584471345, 0.0876966342, -0.0154089974, -0.0303733032, 0.1137305126, -0.0263315365, 0.0119069573, -0.0892845914, -0.0000895644, -0.0717642307, -0.0610124059, -0.0264102407, -0.1435721368, 0.1508075744, -0.0128069548, 0.0664836988, 0.0014428275, -0.0648194924, -0.0037276938, -0.1040668860, 0.0207953919, -0.0000832049, 0.2003764361, -0.0874296576, 0.1160984337, -0.0553300232, -0.0549662933, -0.0567900352, -0.0153307179, 0.0319714136, 0.0686386451, 0.1005808637, -0.1348234713, -0.1148092076, 0.1174286455, 0.0936415717, -0.0396973602, 0.0297115147, -0.0973994657, 0.0537860766, -0.0442701057, 0.1942655593, 0.0129497247, -0.0352977030, -0.0153467664, 0.0468578078, -0.1354869604, 0.0564484932, 0.0080432128, 0.1069716886, 0.1842233092, 0.1117231697, 0.0320164040, -0.2264833003, 0.0456502214, 0.0074391868, -0.0555101372, 0.1036429033, 0.0233635884, -0.1071292013, 0.0013460239, -0.0541886203, -0.0551420636, -0.0842539072, 0.0644458830, 0.0008612495, -0.0666581318, 0.1289019585, -0.3062990308, -0.0251125265, -0.2165541351, -0.0814976916, 0.0276506580, 0.0572777092, 0.1470322609, -0.0063391598, 0.0001326670, -0.0033070554, -0.0565126985, 0.1301655173, -0.0958876237, 0.0285949782, -0.0337677374, -0.1293676198, 0.1289436072, 0.1279118508, -0.0713938177, -0.0910785645, -0.0695927069, 0.0281490497, -0.0584229231, -0.0919719711, -0.3395645022, -0.1256584674, -0.1764712483, 0.1139652878, 0.1348299533, -0.0314200670, 0.0113248918, -0.0658378154, -0.3240753114, -0.0748929083, 0.0502826124, -0.1045070440, -0.0523948297, 0.0476334393, 0.0435378961, 0.1465469748, 0.0228044968, -0.2257552892, -0.0955393165, -0.0495316647, -0.1481865346, 0.1134040505, 0.1233678535, 0.1061068103, -0.0190273952, -0.0197946783, 0.0549853556, -0.0810332745, -0.1569974273, 0.0037692604, 0.0576313585, -0.1007759869, 0.0054181530, 0.0491165407, 0.0593472905, -0.0983130336, -0.0833184347, 0.1477354765, -0.0223819837, 0.0350772440, -0.0384223722, -0.1168791875, -0.0012680567, 0.0866061449, 0.0032413972, 0.0833194926, -0.1166013181, 0.1094282568, 0.0081632733, 0.0907617956, 0.0154382410, 0.0783089027, -0.0126046790, -0.0263969768, -0.0476366542, 0.1587719917, 0.0037888002, 0.1350972801, 0.0952794850, 0.0512267798, -0.0773554221, -0.3346677423, 0.0702127516, -0.0142467730, -0.0846482664, -0.0658049136, 0.0202929247, -0.0159611367, 0.0689226538, 0.1028109714, 0.0669104531, 0.0051943799, 0.0364530124, -0.0169786494, 0.0416721329, -0.0631585494, -0.1786132306, -0.1050476730, -0.1819432378, -0.0695747957, 0.1385809481, 0.0627617016, 0.1338645220, 0.0706808865, 0.0642250255, 0.1370674819, -0.0282924585, 0.1095927060, -0.0307598803, 0.0191430114, -0.0434690192, -0.0421222188, 0.0206466727, -0.0051106373, -0.0223798342, -0.1258161515, -0.0255839396, 0.0752705187, -0.1300053298, 0.0030239301, -0.1328530610, -0.1110509783, -0.1124169827, -0.1018885598, 0.0702439621, -0.0207499415, 0.0095343227, 0.0185521487, -0.2583941817, 0.0146706132, 0.1181223169, 0.0775362626, 0.0071803308, 0.0575339533, 0.1337221116, 0.0498733073, 0.0533968508, -0.2019625902, -0.2312140316, 0.0327689350, -0.0608014204, 0.0074883434, 0.1118764207, 0.0080905622, -0.0508921891, 0.1030682400, -0.0653205961, -0.0601649284, -0.1271638572, -0.0863757432, 0.0911107883, 0.0003293557, -0.0482879058, 0.0165332034, 0.0668473542, -0.0626090467, -0.1458625644, 0.0975889415, 0.0426912121, -0.0204736628, -0.0684356466, -0.0191529468, 0.0251676068, -0.0407871418, 0.0568711385, 0.0704490915, -0.0580904670, 0.0610941984, -0.0399641022, 0.1773328185, -0.0874921009, 0.0524684414, 0.0588918403, -0.0146502666, 0.0440604687, 0.0587986298, -0.0291261673, 0.1969860196, -0.0424394049, -0.0417007618, 0.0247370582, -0.2991818786, -0.0317023806, 0.0937374756, 0.0146205444, -0.0229372103, -0.0161750894, 0.0098208971, 0.0757623538, 0.0401962660, 0.0096051693, -0.0147259925, -0.0176884755, 0.0168291889, 0.0745109767, -0.0225709286, -0.2007115334, -0.0371774659, -0.2584237158, -0.0581884906, 0.0619590990, 0.0231075753, 0.0806229338, 0.1243385971, 0.0578285046, 0.0978012383, 0.0512597449, 0.1121769249, 0.0207616221, 0.0370545536, -0.0053251875, -0.0694519132, 0.1786195785, 0.0708605647, -0.0867986381, -0.0709121376, -0.0455166399, 0.0332001559, -0.0304560494, -0.0918023735, -0.0032249186, -0.0188513044, 0.0863130763, 0.0818403363, 0.1205028370, -0.0802309960, 0.0364924595, 0.0617020279, -0.2384402901, 0.0098275188, 0.2112157643, 0.1045406237, -0.0483573005, 0.1458077729, 0.1106695831, 0.0213052295, 0.0528079867, -0.1346319765, -0.2550764978, 0.0710039884, -0.1835460514, 0.0787247568, 0.1291345805, 0.0855997726, -0.1010894254, 0.0159563869, -0.0615278482, -0.0179548860, -0.0936036482, 0.0293842703, 0.0035011508, 0.0216886979, -0.1595137268, -0.0419192873, 0.0841186419, -0.0763464719, -0.0628068596, -0.0047904304, 0.0687614977, 0.1564677656, 0.0202022586, -0.0956388712, -0.0446553975, 0.0929281563, 0.0993161723, -0.0429720953, -0.0773149729, 0.2108876109, 0.0478553325, 0.0717715546, -0.0969029292, 0.2645128369, -0.0396359526, 0.1540450305, -0.0119354455, 0.1290141940, 0.0279710032, 0.0757167414, 0.1021251529, 0.0715397447, 0.1027237698, -0.2656084597, -0.0899787545, -0.0089361155, 0.1842010468, -0.0808767974, 0.0463881791, 0.1110383347, 0.0940101519, 0.0524702296, 0.0734422579, -0.0433552191, -0.0604963377, 0.0891273096, -0.0067188670, -0.0103454674, -0.0171955023, -0.1956243813, -0.1304161847, 0.0125476308, 0.0608330332, 0.1319050193, 0.1664896905, -0.0028002253, 0.0054402142, 0.1332270801, 0.1732247472, 0.1212786287, 0.0332211591, 0.0280030500, -0.0329976715, -0.0785879493, 0.1438801885, -0.0244538970, -0.0226552077, -0.0975078866, -0.0209200401, 0.1084619090, -0.0035035114, -0.1298272312, 0.0888886303, -0.0470553637, 0.0517356880, -0.0944483653, 0.0149069745, -0.0595867187, 0.0144935166, -0.0322305672, -0.0502177514, 0.0554692149, 0.1099093333, 0.1735494584, 0.0508624315, 0.0328097716, 0.0503376201, -0.0426780805, -0.0081900936, -0.0578932092, -0.0330758393, 0.0026525904, -0.1293199509, 0.1487759054, 0.1359502077, -0.0948612392, -0.0951769575, -0.1075149924, -0.0789640471, 0.0959674269, -0.1428854764, 0.0266375709, 0.0059788828, -0.0285770800, -0.1983797848, 0.0069696228, 0.1383103132, -0.0123019330, -0.0918326080, -0.0685647801, -0.0236644130, 0.1156456918, 0.0201536492, -0.0742307529, 0.0183851589, 0.0855710655, 0.1332503855, -0.1011130437, 0.0055822930, 0.1218453422, -0.0133453403, 0.1801439077, 0.0579933487, 0.2291253507, -0.0359624811, 0.1213486567, -0.0334707238, 0.1324731410, -0.0055071893, -0.0573593341, 0.0330048501, -0.0509087741, -0.0350464284, -0.1979929209, -0.0170231070, 0.0280517098, 0.1245937794, -0.0500366725, -0.0375696681, -0.0072526191, -0.0461622961, 0.0397333503, 0.1113421172, 0.0371105112, 0.0098363943, -0.0419342779, 0.0253185593, 0.0727198124, 0.0136987474, -0.1211207062, -0.1541718692, 0.0382294804, 0.0582480505, 0.1563539952, 0.0469244644, 0.1390069872, 0.0062668477, 0.0789896473, 0.0293722935, 0.1144195348, 0.0234114118, -0.0211408641, -0.0030305577, -0.0284320395, 0.1858954281, 0.0599427186, 0.0165577009, -0.1239122599, -0.0197541695, 0.0413385965, -0.1191823632, -0.0813063756, 0.0949276015, -0.0625727996, 0.0636711642, -0.0803511143, -0.1341003627, -0.0099015730, -0.0065480480, 0.0267454106, 0.0352712572, 0.1159025952, -0.0243443511, 0.0944321975, -0.0580320358, 0.0144720571, -0.1222777814, -0.0939211100, 0.0549179763, -0.0011656390, -0.0609227046, 0.0120031228, 0.0089493748, 0.1215619966, 0.0195210464, -0.0998524055, -0.0295581929, -0.0681080446, 0.0379185565, 0.0566666424, -0.0036168746, -0.1038750038, -0.0292672105, -0.1083561182, -0.1464975029, -0.0652108788, 0.0266256053, -0.0510002524, -0.0296120085, -0.0062258989, 0.0477114618, 0.0956007019, 0.0839897469, -0.1613904685, 0.0345987193, 0.1356585324, 0.0362781249, -0.0225975011, -0.0209772438, -0.0816238746, 0.0459286794, 0.1247777343, 0.0432908721, 0.0528503396, -0.0663013309, 0.0510781929, -0.1574881226, 0.0687979162, 0.0507453345, 0.0137972534, 0.0835897475, 0.0047448091, -0.0116929580, -0.1280721426, 0.0795231313, 0.0771536380, 0.1226231679, -0.0771151930, 0.0522162654, 0.0115493890, 0.0111442795, 0.0754018873, 0.0722763613, -0.0317562670, 0.0344627090, -0.0197079759, 0.0366693214, 0.0094815539, 0.0184786767, -0.1788921505, -0.0798024014, -0.0236870628, -0.0064474205, 0.1453370601, 0.0269668438, 0.1015860066, -0.0793778151, 0.0218526870, -0.0198270343, 0.0137327751, 0.1197431386, 0.0968779698, -0.1498903483, -0.0544456132, 0.1269264519, 0.0422468632, 0.0651021749, -0.1043105051, -0.0237292442, -0.0008720615, 0.0082387561, -0.0410717539, 0.0913098603, -0.0890333056, 0.1200777665, 0.0005289555, -0.0879761577, 0.0430979468, 0.1105519235, -0.0006852943, 0.1034719795, 0.0132562714, -0.1555034667, 0.1480062306, 0.0628149658, -0.0966038033, -0.0656694621, -0.1036200598, 0.1114728972, -0.0449232645, -0.0214504693, 0.1088257879, 0.1099184752, 0.0639025867, 0.0626497939, 0.0270276573, 0.0770916715, -0.0211870670, 0.0968026966, 0.0668100566, -0.0476198606, -0.0107373968, -0.1413310021, -0.0295359995, -0.0664979368, -0.0218782369, 0.0249732863, -0.0830513388, -0.0094546806, -0.1181729957, -0.0876375884, 0.1086842939, 0.0487916209, 0.0433311239, -0.2523949444, 0.0349692851, 0.1006885916, -0.0825522840, -0.0302211978, -0.0642733574, 0.0796384066, -0.0459130965, 0.0540878549, 0.0188896097, 0.0038518633, 0.1208438352, -0.0197646040, -0.0335305259, -0.0027382534, -0.0536968596, 0.0145712225, 0.0494942628, -0.0444004647, 0.1625028104, -0.0207047909, -0.0304939467, 0.0543851033, -0.0309948772, 0.0501504913, -0.0414207205, -0.1028020084, 0.0956354588, -0.0015825628, -0.0191177800, 0.0204465017, -0.0056349114, -0.0672831237, 0.0551366210, 0.0204934552, -0.2305476516, -0.0777979568, 0.0642467067, 0.0443633981, 0.1224513054, -0.1787613928, 0.1658520103, -0.0519689098, 0.0439329408, -0.0322432630, 0.1053842753, 0.1269948334, 0.0726937130, -0.1454888284, -0.0138079310, 0.1957359612, 0.0010512079, 0.0370852835, -0.1303890347, 0.0411159545, 0.0289886743, -0.0629759803, -0.0226526130, -0.0491296686, -0.0044082068, 0.1244658306, -0.0056916187, -0.0440864973, 0.0274229534, -0.0286123492, -0.0556345135, 0.0710868537, 0.0592676401, -0.2354891151, 0.1806391776, 0.1778765321, -0.1361573339, -0.1161857694, -0.0399735458, 0.1835777909, 0.0049741939, 0.0448181517, 0.0092214756, 0.0034631670, 0.1630337238, -0.0152681489, 0.0069206045, -0.0692134649, -0.0141632902, 0.1284610182, 0.1164877266, -0.1239117011, 0.0015935008, -0.1934074759, -0.0539348610, -0.1223008558, -0.0300028156, 0.0527913198, -0.2070244998, 0.0052952068, -0.1543987393, -0.0240940098, 0.0137412595, 0.0938710794, -0.0263785515, -0.1842427105, -0.1111354530, -0.0693459883, -0.1347128451, -0.1594979763, 0.0197978076, 0.0290441327, -0.0274789724, 0.1447432786, 0.0231314972, -0.0378462225, 0.0969166756, 0.1048636287, 0.0669540018, 0.0714625493, -0.0120483413, 0.1049859375, 0.1652185321, 0.0092460578, 0.1013518497, 0.0345307477, 0.0864112079, 0.0684808642, -0.0918606073, 0.0397110693, -0.0526892059, -0.0275863390, 0.0721193701, 0.0436752699, 0.1068690941, 0.0502472408, 0.0347301699, 0.0568660386, -0.0662012100, 0.0169601236, -0.1067353263, -0.0837687552, -0.0160783082, 0.0891438723, 0.0082733156, -0.1453537196, 0.0150452880, 0.0043149153, 0.0170992445, -0.0400330909, 0.1826413274, -0.0256511252, -0.0418173447, -0.1249529719, -0.0911531299, 0.0738880858, -0.0393933468, -0.1046126038, -0.0763028041, -0.0200351402, -0.0696357712, -0.1575979143, -0.0652211234, -0.0585083067, 0.0214532707, 0.1234890744, -0.0293262005, -0.0691527128, 0.0869951397, -0.0326254964, -0.0640466958, 0.1348293126, 0.0769072324, -0.1331945509, 0.1560474932, 0.0689331070, -0.0131442100, -0.0575405285, 0.0288285110, 0.1453104466, 0.0067643644, -0.0327447802, -0.0131777534, 0.0404010676, 0.1103594899, 0.0435205288, 0.1361688972, 0.1117778942, 0.0279052667, 0.1461541802, -0.0812971890, -0.0166481659, 0.0773677453, -0.0524312705, 0.0344783813, -0.0740099996, -0.0437080078, -0.0223376453, -0.2476197779, -0.0879567787, -0.0778736249, -0.0961502865, -0.0781786144, -0.0328654125, -0.0333768837, -0.1579070985, -0.0766826347, 0.0340667367, -0.0862822160, -0.1202368587, 0.0277191754, 0.0489059128, -0.0476673692, 0.0444921739, -0.0087688062, 0.0110333897, -0.0358658843, 0.0377954207, 0.0414687544, -0.0505673923, -0.0866722465, 0.0244553909, 0.1435111761, -0.0858940110, 0.0705255568, -0.1112934873, -0.0025354880, 0.0220813714, -0.1166622490, -0.0448497497, -0.1297514588, -0.1528379023, 0.0447239280, -0.0793662295, -0.0584366471, 0.1068491414, -0.0009012307, 0.0431167558, -0.0524274968, 0.0466367677, -0.1732468754, -0.0467144325, -0.0372045413, 0.0009134458, -0.0303112231, -0.1701815277, 0.0497047864, 0.0552399121, 0.0384160541, 0.0305346325, 0.0876219347, 0.0097880056, -0.0874234810, 0.0119952718, -0.0136206988, 0.0702170879, -0.0498257689, -0.0573279783, -0.0157468878, 0.0196407624, -0.0344315097, 0.0101791946, -0.0226025712, -0.2325734496, 0.0314341225, 0.0912853703, -0.0009363994, -0.0199866127, 0.1182863414, 0.0647668764, -0.1515682191, -0.0029278751, 0.0829763412, -0.1199630797, 0.1814545393, 0.0595083833, 0.0305084717, -0.0162251219, 0.0536879599, 0.0237547774, 0.0303688776, 0.0518258512, -0.0070852386, 0.0407065041, 0.0230385177, -0.0540597998, 0.1427527964, 0.0484618768, -0.1298084557, 0.1781599224, -0.0828185230, -0.0373798646, 0.1033334732, -0.0974956825, 0.0337930843, -0.0325566418, -0.1151856109, 0.1043370143, -0.3257423341, -0.0487652943, -0.1395564228, 0.0235190410, -0.0411354937, -0.0926396102, 0.0399167724, -0.0097282417, -0.0187028944, 0.0034422609, -0.1583276242, -0.1904857010, -0.0221229885, 0.0152853550, -0.0212914310, 0.0307978373, -0.0431862399, 0.0724697039, 0.0151717430, 0.0094905281, -0.0948951840, -0.0213394687, -0.1638527066, 0.1429794878, -0.0093283234, -0.0807675868, -0.0281567033, -0.0286174677, 0.1200682595, 0.0130306855, 0.0832389146, 0.0137960473, -0.0425024964, -0.0463023260, 0.0799868777, -0.0453204587, 0.0089568403, -0.0612035617, 0.0504787900, 0.0259266999, 0.0134160900, 0.1453074068, -0.0331569947, 0.0896119624, -0.0543579683, 0.1427265257, -0.1329355985, -0.1194631606, 0.0916889682, 0.0571917892, -0.0122633046, 0.0252334569, 0.1771319956, -0.0501728207, -0.0702984780, -0.0158735681, -0.1567422897, 0.0650245994, 0.0296546035, -0.0768387243, -0.2123752981, 0.0205833949, 0.0193006620, 0.0293690786, 0.0505900905, -0.2598149180, -0.0182031561, 0.0863601267, -0.0058659925, -0.1649728715, -0.0739933774, -0.0270687062, -0.0534270704, 0.0051673045, 0.0977106765, -0.0938097611, 0.1722818911, 0.1177535802, -0.0263900720, -0.0454686210, -0.0040399893, 0.0397371724, -0.0269899331, 0.0997186825, 0.0686125159, -0.1546363682, 0.0651884601, -0.0745469630, -0.0113476533, -0.0065096999, -0.0148257017, -0.0141460048, -0.1477766633, -0.0456030890, 0.0229998603, -0.0611460917, 0.0012090344, -0.0184259154, -0.0659472272, -0.0489053428, -0.1000237986, -0.0653904527, 0.0966582745, -0.0724555254, -0.0635132045, -0.0481788442, 0.0369183831, 0.0282425508, -0.0393670052, -0.2029398978, -0.1250205487, -0.3375939429, 0.0025526732, -0.0014912273, -0.0759777278, 0.0869488716, -0.0781477243, 0.0254121870, -0.0051647425, -0.1134281829, -0.0334725156, -0.0012751397, -0.0864994153, 0.1284301281, 0.0051991101, -0.0733658299, -0.0375496782, -0.0354484990, -0.0117372675, -0.0717742220, 0.0299758911, -0.0576244257, -0.1391201764, -0.1071276218, 0.0684352070, -0.0562572144, -0.1084861159, -0.0575222559, -0.0094023626, 0.0241802949, -0.1282971799, 0.1117845699, 0.0180457234, 0.0913650021, -0.1619605869, 0.0756099969, -0.0291981623, -0.1297146082, -0.0079426114, 0.0556579195, -0.0095069986, 0.0113566257, 0.1806196868, -0.1470427513, -0.1213448420, 0.0095410142, -0.0566532388, 0.0950187594, 0.0849313512, -0.0680463836, -0.1376595795, 0.0059981728, -0.1378670931, 0.0202946980, -0.0748244673, -0.2752161026, -0.0194792710, -0.0017687810, -0.1038619429, -0.0443351455, -0.1003966630, -0.1039989740, -0.0610968471, -0.0371757112, -0.1493021995, -0.0305934157, 0.1651960760, 0.1049991772, -0.0454185158, -0.0077661267, 0.0533769950, -0.0008142069, -0.0590612739, 0.0139229679, 0.0457563773, -0.1697127819, 0.1609334052, -0.1848432869, -0.0596347526, 0.1729379743, -0.0845709369, 0.1065524071, -0.0259804782, 0.0789079219, 0.0611882620, -0.0868479833, 0.0730134770, 0.0323362276, -0.1865376681, -0.0438607596, -0.1030853465, -0.0693726316, -0.0751802251, -0.0915171430, -0.0492549948, 0.0093163177, -0.0607056990, 0.0016127820, -0.0792015865, -0.1253919601, -0.0408217758, -0.2567815781, 0.0109321391, 0.0389328077, -0.0143884206, 0.0894879624, -0.0887582526, -0.0364107788, 0.0167384893, -0.0616775751, -0.0774260834, 0.1681493521, -0.0957011729, 0.1704964638, -0.0156345293, -0.0362965502, 0.0359456278, 0.0982756242, -0.0319541954, 0.0859401226, 0.0161671434, 0.0249849875, 0.0107775833, -0.0851873010, 0.1034754515, -0.1396702975, -0.0364424624, -0.1397205293, -0.0035470312, -0.0445382446, -0.0946911722, -0.0952259451, -0.1340321451, 0.0098382337, -0.0868247151, 0.1299314052, -0.0545084924, -0.0989203900, -0.0601312220, -0.0583935715, 0.0469241627, 0.0971499830, 0.1678163558, -0.1738058329, -0.0177736282, -0.0537446961, 0.0076544732, 0.0139367785, 0.0014369850, 0.0136752296, -0.1637376249, -0.0526765697, -0.1262720525, -0.0403138623, -0.0847034156, -0.1714764833, -0.0284686536, -0.1252821982, 0.1368055493, -0.1543421149, 0.0016923393, -0.1216039658, 0.0796093568, 0.0203650910, -0.2246657908, -0.0642474145, 0.1342813224, 0.0305047296, -0.1899946034, -0.0126363048, 0.0128455590, -0.0118689863, -0.1914816648, 0.0855247229, -0.0783633515, -0.1307122856, 0.0556879453, -0.1494126171, -0.0410029218, 0.0673423037, 0.0085564544, 0.0145660061, -0.0034457415, 0.0328170061, 0.0422437899, -0.1159243956, 0.0248900726, -0.0693162009, -0.2084124088, 0.0291595161, 0.0292418767, -0.0595589690, 0.0648832321, 0.0636495799, 0.0254689809, 0.0065133525, -0.0886139870, -0.1699752212, -0.0961962938, -0.0739061385, 0.0371821597, -0.1367332786, 0.0165422987, 0.0815389976, -0.0636822581, -0.0067071095, -0.0576653890, -0.0966607481, 0.1570865065, 0.0125400368, -0.1071662530, 0.0936542675, -0.1037542298, -0.0322011635, -0.0802487433, -0.1390431225, -0.0233202390, 0.1025907695, -0.0628786758, 0.0945177376, -0.0455165692, 0.1042846441, -0.2005298436, -0.0211902950, 0.0522597879, -0.0203708485, -0.0235934239, -0.0830849037, 0.0592846870, -0.1530830562, 0.1089655310, -0.0273931026, -0.0360074267, 0.0179897808, 0.0623709373, 0.1791726351, 0.0401799381, -0.1930475980, -0.0055901110, 0.1328820884, 0.0396466665, 0.0855125710, 0.0584046356, -0.1451540589, -0.0521629862, 0.0299595445, -0.0355920158, 0.1110081375, -0.0905319154, 0.0431558155, -0.1097327024, -0.0746905580, -0.2917398810, -0.0509474576, -0.0716046393, -0.1077620015, -0.1281207651, -0.2107227296, 0.0802966654, -0.0221172608, 0.0192471705, -0.2006094605, 0.0326925367, 0.0518089570, -0.3080296814, 0.0943295434, 0.0176000167, 0.1995667368, -0.1715264618, -0.0655642077, -0.2297970355, 0.0362520292, -0.1726513207, 0.1172576174, -0.0382143408, -0.1250245422, 0.1272535026, -0.2553100586, -0.0617002584, 0.2377319038, 0.0145364758, 0.0425474830, 0.0118904598, 0.0678242594, 0.1103612483, -0.0732291341, -0.0038218400, 0.0968652144, -0.1428246498, 0.0391092040, -0.0468682125, -0.0791386813, 0.0902249515, -0.0634352863, -0.0350503996, -0.0519051403, -0.0905766264, -0.1111924648, -0.0840937048, -0.0250304397, -0.1404154003, -0.1092390046, -0.0343052000, 0.0392397344, -0.0263861082, -0.0609555691, -0.0662993044, -0.1717836708, -0.0253267065, -0.0374530740, -0.0198018141, -0.1035058796, -0.1333568245, 0.0756713375, 0.0419128723, -0.1020810977, 0.0013543485, 0.1148429736, -0.0086578149, 0.2072825134, 0.1210925505, 0.1014444679, -0.0935219601, 0.0246512927, -0.1192764565, 0.0913475379, 0.1310039610, -0.1250808090, 0.0670561567, -0.1390401870, 0.1220086664, 0.0750560984, 0.0704556853, -0.0377737656, 0.0103775663, 0.1621225625, -0.0203453247, -0.1673539132, 0.0594699234, 0.1427253485, 0.0267655905, 0.0711034760, 0.0885496661, 0.0510004163, 0.0522617251, -0.0052815466, -0.0009168954, -0.1227045208, -0.0105324909, 0.0429519750, -0.0419769138, 0.0449984483, -0.2281246483, -0.1180437133, 0.0236003175, -0.0348912850, -0.1328664422, -0.2198186368, -0.0163641982, -0.0573243350, -0.1811100245, -0.1535594016, 0.0713216215, 0.0106247384, -0.2488965988, -0.0192277189, -0.0728924051, 0.0171193108, -0.2194558829, -0.1778219789, -0.1564815193, 0.0663393885, -0.1795207858, -0.0527069420, -0.2124333233, -0.0858203098, -0.0116158407, -0.3238410354, -0.0009056848, 0.0723199844, 0.0196890794, -0.0662040934, 0.0756474435, 0.1150941998, 0.1080060899, -0.0940198302, 0.0987175629, 0.0860241577, -0.1696285009, 0.0722724646, -0.0301361531, -0.0897242501, -0.0303411484, -0.0689852685, -0.0308871493, -0.1706245393, 0.1675584912, -0.0480955243, -0.0581492409, -0.0761323720, -0.0873565674, -0.0832736939, -0.0857699215, 0.0371489823, -0.2010157406, -0.2970164120, 0.0869166404, -0.0314499252, 0.0223571956, -0.0619590580, 0.0177415814, 0.1409830749, 0.0073636286, 0.0654763803, -0.0488778800, 0.0450397246, -0.1101859584, -0.0537221022, 0.0119904447, 0.0629835203, 0.1594452858, 0.1203281283, 0.1354380101, -0.0598829873, -0.0087381769, -0.0840203464, -0.0965224579, -0.2230793685, -0.0799963251, -0.1293358356, -0.1761367470, -0.1850451678, 0.0748166889, 0.0424338840, -0.0608801320, 0.2754863799, 0.1850290000, -0.0430483110, -0.0695115179, 0.1476382911, -0.0960704833, 0.1731780916, 0.1904743016, -0.1143241823, 0.0925218463, 0.1143479943, 0.1025012732, -0.1256023496, 0.0649242252, -0.0885022581, -0.0689688697, -0.0456626825, -0.1905478537, -0.1769221276, -0.1143386140, -0.0879144669, -0.0671764761, -0.0213911161, -0.1746725887, 0.0409345329, -0.0561634861, 0.0699139759, 0.1191806495, 0.0584370606, -0.0787710622, 0.0301841144, 0.0159405787, -0.0206372384, -0.2171105742, 0.0204777103, -0.0057846322, 0.0467237346, -0.1957529932, 0.1156616956, -0.1975551397, -0.1187670082, 0.2374045849, -0.2850688398, 0.0058518546, 0.2242129743, 0.0324801020, -0.0377190448, 0.1406115890, 0.0244343802, 0.1137748137, -0.0085249115, 0.1321362108, -0.0597281754, 0.0116738938, 0.0604469739, -0.0100166220, -0.0243219119, 0.1809632182, 0.0427927412, -0.0580323525, -0.1202426627, 0.0560312010, -0.1521704346, -0.1727278233, -0.1280510426, -0.2117194533, -0.1401706338, -0.0638444647, -0.0912109241, -0.2076743841, -0.4649917185, 0.0797534809, 0.0356360339, 0.0524866916, 0.0221532173, 0.0430558249, 0.0298115537, -0.0781878158, 0.1096380651, -0.1053808630, -0.0732262060, -0.1059449241, -0.0568795875, 0.0754185319, -0.0327132978, 0.1141825542, 0.1790434718, 0.0403544232, 0.0094637349, -0.1772001237, -0.0509276614, 0.1201417223, -0.1080640554, -0.0229515489, -0.1871227324, -0.1250985861, -0.1598995477, -0.0105064223, 0.1350031197, -0.1865443885, 0.3559432924, 0.0168110579, -0.0813225433, 0.0690909922, 0.0286655389, 0.0886506513, 0.1157212406, 0.2008437216, -0.0871015340, 0.0859024897, 0.2182171941, 0.0753671676, -0.2010634094, -0.0777693689, -0.1040865257, 0.0178985782, -0.0015573917, -0.1158989146, -0.3386296928, -0.0211698432, -0.0322996080, 0.0460817218, 0.0114935115, -0.0127041535, -0.1076377481, -0.0679713562, 0.0777034536, -0.0351352692, -0.0322366729, -0.1973040402, -0.0872083679, 0.1027567759, -0.0342650488, -0.2178865224, -0.0375556014, -0.0187114030, 0.0692127347, -0.1661553085, 0.0267805345, -0.3137020767, -0.2101175934, 0.1033602729, -0.1973469108, 0.1883103400, 0.0913822353, 0.0184502378, -0.0096100233, 0.2020458877, -0.1096006185, 0.1437449604, -0.1325144321, -0.1503759772, -0.2046902478, 0.1029554158, -0.1771076173, -0.1178183183, -0.0329202972, 0.1600220948, 0.0556111075, 0.0250367131, 0.0081221685, 0.1956938803, -0.0642504990, -0.2486972511, -0.0269887280, -0.1654752195, 0.1161706299, 0.2306340188, -0.0331033804, -0.2544082701, -0.3239584565, -0.0306120552, 0.2602102458, 0.1411851943, 0.1310140789, -0.1635662019, -0.1671887189, -0.0201080181, 0.0432781056, -0.0377323776, -0.1486792713, 0.0803420097, -0.0836552456, -0.0690844730, -0.0047629601, -0.0164259225, -0.0160411559, -0.0186399650, -0.1556832194, 0.0492329597, 0.0496412143, 0.1250707209, 0.0147085944, -0.1836998314, -0.0837989971, 0.0145492405, -0.2806322873, -0.0240474064, 0.0120626288, -0.1980952322, 0.1968788058, 0.0957106277, -0.0949910730, -0.0326420739, -0.0450963750, 0.0780836269, 0.2148895711, 0.2179777026, 0.1513748020, -0.1311661601, 0.0537275486, 0.1341623664, -0.0918206573, -0.1561596394, -0.2440730333, -0.1428012401, 0.0220595859, -0.0070316466, -0.1276219785, -0.0251710378, -0.0098640108, -0.0085336249, 0.0065850602, -0.0442539826, -0.0380345397, 0.1753656268, -0.0865953714, 0.0583418906, -0.0775052905, -0.0592035428, -0.0157658253, 0.0629547462, -0.0648824647, 0.0698026791, 0.0082066851, 0.0286987163, 0.0303124916, -0.2207237929, 0.2543008626, -0.2139950246, -0.1871405989, -0.0624045730, -0.2355049253, 0.0593383908, 0.0174987242, 0.0740891695, -0.0151438136, 0.1904162616, -0.0027772777, 0.1090760678, -0.0266076885, -0.0634082928, -0.1098764017, 0.0276102610, -0.0028843849, -0.1600959301, 0.0169001576, 0.0927457362, -0.0231313985, 0.0889621377, -0.0050599794, 0.0840253383, -0.1631695181, -0.1544148624, -0.0043852301, -0.1158068180, -0.0900842696, 0.0550315343, -0.1957946271, -0.2147677392, -0.1335163862, -0.0115310280, 0.1600576788, 0.1194984466, 0.0007714315, -0.0257320013, -0.1017802507, -0.0023433368, -0.0712898746, -0.1291720569, -0.1362697035, 0.1223841608, 0.0374321677, -0.0684534833, 0.1114246249, 0.0317819342, -0.1629376411, 0.0275598671, 0.1410271227, 0.0530929044, 0.0580538325, 0.0910195112, -0.0567882285, -0.0014421300, -0.0045478456, -0.0678446665, -0.1665211916, -0.1016100273, 0.1512957364, -0.0893014148, 0.1796269864, 0.0269620996, -0.1311807483, -0.1149810627, -0.0452711061, 0.2304955125, 0.1668304652, 0.2206791043, -0.0942456275, -0.1189759523, 0.2039183080, 0.0093572037, -0.0091302777, -0.0117650945, -0.1491473615, -0.0799373761, 0.0279494822, -0.0688857287, -0.1096757799, -0.0694444031, -0.1705813557, -0.0066977283, -0.0013686398, -0.0131929535, 0.1581032276, 0.0907739103, 0.0374438539, 0.0630118847, -0.0714599565, -0.0736398175, -0.0061373822, 0.1942257136, 0.0897166952, -0.0761764050, 0.0426206701, 0.0582344159, 0.0723738819, -0.0080973050, 0.0830767453, -0.0079196207, -0.0267482661, -0.0362386890, -0.0321386084, 0.1575928628, 0.1890911758, 0.0433479026, -0.1479338408, 0.1885974705, 0.0577426180, 0.0678498447, -0.0323277488, -0.0274601243, -0.0196068399, -0.0016076132, -0.0314815976, -0.1423747838, -0.0570449531, 0.1133636087, -0.0601681694, -0.0073611047, -0.0055046524, 0.0073662037, -0.0925242603, 0.0719325542, 0.1186923087, 0.0436688587, 0.0210573003, 0.0228630565, 0.0662607551, -0.0823413432, 0.0835041329, 0.0631574094, -0.1648905575, 0.0356272198, 0.0283979457, 0.1676976085, 0.0047546914, 0.1655993909, -0.0263300501, -0.0727301612, -0.1341668069, 0.0102681797, 0.0281180125, -0.0390939973, 0.0913747996, 0.0414314903, -0.1336923540, -0.0136999711, 0.1617026180, 0.0266295448, 0.0577518269, -0.0004647713, 0.0728150681, -0.0763702691, 0.0016761019, 0.0052229292, -0.0482464321, 0.0659029484, -0.1155798882, -0.0833033398, 0.0659773499, 0.0841414928, 0.0762406960, -0.0295134168, 0.0655926466, 0.0576134846, -0.1034884825, 0.1028827429, 0.0323419422, -0.0287613124, 0.0566633753, -0.1190231740, -0.0015970467, 0.1867588609, -0.0381888933, -0.1481527835, 0.0479723215, -0.0735271573, -0.0173993334, -0.2172520906, -0.1503220499, 0.0614217743, 0.0939352065, 0.0785563514, 0.0301031712, 0.0314216651, 0.1744443029, 0.0789059773, 0.0145899951, 0.0145926476, 0.0619661584, 0.0941430256, 0.0747002065, 0.1286614835, -0.0061690020, 0.0755759999, 0.0763042122, 0.0037459226, -0.0790192038, -0.0215835050, 0.0236487854, 0.0800634623, 0.0908801705, -0.0235755034, 0.0376392566, 0.0916188061, -0.0622614138, 0.0718260482, -0.0193036515, -0.0012499074, 0.0093231052, 0.0286824312, -0.1622761637, 0.0255312230, 0.1596053988, 0.1171813011, -0.1808930784, 0.0455224030, -0.0579566397, -0.1061827093, 0.0406773761, -0.1905663013, -0.0767025575, -0.0333861038, 0.0295849051, 0.0820791572, -0.0005159229, -0.0332258604, -0.0235193651, -0.0525834449, -0.0359012298, 0.0421512760, 0.0709820911, -0.0044099521, -0.0687095001, 0.0395680740, 0.0308093540, 0.0072308183, -0.0636791885, 0.0206681099, -0.0426234379, 0.0498670079, 0.0476907939, -0.0265084840, 0.0247113928, 0.0310613513, 0.0291854851, -0.0429419391, -0.0510049984, -0.0614613406, 0.0040455014, 0.0654113740, 0.0501717329, -0.0023096567, 0.0352044255, 0.0762160122, 0.0517940670, -0.0222413652, -0.0625168234, 0.0403715670, 0.0446957015, 0.0450078882, -0.0772650689, 0.0036860746, -0.0566035882, -0.0086730933, 0.0654129758, 0.0757318959, 0.0480062217, 0.0465709381, 0.0726416782, 0.0578361750, 0.0057031871, -0.0003005067, -0.0495013744, -0.0406109057, 0.0275427699, 0.0191394463, -0.0111265499, -0.0425301716, 0.0205863193, 0.0504238605, -0.0121241957, -0.0524262860, 0.0499208011, -0.0572571121, -0.0177308191, 0.0808635801, -0.0334210843, 0.0351293236, -0.0277986471, -0.0497676209, -0.0711212158, 0.0738234967, -0.0110972906, -0.0118461549, -0.0775734931, -0.0583456904, -0.0632846504, -0.0515069813, 0.0770403296, -0.0299982429, 0.0044520544, -0.0206204765, -0.0312685259, 0.0467804670, 0.0225484427, 0.0634565800, -0.0515092686, -0.0418331586, 0.0430796146, -0.0519402549, -0.0471639670, -0.0706467032, -0.0514507964, 0.0103016347, 0.0287840087, -0.0607809275, -0.0105692884, -0.0048681530, -0.0663185641, -0.0685085505, -0.0210540742, 0.0357497223, -0.0585448295, 0.0255641546, 0.0323744603, 0.0746885985, -0.0413332470, -0.0627442747, -0.0731921718, -0.0038561947, -0.0583590642, 0.0233248472, -0.0698727816, -0.0716897547, -0.0090539660, -0.0437044092, -0.0198033154, 0.0832505524, 0.0921850204, 0.0614922494, 0.0552639514, 0.0008099040, 0.0684011057, 0.0651011020, 0.0217867270, -0.0631993562, -0.0119078439, 0.0249083582, 0.0474309474, 0.0804620683, 0.0223172903, -0.0013338260, 0.0181110073, -0.0104175648, 0.0498327129, 0.0599682368, -0.0863618702, -0.0638242960, 0.0498140007, -0.0445830636, 0.0154609736, -0.0302689560, 0.0364331678, -0.0712813586, -0.0091220215, -0.0505077317, 0.0572588779, -0.0751910880, -0.0801311135, 0.0439321175, -0.0492027849, -0.0534843840, 0.0377801098, -0.0628818497, -0.0212721825, -0.0895249769, -0.0267810039, 0.0160326064, 0.0532349311, -0.0357170850, -0.0498419441, 0.0919844955, -0.0732968226, -0.0754901841, 0.0667202994, 0.0419348255, -0.0378044806, 0.0531209446, -0.0091082752, -0.0370760560, -0.0705742016, -0.0534828156, 0.0184545089, 0.0233871453, -0.0670171976, 0.0558137819, 0.0148724094, 0.0161579177, 0.0065492541, -0.0847012699, 0.0104826270, -0.0313403234, 0.0313138403, -0.0677592605, 0.0284786820, -0.0284602847, -0.0515362546, -0.0018490953, 0.0155776963, -0.0577814095, -0.0222661570, -0.0776674524, -0.0557044074, 0.0332756601, 0.0230037645, 0.0447955169, 0.0435752124, -0.0465653688, -0.0358159542, 0.0642038062, -0.0485915206, 0.0409054309, -0.0755838007, -0.0667041689, 0.0493549444, 0.0053889612, 0.0573816188, -0.0186194163, 0.0820641518, -0.0291951001, 0.0098978076, -0.0542144515, 0.0073823184, -0.0477642305, -0.0499102920, 0.0015280120, 0.0819957703, -0.0226357263, -0.0701008886, 0.0534776002, 0.0110256895, 0.0050483332, -0.0626254752, -0.0322680436, -0.0572883375, -0.0140728522, 0.0354325809, -0.0800737515, -0.0718881860, 0.0128628165, -0.0209163651, 0.0154159805, 0.0166890975, 0.0928875655, -0.0796128660, 0.0748841092, 0.0568647385, -0.0119731575, 0.0389706977, 0.0537477173, 0.0300546102, 0.0414011404, 0.0227201674, -0.0406684913, -0.0646560863, -0.0289720297, -0.0552635081, -0.0890334621, -0.0661525056, -0.0279976092, -0.0206480958, 0.0555002652, 0.0503157601, 0.0263354592, 0.0409196839, 0.0647116378, 0.0395374112, 0.0653210729, 0.0005394557, 0.0192062240, -0.0744822621, -0.0618559569, 0.0474290997, -0.0762553737, 0.0754570290, 0.0985406041, 0.0018333632, -0.0354196765, -0.0549454764, -0.0235841554, 0.0009699960, -0.0162948556, 0.0298711024, 0.0152957151, 0.0103921033, 0.0049334248, 0.0618329011, -0.0311194863, 0.0363990366, -0.0092156921, -0.0494117439, -0.0618545413, 0.0679753199, -0.0778669640, 0.0598201193, 0.0499908514, -0.0315944441, -0.0623174645, -0.0617450252, 0.0113165779, -0.0145164523, -0.0650275648, 0.0366550684, -0.0922117531, -0.0603342690, 0.0403591730, 0.0317890421, 0.0324857384, 0.0087861819, -0.0750026107, -0.1147471592, 0.0287399609, -0.0183897056, 0.0391337201, -0.0680869967, -0.0822654590, -0.0327926017, 0.0346404761, -0.0080780201, 0.1503392011, 0.0801396370, -0.1212606132, -0.0273572393, 0.1814770699, 0.1588096768, -0.0420865193, -0.1163757294, -0.1990947574, 0.1166688055, -0.1650201976, -0.0522196516, 0.1473792642, 0.0422368310, 0.1094488204, -0.0532957986, 0.0681007728, 0.1071165502, -0.0890957341, -0.0241094101, -0.0580062121, -0.0443876721, -0.0644599572, 0.0239147991, -0.0566591397, -0.0171136763, -0.0321038067, -0.0786007643, -0.0384781659, 0.0045160907, 0.1081555411, 0.0278426744, 0.0021237209, 0.0379440673, 0.0272529460, 0.1003723145, 0.0086193355, -0.1066947505, -0.0487298220, 0.0872824639, -0.0048272619, 0.1141647249, 0.1816740036, -0.0202814452, 0.0097492421, -0.0010605231, 0.0644106343, -0.0913266987, -0.1787860394, -0.0577897727, 0.1398834586, -0.0555191934, 0.1359110773, 0.0286252946, 0.0580765083, 0.1349282116, 0.0775646046, 0.0585556366, -0.1441543102, -0.1345937550, 0.0064000115, 0.1419525892, -0.0488877185, -0.0249058884, -0.0035845554, -0.0497552194, 0.0077244663, 0.1112761870, 0.0164296553, -0.0105831819, 0.1073018387, 0.1259784102, 0.2912946641, -0.0290167332, -0.1447189748, -0.0551478826, 0.0817750543, 0.0210561529, 0.0689917430, 0.1007635072, 0.1473991275, 0.0237976611, -0.0826954916, -0.0286030527, -0.1031930968, 0.2193287462, 0.0953832492, 0.1568287611, 0.1718834639, -0.0420696102, 0.0476006977, -0.1077465713, 0.1040499508, -0.1422895193, -0.0009688936, -0.1090763584, -0.1830585301, 0.0825070068, -0.0416988246, -0.0768852755, 0.1385945231, 0.1490348428, 0.0179752298, 0.0049312641, 0.2690568864, 0.2260448784, 0.0581207573, -0.1700802892, -0.1461073011, -0.0966095477, 0.0190180466, 0.0229414608, 0.0481661558, 0.0755153969, 0.1452526450, 0.1407136619, -0.1431992054, 0.1958206743, -0.0009751195, 0.0381760560, -0.1397038251, -0.1572972536, 0.0704655871, 0.0022222255, 0.0011790418, 0.0417106226, -0.0932297483, -0.0067505818, 0.0036235643, 0.0365109891, 0.0639811158, 0.1119400337, -0.0487826392, 0.1412746757, 0.2390484363, -0.0051662046, 0.0675037801, -0.0944478065, 0.0732472613, 0.0720907897, -0.0776598901, 0.1124299690, 0.0633884817, -0.0853944868, -0.0564816147, -0.0680799410, -0.1833844781, -0.0590128414, -0.0472668447, -0.1306483001, -0.0309490152, -0.1455773264, 0.0151955448, 0.3049779236, -0.1473218799, 0.0635504723, 0.1859287173, 0.0330508836, 0.0045518992, -0.1417924464, 0.2110220641, 0.0853902325, -0.0208681840, -0.1710706353, -0.0692447945, 0.0243471656, -0.0409018174, -0.0458406582, -0.2470306307, -0.1827377379, 0.0173502024, 0.0034235467, 0.2297454476, -0.0073952093, -0.0861581191, 0.2015513331, -0.0380512178, -0.2303861082, 0.0431911163, -0.1667528749, 0.2060133815, 0.0882541984, -0.0304709543, 0.0467571281, 0.0214689653, 0.0293333549, 0.1057700738, 0.1564895660, 0.1008591279, -0.0851332992, 0.0030701470, -0.0787233263, -0.1503653675, -0.2569199502, 0.1845274270, 0.0712075084, -0.1443612278, 0.0063716420, -0.0371816717, 0.0218702052, 0.0518351495, 0.1728632152, 0.0343404338, -0.0013340606, 0.0287166163, 0.1546059847, -0.2133776546, 0.1415492743, -0.1716922671, -0.0260357112, 0.0029399027, 0.0327635817, 0.0285910219, 0.0684411824, 0.0140114976, -0.0183624625, -0.0509998649, 0.2420401871, 0.0631283671, -0.0384135321, -0.0919868201, 0.1418657452, 0.0766411498, -0.0502239838, -0.0095589673, -0.0468291305, -0.0708984509, -0.1788619906, 0.2100638002, 0.1852680445, 0.0635987520, -0.1636519432, -0.1034823507, 0.0777942464, 0.0663325712, -0.0781517103, 0.2055436373, -0.1359749138, 0.0109361205, -0.0482690670, 0.0079758465, -0.0677946359, 0.0489476435, 0.0408797860, 0.1210289970, 0.0448426493, -0.0475204699, -0.0273180157, 0.0643955171, -0.1029318050, -0.0247977693, -0.2677090764, -0.0684058070, 0.0440213680, -0.1031996161, -0.2000281066, -0.0849566758, 0.0696504116, -0.0543580428, 0.0141911609, -0.1409449875, -0.0272208452, -0.0504984409, -0.1879417300, -0.0062002409, -0.1001085043, 0.0489928089, -0.0355269685, -0.1765754074, -0.0179752801, -0.0867410824, -0.0609930642, 0.1545483768, 0.0262629110, -0.0134068523, 0.1271736026, 0.0370485187, -0.2032069564, -0.0022151854, -0.0034052702, 0.0512823872, 0.0041021253, 0.0357837565, -0.0231860708, 0.0849504843, -0.0111351777, -0.0079040471, 0.0783172250, 0.2388975918, -0.1158170477, 0.0471841395, -0.0203036852, -0.1225702018, -0.1642436385, 0.2261446267, -0.0666687116, -0.0057405820, -0.1696903855, -0.0902596191, -0.0997292772, -0.0440519266, 0.0621190220, -0.0379265994, -0.0956781805, -0.0227935500, 0.1823558956, -0.1880723536, 0.1000206769, -0.0319094881, 0.0424760692, -0.1611842662, -0.0520237349, -0.0532378741, -0.0352884419, 0.0809981674, -0.0383585431, 0.0008454888, 0.1360365748, 0.0484061018, -0.0829466283, -0.0714568868, 0.1928180754, 0.0028981634, -0.1000831053, 0.0742206797, 0.0007779442, 0.0019030372, -0.1442061514, 0.1328536272, 0.1710106134, -0.0941364467, -0.0822740272, -0.0509494990, 0.0698479861, 0.0333773978, -0.1201953888, 0.2473626137, -0.1057516560, -0.2051907033, -0.0779590160, 0.0302657858, 0.0235155076, -0.0231553204, 0.0215821117, 0.0787777826, -0.0798927248, -0.0493145846, 0.0019854188, -0.0738033578, -0.3047823608, -0.0597891510, -0.2114073932, 0.1053662598, 0.0297151245, -0.1137030274, -0.0945371911, -0.0388171971, -0.0669651330, -0.1039567068, 0.0761922076, -0.0061755320, -0.1369978786, 0.0064536282, -0.0285025463, -0.1026247665, 0.0713434145, -0.0389578789, -0.0724246204, -0.2040479928, -0.1169215962, 0.1894331723, -0.1234257668, 0.0159779154, 0.0718071312, 0.0054203006, 0.1501653790, -0.1656497419, -0.0831349492, 0.1574242115, 0.1935289502, 0.0964799896, 0.1424195170, -0.1052528620, -0.0631828979, -0.0251100883, -0.0557538942, 0.1435984671, 0.0907790288, 0.2572616339, -0.1124781147, -0.0399334282, -0.0235073306, -0.0261668526, -0.2606448233, 0.2272598892, -0.0968474746, -0.0950511619, -0.2352371365, -0.1914954185, -0.1297244877, 0.1302005798, 0.1242653877, -0.1855945140, -0.0374993309, -0.0306003485, 0.0173379332, -0.2170467228, 0.0364240967, -0.1892620027, 0.2226807028, -0.0700228363, -0.0305386782, 0.0659760982, -0.0684592873, -0.0443645716, -0.0013007589, -0.0616698712, -0.0838112384, -0.1377236098, -0.1158403754, -0.0877287686, 0.2495073378, -0.0206748899, -0.2237353623, -0.0178142972, -0.1995307505, -0.1371667832, -0.1114777997, 0.0775399134, -0.0688653514, -0.0054442920, 0.0473817214, 0.0177223347, 0.0767209604, -0.0257843323, 0.0356768779, 0.1408502907, -0.1557838172, -0.0306728985, -0.1251043081, -0.0438454077, 0.1003259048, 0.0209528338, -0.0706178099, 0.0959411711, 0.0409697182, -0.0729112923, -0.0051420755, 0.0062711434, -0.2699063420, 0.0027848445, -0.2566070855, -0.0049336981, 0.1617185473, -0.0512122251, 0.1043085605, -0.1144373715, -0.1986910552, -0.0773879215, 0.0612122342, -0.0391290113, -0.0058159903, -0.1400906295, 0.0222918261, -0.0479962043, -0.0746639743, -0.0727254003, 0.1410147995, -0.2509070039, -0.0914067030, 0.1101336703, 0.0122968545, 0.0999959782, -0.0213879645, 0.0578861050, 0.0356430188, -0.1031279117, -0.0225296915, 0.0310111046, 0.1984118670, -0.0203142613, 0.0501228981, -0.0656556115, 0.0036435586, -0.1266345233, 0.0546324328, 0.1480526477, 0.1709631234, 0.0908114091, -0.0592818446, -0.0061629144, 0.1497834921, 0.0674473047, -0.1008230597, 0.2064231038, -0.1557365060, 0.0510311052, -0.2282072604, -0.0567048937, 0.1477125585, 0.0085695554, 0.1604428291, -0.0085880579, -0.0707914233, 0.0824531317, 0.1073278487, -0.0333287232, 0.1264052838, -0.0992674455, 0.1092728525, -0.1313047558, -0.0976863578, 0.1826698631, 0.0082825143, -0.0145835113, 0.0715604350, -0.0340910926, 0.0083223488, -0.0484390594, -0.1735048741, -0.0578070730, 0.1624486744, 0.1107651591, -0.1576906890, 0.0696496442, -0.2486511767, -0.1036084667, -0.2168285996, 0.0852174014, 0.0274494961, 0.1155554429, 0.0722829327, 0.0226446688, -0.0519440211, -0.0436818004, 0.1424032301, -0.0815574154, -0.0920646787, -0.0886487886, 0.0614819638, 0.0742547959, 0.1304415911, 0.0571183935, 0.0246205050, 0.0548773967, -0.0474201404, 0.0379972346, -0.0553105399, -0.0109304758, -0.2234147042, 0.0289121661, -0.1578993946, -0.0175187290, 0.1942649335, -0.0672477335, -0.0030481135, -0.0733966231, -0.2314399034, 0.0046177898, 0.0299481135, 0.0496949218, -0.0233898740, -0.0599808134, 0.0917254463, -0.1349458098, -0.0330697037, -0.0834933370, -0.0172303300, -0.2689203024, 0.0812236741, 0.0531730801, -0.0205081627, 0.1141852140, 0.0248685256, 0.0002200287, -0.0890677199, -0.0521613061, -0.0789402500, 0.0100743361, 0.2279923707, 0.1185785607, -0.0735740587, -0.0872209668, 0.0832601488, -0.0850507692, 0.0255496539, 0.0482692309, 0.0783989727, 0.0101671480, -0.1555902660, -0.2271418720, 0.1346932203, 0.0934277624, -0.0628852397, 0.2022836357, -0.0564050525, -0.0121976919, -0.1487798095, -0.0393482596, -0.0024545381, 0.0813699812, 0.0605037659, -0.0041268487, -0.1158111617, -0.0139984069, -0.1014276668, -0.0236503650, 0.2039074451, -0.0464996658, 0.0614303686, -0.1482806653, -0.0122090625, 0.0902656838, -0.0288039800, 0.0536742434, 0.0608227998, -0.0266170986, 0.0190758891, 0.0433883443, -0.0594827272, -0.0360424519, 0.1043800563, 0.0021788937, -0.0200672969, 0.0120121241, -0.3353950381, -0.1225494444, -0.2735456228, 0.1103225872, 0.0394070819, 0.1645134389, 0.0529450178, 0.0095208241, -0.0046591111, 0.0740058720, 0.0445504859, -0.0359315053, -0.0125813065, -0.0256977901, -0.0849762186, 0.0169389714, 0.0578885265, 0.0756627768, -0.0724289641, -0.0367988348, -0.0754130930, 0.0824502259, -0.0612832867, -0.1443859339, -0.0122990832, -0.0750940666, 0.0077866279, 0.1181406900, 0.1601194292, -0.0471618772, 0.1190601513, 0.0484214425, -0.2891067266, -0.0395866744, 0.1117394492, 0.0666292086, -0.0347069651, 0.0519478209, 0.0154019305, 0.0216112137, -0.0007607457, -0.0232390575, -0.0322398581, -0.0932856575, -0.0515352599, -0.0459946841, 0.1345031112, 0.1701513678, -0.0479373336, 0.0026531555, -0.0254475493, -0.0227368325, -0.1898695529, 0.0800537243, 0.1692668349, -0.0040185917, -0.0013917760, 0.0489094853, 0.0922652483, -0.1886685491, -0.0288155135, 0.0866805390, 0.0177614652, 0.0641853213, -0.0093201371, -0.2171414644, 0.0913592875, -0.0245550871, 0.0754417181, 0.0010362644, -0.0967710242, -0.0147790760, -0.0763216242, -0.1815146208, -0.0840568095, 0.0431479812, 0.1363624781, 0.0236618854, -0.1800806969, 0.1943325698, 0.0964415073, 0.1746767461, -0.0199204199, -0.0461124592, -0.0214630552, -0.1517513394, -0.0265528150, 0.1196794659, 0.0321301073, -0.0071119638, -0.0153985601, -0.0522157289, 0.1125757694, 0.0164860878, 0.0210854802, -0.1306453347, 0.1197185516, -0.0057900567, 0.0016950351, 0.0935942903, -0.2142805159, -0.1116896495, -0.1525843292, -0.0125333201, 0.1079965830, 0.0677693114, 0.1018218324, 0.1394379735, 0.0531908199, -0.0015019414, 0.0134372264, 0.0382836312, -0.0444414988, -0.0153827518, -0.0243757945, 0.0408009253, 0.0327717066, 0.0507748872, -0.1598270833, -0.1232917085, -0.0121353883, 0.0315010138, -0.0182101261, -0.1016685218, 0.0368874669, -0.1362738460, 0.0774963796, 0.0365088284, 0.1401397586, -0.0422904156, 0.1320301443, 0.1127886698, -0.3425548375, 0.0113481991, 0.0353028663, 0.0481857359, -0.0165766757, 0.0500670597, 0.1568206847, 0.1252219975, 0.0406960025, 0.1396996826, -0.0671065450, -0.1017704532, -0.1110333279, 0.0238011573, 0.1793575734, 0.1489086151, -0.0335949585, 0.1038530618, -0.0635735765, -0.0241248608, -0.1724054217, -0.0638436601, 0.0743646026, 0.0500079840, -0.0204389356, -0.0094736246, 0.0502946600, -0.0651527494, -0.0519223101, 0.0865013674, -0.0217277166, 0.1024396271, 0.1050144732, -0.1369373798, 0.0572138764, 0.0228488650, 0.1340164542, -0.0014023382, -0.2002647668, -0.1128031239, 0.0368343294, -0.0126193017, 0.0082871653, 0.0727737695, 0.1187009364, -0.0271761268, -0.1133357286, 0.1789681762, 0.0526730157, 0.0930137336, -0.0213868171, 0.0278116725, 0.0157665461, -0.1508853436, 0.0491889045, 0.0443553925, 0.0307753570, -0.1114847437, 0.1069536880, -0.0353628583, 0.0450931378, 0.0817341954, 0.0923205242, -0.0493266433, 0.0258133896, 0.0820845217, -0.0246219300, -0.0334018394, -0.0627148971, -0.1072296053, -0.2249830663, 0.0360734463, 0.1128331497, 0.1214191839, 0.0499600656, 0.1573178023, -0.0169073977, 0.0351547264, 0.1191559061, 0.0392367989, 0.0028879927, 0.0339025185, -0.0196793992, -0.0758002996, 0.0607147440, 0.1047289595, 0.0508278534, 0.0592854246, -0.0245170370, 0.0071932697, -0.0631165504, 0.0318462960, 0.1276693046, -0.0670603737, -0.0108794579, -0.1068727151, 0.0724701285, -0.0872273892, -0.0362840779, 0.1083027348, -0.2237839848, -0.0119314194, 0.1418004930, 0.1167857051, -0.0194349792, 0.0749092922, 0.0589310601, -0.0945895836, -0.0133360624, 0.0480147190, -0.1010817736, -0.0689900890, -0.0534064732, 0.0904472619, 0.1257727444, 0.1290547848, -0.0044064368, 0.0431683362, 0.1039307192, 0.0243196413, -0.1456645876, -0.0701976866, 0.0986719429, 0.1144230440, -0.1442289054, 0.0768776387, 0.0407412127, -0.1671253294, -0.0019472282, 0.0957671851, 0.0252647661, 0.1149735898, -0.0784365609, -0.0537296608, 0.0116605703, 0.0789840668, 0.0282788798, 0.1072234511, -0.1252946109, 0.0712184757, 0.0212034956, 0.0018929186, -0.1033593193, 0.1957650483, -0.0607443228, -0.0220680609, 0.0281817894, 0.0474969484, 0.2197918147, 0.1360108554, 0.1182122901, 0.1248228997, 0.1284001172, -0.2213914394, -0.0618443675, 0.0382275358, 0.0289343819, 0.0157570876, 0.0404612496, -0.0137998676, -0.0201618541, -0.0393796414, 0.0635505915, 0.0632944256, 0.0594528690, 0.0828664154, 0.0444013365, -0.0803278461, -0.0792475417, -0.1711690575, -0.3397651017, -0.0912520289, -0.0427390262, 0.0643433407, 0.0822590962, 0.1486628652, 0.0973802730, 0.0124634961, -0.0187936258, 0.1087193713, -0.0384426564, 0.0220463071, 0.2004204094, -0.0155064249, -0.0352553502, 0.0424020402, 0.0013004731, -0.0459460206, 0.0484734736, -0.0013370415, -0.0495510176, -0.0870824903, 0.1063805670, -0.0485047139, -0.0000697737, -0.1291923970, 0.0293405168, -0.0360289365, -0.0832167268, 0.0703716874, -0.1513954401, 0.1946188956, -0.0440987647, 0.1870899498, -0.0188100301, -0.0788995251, 0.0769979432, -0.1213147566, 0.0882838070, 0.0277358145, -0.0877285972, 0.0758090839, -0.0096710175, 0.1968290508, 0.1182079539, -0.0350589789, -0.0317490213, 0.0139731057, 0.0514217392, -0.1039470434, -0.1128896773, -0.0233444404, 0.0356582068, -0.0155112138, -0.1194201112, 0.0896034762, 0.0736607984, -0.2308603078, -0.0258159731, -0.0084946128, 0.0777045190, 0.0949746966, -0.0855891854, 0.0274282582, -0.0022879825, 0.0684973300, 0.0412595719, 0.0070207301, -0.1741026193, 0.0440475792, 0.1270366013, -0.0134213213, 0.0287162084, 0.1574104577, -0.0833824277, 0.1612330973, -0.0559692793, 0.0822502524, 0.1659002155, -0.0266115032, 0.0534165204, -0.0411574952, 0.0502758659, -0.0029106163, -0.1064954549, 0.0271535516, 0.0733964890, -0.1301672459, -0.0778696612, 0.0670011342, -0.1396145225, 0.0604435131, 0.0761450604, -0.1428201348, -0.0539522916, 0.1111347675, 0.0703968704, -0.0771933943, 0.0180560891, -0.1623243541, -0.1577855200, -0.0217247829, 0.0445367433, 0.0239524040, 0.1487452537, 0.0774650723, -0.0324845836, 0.0344263278, 0.0200840570, -0.0373860784, -0.0479320623, 0.1014094800, 0.0184581634, -0.0491741598, -0.0032887168, 0.0393051356, 0.0547042862, -0.0140694054, -0.0861496404, -0.0071170093, 0.0474243313, 0.0397225469, 0.1022518575, 0.0759663507, -0.0699944720, -0.1041436866, 0.0459062569, 0.1395107061, -0.0748238415, 0.0048233806, 0.0263162982, 0.0997876599, 0.0826643854, 0.1318698227, 0.0782727748, -0.0234961193, -0.0033361472, -0.0752983168, 0.0235474836, 0.1489993185, 0.1119561568, 0.0012208541, 0.1347989589, 0.1290933192, 0.0853210166, 0.0274792966, 0.0517211668, 0.0563755222, 0.1144754514, 0.0041273385, -0.0530917868, -0.0478960834, -0.0948777720, -0.1122510731, -0.0572490990, -0.0277446918, 0.0239335559, -0.2717839181, -0.0363223366, -0.0383951515, 0.0968707204, -0.0908843353, 0.0048000515, -0.0399065539, -0.0966335088, -0.0127804885, 0.0939686373, 0.0791677609, -0.1395374537, 0.0441107899, 0.1318788975, -0.0600455962, -0.1194156855, -0.0266907793, -0.0800224319, 0.0364528596, -0.0566082224, 0.1583868265, 0.1807605475, 0.0868919268, 0.1122017652, 0.0150195258, -0.0074170772, 0.0115503687, -0.0048479857, 0.0376913548, 0.1303506345, -0.0292669013, -0.0609515123, 0.0241154190, -0.0749115422, 0.0201673340, 0.1310326904, -0.0320469141, 0.0406743735, -0.0294478387, 0.0389357395, -0.1039152220, 0.0364304520, -0.2417749763, -0.0423379838, 0.0620484501, 0.0211247746, 0.0912339538, -0.0161189735, 0.0938611329, -0.0749627426, 0.0025894223, -0.0211755410, 0.0222335570, 0.0520583428, 0.0448913276, 0.0482133701, -0.0275899302, 0.0857789293, -0.0023718039, 0.0404162481, -0.1170792654, -0.0247307159, 0.0867606327, -0.0728560910, -0.0583488718, -0.0555038340, -0.0387403406, 0.0291227680, -0.0463852249, 0.0233099870, -0.0593664907, -0.0085275508, -0.0490487665, 0.0355452895, 0.0511104912, -0.0739501938, 0.2029750198, 0.0315879956, 0.0219017994, 0.0062870677, 0.0800728798, 0.0651757196, -0.0281387642, 0.0039519169, 0.0063487417, -0.0153765446, 0.1616593003, 0.1188423485, -0.0051315269, -0.0876642093, 0.0243871585, 0.0791957527, 0.1015690044, -0.1299436837, -0.1121785641, -0.1738208681, 0.0376944356, -0.1311244518, 0.0572898835, 0.0830535889, -0.2264437824, -0.0542062223, -0.0443347096, -0.1070634648, -0.0410338975, -0.0518253259, 0.0048797163, -0.1001598388, -0.0916773453, -0.0580431633, 0.0646474734, -0.0439343117, 0.0763421953, 0.0598775335, -0.0298467111, -0.0520167761, 0.1122657433, -0.0863153487, 0.1921559423, 0.0415999554, 0.0068622683, 0.0718815401, -0.0187522322, 0.0469925590, 0.0200472195, 0.0093504544, 0.2212179303, 0.0968629569, 0.0874255076, 0.0019420009, 0.0366166793, -0.1547556818, -0.0896547809, -0.2505244613, 0.0251215268, -0.0260236245, 0.0172237698, 0.1515893340, 0.0768952444, -0.0270626377, -0.0019506552, -0.0141839478, -0.2843892872, -0.0191694628, 0.0296800900, -0.0114220316, 0.0008725428, 0.0465198420, -0.0353474729, -0.0034349037, 0.0127634825, -0.1287076175, 0.0560597554, 0.0067702704, 0.0240254477, -0.0865092874, -0.0613532029, 0.0565513223, -0.0410762019, 0.0403688736, -0.1782526225, -0.0905977264, 0.0806860104, 0.0584891811, 0.0914523602, -0.0113420244, 0.0699612498, 0.1282873154, -0.0104314387, -0.0313227437, -0.0302917361, 0.1235944852, -0.1426369101, 0.0934113264, 0.0941935927, -0.1167554408, 0.1463712156, 0.0909019932, 0.0234678965, -0.1692789942, 0.0329048932, -0.0312522128, 0.0148046073, 0.0565663427, 0.0894208252, -0.0492222905, 0.0875924379, 0.0452231057, 0.0373175070, -0.0216316227, 0.0197649077, 0.1136684641, 0.0398537032, 0.0156802777, -0.0036651473, -0.0311137885, -0.0232895315, -0.1957724988, -0.0187103730, 0.0124526238, -0.2120042443, -0.0996886492, -0.1362116039, -0.0014233941, -0.0868103281, 0.0036484904, 0.0549492575, -0.1316809207, -0.1031516939, -0.0618337728, -0.0744092017, -0.0802899525, 0.1045899913, 0.0111835497, 0.0133532695, 0.0034084991, 0.1501691043, 0.0067526461, 0.2368564159, 0.0413803793, 0.0535858162, 0.2268180251, -0.0320343822, -0.0279746782, 0.0230963435, -0.0114238597, 0.1131038666, 0.0732701719, -0.0445354730, 0.0502088256, 0.0622884780, -0.1844229996, -0.0954180062, -0.2524650693, 0.0792001039, 0.0604951903, 0.0033811515, 0.0216431394, 0.0398264900, 0.0044706850, -0.0081680808, -0.0239830855, -0.0742395297, -0.1349744946, 0.0265122037, -0.1392083913, -0.0102921873, -0.0819925144, -0.0625076815, 0.0653673261, 0.1402902454, -0.0245705266, -0.0039773905, 0.0356662273, -0.0295197200, -0.1504763961, -0.1392926276, 0.0868188441, 0.0819578022, 0.0406966060, -0.1479540467, -0.0535885915, -0.0192878749, 0.0205010977, 0.0405128896, -0.0407018252, 0.0305419546, 0.0902233422, -0.0096661309, 0.0177463554, 0.0301058143, 0.0682299733, -0.1025409028, 0.0454841331, 0.0577986799, -0.1256437451, 0.1227738112, 0.0842611045, 0.0421717837, 0.0209156945, -0.0426827185, 0.0955713093, -0.0966247469, 0.0093877288, -0.0283164717, -0.1087659821, 0.1086436510, 0.0085487431, 0.0613887087, -0.0233098846, -0.0419353582, 0.1947915852, -0.0182212200, 0.1047186106, -0.0040452695, -0.0675135553, 0.0036916884, -0.0617319457, -0.1765822470, 0.0756971613, -0.1192024425, -0.0317810625, -0.1004002988, -0.0309368521, -0.0703154430, 0.0085551329, 0.0151030971, -0.1701461524, 0.0662773103, -0.0647103339, -0.1470780075, -0.0324852616, -0.0317647010, -0.0545209907, -0.0243243296, 0.0379195809, 0.0267344899, 0.0341746509, 0.0790053084, 0.0858942792, 0.0652459934, 0.0022892354, 0.0421953276, 0.0977576748, 0.0984890088, -0.0577979982, -0.0217093993, -0.0800405145, 0.0040846025, 0.0115100695, -0.0522952974, 0.0131510152, 0.0136206476, -0.2963242233, 0.1442642957, 0.0352864601, -0.0308673214, -0.0674125329, -0.0665705502, -0.0250252634, -0.1300580800, 0.0687946156, -0.0306287687, 0.0366838463, 0.0361528732, -0.1582213640, 0.0224816315, -0.1547939926, 0.0843658671, 0.0475502387, 0.0554207452, -0.0593596548, 0.0651295409, -0.0493767187, -0.0092315888, -0.0120828636, -0.0113284914, -0.0667581186, 0.1289829016, 0.0913499743, -0.1139366031, -0.0384625085, -0.0696193427, 0.0103232805, 0.0614973158, -0.1360712796, -0.0324358344, -0.0661895275, -0.0117470054, -0.0969813392, 0.0098117711, 0.1173269674, -0.0093056792, 0.1088105664, -0.0000180698, 0.0011339260, 0.2298014611, 0.0114380950, 0.0969536155, 0.0392935388, 0.1029714048, 0.0492920391, 0.0298396125, 0.0870441571, 0.0996686891, -0.0079926187, 0.1068974212, -0.1951769441, 0.1246629804, -0.0761571303, 0.0085455030, 0.0626639798, 0.1242058277, 0.0479466096, 0.0852470100, -0.0686237440, -0.0176186003, 0.0876085311, -0.0899434313, 0.0650314093, -0.2643390298, 0.0612510294, -0.1510539651, 0.0188406520, -0.0270901080, -0.0377994739, 0.0633482113, -0.0882891044, 0.0280679930, -0.1051995456, -0.0118320500, -0.0516802706, 0.0517207086, -0.0829552785, 0.0118713165, -0.1659880280, -0.0143444743, 0.0183719676, 0.0928255618, 0.0455586538, -0.0610677712, 0.1776817441, 0.0522714816, 0.0629615635, 0.0655752942, -0.0497276820, 0.0355667099, 0.1120508537, -0.0200954508, -0.0392378420, 0.1167569607, -0.0849444270, -0.0941188633, -0.1582656950, 0.0938131437, -0.1467270553, -0.0800081491, -0.0811075866, -0.0010334150, -0.0384030007, 0.0468496792, 0.0877034143, -0.0635941774, 0.0009472044, -0.0323624089, 0.0209684838, -0.0601601414, -0.0169185512, -0.0009524698, -0.0798293203, 0.1345423013, -0.0615772195, 0.1006183997, -0.0531257614, 0.0067566722, -0.0564867668, -0.0654057562, 0.0217157714, 0.0568393283, -0.0208230261, -0.1885721385, -0.0235947594, -0.1074930131, 0.1283075064, -0.0912977383, -0.1024798527, 0.0443505123, -0.0315199904, -0.0161089506, -0.1313462853, 0.0234189015, 0.0800521299, -0.0735119432, 0.0540297963, -0.0607937351, -0.1055787578, 0.2514501214, 0.0067151864, 0.0332254432, -0.0100722071, 0.0443868972, 0.0066818981, 0.0161270779, 0.0586886890, 0.0638832003, -0.2064289302, 0.2380299121, -0.0609993115, 0.1304138750, -0.0598945916, -0.0706370622, 0.0632228181, 0.0256971177, 0.0287589617, 0.1771745384, -0.0923487321, -0.0512593426, 0.0465027466, -0.2088771313, 0.0438028090, -0.1893350631, -0.0175727382, -0.0881090313, -0.1386998445, -0.1477311552, 0.0355738215, -0.0002948191, 0.0823964551, -0.0208399035, -0.2294077128, -0.0957966745, -0.2631548643, 0.1810675710, -0.0781560242, -0.0070819072, -0.0299045481, -0.0329457521, 0.0414564386, -0.0043328255, 0.0582428724, -0.0199885722, 0.0691093057, 0.0622683764, 0.2146053165, 0.0246402398, -0.0474841632, -0.0762638673, 0.0781996995, 0.0093067549, -0.0712328404, 0.0199957229, -0.0544904172, -0.0463510938, -0.0190318692, 0.0774471760, -0.1835246384, -0.0679222420, -0.1802635193, 0.0403910801, -0.0435877927, -0.1001932770, -0.0932252035, -0.0291720964, 0.1214656308, -0.0614669286, 0.0424655452, -0.0871560350, -0.0718718544, 0.0619829036, 0.0407569110, -0.0515145175, -0.1358078718, 0.0459701046, -0.1254156828, -0.0273025054, -0.0642120838, 0.0357153639, -0.0601830855, -0.0285234023, -0.0133854821, -0.1111634299, 0.0019236387, -0.0514867157, -0.1233485565, -0.0179135874, -0.1278392375, -0.0189293921, 0.0355155952, -0.1399049014, -0.0135258380, -0.0172389951, -0.0311839506, -0.0616877154, -0.0410841890, -0.2691900432, -0.1373423934, 0.3073314428, 0.1074457392, -0.0430603139, 0.1096825749, 0.1905597299, 0.0745517910, -0.0931378379, 0.0666164458, -0.1547740251, -0.1867027432, 0.1783620715, -0.1442705542, 0.0828865319, 0.0004740289, -0.0078981547, -0.0094778193, 0.0537163317, 0.1181258038, 0.1651861221, 0.0307998341, 0.0361779481, 0.1428804547, -0.1838973165, 0.0061755409, -0.0802512839, -0.0914673358, -0.0329258740, -0.0146099525, 0.0549579337, 0.0327331573, 0.0007486037, 0.0344608203, -0.0053392067, -0.2400377691, -0.1170946658, -0.1523989588, 0.0992749184, 0.0375495851, 0.0875299051, 0.0808642283, 0.0034892978, -0.1500502825, -0.0099904286, -0.0367042050, -0.0300830621, 0.0740397349, -0.0300961919, 0.0673437119, 0.1479990631, -0.0027798237, -0.0123548759, 0.0523636788, -0.0611859262, 0.0375187024, 0.0967091620, 0.0551983193, -0.0772982985, 0.0328566246, -0.0502105355, -0.1466091424, -0.1370659173, -0.2493036538, 0.0487600155, -0.1792183071, -0.1657581627, -0.1352447271, 0.0558480956, -0.1827567965, -0.0753251463, 0.0018702167, -0.0864412114, -0.0422951244, 0.0825846419, 0.0857310370, 0.0749262944, 0.0636057109, -0.0387263745, -0.0682420731, -0.0169147067, -0.0953466594, 0.0595849343, 0.1063532606, 0.0746945962, -0.0932345018, -0.1212373227, 0.0281541944, -0.1857017875, -0.2036547661, -0.0253101978, -0.1633711010, 0.0058708852, -0.0092504369, -0.0487181135, -0.0230471622, -0.1559442133, -0.0249906499, 0.0398135372, -0.0545862615, -0.3043799698, -0.0092788311, 0.1486329287, 0.1244853139, -0.1937488616, -0.0540452227, -0.0647875369, 0.0558245890, -0.0077548702, 0.0135941189, -0.1308358610, -0.1462481767, 0.1709832847, -0.2772958875, 0.0660085902, 0.0719475076, 0.0539657846, -0.0665548295, 0.0740366057, 0.0640027449, 0.1580510288, -0.0916635171, 0.0570105128, 0.1753842086, -0.1667932719, 0.0161982030, 0.0906005874, -0.0284467619, 0.0642225370, -0.0505879670, -0.0513011850, -0.0513571538, -0.0531125925, 0.1123705804, -0.1203563139, -0.1709715873, -0.0621444359, -0.1021246314, 0.0854754895, 0.0871571228, -0.0070305029, -0.1601369679, 0.0463193879, -0.1713925004, 0.0293537527, -0.0189001001, -0.1704886109, -0.0628359765, -0.2205960751, 0.1339228302, 0.1583952159, 0.0169215538, -0.0266170111, 0.1047721356, -0.0056884638, 0.0511164293, 0.1832669377, 0.0165730827, -0.1051772684, -0.1471433938, -0.0834007859, -0.1911488324, -0.0876635835, -0.2036215216, 0.1387686133, -0.3178879619, -0.0425123423, -0.2417449355, -0.0301262252, -0.1393639743, 0.0286938902, 0.1482842118, 0.0318128653, -0.2900724113, 0.1649012864, -0.0173300747, -0.0477864519, -0.0056627593, 0.1099466830, -0.1504027545, -0.0396225676, 0.0344350487, 0.0412274189, -0.0011093785, 0.0611718558, -0.0769802108, 0.0106417974, -0.0377785675, -0.2829495668, -0.1197140217, -0.0637263879, -0.0101577137, -0.0536893718, -0.1137249619, -0.0458386876, -0.1016501859, -0.1240364313, -0.1044737473, 0.0860828087, 0.1680477858, -0.4026589692, -0.0209415685, 0.1911788583, 0.0773701072, -0.1415944397, 0.0548960790, -0.1436464936, 0.0708003864, -0.0045729224, 0.0309465807, -0.2025732994, -0.1276428401, 0.0772088394, -0.3737833202, 0.0128331743, 0.2080223560, 0.0197289493, 0.0618464835, 0.0264987368, 0.1213162392, 0.0672059357, -0.1369308829, 0.1433676183, 0.2037416995, -0.1866966039, 0.0526514091, -0.0270919204, -0.0121109178, 0.0167964175, -0.0167365801, 0.0502024591, 0.0089026056, 0.0335326940, 0.0491525307, -0.1288503855, -0.0477740467, -0.1124714240, 0.0340500996, 0.0705962330, 0.0525443889, 0.0446344502, -0.2614363432, -0.0380385704, -0.1238740087, -0.1159522235, -0.0053807357, -0.1487615556, 0.0275432393, -0.1312397122, 0.1381633133, 0.0536742955, -0.0623631440, -0.1116384268, -0.0589812882, 0.1433525234, 0.1055624187, 0.2736947238, 0.2165762335, 0.0326025337, -0.2033861279, -0.0503128469, -0.1091930866, 0.0339669213, -0.1758798361, 0.0095480811, -0.1428520977, -0.0401611663, -0.2433501631, 0.0723288804, -0.0448454879, -0.0190154053, 0.1836247295, 0.0819272920, -0.1792907417, -0.0108960615, 0.1425971985, -0.2132087052, -0.0257314201, -0.0790801719, -0.1491306126, -0.0411839746, 0.0218307041, -0.0047203591, -0.0531984083, 0.0863958299, 0.0098751672, -0.0720398277, 0.0612141192, -0.1981367469, -0.2239891142, -0.0898688436, -0.1191367805, -0.1833564043, -0.0759354681, -0.0328319371, -0.0391306467, -0.1733537018, 0.0004488221, 0.1569909900, 0.0745062530, -0.1784843504, 0.0577195995, 0.1131286994, -0.0339014791, -0.2511532307, -0.0905403867, -0.0530641153, 0.0373103842, -0.0925159082, 0.0110140769, -0.2209492326, -0.1506831646, 0.0043699038, -0.3130787313, -0.0387108289, 0.1478294879, -0.0314460807, -0.1491201073, 0.0195578579, 0.0667232871, 0.1584094018, -0.0529835224, 0.1475272030, 0.0674401969, -0.1056894138, 0.1273706555, -0.0007021122, 0.1791636348, -0.0566704087, -0.0517228916, 0.0043232730, -0.1312231421, 0.1977051198, -0.0658487156, -0.1024711728, 0.0137808006, -0.0667092204, -0.0812650472, -0.0340956002, 0.0460308976, -0.1360514462, -0.3484876752, 0.0530073941, 0.0579827353, -0.0752425417, 0.1107887775, -0.1260678917, 0.0783702582, -0.0578590110, 0.0243465435, 0.0238191765, -0.0050410200, -0.0539962612, -0.1101254448, 0.0589528829, -0.0168441720, 0.1876692623, 0.1593225896, 0.1033807918, -0.2140403986, -0.0610575303, -0.0513176061, -0.0101744635, -0.2426486313, -0.0433483422, -0.0548869632, -0.1631449312, -0.1065469906, -0.0110117812, 0.1232632473, -0.1091078818, 0.1109083220, 0.1029840559, -0.0362638272, 0.0623490773, 0.2072285861, -0.1828447282, 0.0789783895, -0.0127654448, -0.0709654242, 0.0059123831, 0.1850102693, -0.0413120054, -0.2521640658, -0.0663849637, -0.0840676501, 0.0616274662, 0.0645857677, -0.2518553138, -0.2696121037, 0.0874376744, -0.1559629887, -0.0805898681, -0.0964762345, -0.0983216539, 0.1223266795, -0.0997774154, 0.1300832331, -0.0262619797, 0.1436252445, -0.0822006017, 0.0115767596, 0.2017821223, -0.0509121232, -0.2507068515, 0.0598882176, -0.0876935348, 0.0827146620, -0.0838715285, 0.0702850893, -0.2211086899, -0.2864192128, 0.1374038309, -0.1808512658, 0.0437492914, 0.1741407216, -0.0396212153, -0.0796462148, 0.0811072066, 0.0528352782, 0.1185771376, 0.0016468045, 0.0374015346, 0.0704771057, 0.0770483688, -0.0271657743, -0.1265293509, 0.0417965129, 0.0024991084, -0.0028946116, 0.0530224107, -0.0620140061, 0.0930375010, -0.0562227257, -0.0084248045, -0.1107645109, -0.2180500776, -0.1705382764, 0.1063091680, 0.0476871207, -0.0628475100, -0.4113289714, -0.0406964011, 0.1588345617, 0.1506815106, 0.0625917912, -0.0611493811, 0.1540807933, 0.0029143449, -0.0140806139, -0.2224334478, -0.0609499440, 0.0012525041, -0.0434645154, 0.0442896858, -0.0023968858, 0.0154592842, 0.0676850602, -0.0460194536, -0.1991883665, 0.0934153125, -0.0943605900, 0.0709752142, -0.1303023100, -0.1427898407, -0.1280692965, -0.1258407831, -0.1970544904, -0.0646654740, 0.1430841982, -0.2087054551, 0.1813713163, -0.0271598715, -0.0466163419, -0.0081114620, 0.0761496350, 0.0031549800, 0.1194716692, 0.1982721239, 0.0792759359, 0.0088616759, 0.0241002887, 0.0384198502, -0.0814490765, -0.0480403714, -0.1345723718, -0.0851574540, -0.0255294964, -0.0716016963, -0.2444304675, 0.0735463798, -0.2291248590, -0.0233964417, -0.0684455708, -0.1602052003, -0.0323810987, 0.0976875871, 0.0807479247, -0.2056843191, 0.0568977147, -0.1981193870, -0.1430029571, 0.1772767156, -0.1197575554, 0.0148316380, -0.0456270985, -0.2004661411, 0.1385683566, -0.1805312335, 0.0821367428, -0.2321147472, -0.2987903953, 0.0288691130, -0.0373266153, 0.0945461914, 0.0186253134, 0.0093528582, 0.0725807622, 0.0755305141, 0.0313829407, 0.1038244516, -0.1009972468, -0.1087726653, -0.2022277564, 0.1499532014, -0.0672268271, -0.2126643211, -0.0578281805, 0.0243274290, -0.0606060550, 0.1102028266, -0.0144732362, 0.2922480702, 0.0031703038, -0.1323828399, -0.1070327535, -0.1044443622, -0.1344292909, 0.0684003755, -0.0067722159, -0.2378033400, -0.2271693796, -0.0441180654, 0.2573117018, 0.1035855040, 0.0506962463, -0.1726099104, -0.1786653697, -0.1094537526, -0.0984486118, -0.2125844955, -0.0986217856, 0.2282985002, -0.0321637653, -0.1256090701, -0.1172954664, -0.0885407627, -0.0084140142, -0.0866903737, -0.1842931956, -0.0283134431, -0.1602500081, 0.2090897560, 0.0521358997, -0.2119078487, -0.1177633554, -0.1370957941, -0.2650213242, 0.1011958644, 0.2060432285, -0.1529296786, 0.1683209389, -0.0946730822, 0.0378394723, -0.0122999800, -0.0993359685, 0.0332717225, 0.0261396784, 0.1161367372, 0.0909822211, -0.1268331409, -0.0178183224, 0.0183876399, -0.1942076236, 0.0086806417, -0.1181758493, -0.0405259319, 0.0174217746, -0.0843444467, -0.1230603084, 0.0156649444, -0.0315921195, 0.0390188433, -0.2048400640, -0.1515801698, 0.0082978467, 0.0958200246, 0.0117476210, -0.0854665339, 0.1583386809, -0.1450379491, -0.0824953392, 0.0816372856, 0.0084215663, -0.0047322963, -0.0664953440, -0.1175321639, -0.0395679735, -0.0572124235, 0.2516400814, -0.1266256273, -0.1318204850, -0.0931037068, -0.1547221541, 0.0667483285, -0.0713126957, 0.0160638131, -0.0151976272, 0.0417939238, -0.0302355364, 0.1112895384, -0.1844391376, -0.0667141974, -0.0694607794, 0.1760993302, -0.0606313273, -0.2468449324, -0.0561816432, -0.0191910602, 0.0893977359, 0.1021823362, 0.0073028947, 0.2639603913, 0.0205777641, -0.1657372713, 0.0691251457, -0.0508534834, -0.0797508284, 0.0634279326, 0.0037896878, -0.1562056988, -0.1868091375, -0.0124901980, 0.1452201754, 0.0759355351, 0.0887512788, -0.0503396168, -0.1725508571, -0.0424479805, -0.0488346964, -0.0450361110, -0.1581961364, 0.1933872551, 0.0802053064, -0.1764909476, 0.0770940110, 0.0559716374, -0.1849652380, -0.0639018193, -0.0253451318, -0.0435049869, -0.1399470270, 0.0439261161, 0.0515096709, 0.0073607969, 0.0011966464, -0.1092884690, -0.1362554431, 0.0931083485, 0.1029289737, 0.0009865526, 0.0241535064, -0.0646780133, 0.0461805016, 0.0036683362, -0.1634571850, 0.1691985428, 0.0668961853, 0.0572802238, -0.0802024007, -0.2184941769, 0.0261324160, -0.0174276903, -0.0368005075, 0.1880764812, -0.0182065964, -0.0066692964, 0.0818088204, -0.1074757800, -0.0231883284, -0.0204093214, 0.0886319578, -0.0079227695, -0.0401004888, -0.0418997742, 0.0544431992, 0.0320151336, 0.1738207191, -0.0004281981, -0.0421966948, -0.0675349087, -0.0815473199, 0.1453686506, 0.1123444960, 0.0280976538, 0.1196629107, 0.0954486504, 0.1133204997, 0.0835175216, -0.0172020625, -0.1006700769, -0.0954953358, 0.0941744149, -0.1243917495, 0.1276316643, -0.0117060589, 0.0640781596, -0.2088230997, 0.0919789225, 0.0773379877, -0.0382488370, -0.0375464745, 0.0472784452, 0.0602336153, 0.0933479518, 0.0719110593, -0.2659449875, -0.0854535401, -0.0532186851, -0.1043619588, 0.0562341921, 0.0194853395, 0.1942462623, -0.0591113009, -0.0543871410, -0.0705382004, -0.0231441073, -0.0869131014, 0.0478817672, 0.0184957422, 0.0263637733, 0.1064241379, 0.0114241876, -0.0268627200, -0.0136864539, 0.0443637036, 0.0127400514, -0.0276527219, 0.1467208266, -0.0113670584, -0.0474561192, -0.0282536503, -0.0218634438, 0.1790966094, -0.2100444436, 0.0454629958, -0.0302342363, -0.1566986591, -0.0097448081, 0.0259431526, -0.0905799568, 0.1261498630, 0.1865169555, -0.1258583069, 0.0482486151, 0.1221742183, 0.0502337366, -0.0215062499, 0.1997201741, -0.0743681937, 0.1309176683, -0.0018091890, 0.0993286520, 0.0866890326, 0.0091077136, -0.0105894124, -0.0308634508, 0.0623705573, -0.0061526713, 0.1126825586, -0.0383644775, 0.0228778534, -0.1639793813, 0.0466852114, 0.0456021056, -0.0885615721, 0.0167498458, -0.0296398662, 0.0278456919, -0.1612953097, 0.0398696177, -0.1991111338, 0.0366962180, 0.0200141296, -0.0653208718, -0.0052705570, 0.0486192629, 0.0800666586, 0.0432681106, -0.0219651069, -0.0490282662, 0.0436213128, 0.0117167998, -0.0206270684, -0.0309824403, 0.0271768533, 0.0649744496, 0.1174356565, 0.0048162742, 0.0596647821, -0.0081346743, -0.1345294565, -0.0702206120, -0.0280780569, -0.0621296987, -0.0849226266, 0.0010196686, -0.1413771212, 0.1516747475, 0.0083305798, -0.0580399260, -0.0104367388, 0.1752385199, 0.0143040149, -0.0612383075, 0.0404822417, -0.0023763240, -0.0013725327, -0.0642583147, -0.0494027771, -0.0415626392, -0.0287759881, -0.0754063502, -0.0418189988, -0.0497793630, -0.0716174245, -0.0145971999, -0.0525942817, 0.0778224170, 0.0572820678, 0.0077962945, 0.0559064187, -0.0081957094, 0.0525531545, -0.0082619442, -0.0103073400, -0.0548254959, 0.0359807499, -0.0245276969, -0.0302546881, -0.0697301850, -0.0485813431, 0.0249703564, -0.0084715523, 0.0119926091, -0.0724490285, 0.0317871720, -0.0560663864, -0.0016327150, -0.0383532196, 0.0798049122, 0.0510957092, 0.0364836305, 0.0793981701, 0.0614167303, 0.0346526876, 0.0268391185, 0.0022300710, -0.0706444234, 0.0576388836, -0.0590442419, -0.0387117788, -0.0140475063, -0.0556082949, -0.0434042327, -0.0650362298, 0.0825658292, 0.0262075886, 0.0004324143, -0.0645750016, 0.0106734103, -0.0387781374, 0.0061881095, 0.0038833902, 0.0166216008, -0.0256296806, -0.0202532262, 0.0271412656, -0.0549153388, 0.0658707842, -0.0408834890, 0.0473524332, -0.0059754900, 0.0414988101, -0.0801207870, -0.0461827703, -0.0253956243, 0.0181782693, 0.0029840171, -0.0557418838, -0.0658465624, 0.0607756600, -0.0350708142, -0.0165089313, -0.0753249452, -0.0053401585, -0.0142775849, -0.0460019186, -0.0184041113, 0.0038514764, -0.0718433708, -0.0671055317, 0.0556546934, -0.0228075162, 0.0118645439, -0.0520199649, -0.0188465863, 0.0154530089, -0.0567023829, 0.0352533646, -0.0480063818, 0.0334970020, 0.0335305855, 0.0443652719, 0.0566081405, 0.0442652255, -0.0592324734, 0.0865570679, -0.0076601906, 0.0649094060, -0.0244194586, 0.0508540422, -0.0761251673, -0.0074591786, -0.0433949083, 0.0414348766, 0.0346886143, -0.0061380789, -0.0582459457, -0.0409185998, -0.0638484210, 0.0310615450, 0.0297063366, -0.0130654275, -0.0732950121, -0.0320533998, 0.0640583038, -0.0395191535, 0.0493718088, 0.0373274982, 0.0009300187, -0.0355181396, -0.0632904693, -0.0663369894, -0.0540686026, 0.0165716484, 0.0481644422, -0.0737151802, -0.0503545068, -0.0375951044, -0.0313568301, -0.0506619848, 0.0381664187, -0.0416703671, 0.0531004816, 0.0407434702, -0.0467314869, -0.0162561238, 0.0572269559, -0.0806019455, 0.0014187545, 0.0141715333, 0.0735918283, -0.0067678466, 0.0705171376, 0.0679826438, 0.0558218509, 0.0171237141, -0.0694907606, -0.0135750026, -0.0559065416, 0.0762952566, 0.0593507737, 0.0289093778, 0.0315076038, 0.0391424596, 0.0394608527, -0.0518759266, 0.0770671517, 0.0166739449, 0.0561664850, -0.0628411323, 0.0142060444, 0.0409793332, 0.0204283148, -0.0123848021, -0.0400907621, -0.0016390011, 0.0109687001, 0.0656362921, 0.0717202276, -0.0714434087, -0.0553023294, -0.0771993473, -0.0787772834, 0.0226111114, -0.0479623452, 0.0496990979, -0.0719902068, -0.0535844043, -0.0158463046, 0.0303681195, 0.0150649995, -0.0466823429, 0.0581233948, -0.0561564714, -0.0499972925, 0.0241331831, 0.0398732275, 0.0802511573, -0.0660064295, 0.0259972811, -0.0565415919, 0.0046279132, 0.0783841610, 0.0520696789, 0.0121193007, 0.0642961413, 0.0035048351, -0.0022532493, -0.0648689568, -0.0453348681, 0.0488658398, -0.0292028077, -0.0605191141, -0.0013736337, 0.0229109302, -0.0182240531, -0.0812117904, 0.0392660648, -0.0112987459, 0.0451750606, -0.0081408173, -0.0808048695, 0.0719743520, 0.0577045679, -0.0709969550, -0.0758194700, -0.0760776028, 0.0512489080, -0.0169011876, -0.0280492418, 0.0344620422, -0.0468794517, 0.0256488919, 0.0520556420, 0.0162625462, 0.0802973658, -0.0218472444, 0.0500012040, -0.0221513472, 0.0808183253, 0.0716721714, -0.0815827176, 0.0767118037, 0.0725274533, 0.0425254107, 0.0626912117, 0.0153084472, 0.0467681140, -0.0035078600, -0.0218046233, -0.0057866797, 0.0544952899, -0.0261160024, 0.0725954324, 0.0530798137, -0.0457369424, 0.0167713314, -0.0571465716, -0.0804180726, 0.0013572946, 0.0021028146, 0.0064225793, 0.0018381774, -0.0165739730, -0.0612484291, -0.0140486956, -0.0773700625, 0.0407227054, -0.0223946162, -0.0298983566, 0.0318548754, -0.0713371783, 0.0583562702, 0.0369497612, -0.0041486472, 0.0453683436, -0.0817847922, -0.0821019411, -0.0395780019, 0.0558816940, 0.0743598044, -0.0634841174, 0.0113993958, -0.0327916890, 0.0727226585, 0.0678299516, 0.0754313171, 0.0679147243, -0.0505702347, -0.0139440224, 0.0764342546, 0.0412531644, 0.0730898380, -0.0618910231, -0.0687995106, -0.0677895844, -0.0099504739, -0.0344780087, 0.0125182942, 0.0622216761, -0.0648334175, -0.0166698247, -0.0770443752, 0.0006898344, 0.0807545036, 0.0385870934, 0.0643426776, -0.0601005182, 0.0182809159, 0.0246397927, -0.0597188547, 0.0041421643, -0.0140648922, -0.0491023697, -0.0178698115, -0.1122169644, 0.0261045285, -0.0741458088, 0.1819623262, -0.0216076598, 0.0131311230, 0.0221873987, -0.0984458700, -0.0374953412, -0.0998660550, 0.2401643544, 0.0284588728, -0.0907694772, 0.1151369363, 0.0875112861, 0.0502056554, 0.0302220955, -0.0856006220, 0.1084112823, 0.0505582578, 0.0206300374, 0.0116384588, 0.0700307190, -0.1150857657, -0.1339442432, 0.0950032994, 0.0918692648, 0.1296606958, -0.0056189853, -0.0983567536, 0.0012075693, 0.0848931074, 0.0370521173, -0.1341459304, -0.0367752351, -0.1006514356, -0.0197917838, 0.0963037238, -0.0249061659, 0.0148882959, -0.1777562648, 0.0506841987, 0.0157807879, 0.0028934882, 0.0634042099, -0.0726015940, 0.0676081702, 0.1175311804, -0.0686188787, 0.0574220605, -0.0705891252, -0.0660941675, -0.0804408118, -0.0829054788, 0.0045368504, -0.0285893772, -0.1393150240, 0.1379483044, -0.0396537110, -0.0477826372, 0.1584689170, 0.0149809830, -0.0851534605, 0.0042544724, -0.0485396199, -0.0071360725, 0.0705682039, -0.0816389024, -0.0430485681, -0.0939246193, -0.1934368312, -0.0493716672, -0.1140277386, 0.0578889921, -0.1382148713, 0.0548707768, 0.0682692155, 0.1016931385, 0.0227345936, -0.0772868693, 0.1743304580, -0.0589373708, -0.0911923274, 0.0315376297, -0.0645957068, 0.0595528781, 0.0675797537, -0.0749846175, -0.0322425850, -0.0060359831, -0.0732180327, 0.0569164120, 0.0399853475, 0.1084834933, -0.0255070962, 0.0090661645, 0.0412288494, 0.2066850811, -0.0187046863, 0.0037453871, -0.1310713738, -0.1454279125, -0.0495472848, 0.2439106852, -0.0050435746, -0.0223105811, 0.0732468218, -0.0645450354, -0.0765384138, 0.0923536792, 0.2932865918, 0.1563918293, -0.0982998833, -0.0262101125, 0.1199197397, -0.0115716010, 0.1008629277, -0.0735335872, 0.3100230396, 0.1970483512, 0.1221461222, -0.1340075284, 0.0848343670, -0.0372271836, -0.1016547754, -0.0911413282, 0.0400874726, 0.1974818408, 0.0221946072, 0.0717724934, 0.0031958015, -0.1067542359, 0.1172847822, -0.1544874609, -0.0458353125, -0.0524311960, 0.0124641517, 0.0300611630, -0.0578449219, 0.1029347181, -0.1609972864, -0.0108312061, 0.0722483546, 0.0417231321, 0.0755940452, -0.1667981446, 0.1181451902, 0.0930048376, -0.0550894290, 0.0379963480, -0.0204654969, -0.0446995273, 0.0249903016, 0.0381200016, -0.0652943403, 0.0605813526, -0.1839065701, -0.1734222174, -0.0063051670, -0.0105495490, 0.1048620939, 0.0235918965, 0.0341847464, 0.1031509638, -0.2180160135, -0.1496002823, -0.0416228659, 0.0325427204, -0.1308753341, -0.0745650530, -0.0034267050, 0.0569977127, -0.0715530440, -0.0135256657, -0.1842938215, 0.1288908273, 0.0846974030, 0.3122508228, 0.0287555493, -0.0718798041, 0.2362384945, 0.0753862411, -0.1452002525, 0.0850522369, -0.3139391541, 0.0832071155, 0.0602837466, 0.0319761299, 0.0157004278, 0.0465735160, -0.2016005814, -0.1193953529, 0.1333877146, 0.2345871031, -0.1029082239, 0.1682750434, 0.0327813886, 0.0701382160, -0.1127019599, -0.0927784219, -0.0737666786, -0.2176125944, -0.0742313713, 0.0509374849, -0.0457806438, -0.0018112416, 0.0113829141, -0.0167617369, -0.0752836317, 0.0306546781, 0.2051990181, -0.1250766516, 0.0025861713, -0.1867057532, -0.0077004116, -0.1249983460, 0.1042111889, -0.1183614284, 0.3090141416, 0.1536636204, 0.1638919711, 0.0296855178, 0.0549393855, 0.1003347635, -0.0941994116, 0.0388670228, 0.0890633315, 0.1912810206, -0.0333514400, -0.0123896394, -0.1185077503, 0.0139809567, 0.1614518017, 0.1312388778, 0.1111865342, -0.0705880150, -0.1613951325, 0.0472811498, -0.1588630676, -0.0188810192, -0.0626527444, 0.0748081952, -0.1146493480, -0.1090191007, -0.1308667958, 0.0071928543, -0.0974672660, 0.0297492091, -0.0581682920, -0.0058307289, 0.0029208036, 0.0134942234, 0.0435680151, -0.0900746658, -0.1594553143, 0.0107157724, -0.1048628539, 0.0336532332, -0.0452555344, 0.0294718463, -0.1733447611, -0.0861519352, 0.0102939354, -0.0846593454, -0.0670982525, -0.0906084776, 0.0438104495, -0.0573325157, -0.2457126975, -0.0433618724, -0.0553340092, 0.0675056130, -0.0552709512, -0.1122008562, -0.0223851167, 0.0958986878, -0.0981985703, 0.1654693931, -0.0492353626, -0.1432244182, 0.1986518800, 0.0123688420, -0.0812426955, 0.0168730877, -0.1043281183, 0.0585528798, 0.0123584196, 0.1223592684, -0.0559256487, -0.0744799823, -0.1053327173, -0.1132996753, 0.1077901050, 0.3191646039, -0.0064019477, 0.1140643433, -0.0386901349, -0.1677090377, -0.0923096687, 0.1177866310, -0.0144216139, -0.0343177430, -0.0377221219, -0.0626430064, -0.0861864164, 0.0187160857, 0.1058591157, -0.0870250314, -0.0165819619, 0.0474146120, 0.1270020455, -0.0874236971, -0.0002354509, -0.0689336136, -0.0684307739, -0.0580911748, 0.1673328280, -0.1273752153, 0.2269482464, 0.0205805749, 0.0604105555, -0.0196650494, 0.0336158238, 0.1009741798, 0.0021376410, -0.1618046612, 0.0772197843, -0.0378533341, -0.0583799593, 0.0339833014, 0.0458051674, -0.0716371462, 0.0720286891, 0.2638371587, -0.0097300215, 0.0014417614, -0.0291505493, -0.1152739078, -0.0963055268, -0.0274896305, -0.1421352476, 0.1047880575, -0.0992365181, -0.1376673281, -0.2862971723, -0.0264391806, -0.0035515579, -0.0370231010, -0.1070807502, -0.0114567420, 0.0346299633, -0.0418398529, -0.0330908746, -0.0513011143, -0.2215110809, 0.0176379215, -0.1409650892, 0.1171136200, -0.1217054352, -0.0102261817, -0.1715449691, -0.0330629274, -0.1632037312, -0.0548304804, 0.1241469607, 0.0669726729, -0.0859972015, 0.0508259200, -0.1239114106, -0.1281829625, 0.0989695042, -0.0604028553, -0.2005474269, -0.2097353637, -0.0376049876, -0.0264139231, -0.0900306627, 0.0307337847, -0.1463276595, -0.0670623556, 0.2178934515, 0.0241509918, -0.0381693169, 0.0130629297, -0.0419849604, 0.0083307363, -0.0372386649, 0.0484437384, 0.0678781047, -0.0472173393, -0.1219156533, 0.0542136692, 0.0152838612, 0.2955653369, 0.0563965179, -0.0168145895, 0.0588409603, -0.1187724546, -0.1449832171, 0.0542747267, -0.0100007383, -0.0229151100, -0.0581867732, -0.0899557546, 0.0328468047, 0.0153225213, 0.1130600274, -0.0974477679, -0.1743163913, 0.1673883200, 0.1068785191, -0.1316564381, -0.0216966849, -0.0732359141, 0.0562537685, -0.1233626157, -0.0499613695, -0.1403977722, 0.0772436559, 0.0287610479, -0.1311202198, -0.0115145734, -0.1235338748, -0.1604893506, -0.1477980167, -0.1143763587, 0.0693725720, 0.0604233220, -0.1323046237, 0.0293239504, 0.0559675731, -0.1453951597, 0.0715640411, 0.1238037646, -0.0764474571, 0.0283337608, 0.0988506228, -0.0495031364, -0.0301367771, -0.1121018305, 0.0095361751, -0.0388219543, -0.0753040314, -0.2037957609, -0.1998941302, -0.0227232967, 0.0049035205, 0.1134152636, -0.0318366848, 0.0437702090, -0.0340483226, -0.0008650178, -0.0843991637, -0.1124398112, -0.2600890696, 0.1055360287, -0.1592617929, -0.0395700000, -0.0291804895, 0.0074935704, -0.0675729364, 0.1288906336, -0.2228238881, -0.1112382859, 0.1067078412, 0.0780542940, 0.0314456150, -0.1225987300, -0.0671159253, -0.1114422902, 0.0763781443, -0.0219117254, -0.0766187608, -0.2763477266, 0.0080889435, 0.0629942566, -0.0510354303, 0.0042976718, -0.0563246422, 0.0010829442, 0.2124518156, -0.1391343325, -0.0573086813, 0.0597290471, 0.1731602997, -0.0502183959, -0.0841498524, 0.0351179317, 0.0221370589, -0.2094819844, 0.0599748380, -0.0553352199, -0.0025482760, 0.3029508889, 0.0531298332, -0.1005400419, 0.1962501407, 0.0478275232, -0.0270460844, 0.1951369047, -0.1156043932, 0.0055551827, -0.0116803199, -0.1372950077, 0.0577024147, -0.0842855126, 0.2286650538, -0.0812445283, -0.2824243009, -0.0557412431, 0.1991838813, -0.1491095573, -0.1153138950, -0.0801423490, 0.2383061051, -0.0880336091, -0.1266088337, -0.0234742314, 0.0387305208, 0.0261256620, -0.0551679023, 0.0341357104, -0.2316428423, -0.1192020625, -0.1053902507, 0.0550318845, 0.0226323958, 0.0871820971, -0.1089420170, -0.1025571749, -0.1403850317, -0.1643497646, -0.1016621068, 0.1119069308, -0.0233368278, -0.0160989165, 0.0350702666, -0.1250065118, -0.0441104323, -0.1960451603, 0.1145460233, -0.0584573559, -0.0454399996, -0.1495514214, -0.0725748539, 0.0260018557, 0.0116606867, 0.0054046595, 0.0470308028, 0.0074382103, -0.0186363533, 0.1282226592, -0.0482232943, -0.1455857307, -0.0684640929, 0.1972016990, 0.0744917914, 0.0037905902, 0.1201249063, 0.0812916979, 0.0330623314, 0.1246714070, -0.3506081700, -0.0708841458, 0.0574606024, 0.0503428802, 0.0538272373, -0.0346343741, -0.0206286069, -0.1448126733, 0.0836667493, -0.0730274171, -0.0221025310, -0.1056108996, 0.0724509358, 0.1028580293, -0.0264410879, -0.0412120894, -0.1325550526, 0.0382655635, 0.0638174564, -0.1969607621, -0.2202104926, 0.1590712517, 0.3273843229, 0.1812980473, -0.0263914429, 0.0316425078, 0.1191552952, -0.1756142080, 0.1014687195, -0.0544075333, 0.1736146361, 0.0554577522, -0.1087178141, -0.2127601504, 0.0913793817, 0.0498496480, -0.0280444510, 0.1592413038, -0.1827225238, -0.0119485231, 0.0760263056, -0.1202188283, -0.0584971160, 0.0312946029, 0.0733257160, -0.0542413257, -0.2429461330, 0.0549111664, 0.1268083900, -0.0581284352, 0.1157605797, -0.0664594695, 0.0789338276, -0.2150514275, 0.0674741268, 0.1061578244, 0.0027581512, 0.1191270128, -0.0006781844, -0.0243429206, -0.1724200994, 0.0539867729, -0.0029777857, -0.0355808921, 0.0612422265, 0.1363989115, 0.0127969673, 0.0235640835, -0.1931903958, -0.0743728504, -0.1840346456, -0.0537726544, -0.0414559878, 0.0111111933, 0.1113862544, 0.1095639840, 0.0229795724, -0.0472051911, 0.0803211927, -0.0605028719, -0.1971689463, -0.1474424601, -0.0439795852, 0.0295060705, 0.0496216081, -0.0062862476, -0.1186317950, 0.0256447978, -0.0758259222, 0.0152624920, 0.0020782040, 0.0121450899, -0.0699871182, -0.0979560018, -0.0971091613, 0.0811093152, 0.1040133834, -0.0498264320, -0.0172988251, 0.0405969210, -0.3796501160, 0.0094600208, 0.0483121499, 0.0077643162, 0.0320050530, 0.0431748480, -0.0327417925, -0.0063468497, 0.1389325708, -0.0197139177, 0.0467972495, -0.0913038105, -0.0913578421, -0.0041793748, -0.0317470841, -0.0154719166, -0.0154328002, 0.1296686083, 0.0871096998, 0.0120109934, -0.1526690274, 0.0203155875, 0.2035279423, 0.1035230905, 0.0550643913, 0.0904835314, -0.0265454110, -0.1628060043, -0.0163552519, 0.0375127830, 0.1361773312, 0.0924418718, -0.0642723441, -0.0940330476, 0.1403367221, 0.0724456832, 0.0087175565, 0.0835150033, -0.1607057601, -0.0960894525, -0.0294212177, -0.0568217076, -0.0710129961, 0.0984364897, 0.0166446790, -0.0215077642, -0.2078619599, 0.1086489186, 0.2341970950, 0.0804950371, 0.0535634123, 0.1624796242, 0.0189836267, -0.2230781168, 0.1194337755, 0.0375282653, 0.1227743104, -0.0934075043, 0.0902920812, 0.0051872423, -0.1757867932, -0.0066669700, -0.0963003859, -0.1459322870, -0.0907253176, 0.0712285116, -0.0641497821, -0.1095048934, -0.1334863901, -0.0197924543, -0.0912471563, 0.0526372977, 0.0279067792, 0.0795027614, 0.1486962736, 0.0960048214, 0.1009329781, -0.0977675766, 0.1625934094, -0.0368912034, -0.1594516039, -0.0725661367, 0.0041309707, -0.0097439410, 0.0653619543, 0.0507161394, -0.1853504330, -0.0388428867, 0.0631570891, -0.0286608730, 0.0085418625, -0.0979110077, -0.0242265295, 0.0125327623, 0.0010786437, -0.0454510376, 0.1461364031, -0.1046220213, -0.0270097610, 0.1238073409, -0.2927663922, 0.0043775160, 0.0616121702, 0.0724933669, 0.1385419965, 0.0082402499, 0.0904578120, -0.1612031758, 0.0485840142, 0.0422312170, -0.0718127936, -0.1431978494, -0.0746842176, 0.1098933145, 0.0850334615, 0.1776442975, -0.1154982895, -0.0466338433, 0.0874742270, 0.0305944532, -0.0264716875, -0.0365131050, -0.0017262730, 0.0724527240, -0.0231123921, 0.0135854948, 0.0792485327, -0.0932797492, -0.0753497481, -0.0077457083, -0.0180777404, 0.0701210797, -0.0951072127, -0.0900740400, 0.0151860714, 0.0747095868, -0.0379170142, 0.0979074910, -0.2019328773, -0.0844532475, -0.0543095209, 0.0739343539, -0.0846698508, 0.0733754411, 0.0071298084, -0.0973068997, -0.0867464021, 0.0512032323, 0.2253328711, 0.1819606423, 0.0514100865, 0.0610264167, -0.0004838140, -0.1799365431, 0.1130907536, -0.0439211316, 0.0352375209, 0.0061205048, 0.0916951448, -0.1142523661, -0.2276803702, 0.0245403126, 0.0595347248, -0.0306393206, 0.1093449965, -0.0004418227, 0.0816671178, -0.1746234745, 0.0342824049, -0.0530275665, -0.1394201219, 0.0424139537, 0.0025042030, 0.1121488661, 0.2341733873, 0.0385998338, -0.0175155979, 0.0582141466, 0.1631251276, -0.0108682541, -0.0923084468, 0.0208560321, 0.1095422506, 0.0019259887, -0.0283326730, 0.1968067437, -0.1120388582, 0.0234294720, -0.0499982089, 0.0448450930, 0.0542892069, 0.0231114328, -0.0669356585, -0.0324736312, -0.0998258591, -0.0861753374, 0.1850361675, -0.1165697426, 0.1360730678, 0.1095869616, -0.1471475810, 0.1162282154, 0.1287250072, 0.0997656137, 0.0026862430, 0.0043195635, 0.0571877770, -0.1585074514, 0.0284799282, 0.1394733787, -0.1183499098, -0.1026415378, -0.0990706310, 0.0971855521, 0.0655428544, 0.1039594635, -0.1109354272, -0.0640918836, 0.1226188838, -0.0322749838, -0.1008256823, -0.0719362572, 0.0344825014, -0.0489604063, 0.0139794592, 0.0764952600, 0.1064153016, -0.2484922111, -0.1502999216, 0.0547029749, 0.0287344232, 0.1108115017, -0.0186355766, -0.0683080852, 0.0076030018, 0.0254199281, -0.0040227547, 0.0687784776, -0.0961561203, -0.0510383770, 0.0063834568, 0.0115801077, -0.1616786122, -0.0058479272, -0.1209897101, -0.0882865340, -0.1050005481, 0.0452177562, 0.2072865367, 0.1000380442, 0.1283836067, 0.0543772541, 0.0436941311, -0.0338844322, -0.0154229254, -0.0342900008, 0.0221530423, -0.0196638927, 0.0458377041, 0.1358642280, -0.2749563456, -0.0540457293, 0.0272828396, -0.0190343093, 0.0125153428, 0.0578343980, 0.0822210461, -0.1630435139, -0.0172117837, -0.0402456298, -0.1373156607, 0.0076224366, 0.0465957671, 0.1668385416, 0.0667353496, -0.0414889269, 0.0280403867, 0.0053456896, -0.0194962453, 0.0091280285, -0.1008015350, -0.0597269647, 0.1623668075, -0.0493421219, 0.0350209735, 0.0903176218, 0.0186079517, -0.0218735263, -0.0517111756, 0.1084075943, -0.0066992720, -0.0264887586, 0.0050712293, 0.1145487800, -0.0785281211, -0.1538492888, 0.1251195818, -0.0364446901, 0.0867809653, 0.0010143847, -0.0765177757, 0.0956249684, -0.0017680362, 0.0814421996, 0.0263746195, -0.0451500081, 0.0542035513, -0.1405417621, 0.0279344283, 0.1344670206, -0.0512809232, -0.0934390575, -0.0289579239, 0.1307559013, 0.1404896528, 0.1278426051, -0.0852710977, -0.0996731147, 0.2030139714, -0.0067622908, -0.1170409992, -0.0100150211, 0.0006146111, -0.0120263873, -0.1070631966, -0.0379822180, -0.1018019244, -0.1487175673, 0.0787506104, 0.1539399475, 0.0365271382, -0.0001052577, 0.0955058262, 0.0799040794, -0.0555443652, -0.0722865611, -0.0410625935, 0.0436305404, -0.0137894806, 0.0223726220, 0.0847279429, 0.0492613874, -0.0333767198, 0.0125279380, -0.1017572656, 0.0855393559, -0.0001410653, 0.0769760385, 0.2057554126, 0.0987071171, 0.0770318359, 0.0678931922, -0.0086561199, 0.0447269604, -0.1249441430, 0.1306201518, -0.0387440026, -0.0255461037, -0.1611221433, -0.0170109309, -0.2224035412, -0.0855142921, -0.0260176677, -0.0294167902, -0.0136860376, 0.0098180640, -0.0024714009, -0.0484140888, 0.0242476296, -0.0962034464, -0.1712463945, 0.0132610584, -0.0411167182, 0.1182731539, 0.1867305338, -0.0430817716, 0.0645103306, 0.0667899251, -0.0350196734, 0.0072632162, -0.0952988416, -0.0252123792, 0.0848702639, -0.1146972999, -0.0368325524, 0.0773538426, 0.1124089360, 0.0188348386, 0.0162226055, 0.0273961145, 0.0012044335, 0.0522616953, 0.0330111198, 0.0656650066, 0.1169414669, 0.0587822571, 0.1052202582, 0.0724632144, -0.0101526836, -0.0159750041, 0.0522613712, -0.0170581713, 0.0450170562, 0.1982571334, 0.0352588221, -0.0504184328, 0.1043347418, -0.0080021610, -0.0597188883, 0.1515787691, 0.0263319816, -0.1227835864, 0.0788589194, 0.1881819367, -0.0724165961, 0.0313914381, -0.0530850403, 0.0288301073, 0.1207915172, 0.0689895824, -0.0489644445, -0.0380193479, -0.1811493337, 0.0418499596, 0.0031929119, 0.0609171912, -0.0329284556, -0.2181419134, 0.0473295338, 0.0432153381, -0.0295926686, -0.1537144929, 0.0406673625, 0.0039702323, -0.0886773914, -0.1511205286, -0.1284958869, 0.0114633525, -0.0089338189, 0.1198779792, -0.0391860791, 0.0909199193, -0.0706804171, 0.0022342945, -0.1200702637, 0.1179868132, 0.0342104323, 0.0307415649, 0.1684305668, 0.1037370339, 0.0430731103, 0.0321297422, 0.1454630941, 0.0337353125, 0.0354169831, 0.1117437854, -0.0498257689, 0.1285609156, -0.1503089666, 0.0488139391, -0.2649774849, -0.0826450512, -0.0041284370, -0.0034207518, 0.0482177623, -0.0059319125, -0.0389390886, 0.0032421518, 0.1178987697, -0.2102862298, -0.1189705059, 0.0494200997, 0.0001493166, 0.0652147084, 0.1364856809, -0.0425820500, -0.0207094513, -0.0046076137, -0.1075303555, -0.0447414368, 0.0255939662, -0.0341149457, 0.0942929015, -0.0680596679, 0.0241371971, -0.0723545924, 0.1083238497, -0.1148507968, 0.0223826114, -0.0050188666, -0.0730151162, -0.0000289614, 0.0073744142, -0.0319148190, 0.1203669608, 0.0265968684, -0.0602777824, -0.1042846069, -0.0559373796, -0.0639684200, -0.1011270881, 0.0377440751, 0.0427899845, 0.1682677269, 0.0010046975, -0.0991420224, 0.1614196748, -0.0129492795, 0.0492990613, 0.0797623247, -0.0660455152, -0.0191314276, 0.0317013338, 0.1915676743, 0.0287709869, 0.0231436770, 0.0118718315, 0.0294662658, 0.1231473237, 0.0959538668, 0.0125296190, 0.0074954689, -0.1106880754, -0.0015326834, 0.0250625331, 0.0185695477, 0.0449735783, -0.2899394035, 0.0627563223, -0.1207143590, -0.0338829085, -0.1575396210, 0.0824068412, 0.0889157951, -0.0239399988, -0.1515577286, -0.0883249640, 0.0888035595, -0.1430644691, 0.0045283991, 0.0088301068, 0.0293897316, -0.1122217625, 0.0444931537, -0.0438779257, 0.1206410825, -0.0268643945, 0.0384237617, 0.2015342265, 0.1426917613, 0.1248140633, 0.0032733267, 0.0078698043, 0.1656080484, -0.0303971879, -0.0249572378, 0.0742195025, 0.1068324968, -0.0854472294, 0.0374280810, -0.2553397715, 0.0503918193, -0.0112347677, 0.0891247466, 0.0966365039, 0.0374367349, 0.0323713869, -0.0716377869, 0.0858674422, -0.1026281491, -0.1114912108, 0.0117594693, -0.1263516694, 0.1197508797, -0.0380809307, 0.0898595080, -0.0280069597, 0.1372215152, -0.1170263588, -0.0436960235, -0.0141412811, 0.0093667023, -0.0039026311, -0.1204524264, -0.0529758148, -0.0531626083, -0.0274912044, -0.1039106771, -0.0338286646, -0.0415323749, 0.0306501724, -0.0299058110, -0.0475885607, -0.0643166602, 0.1015268415, -0.0680404380, -0.0497842133, -0.1382178515, 0.0161915086, -0.1124999672, -0.0390047319, 0.0896449015, -0.1150385365, 0.0843311697, 0.0360959508, 0.0605802014, -0.0038279768, -0.0227061491, 0.0154309850, 0.0466204882, 0.0785539299, 0.0850783214, 0.0244399831, 0.0995244607, -0.1181751266, -0.0543371178, -0.0249344483, -0.0449551456, 0.1616949737, -0.0056612170, 0.0932044536, -0.0711162835, -0.1562191546, 0.0011656915, -0.0404584445, 0.0522549413, 0.0168186165, -0.2886775732, 0.0209128875, -0.1084739640, -0.0156102516, -0.0412327908, 0.0737865046, -0.0065481407, -0.2043368369, 0.0485839620, -0.0888208449, -0.0642220080, -0.0738356635, 0.0690215901, 0.0177210830, 0.0404783972, -0.0567558892, 0.0995635167, -0.0846184194, 0.1291656941, 0.1587933600, 0.0543373600, 0.1777192354, 0.0329418071, 0.0416270494, 0.0211625118, 0.0493984036, 0.1272010207, 0.1257877648, -0.0550580695, 0.0688799471, 0.0918337777, -0.1419507861, 0.0387707092, -0.2615174651, 0.0611771643, 0.0367415734, 0.1429899484, 0.0741955116, 0.0707677007, -0.0427019112, -0.0396175422, 0.0007609053, 0.0052763443, -0.0464694351, 0.0125274565, -0.1368594170, -0.0761279389, -0.1504185349, -0.0910426453, 0.0718056783, 0.1519893557, -0.0415842086, 0.0469561033, -0.1085657775, -0.1032450423, 0.0843340605, 0.0018555638, -0.0410243198, -0.0158435088, 0.0272769481, -0.0657410845, -0.0012322095, -0.0565922670, 0.0539929979, 0.0411773100, -0.1662005782, 0.0274013616, 0.1370368898, -0.0343994312, -0.0260165781, -0.0267758630, 0.0647985488, -0.1184308231, 0.1238751113, 0.0830834210, -0.0722543374, 0.1383743435, 0.0444007367, -0.0246991236, 0.0288059209, 0.0077699670, -0.0348138064, -0.0366159603, 0.0377494097, 0.0636575073, 0.0018530565, 0.2102774382, -0.1936659813, -0.0695373937, 0.0530632995, 0.0837940723, 0.1262207031, 0.0492756888, 0.1428696066, -0.0261525940, -0.0376092494, -0.0324182659, -0.0748370886, 0.0016861581, -0.0199298374, -0.1728616357, -0.0066028265, -0.1278439760, -0.0505433865, -0.1122146398, 0.0662031174, 0.0655877069, -0.0989557207, 0.0095369928, 0.0161714237, -0.0571470708, -0.0769659653, 0.1494425088, -0.0025075581, -0.0713808835, -0.0666764900, 0.0546260588, 0.0314488634, -0.0076484438, 0.0518195853, -0.0734624937, 0.1427109390, 0.0815751702, 0.1611054391, 0.0377364121, 0.0786876082, 0.0030431380, 0.1539416164, 0.0895136595, -0.0693076104, 0.1512202919, -0.0634153187, 0.0544463918, -0.1311573237, 0.0601695143, -0.0338294581, 0.0812613666, -0.0232001655, 0.0845170692, -0.1312183440, 0.0181659367, -0.0959454849, -0.0053141247, 0.0492212474, -0.0124230711, -0.2150916606, -0.0895873234, -0.0938463286, -0.0313574560, -0.1507873237, 0.1158805192, -0.1736919135, 0.0591841042, -0.1013423130, -0.0083216242, 0.0479596406, -0.0017308942, -0.0054478934, 0.0308169350, 0.0669423267, -0.1421829611, -0.0885647684, 0.0194858946, 0.0774235800, 0.1150792912, -0.1718196720, -0.0289347023, 0.0068438021, 0.0296269655, -0.0119312312, -0.0922868103, 0.1444658190, -0.1070071310, -0.0553795211, -0.0589122064, -0.0254983529, 0.2044273764, -0.0939532518, 0.0304731075, 0.0756456256, 0.0884155557, -0.0508054607, 0.0265444666, 0.0342707820, -0.0337034725, -0.0849481449, 0.1987126470, -0.1078839973, 0.0623624921, 0.0133427139, -0.0613986254, 0.0033267997, 0.1623662561, 0.1324791908, 0.0047741975, 0.0302986652, 0.0022729968, -0.0150753809, 0.0790488720, -0.0703805834, -0.3188112378, -0.1279403120, -0.1640651673, -0.1448395997, -0.1287731081, -0.1151293814, 0.0987932011, 0.0333778970, -0.0364772156, -0.1321386397, -0.0913536400, 0.1098761261, 0.0857772008, -0.0457837805, 0.0316928737, -0.1282324493, 0.0429346263, 0.0519486070, 0.0132672964, 0.1280313581, 0.0203011259, 0.1960827559, 0.0737053081, 0.0874359831, 0.0682302043, -0.0332669951, -0.0403852910, 0.1308639646, 0.0902599543, -0.0467156731, 0.0474764630, 0.0359646305, -0.0312335677, -0.1573892534, 0.1380662471, -0.1647938490, -0.0631179512, -0.1050971299, -0.0551981889, -0.0037645476, -0.0198195875, -0.0577288456, -0.1048050150, 0.0106242057, -0.2011596859, -0.1541296244, 0.0922361538, -0.1156155095, 0.0826723576, -0.1321165264, -0.0152352704, -0.1752655208, 0.0067216926, -0.0806277171, 0.0888494104, -0.0406363048, 0.0077591217, 0.0435958542, 0.0352734663, -0.0244944058, -0.1359187365, -0.0225540474, -0.0475796238, -0.0389631242, 0.0979167968, -0.0709667206, 0.0216787066, 0.0685510784, -0.0081608687, -0.0220870674, -0.1379514337, 0.0923294798, -0.2022200674, 0.0053547635, -0.2554298639, -0.1230914742, 0.2011906505, -0.0024347370, 0.1003108397, 0.1092567518, -0.0019998839, -0.0785500109, 0.0246304180, -0.0605220832, -0.0863005817, -0.3153682649, 0.1043827236, -0.0927584171, -0.0248064566, -0.0679386035, 0.0960357040, -0.0202205554, -0.0207685344, 0.2067369074, -0.0169617124, -0.0574202016, 0.0972025394, 0.1221280470, -0.1825182140, -0.0032655664, -0.2984932959, -0.1228465661, -0.1016388386, -0.1067151502, -0.0983981192, -0.1184446886, 0.0321206897, 0.0688627362, -0.0330976844, -0.1953320652, -0.0021191658, -0.2072872072, 0.0202293526, 0.0465933271, 0.0499244146, -0.1179066002, 0.0113437623, 0.0026237988, -0.0485292040, -0.1235371530, -0.1138487384, 0.0440462343, -0.0735123456, 0.0122832609, 0.2028918117, 0.0410123318, 0.0015792969, 0.1882186532, -0.0041831140, -0.0119209820, 0.0191606656, 0.0105332537, -0.0102808382, -0.1715607494, 0.0244320631, -0.0721419752, 0.0318087861, -0.3011120856, 0.1090515181, -0.2292106897, -0.0747834817, -0.0277598947, -0.0312600844, 0.0210279990, -0.2502279282, -0.1388052255, 0.0748701245, -0.0001200501, 0.0179924201, -0.0129635306, -0.1549868882, -0.1802041531, -0.0840707272, -0.0516300201, 0.0217679366, -0.0633930489, 0.0946376100, 0.0331689455, 0.0186161399, -0.0576572679, -0.1096176729, 0.0083852429, -0.0254484974, -0.1273784488, 0.0107847620, -0.2746656537, -0.0620267577, -0.0640248656, -0.1065849364, -0.1821689159, -0.1181765571, -0.0131601384, -0.0717615336, -0.0083726840, -0.3050535917, -0.1130907163, 0.2386691570, -0.0081059420, -0.0146823116, -0.0323273502, 0.2141687125, -0.1203605756, -0.0527480990, -0.0786798075, -0.0304884128, -0.3702012897, 0.2039727420, -0.1359957159, 0.1139439791, -0.0770967677, -0.0451078825, -0.0479526632, 0.1000512987, 0.0268618073, 0.0497735329, -0.2422427833, 0.1042610779, 0.1518524587, -0.1602060199, 0.0063267690, -0.0511300452, -0.0588416457, -0.0274541881, -0.0765722468, -0.1305204779, -0.0562907606, 0.0362805985, 0.1680472493, 0.0066980748, -0.2857864499, 0.0045614149, -0.1474293321, 0.2242935449, 0.0459574275, 0.1265334338, -0.0068263072, -0.0120181236, -0.0387131050, 0.0330361128, -0.0254749693, -0.1859894395, 0.0455134101, -0.1281682104, 0.0464320667, 0.2252823710, 0.1184328347, -0.0456365049, 0.0723066479, 0.0618175156, 0.0266998596, 0.0447532907, 0.1003833339, 0.0239947364, -0.0766466260, -0.0093141301, -0.0686348677, -0.0496155061, -0.3137969375, -0.0739471838, -0.3031886816, -0.2821283340, -0.1913689524, 0.1162096038, -0.0912116170, -0.3641622663, -0.1646187901, 0.0229964629, -0.0819660425, 0.1016565859, 0.0120338183, -0.0698584691, -0.0204291902, -0.0598661564, -0.0235271193, 0.0706642270, -0.0435279235, 0.1326346397, -0.0749538988, -0.0298727341, -0.0210501980, -0.0085478872, 0.0704939589, -0.0022873210, -0.2130405605, -0.0454105474, -0.3138076961, -0.1740246564, 0.0050072642, -0.1868820786, 0.0396963209, 0.0322656743, -0.0662068501, -0.0776750818, 0.1104764715, -0.3166078031, -0.1506533176, 0.2152122855, 0.0535460822, -0.0432803258, 0.0385929495, -0.0076916977, -0.0103778057, 0.0057381708, -0.0562894680, -0.1253716648, -0.2477581501, 0.1850874424, -0.1874502003, 0.1169788539, 0.0028602392, -0.0308642481, 0.0262992941, 0.1838572919, 0.1689705253, 0.0002777561, -0.1882527024, 0.0869640857, 0.1802439839, -0.1554175317, -0.0203928500, 0.0356930085, -0.0881847516, 0.0394423641, -0.0528245494, 0.0131734805, -0.1314780414, 0.0560499020, 0.1003759056, -0.1082280055, -0.2045125067, 0.0796024948, 0.0240463782, 0.1169307977, 0.1118822098, 0.0716386363, -0.0274015050, 0.1254750788, -0.0727881566, 0.0530337319, -0.0100057535, -0.1223121509, 0.0389603376, -0.2170805931, 0.1550827771, 0.1655313522, 0.0973694846, 0.0010061978, 0.0759824589, 0.0376586057, 0.0334868245, 0.0837523490, 0.0828401670, 0.0256802719, -0.2097209096, 0.0991043523, -0.1606820673, -0.0008460450, -0.2806924284, -0.0216103923, -0.3039487004, -0.0801711604, -0.1316650808, 0.1838473231, -0.0554044731, -0.2554212809, -0.0315835588, -0.0524324849, -0.0683976933, 0.1043678001, 0.0021711374, -0.0781773105, -0.0188759211, 0.0422776118, -0.1718794256, 0.0738917142, -0.1090861261, 0.0388438329, 0.0485390611, 0.0946978331, -0.0725865141, -0.0719036832, -0.0845591277, -0.2082080394, -0.1731153429, 0.0136003057, -0.0995358229, -0.0733579397, -0.0901821852, -0.1642821431, -0.1419110745, -0.1223705187, 0.1064208448, 0.0073051248, 0.1065589637, -0.1852200627, -0.0791611969, 0.1896302849, -0.0327350795, -0.0943585709, 0.0663676932, -0.1241469979, -0.0807989761, -0.0249757487, 0.0082462113, -0.1335398853, -0.1280917078, 0.0268512275, -0.2087146193, 0.2285533249, 0.0879219919, -0.0958825648, -0.0205338486, 0.0229505207, 0.1694779247, 0.0375414118, -0.1526511908, 0.0816498995, 0.1115966141, -0.0489305854, -0.0103083616, 0.0371242203, -0.0731504411, -0.0635948256, -0.0042040180, -0.0039464626, -0.0586558171, 0.0924453065, 0.1482462287, -0.0929973051, -0.0501415059, -0.0529271550, -0.0517513938, 0.0275867023, 0.1174478680, -0.0850597695, -0.2186614722, 0.0062414664, 0.1043287516, -0.0412836112, -0.0467995107, 0.0246361438, -0.0186958890, -0.2336921841, 0.0029628205, -0.0432953276, -0.0441549271, -0.0012682431, -0.0440883152, 0.1488213688, 0.1105389223, 0.1792870313, 0.1708673239, 0.0734241232, -0.1631237119, 0.0297439713, -0.0577324368, 0.0400047489, -0.1870487481, -0.0886332095, -0.1985969841, -0.0851712003, -0.1299231499, 0.1261461675, -0.0330840759, -0.0457990840, 0.0873967037, -0.0190168303, -0.1064520925, 0.0813887864, 0.0086381156, -0.0911160782, 0.0003344836, 0.0461043343, -0.1303193271, 0.0710421726, -0.0178963393, 0.1124137789, -0.1623783708, 0.0079097012, -0.0974940658, 0.0323089585, -0.0673813969, -0.2042731196, -0.1621023715, 0.1407304108, -0.0719715804, -0.2750715613, 0.0586928464, -0.1625796854, -0.0754920617, 0.0014735308, 0.1626539975, -0.0013789283, 0.1110268533, 0.0053200913, 0.0090962006, 0.0914080665, 0.0274283476, -0.1215317994, 0.0830507129, -0.0534065925, 0.0711030811, -0.1083806679, -0.0101092514, -0.2157426327, -0.1274533272, 0.0836343095, -0.1900482774, 0.1514160186, 0.0645916834, -0.0613864549, -0.1092494726, 0.0070852847, 0.0424353294, 0.1122349873, -0.2788498700, 0.0430737399, 0.1760211736, 0.0273798443, 0.1656190008, -0.1361263394, 0.0329031311, -0.1277271807, 0.0086265337, 0.0506050773, -0.1389916092, 0.1653118432, 0.0607692711, 0.0519239083, 0.0009279721, -0.1120929196, -0.0809859857, -0.0346505418, -0.1147491336, -0.2570541203, -0.2106315792, 0.1682580709, 0.2473166287, -0.1017515436, -0.1562470943, 0.0163094774, 0.0498887561, -0.1323424280, -0.0287326816, -0.0662112460, 0.0560239628, -0.1932239681, -0.1608635932, 0.2616188824, -0.0373471640, 0.1342613846, 0.1233269721, 0.0918887258, -0.2006735504, 0.1311510354, -0.0454803146, -0.0158680491, -0.1606034636, -0.0518017970, -0.1599414647, -0.0664587542, -0.0260657053, 0.0608527921, 0.1291691959, -0.1036774144, 0.1255258471, 0.0759649128, -0.1254868060, 0.1310679764, 0.0224873777, -0.0163595416, 0.0315011516, 0.1741966903, -0.1554870754, 0.0529279932, 0.0275426395, 0.0545420572, 0.0130021190, 0.0526555292, -0.0067421715, 0.0081675593, -0.0651948079, -0.1647138447, -0.0762597397, 0.2075254470, -0.2592890561, -0.2080295980, 0.1221634001, -0.0689915940, 0.0574968010, 0.0286784060, 0.0207260679, -0.1689232141, 0.1424494088, -0.1630017906, -0.0320730433, 0.3200271130, -0.0250587407, -0.0247419663, -0.0395046733, -0.1605069488, -0.0746058822, -0.2053349316, -0.0457129814, -0.1192982942, -0.2693974078, 0.1004521251, -0.0672001168, 0.1043614373, 0.2343131155, -0.0406590253, -0.1860491931, 0.0620702691, 0.1417759657, 0.1333952397, -0.0777787268, 0.0736984685, -0.0698608533, 0.1713595539, -0.1005682647, -0.1074126586, -0.0234190505, -0.1022352949, 0.1726509333, 0.0634342805, -0.0300035365, 0.3787362874, 0.1023686901, -0.0262413193, -0.0177604891, -0.1507722735, -0.1683547646, 0.2114604414, -0.0184969380, -0.2557114661, -0.3422727585, 0.1597670466, 0.2743254602, -0.0034487799, -0.1054895148, -0.0685926303, 0.0061927359, -0.0266785156, -0.1053306460, -0.3117415905, -0.0523011684, 0.0926890895, -0.1671965420, 0.0619254187, 0.0207150243, 0.1018574163, 0.0675848648, 0.0072879135, -0.3118206263, 0.1317391843, 0.0387007371, 0.0735426843, -0.2464324981, -0.1410434842, -0.1932170540, -0.1033397987, -0.1033877432, -0.0337484740, 0.1266090274, -0.1918052286, 0.1904749274, -0.0992145240, 0.1005186066, -0.0354770087, -0.0285676569, -0.0158169474, -0.0100092022, 0.1264442503, -0.0017012137, -0.0421505347, 0.0021976954, 0.0293437727, 0.0275440346, 0.0157620888, -0.0121354572, 0.0560674258, 0.0537453145, -0.0818059072, -0.1934102774, 0.0633839816, -0.3306038678, -0.0728510320, 0.1300871819, -0.1783932894, 0.1479104459, 0.0477701128, 0.0185573548, -0.2032828182, 0.0492633320, -0.0169546697, -0.0140560921, 0.3146801591, -0.0974237099, -0.0167104229, 0.0720820054, -0.1705406010, 0.0879703686, -0.2291253358, 0.0316583179, -0.1430854052, -0.3777331114, 0.1592824161, -0.1129797101, 0.1339700669, 0.1763230860, 0.0468080677, -0.0468530543, 0.0836113766, 0.0558553562, 0.0955221429, -0.2454771847, 0.1358434260, -0.1054906100, 0.0950469971, -0.2198811769, -0.2712543011, -0.0194829907, -0.0717383996, 0.0701803342, 0.0850462243, -0.0099371858, 0.3179139495, 0.1214867532, -0.0466850661, -0.1563972980, -0.0710296184, -0.0193978176, 0.0037165906, -0.1531748176, -0.0088996636, -0.2749081850, 0.0110368636, 0.3429622948, -0.0735345483, 0.0527212545, -0.1530065686, -0.1677916348, -0.0061825132, -0.1600082368, -0.1478482634, 0.0430981517, 0.1642650366, -0.0360801965, -0.0434806868, -0.0602405034, -0.0676305965, -0.1776021421, 0.0182955991, -0.2917905152, 0.0074154595, -0.0854840577, 0.1602641791, 0.1773721725, -0.1112677902, -0.0949114189, -0.0866390318, -0.1971199363, 0.1141787395, 0.2272622138, -0.1078593060, 0.1631797850, -0.1013756171, 0.0408424437, 0.0074443775, -0.1624769866, 0.0891563445, 0.0325245075, 0.0160963163, 0.1711472124, -0.0966736823, -0.0164495949, -0.0296692252, -0.1254837513, -0.0675738007, -0.1421372443, 0.0308779459, 0.0187447798, 0.0862236694, -0.0476015359, -0.0014817556, -0.1188368276, -0.0421499610, -0.1920525581, 0.0041376767, 0.0467229337, 0.1771809757, 0.0549979769, -0.0232543554, -0.0210176837, -0.0924898013, 0.0254742764, 0.2227337062, -0.1761307865, 0.2119990438, 0.0497047454, -0.1860168278, -0.0560585782, 0.0659936219, 0.1679296792, 0.0067905937, -0.0817564428, -0.1337976754, -0.0450403020, 0.0647299290, 0.0793153271, 0.0826541409, -0.0990950838, 0.1323208809, 0.1208314002, 0.1471990794, -0.0540670566, 0.0428436436, -0.1292026490, -0.0145488754, -0.1179839224, -0.3267225027, 0.0438157544, -0.1433310658, -0.0195380729, 0.1037754864, -0.0538667962, 0.2643729746, 0.0845516324, -0.0409368575, -0.0170153324, 0.0781995282, -0.0849202052, 0.0909459963, 0.0666176453, -0.0184962526, -0.0068434305, 0.0895485505, 0.1726627499, 0.0228910651, -0.0105822878, -0.1363220215, -0.0569374077, 0.1338728219, -0.1526203454, 0.0991425589, 0.0038174833, 0.1646357477, -0.0281811021, -0.1931793243, -0.0136729870, -0.0479023457, -0.0419258252, 0.0841619223, -0.1197209284, -0.1359449625, -0.0036837105, 0.0596152470, -0.0104535436, -0.0020759760, -0.0671881586, -0.1314103007, -0.0431561060, 0.1311276555, 0.1673231125, 0.0887225643, -0.0204320848, -0.0755437985, 0.0376701690, 0.0033278340, -0.1085680872, 0.0398684777, 0.1151099578, 0.0765280053, -0.0941869840, 0.0202146564, 0.1881398112, 0.0398145393, -0.0325342044, -0.0036486748, 0.1035856530, 0.0878510624, 0.0089953542, 0.1155654117, -0.1280268133, -0.0087604346, -0.0864886269, -0.0356221944, 0.0026417086, -0.0397836268, -0.0036293028, 0.1016026735, 0.1678653210, 0.0399096087, -0.0738484338, -0.2151551694, -0.0483649410, 0.2006170899, -0.1437494904, -0.0370318145, 0.0912766010, -0.0388731882, -0.1061240658, 0.1444076896, 0.0329063758, -0.1030704379, -0.1208257377, 0.0831862763, -0.1954455227, 0.0294488277, 0.0058829645, 0.0728726014, -0.2144320756, 0.1289228648, -0.0741244778, 0.0062459051, -0.0753666610, 0.1225694716, 0.1449236125, 0.0405936278, 0.0639298782, -0.1870856434, -0.0569345653, -0.0430759788, 0.0189655423, 0.0433609821, 0.0076653226, 0.0753110200, 0.0530258939, -0.0124775516, -0.0712088794, -0.0093522621, 0.1002217904, 0.0557409376, -0.0212124791, 0.1037189886, -0.0033447864, -0.2094044834, -0.1162674278, 0.0534453243, 0.1052698418, -0.0218024366, -0.0578399636, 0.0289805532, -0.0409836993, 0.1650016606, 0.0410562418, -0.0138610285, 0.1016147658, -0.2056192607, 0.0979486108, 0.0181042124, -0.0854445696, -0.1516276151, -0.0097234957, -0.0496864431, 0.1318741143, 0.1711274534, 0.0061842068, -0.0705859289, -0.0796113387, 0.0479589887, -0.0822909847, 0.1274314076, 0.1167971045, 0.1393906921, 0.0356341973, -0.0360899419, -0.1342914104, 0.0283844378, 0.0205997359, -0.1010634080, 0.1172457337, 0.1952921301, 0.0352462120, -0.0916669294, -0.1149011180, -0.1484026909, -0.0649675801, -0.0147137176, -0.1394492239, 0.1265800595, 0.0398022607, -0.1705485880, -0.1854197085, 0.0575110056, -0.0539904498, -0.0213498492, 0.1732670665, 0.1100977808, -0.0026619416, 0.0046791574, -0.1151323766, 0.1003386155, -0.0099656116, -0.1209082305, 0.0537687019, 0.0415711105, -0.0103031080, -0.0201260392, 0.0707052499, 0.0103201382, -0.0109761721, 0.0553797372, -0.0127314124, 0.0184715614, -0.1399616748, -0.0875535533, -0.0489164740, -0.0057758531, -0.0546623580, 0.1021527499, -0.0206590760, 0.2019428313, 0.0510608628, 0.0195252523, -0.1182695702, 0.0859693661, -0.0035367727, -0.1360506117, 0.0490662232, 0.0121223861, -0.0461713746, 0.0110297352, -0.0459157154, -0.0766269490, 0.0639509782, -0.0206845514, 0.0301560611, 0.0788663030, -0.0306471959, -0.0487973914, -0.0248274170, 0.0346214920, 0.0182266608, -0.0034053475, -0.0358176827, 0.0624279976, -0.0804966837, 0.0737381279, -0.0748271868, -0.0670701563, -0.0596703961, -0.0100173950, 0.0243627205, -0.0353721790, -0.0123604462, -0.0612176098, -0.0520420037, 0.0192305744, -0.0174693987, 0.0821709037, -0.0355245844, 0.0241948590, 0.0248531848, 0.0531032681, -0.0160540640, -0.0531110466, -0.0038892105, 0.0819970667, 0.0435555428, -0.0068379343, 0.0690392405, -0.0246945769, 0.0715531856, -0.0718353465, 0.0418184847, 0.0704229176, 0.0753852427, 0.0340697467, -0.0428330265, 0.0029726252, -0.0136358961, -0.0569959953, 0.0486254245, 0.0612645149, 0.0340660959, -0.0771493390, -0.0537338033, -0.0013922602, 0.0157799348, -0.0760258287, -0.0513253957, -0.0815646276, -0.0517228581, -0.0645732433, -0.0228867866, -0.0062611774, 0.0583029836, 0.0065725297, -0.0079721287, 0.0370061174, 0.0446730852, -0.0162528008, 0.0597527325, 0.0058872327, -0.0732403547, 0.0640465319, -0.0002447441, -0.0634693503, -0.0002197176, -0.0473998524, -0.0368498825, 0.0688058287, -0.0602666363, -0.0492812954, -0.0085187107, 0.0530390739, -0.0000525042, 0.0337906331, -0.0057090595, -0.0053190440, 0.0364854783, -0.0211048126, 0.0144349560, 0.0397003517, -0.0518407300, 0.0421274975, 0.0101751760, -0.0264575407, -0.0644708425, -0.0373860523, -0.0337543339, -0.0000135526, 0.0754311979, 0.0614012778, 0.0579229295, 0.0714030266, 0.0371957794, -0.0747932643, -0.0228019357, -0.0704943761, -0.0350335501, -0.0668608844, 0.0554741919, 0.0116098821, 0.0486492664, 0.0759345144, 0.0635690093, -0.0078877509, 0.0098991096, -0.0067654327, -0.0380710922, -0.0772361159, -0.0655712411, 0.0073297694, -0.0032130703, 0.0157583058, 0.0154250190, 0.0623581111, 0.0373829305, 0.0712037385, -0.0084412843, -0.0277376585, -0.0030357167, 0.0404158384, -0.0069211349, 0.0328551158, 0.0142355114, -0.0383399352, 0.0182003230, -0.0781557634, 0.0013126507, 0.0009518415, 0.0190759301, 0.0048550516, -0.0073904842, 0.0493001342, 0.0329814553, -0.0483365878, 0.0785736293, -0.0296134464, -0.0060428157, 0.0152801573, 0.0691573769, 0.0310918912, -0.0458721220, 0.0178652257, -0.0776894242, 0.0641553402, -0.0503964797, -0.0254562385, 0.0410148054, 0.0427360535, -0.0121633783, 0.0814985484, -0.0056131631, -0.0244484991, 0.0567685366, -0.0035504624, 0.0507095158, 0.0671057999, 0.0729257166, -0.0314189568, 0.0405577719, 0.0773589462, 0.0750225633, -0.0719570071, 0.0126441196, 0.0250436142, 0.0025438964, 0.0330921561, -0.0341755599, 0.0715146661, 0.0805739015, -0.0294986591, -0.0453625061, -0.0702173188, 0.0693195164, 0.0454629958, 0.0416687950, 0.0082345083, 0.0284792706, 0.0066939965, -0.0767889470, 0.0648751855, 0.0632684827, -0.0399034731, 0.0757381618, -0.0687887818, 0.0097453073, 0.0815186501, -0.0687256381, 0.0054678544, -0.0561371818, 0.0627289563, 0.0503709465, -0.0013557822, 0.0570406765, 0.0548958778, 0.0731554329, -0.0450875163, -0.0046029687, 0.0409636423, -0.0169042721, 0.0626678914, 0.0433266461, 0.0362317413, 0.0795926452, -0.0180660710, 0.0024827346, -0.0279956199, 0.0438210219, 0.0766417086, -0.0002488494, -0.0489605181, -0.0365279242, 0.0629983693, -0.0765340477, -0.0698492825, -0.0379834883, 0.0336017758, 0.0248672888, 0.0504314303, -0.0349801630, 0.0710107684, -0.0037799403, -0.0628149509, 0.0650691092, 0.0795432478, -0.0593056977, -0.0367042720, 0.0098872855, -0.0518240333, -0.0768761784, -0.0387626961, 0.0333100632, 0.0590319932, 0.0681029558, 0.0628617853, -0.0384246521, -0.0011655241, 0.0247158483, -0.0023785532, 0.0572735816, 0.0479842573, 0.0156215206, 0.0334361121, 0.0288164094, -0.0355535559, 0.0078500509, -0.0170756280, 0.0115834400, -0.0661962330, -0.0182500556, 0.0769528747, 0.0144459158, -0.0060574114, -0.0197248906, 0.0361113548, -0.0772338435, 0.0555337518, 0.0164510459, 0.0774699599, -0.0710432753, -0.0407691635, 0.0680177957, 0.0557946265, -0.0534294881, 0.0474838614, 0.0578796566, -0.0340872891, -0.0013408735, 0.0171769485, 0.0531307459, 0.0016703680, -0.0320062563, -0.0532069206, 0.0183962733, 0.0050361976, -0.0408515222, -0.0563410670, 0.0536666512, 0.0599795431, 0.0615065843, -0.0587826893, 0.0363005251, -0.0582518801, 0.0464610904, 0.0793443471, 0.0776305795, 0.0569529235, 0.0058290511, 0.0341442525, 0.0641519129, 0.0096249804, 0.0645747185, -0.0703959689, -0.0871301889, 0.0828739703, -0.0326310918, 0.0377536565, -0.0898980945, 0.0169440117, 0.0192840621, 0.0380294099, 0.0181799382, -0.1435806304, -0.1381430775, -0.0536336973, -0.0315459222, -0.0842470005, -0.0097183939, -0.0058070533, -0.0401089154, 0.1279454082, 0.1921761185, -0.0766975880, -0.0484695844, -0.0738782510, 0.0468069650, 0.0739883035, 0.0200079102, 0.0094224438, -0.0347515531, -0.0201377925, -0.0796018168, -0.0096451342, 0.1860032976, 0.0165317860, 0.0198629871, 0.0862587169, -0.0609792210, 0.0745207071, 0.0974865705, 0.0198611598, 0.0200864431, -0.0105906185, 0.0092143090, 0.0443320200, 0.0317803323, -0.1307369620, -0.0029075209, -0.0197892711, 0.0470917374, -0.0648930296, -0.0040729572, -0.0823863819, -0.0587217845, 0.0618330799, 0.0104625346, 0.0491834842, -0.0359457508, 0.0207611173, 0.1498572975, -0.0011820014, 0.0224311873, 0.1681761593, 0.0309620984, 0.0761719123, -0.1133199409, 0.0533797257, 0.0834931210, -0.0332468823, -0.0091639347, 0.0126098692, -0.0106375869, -0.0187073424, 0.0944704339, 0.0103279278, 0.0396113917, 0.0114392163, -0.1613260210, -0.0020742968, -0.0366347730, 0.0274063144, 0.0611931421, 0.0046728947, -0.1201650500, 0.0349511914, -0.0356509387, 0.0391999334, -0.0675724968, -0.0120315030, -0.0328981504, 0.0627621338, 0.0604090504, -0.0014395933, 0.1747457981, -0.1474563479, 0.0991893560, 0.0130427741, 0.0710895732, -0.0376969352, 0.1238627657, 0.1070699096, 0.0443047658, 0.0164024271, -0.1388321519, 0.1599904299, -0.0279853567, 0.0042884033, -0.1119056568, -0.1752204448, 0.0183380451, 0.0989854261, -0.0529844463, -0.0229428448, -0.0969033390, -0.0170412622, 0.0032544367, 0.0080996808, 0.0907895789, 0.0266128685, -0.0158302076, 0.0187587123, 0.1323446482, -0.0871330947, 0.0692684054, -0.0642608777, 0.1937867701, 0.1735332310, 0.0544761829, -0.0291086026, -0.0348457098, -0.0729804784, -0.0647774413, -0.0572534651, 0.0509668402, 0.2147092372, 0.0765301883, -0.0144830290, -0.0578148775, -0.1295880079, -0.1279012710, 0.0311715957, -0.2085517943, 0.0475147292, 0.0121303797, 0.0085036661, -0.1103109568, 0.0350368023, -0.0459049046, -0.0047974642, 0.1506569982, -0.0292272568, 0.0437605903, -0.0562499613, 0.0471364371, 0.0982813463, -0.0499276631, 0.0922519341, -0.0653098971, -0.0047386228, 0.1111479700, 0.1173957959, -0.0373979919, 0.0413696244, -0.0780906007, 0.0016200554, -0.1751305908, -0.0355294943, 0.2193937898, -0.0579036474, -0.0427530333, -0.0874152035, -0.1861876547, -0.1153097227, 0.0371612944, 0.0593294539, -0.1790311486, -0.0933698565, -0.0445619747, -0.0136289215, 0.0622733608, 0.0857929736, 0.0236335658, 0.1286454499, 0.1751423478, 0.0636564866, -0.0346796215, -0.0582172535, 0.2021173090, -0.0629108623, 0.0461218134, -0.0153261051, -0.0638786480, 0.1129258871, 0.1239642128, 0.0106882285, 0.0242981371, 0.0254196040, -0.0165808834, -0.1313268840, 0.1507211030, 0.1191155016, -0.0256847758, 0.0719302371, -0.0486000255, 0.1353320628, -0.0909681022, -0.0258305408, 0.0339331292, -0.2654509842, -0.0402728803, 0.1509573907, 0.0023206002, -0.1731911302, 0.0438349992, 0.0491003320, 0.1036590412, -0.0278740525, 0.0234232899, -0.2247617841, -0.0947332755, -0.0507273525, 0.0836912617, -0.1011342183, 0.1550850123, -0.1350708604, 0.1470236480, 0.0993727595, 0.0609456412, 0.0578166768, -0.1122426391, -0.1293910891, -0.0007975521, -0.0401425920, 0.1777144223, 0.0249550883, 0.2170100212, -0.0248067863, -0.0114580337, -0.0552076660, 0.2310165316, 0.0461161397, 0.1225735545, 0.1126066893, -0.1396886706, -0.1333531290, -0.1510197073, 0.0436636508, -0.1421429813, -0.1497916430, 0.1916677207, -0.1851797253, -0.0221701004, 0.0505258664, 0.1858457178, 0.0359656028, -0.0070522390, 0.1491029412, -0.0200628527, 0.0864694491, 0.2048415393, -0.0490860231, -0.0584256947, 0.2022427022, -0.1136526316, 0.0689682811, -0.2362214029, 0.2055016905, 0.0966142491, 0.0629383847, -0.0551366843, -0.2349641919, -0.0469689853, -0.1404267848, 0.0063012284, 0.1575668156, -0.2460600138, -0.0449674092, 0.1216120422, -0.0286640879, 0.0794268772, -0.0154353986, 0.0074639292, -0.0808368400, 0.1421698183, -0.0013676006, -0.0519896038, -0.0791598633, 0.2115702629, -0.0356686823, -0.1290824562, 0.0192440934, 0.1222498566, 0.2538907528, -0.0595746711, 0.1544267982, 0.0060442258, -0.0775486603, -0.0180525389, -0.1240094081, 0.2481768727, 0.3659752607, 0.0920383260, -0.0142434621, 0.1553618014, -0.0413261540, -0.2753739655, 0.0290110987, -0.1198757142, -0.2124227583, -0.0533217490, 0.0517959036, 0.1006987914, -0.0997359082, 0.1601005644, 0.0380211733, -0.0589823350, -0.1265168637, -0.0086501678, -0.0604910553, -0.0520008542, -0.0815968812, -0.0971910208, -0.1133624017, 0.0327266529, -0.1830618531, 0.1772662252, -0.0922877938, -0.0860418677, 0.0012141527, -0.1086715832, 0.0090102004, -0.0064889542, -0.0677058697, 0.1636059582, 0.0517633148, 0.0724251941, 0.0439309217, 0.0637802482, -0.1389263123, 0.1202664226, 0.2036667317, 0.0265254080, -0.0025997406, -0.0545452423, -0.0784860924, -0.2390988618, -0.0961146355, 0.0393524431, -0.0647366568, 0.1879504621, -0.2809904814, -0.1434705257, 0.0351570770, -0.1170651838, 0.0641967282, 0.1006798893, 0.1836982965, 0.0301250666, 0.0985184833, 0.2755410373, -0.0338939689, -0.0896238983, 0.1122279391, -0.0720050409, -0.1047450453, -0.1969500184, 0.1181999743, -0.0160030257, 0.0709334016, -0.1029221565, -0.0833471343, 0.0804038942, -0.1644948721, -0.0690975785, 0.1814469546, -0.3301522732, 0.0012029911, 0.1487394422, -0.0600767322, -0.1265003979, -0.0201232564, 0.0877406448, -0.1092170700, 0.1111119464, -0.1435334384, -0.0874071121, 0.0258355215, 0.2941022217, -0.0057836892, -0.0152256535, -0.0677331388, 0.2054605037, 0.1566845775, 0.0616743602, 0.1273521334, 0.0705479011, -0.1351085007, 0.0960581601, -0.1524404585, 0.1929885596, 0.3576605916, 0.1058093980, -0.1325209141, 0.2123556286, -0.0056284838, -0.2887116075, 0.0120806675, -0.0217607450, 0.0052490761, -0.1214714199, -0.1061131582, -0.1025091708, -0.1823561490, 0.1750209183, 0.0574638583, -0.0032258180, -0.0039689373, 0.1235812306, -0.0421534255, -0.1032361016, -0.0115002766, -0.0073845577, -0.0642676726, -0.1058106869, -0.2094478011, 0.1307735294, -0.0883399546, -0.2568284571, 0.0136601469, -0.0901468098, -0.0178671237, -0.1559555531, -0.0405673012, 0.0189019646, 0.0991224349, 0.0102537144, 0.0486322492, -0.0166446231, -0.1876633018, 0.1018089876, 0.1600454450, -0.0948406979, 0.0207048953, -0.0278189518, -0.1229180545, -0.2919344306, -0.0816747695, 0.0693249851, -0.0159242153, -0.0151834758, -0.1796278507, -0.0991050452, -0.0581035577, 0.0228340607, 0.0626387745, -0.0758835301, 0.1196592301, -0.0153116062, 0.0252540633, 0.1052565202, -0.0910735130, -0.1352546364, 0.0697257295, -0.0321444757, -0.1182172298, -0.0029304004, -0.0151657844, 0.0090938099, 0.0245775394, -0.2704641521, -0.0374391153, 0.1063458323, -0.0145159457, -0.0357240811, 0.0544310957, 0.0424081497, -0.1320547312, 0.3053328395, -0.1356224567, -0.0384782813, -0.0354927294, 0.0866865739, 0.0531864986, -0.0576776080, 0.0537991077, 0.0367269963, -0.0705537423, 0.2934796214, -0.0333269536, -0.0504853204, -0.1328182667, 0.2510040402, 0.1137028784, -0.0350520052, -0.0385985710, -0.0243581627, -0.1920848340, 0.0020305994, -0.2327742130, 0.0620262697, 0.2045649439, -0.0108873751, -0.1855178624, 0.0660457835, -0.0420357697, -0.2803390920, 0.0863541067, -0.0149598485, -0.1272718608, 0.0008757077, -0.0079695657, -0.1129077524, -0.2081128806, 0.2008990049, -0.0949640945, -0.1349437833, 0.0498609282, 0.2117829025, -0.2190989405, 0.0463055708, 0.0905308872, 0.0617213845, -0.1263157278, -0.1994758695, -0.2106624693, 0.2128880322, 0.0163661335, -0.0720165223, -0.0646926910, -0.2516888976, -0.0432009287, -0.1508677006, -0.0033771875, 0.1415112615, 0.1826161742, -0.0445450544, -0.0264814030, 0.1092100963, -0.2185724229, 0.1192676201, 0.0717421398, -0.0207832046, -0.0337391123, -0.0485543683, -0.0536428243, -0.1891576201, -0.1249611154, 0.0619666278, 0.0261679720, 0.0108350534, -0.2076114863, -0.0588197336, 0.0241515078, 0.0463224873, -0.0000411727, -0.0596708581, 0.1419661492, 0.0263120793, 0.0514548346, 0.1264089346, 0.0800935775, -0.0895087570, 0.0618037060, -0.1299615055, -0.0548327826, 0.1245959178, 0.0818762779, -0.0769523382, 0.0483417697, -0.1593107283, -0.0806516036, 0.0196919572, -0.0925203338, -0.0753076896, 0.1844168156, 0.0198081266, -0.2141761631, 0.1781858057, -0.0959642231, 0.0581205674, -0.0174034797, 0.0417553112, 0.0119629195, -0.0167942066, -0.1009311303, -0.1043171063, -0.0181464460, 0.3558048010, -0.0272100940, 0.0009949125, -0.1683351845, 0.1803031564, -0.0033874423, -0.0402692482, -0.0315078869, 0.0640999675, -0.2414996475, -0.0196083896, -0.1402768344, -0.0002772745, 0.1424558908, 0.0394709110, -0.0074302275, 0.0053810431, -0.0289242398, -0.0911425650, 0.1165439710, 0.0201925244, -0.0376044028, -0.1063237190, 0.0464905314, 0.0312704034, -0.0955038220, 0.0550048240, -0.0879499093, -0.0848897547, -0.0465591587, 0.1406460851, -0.1091957539, -0.0184784532, 0.0035055517, 0.0811554268, -0.0410769917, -0.0911584795, -0.0381583907, 0.1428945810, -0.0062124655, -0.1080202758, -0.0661317557, -0.2803182602, -0.0788514093, -0.0792212784, -0.1440032125, -0.0296558645, 0.1694366187, -0.0461860336, 0.0128641492, -0.0146271251, -0.1658551246, -0.0142399482, 0.0550312810, -0.0975901857, 0.0537238419, 0.1337796748, -0.0124387732, -0.0370426103, -0.1506842673, 0.1043065414, -0.0419424735, 0.0590680279, -0.2006458044, -0.0978383049, -0.0450633056, -0.0421689004, -0.0420376286, -0.1064210832, 0.1837230474, -0.0923730806, 0.0774906576, 0.0271834750, 0.0671806112, -0.0842825174, -0.0654759109, -0.1057574973, 0.0690104663, 0.1688354313, 0.0464115068, -0.1111086681, 0.0087981448, -0.1630743295, -0.0143539766, -0.0222031586, -0.0357153714, -0.0433164053, 0.0693137720, 0.0394432992, -0.1338796169, 0.1320833266, 0.0514273345, -0.0706427246, 0.0422122441, -0.1155162454, 0.1250431687, 0.1007267982, -0.0302415546, -0.0756255910, -0.0637117475, 0.1875794679, -0.1073144153, -0.0100712730, -0.0024147946, 0.1426120996, -0.0105162086, -0.0139686633, 0.0977463648, 0.0420464911, -0.2463506311, -0.0393471196, -0.1532710791, -0.0325488783, 0.1589073688, -0.0097403666, 0.0186435450, 0.0807180330, -0.0238274038, 0.0014845051, -0.0174270347, -0.2716911137, -0.1384973377, -0.1033451557, -0.0499307960, 0.1619599164, -0.1557223648, -0.0077415332, -0.0033831371, -0.0036632500, 0.0625086874, 0.1994652301, -0.0090394150, 0.0804249942, 0.1068727821, 0.0725056306, -0.1271336526, 0.0132149206, -0.0389019400, 0.0942308381, -0.0027328751, -0.0622444935, -0.1881063432, -0.4077167511, 0.0450005978, -0.0482740663, -0.1111798584, 0.0471691303, 0.0611417964, -0.0887601003, -0.0779847652, 0.0097977361, -0.1219002232, -0.0897335112, 0.0226790793, -0.0855965018, 0.0478810109, 0.1033573002, -0.0038685522, -0.0514451377, -0.0810265318, 0.2049454451, -0.0505919941, -0.0476621464, -0.0928577557, 0.0537021831, 0.0487705246, 0.0683298036, -0.1032704934, 0.0455888920, 0.0563356467, 0.0361103415, 0.0154510587, -0.0140314866, 0.0669916272, 0.0604755953, 0.0463444702, -0.1645871848, 0.0422208980, 0.1942714006, -0.0738153830, -0.0139275910, 0.0973614305, -0.3371826112, 0.2345530838, 0.0973791853, -0.0210916847, 0.0716618598, -0.0874752104, 0.0504941344, -0.2192524821, 0.1406589299, -0.0164014418, 0.0690480024, 0.0027406737, -0.0832108632, 0.1485964209, -0.0489212126, -0.0143162720, 0.1098420322, 0.1207750291, 0.2574208677, -0.0270416345, 0.0227432940, -0.0668346360, 0.0986206234, 0.0568194799, -0.0542515591, -0.0778224468, -0.0410532840, -0.2576059699, -0.0604017451, -0.0708891898, -0.0451733992, 0.0648415089, 0.0226493385, 0.0161659773, 0.0924591869, 0.0583776422, -0.0684715956, 0.0885625258, -0.1339582354, -0.0883528814, -0.0869895890, 0.0662638471, 0.0530140623, -0.2543994188, 0.0147704007, -0.1959462464, -0.0730447993, -0.0675438792, 0.2133697271, 0.0583147369, 0.1247756705, 0.0137881907, -0.0330941714, -0.0892153755, 0.0819545165, 0.0230813529, 0.1290732026, -0.0133766336, -0.0755069777, -0.0099199004, -0.3050639033, 0.0325232819, -0.1868292689, -0.1657502502, 0.0280021150, 0.0445653759, 0.0437499098, -0.0104980543, 0.0687543824, -0.0077233762, 0.0548761971, 0.0276269317, -0.0356434546, 0.0857705101, 0.1716400832, -0.0062490460, -0.0783924237, -0.0462163314, 0.0397965387, -0.1557820290, 0.0016774510, -0.0221350491, -0.0226478819, -0.0128224613, 0.1250421405, -0.0576872900, 0.0943993554, -0.0024534496, -0.0429711938, 0.0583708547, 0.0680283383, 0.0926010758, 0.0341397598, 0.0355996676, -0.1364742815, 0.0674889013, 0.1697822958, -0.0046457509, -0.0902707353, 0.0005323088, -0.2800746262, 0.0203224439, 0.1071212217, 0.0835966840, -0.1640138328, 0.0712168515, -0.0163814370, -0.2103251815, 0.0358150788, 0.0980494320, 0.0556155406, -0.0014675463, -0.1866005212, -0.0338096023, 0.0307046771, -0.0867413282, 0.0465376973, -0.0686753765, 0.2677972913, -0.0010283794, 0.1184218079, 0.0092612794, -0.0244266409, 0.2211920023, -0.0420330986, 0.0124624129, -0.0028130505, -0.2835561037, -0.0309270248, -0.0603492297, 0.0559695363, 0.2634766102, 0.0394739769, 0.1839555055, -0.1256324947, -0.0195525363, -0.0240766704, -0.0145549532, 0.0092303893, -0.1094559953, 0.0296887271, -0.0330103934, 0.0570655614, -0.1396239102, -0.1190091372, -0.1120757237, -0.0200955272, -0.1189667955, 0.0937213674, 0.1187298894, 0.0450231917, -0.1092745885, 0.0509448498, -0.0169553757, 0.1031401232, -0.0216522329, -0.0174522214, -0.0018075306, -0.0343071595, 0.0486511774, -0.3893771470, -0.0375787839, -0.1485527009, -0.0258141719, -0.0599122643, 0.1109214276, -0.0784832463, -0.0233804323, 0.1124814749, -0.0425762720, -0.0696391538, -0.0159421377, -0.0225818362, 0.0402066968, 0.1001711115, 0.0026119500, 0.0328786895, -0.0478832573, -0.0622821078, -0.0208478160, -0.0795132145, -0.0208279695, 0.0690529346, -0.0956884325, -0.0977765620, -0.0093588643, 0.1780360788, -0.0440079570, -0.0542456545, 0.0610059276, 0.1237040535, 0.0253280941, 0.1483083963, 0.1110190526, -0.0239753816, -0.0692130402, 0.1194968820, -0.0068577398, -0.0483680964, -0.0439758152, -0.1431934834, -0.0650251359, 0.0038947677, 0.1077078953, -0.0393386222, -0.0654841736, 0.1693915278, -0.2163175493, -0.0912434608, 0.2285060287, 0.0005311072, -0.0639120340, -0.0088444334, 0.1372135431, -0.0066313394, -0.0435215421, -0.0731888190, -0.0220860559, 0.1543450058, -0.0489003509, -0.0053292792, -0.0342916399, 0.0274099018, 0.0898989066, -0.0216569845, 0.0214316342, -0.1160323843, -0.2181666344, 0.0119154043, -0.0343390070, 0.0487011671, 0.0141853262, 0.0909134820, 0.0833590180, -0.1378698945, 0.0210483689, -0.0628219321, -0.0704311803, -0.1192750782, -0.0482320301, -0.0365507603, 0.1216785535, -0.0070591336, 0.0238068793, -0.0095422072, 0.0745758787, -0.0943002850, 0.0164108109, 0.1778008044, 0.1915781349, 0.0987872034, -0.1984026730, -0.0523625873, 0.0152522707, 0.0831736401, 0.0218872949, 0.1443153620, 0.1317682713, -0.0876673684, 0.0352246501, -0.2568910420, -0.1232488081, -0.0055471892, 0.0723382980, -0.0514533296, 0.0023194698, -0.0126237571, -0.0899914950, 0.1715651453, -0.0982151181, -0.0220783819, -0.0584347621, -0.0558267608, 0.0365126021, 0.0770566538, 0.0581394546, 0.0007387297, 0.0809379891, -0.0600998662, -0.0461045392, -0.1935935616, 0.0311672129, 0.1043626592, -0.0607643872, -0.0707017779, -0.0465739183, 0.1717919707, -0.1697127968, -0.0756687075, -0.0333868675, 0.0543498881, 0.0673386529, 0.1592975408, 0.1388584822, 0.0206680726, -0.0416978225, 0.1036189348, 0.0507971533, 0.0161084943, -0.0868435949, -0.1333348453, -0.0303928219, 0.1770087630, 0.1556551605, -0.0296481177, -0.0884738788, -0.0194103848, -0.0992088690, 0.0518773794, 0.0317329839, -0.0007576051, 0.0856655315, 0.0075376187, 0.1490399092, -0.0560527593, 0.0292501859, 0.0613681003, 0.0239837114, 0.2710497677, -0.1664914638, -0.0398561172, -0.1047315374, -0.1687676758, 0.0080121318, -0.1706784666, -0.0045355428, 0.0258000195, -0.2821834385, -0.0133160753, -0.1587846577, -0.0417603441, -0.0773839280, -0.0569706447, 0.1725029349, -0.0049227304, -0.0417197160, -0.0308290739, -0.0330964513, -0.0891725570, -0.0069667436, -0.0015381825, 0.0695840940, -0.1405793875, -0.0146631347, -0.0382228717, 0.0328496434, -0.0791071355, 0.0336107984, 0.0833294913, 0.1320319176, -0.0071946518, 0.0218272880, 0.0346345529, 0.1115720123, 0.0074370313, 0.0666732863, 0.0474381372, 0.0935058221, 0.0233477037, 0.1098711416, -0.4506466091, 0.0131351231, -0.0624899194, 0.1002758890, -0.0155376997, 0.0596691296, -0.0403158814, -0.2278427184, 0.1347338259, -0.1341833323, -0.0204437990, 0.0343885161, -0.0327430964, 0.0121237366, 0.0908880010, 0.0116624562, -0.0689222887, 0.0789112076, -0.1812317520, -0.0717231557, -0.1264179945, 0.0339722484, 0.1793927252, -0.0169132333, -0.0488024577, 0.1106438637, 0.1443421543, -0.0448309295, -0.0865827575, -0.0335811637, 0.0387116820, -0.0288343951, -0.0613440052, 0.0323058814, -0.0133253327, -0.0627325028, 0.0530610532, -0.1429138184, 0.0713953748, 0.0111119132, -0.1241656691, -0.0310381614, -0.0300381444, -0.0081229210, -0.0947317109, -0.0390162654, 0.0841742232, -0.0978029445, -0.0313605629, 0.0387735181, -0.0999824852, -0.0124230031, 0.0274679326, 0.1837826818, -0.1668282002, -0.0991312563, -0.0755544454, -0.1208148599, 0.1274289042, -0.0877937600, -0.1022209451, -0.0224220771, -0.2145779878, -0.0049328506, -0.0781506151, 0.0182809699, -0.0433311015, -0.2422782332, -0.0690379292, -0.1710608602, -0.1143011376, -0.0404563248, 0.0887302086, 0.1701133549, -0.0611145087, -0.1435258687, 0.1488793939, 0.0016716463, -0.0162315425, -0.0247001443, 0.0236042999, -0.0284401253, 0.0248524286, -0.0581760556, -0.0481499881, 0.0356896780, -0.0059627090, -0.0610987619, 0.2209883034, 0.0578141734, -0.0223966185, 0.0066668470, 0.0145534286, 0.1703733057, 0.0441624932, 0.0238512103, 0.0437189639, 0.1507488787, 0.1411819607, 0.1106539667, -0.3012967110, -0.0898373872, -0.0752757266, 0.0754508451, -0.0885631964, 0.0436030030, -0.0141843287, -0.1046805754, 0.0451041758, 0.0103126504, 0.0021572886, 0.0960730761, -0.1212788820, -0.0897548646, -0.0901227444, 0.0146157742, -0.0592907220, -0.0199431106, -0.1120073423, -0.0625565797, -0.0106692761, 0.0402246825, 0.1264951080, 0.0408354364, -0.0066814329, 0.1508555263, 0.0779659003, -0.1338673979, 0.0293510035, -0.0004748197, -0.0582796112, -0.0323450752, -0.1270778179, 0.0279133338, 0.1918234527, -0.0302542411, 0.0814238042, -0.0914703459, 0.0605061688, -0.0239178184, -0.0104379589, -0.0421451740, -0.0944851860, 0.0237498172, 0.0373715945, -0.1223905012, 0.0633926764, -0.0532064363, -0.0053037773, -0.0821132287, 0.0030620384, 0.0230669919, -0.0309603512, 0.0916510597, -0.1660830379, -0.0036371269, -0.1017787308, -0.2027968764, 0.2552841008, 0.0077202939, -0.0093098776, 0.0559570231, -0.1055940986, -0.0645961016, -0.1864052713, 0.0450604595, 0.0260298103, -0.2202766687, -0.0577419735, -0.0912956372, -0.0308078695, -0.0304017849, 0.0208233874, 0.0202785358, -0.2364730984, -0.1351261139, 0.0002376569, -0.0215211771, -0.0115886070, -0.0034555560, 0.0519358478, 0.0784625411, -0.0509758294, -0.0881170779, -0.0909204260, 0.0929901227, 0.0468843207, 0.0944884941, 0.1575889438, 0.0308494437, -0.0762614682, -0.0932976529, -0.0419848897, 0.0716098845, 0.0678071082, 0.0765331686, 0.0169155747, 0.0598145463, -0.1024478078, 0.1412438452, -0.1300009489, 0.1820879579, 0.2005349398, 0.1203336045, 0.0144911651, 0.0259722415, 0.0378926508, -0.0163034014, 0.1016756669, -0.1804308146, -0.0177031346, -0.0241661221, -0.1532400846, -0.0770615339, -0.0383344889, -0.0211787783, -0.0679978132, 0.0355907790, -0.0830136687, -0.1213174909, -0.0750936717, -0.0571669526, 0.0434749238, 0.1014582515, -0.0698262826, 0.0253624842, 0.1025683433, -0.0399627499, 0.0408521071, 0.0644220933, 0.1033273265, -0.0567195304, -0.0932300240, -0.0797741562, 0.2003371418, -0.0542776249, 0.0244828537, -0.0606690869, 0.0444970690, -0.1272361726, 0.0639629439, -0.0983424783, -0.0690613240, 0.0629120544, -0.0544814914, -0.0492148325, -0.0469646864, -0.0492603034, -0.0884600356, -0.0803434625, 0.0820448548, -0.0672976673, -0.0002803125, 0.0913790315, -0.3046047390, -0.1286653578, -0.0414283201, 0.0024368099, -0.0294279624, -0.0234645866, 0.0865118355, -0.0141852153, -0.0865984783, -0.0381967090, -0.2053057551, -0.0970854983, -0.0499828160, -0.2281306535, 0.0228975769, -0.1617927551, 0.0686629042, -0.1531481296, 0.0580489263, 0.0374769568, -0.1387971491, 0.0312062241, 0.0775949955, 0.0044217119, -0.0190413315, -0.0489635766, -0.0167598240, -0.1361753345, -0.1487766504, -0.0153265819, -0.0423152596, 0.0495185256, 0.0485092737, 0.0220373943, 0.1850610822, 0.0405547619, -0.0765909925, -0.0954286382, 0.0693025216, 0.0657888427, 0.1248727962, 0.0496229865, -0.1279658079, 0.1462073922, -0.1461853087, 0.0512296483, -0.0292685907, 0.1727115959, 0.1536896825, 0.1062319577, -0.1771750897, 0.0818284899, -0.1221473813, 0.0626094565, 0.1825596392, -0.1251395494, 0.0663308576, -0.1366724223, -0.2444711626, -0.0555284917, 0.1054144502, -0.0085166600, -0.1367641389, 0.0452214442, 0.0032514366, -0.1005655155, 0.0619794987, 0.0217299554, 0.0177497081, 0.0991874635, 0.0592800565, 0.0691350400, 0.0875740871, -0.1322814226, 0.0111805471, 0.0453915000, 0.1279948503, 0.0495012254, -0.1517206132, -0.0261989050, 0.0053640706, -0.0616141297, -0.0435637683, -0.1424212903, 0.1328069121, -0.0660240203, -0.0422269069, -0.2041311115, -0.2169900537, 0.1518349797, -0.1338991970, -0.0128354384, -0.0413957946, 0.0708902404, -0.1367056817, -0.2390254289, -0.0858664513, -0.0184042957, -0.2118300796, 0.1228749305, -0.1597753763, 0.0789918303, -0.0388290696, -0.1633666158, -0.0636546761, 0.0766625926, 0.1415277123, -0.0504507162, -0.0328964293, 0.0646953359, -0.0416310579, 0.0413757004, -0.0407471433, -0.1051560491, -0.0385755226, -0.0511281826, 0.0517667159, -0.1105007976, -0.0186065622, 0.1014782339, -0.0600387715, -0.1991884857, 0.0231158379, -0.0096901339, 0.1488760859, -0.1970080733, -0.0333633535, 0.0457597636, -0.1634275019, -0.0019944373, 0.0652649105, 0.0996017978, 0.1496883333, -0.0599218570, 0.1343602091, -0.0050353394, 0.1056413352, 0.0140953334, 0.0677505657, 0.0355259962, -0.0518715940, 0.0622193441, -0.0064919288, 0.1337231994, -0.1363118738, 0.0560130812, -0.1022166833, 0.0790670961, 0.0671524182, 0.0480913110, -0.1724167764, 0.0248882249, 0.0400862508, -0.0682261139, -0.0647224337, 0.0745028034, -0.0419751108, -0.1564805359, -0.0999738127, -0.0129841110, 0.0540151373, -0.0110881450, -0.1362562031, 0.0889134854, 0.0034260435, -0.1195520982, 0.0635629296, -0.1484616995, -0.1118997633, 0.1020722389, 0.0874803364, 0.0519959629, -0.1072107852, 0.0107075498, -0.0725259855, 0.0084259426, -0.1747378707, -0.0763907209, -0.1213238314, -0.0123241143, 0.0799967051, 0.0283203609, -0.1068456694, 0.0027743611, 0.2310924232, -0.0409568138, 0.0303768124, -0.3550627828, -0.1405948997, 0.2579153776, -0.1631397009, -0.0674555451, -0.1992806345, 0.0208240394, 0.0138022993, -0.0286620259, -0.1097589135, -0.1579523236, -0.1964087933, 0.0186312869, -0.0686469078, 0.0424305089, -0.0577819943, -0.0949823558, 0.0990514234, -0.0243290849, 0.0968951434, 0.1321288645, -0.1887801141, 0.0201958772, -0.0251169056, -0.1841029972, 0.0181231853, -0.1282376200, -0.0207827836, -0.2061747015, 0.1502730399, -0.1582841426, -0.0428733118, -0.0103903217, 0.1525254399, -0.0919518694, -0.0745583326, -0.0212572273, -0.0527278446, 0.0285107493, 0.0080948304, -0.0875755399, -0.1144161671, 0.0788808167, 0.0141254924, 0.1380611211, -0.0761672035, 0.0312712379, 0.2707118094, -0.1894736588, 0.0483790487, 0.1329718083, -0.0098025696, 0.0111381738, 0.0946491733, 0.0286686532, 0.1125993133, 0.0812258571, -0.0772737563, -0.0408173762, -0.0687389970, 0.1751460135, 0.0900104642, -0.0942090079, -0.3708290458, -0.1250757575, -0.1546569616, -0.0856154412, -0.0221815631, 0.0750771910, -0.1166453063, -0.2789626718, -0.1233978644, -0.0637262240, -0.0296963081, 0.0497425944, -0.0827190280, -0.0733197555, -0.1030935645, 0.1815861017, -0.1237208545, 0.0035440815, -0.0862905607, 0.0682117343, 0.0843955874, 0.0330240615, -0.0613687187, -0.0142611414, -0.0469861962, -0.0213748161, -0.2137733847, 0.0556857996, -0.3479952216, -0.0970684141, 0.1502651870, -0.0767929107, 0.0879649892, -0.0894722566, 0.0709577501, -0.0964463055, -0.0776865408, -0.2134968787, -0.0281058121, 0.1698639542, -0.1203105003, -0.0687015727, -0.1980769187, 0.0618100725, -0.0741958246, 0.0434664823, -0.1930882633, -0.1786793917, -0.1657103300, 0.1311371177, -0.0543787293, 0.2297663689, 0.0613410771, -0.1656335294, -0.0629006922, -0.1793120950, 0.1807516366, -0.0822961107, -0.2374367416, -0.0547593869, -0.0213823821, -0.2511859536, 0.0985039622, -0.0217853114, -0.0837553442, -0.0882614404, 0.0207427889, -0.0701605156, 0.0172414705, 0.1499233097, 0.1237443909, -0.0898244604, -0.1384926587, -0.0313238017, -0.1603923142, 0.1083368286, -0.0052531031, -0.1329393387, -0.0705442578, 0.1203344762, 0.0412105769, 0.0462062880, 0.0806501135, 0.0120123029, 0.0242368579, -0.0283627268, 0.0441451743, 0.0149610881, -0.0747507513, 0.0041485182, 0.1906020492, 0.1600639969, -0.0335701592, -0.0228524432, 0.0450778157, 0.0359677561, -0.0323674753, 0.0101738377, 0.0639676750, -0.1031191275, -0.3628500402, -0.0918796435, -0.2059282809, -0.0721191615, -0.1539861858, 0.2063405365, -0.1464236677, -0.2873620689, -0.0710250288, -0.1129923686, -0.0249708518, 0.2316904664, 0.0707546026, -0.0430273823, -0.1427694559, 0.1668401659, -0.2091239840, -0.0121438913, -0.1029075235, 0.0718283877, 0.0216739513, -0.0038475941, 0.0552054830, -0.0559061952, 0.0487549938, -0.0360796861, -0.2210035026, 0.1328932643, -0.4235741198, -0.2037934959, 0.2375396043, -0.1959232688, -0.1166024134, 0.0126398569, -0.1250078678, -0.1892164201, 0.0896306038, -0.2426021397, -0.0255972799, 0.3178760707, -0.0742370188, 0.0623388477, -0.1386418045, 0.0813974068, -0.0095211174, -0.0079552550, -0.1398681700, -0.2211701423, -0.1802513599, 0.0402823836, -0.0941269249, 0.0278209615, 0.0420003235, -0.2034020275, -0.1472065747, 0.1631573439, 0.1623874903, -0.0256641731, -0.3467609584, -0.0151106119, 0.0662225038, -0.3211300969, -0.1377208382, 0.0359252915, 0.0082374504, -0.1686436981, 0.0079387743, 0.0222425833, -0.0974586233, 0.1707015634, 0.1671737134, -0.0837493837, -0.2279578447, 0.0455389991, -0.2158852965, 0.1148626208, 0.0823053420, -0.1603581309, -0.1315143704, 0.0445481390, 0.1067381948, 0.0407874025, -0.0168390442, 0.0119602298, 0.0471167490, -0.0265662055, 0.0943642780, 0.0178672336, -0.0613408126, 0.0390008688, 0.0419587791, 0.0748896152, 0.0170076247, 0.0668435767, 0.0054257866, -0.0224695671, -0.0399548672, 0.1146352664, 0.0053230240, 0.0096028326, -0.3190465271, -0.0400907844, -0.1643146127, -0.0455568619, -0.0702748224, 0.1443148106, 0.0023281090, -0.4022073746, -0.2615056634, -0.1755739152, -0.0814002827, 0.2191750854, -0.0698820949, -0.0804118291, -0.1371168196, 0.0288897976, -0.1896601915, 0.0213252995, -0.0081860200, 0.0379009955, -0.0690124407, -0.0574711189, 0.0058622910, 0.1366693974, -0.0867123455, 0.0780209377, -0.0298889559, 0.1146160513, -0.1084790379, -0.1894723773, 0.0765646324, -0.0780118331, -0.0463984124, 0.1096089631, -0.0373703279, -0.0954913422, -0.0513544418, -0.0647900850, -0.2951760292, 0.2444521636, -0.0673683658, 0.1173490882, -0.0408192649, -0.0072126449, 0.1339975893, -0.0405491553, 0.0099998256, -0.2622987926, -0.2236815542, -0.1008937582, -0.0448910818, 0.1308151633, 0.0483196601, -0.0030610848, 0.0515082143, -0.0095589217, 0.1421437114, -0.0628308281, -0.2771725655, -0.0491413921, 0.0540232435, 0.0237940550, -0.0736685097, -0.1201933250, -0.0748446956, -0.2189330757, -0.0849940330, 0.0120870313, 0.0481701232, 0.2833967805, 0.2547900975, -0.2273010164, -0.1596918702, 0.1077167541, -0.2099297047, -0.0023759620, -0.0586089976, -0.0058534979, -0.0190344322, -0.0204515029, 0.1332981288, 0.0036602647, 0.0771140903, 0.0306861065, 0.0308666788, -0.0529014431, 0.1586783081, 0.1205472499, -0.1954281181, 0.0611733980, -0.0491734855, 0.0830738842, 0.1456156969, 0.1586998105, -0.0363342911, -0.0068529597, -0.2153042853, 0.0520865656, 0.0304417741, -0.0008239087, -0.0493880808, -0.0931341574, -0.1853220910, -0.0101991473, -0.1924644262, 0.3308334947, 0.2037761062, -0.1638050824, -0.0154087460, -0.1380687654, 0.0390059836, -0.0194606725, -0.1468846053, -0.0221424904, -0.0011533564, -0.0051769549, 0.0027027740, 0.0155838430, -0.1819950789, 0.0155402981, 0.0778824612, -0.1632016301, -0.0289793666, 0.0757214278, 0.0276979078, -0.0846024901, -0.2969513237, 0.0869634524, -0.1166678071, -0.1960445493, 0.0194926895, -0.1419227123, -0.1883539557, 0.0820121989, 0.0708527565, -0.0550721437, -0.0649200454, 0.1408424079, -0.0322935358, 0.3016174138, 0.0832672417, -0.1025924385, 0.1158224642, -0.0774534568, -0.0417110808, -0.0179011542, 0.0329270400, -0.2808676064, -0.0470387340, -0.1318291724, -0.1934466511, 0.0141995503, 0.1181687564, -0.0592504367, -0.0734657124, 0.0145829590, 0.0848829448, 0.1311264634, -0.1152813211, 0.0591215007, 0.0400163345, 0.1617227495, -0.0441023633, -0.2842731476, -0.0636975616, -0.1052653641, 0.1136584803, 0.1557787508, -0.0216961522, 0.1970673501, 0.0751760453, -0.0735893250, -0.0280613992, 0.0931953937, -0.0749955177, -0.0051637380, 0.0377031043, -0.0506957844, 0.0464002639, 0.0555897094, 0.2136171162, 0.0045397659, 0.0513343737, -0.0653267354, -0.0351287909, 0.0457587503, 0.0993375033, -0.0261285547, 0.0119904755, -0.0164203811, -0.0357733555, 0.0986659825, 0.0237158369, 0.0607324205, 0.1574167758, -0.0358838588, -0.1483108401, 0.1059067175, 0.0908563063, 0.0594421513, -0.0471165590, -0.0735984892, -0.0599348992, 0.0507703610, -0.0462152772, 0.1310295761, 0.1706924438, -0.1397906095, -0.0467709005, -0.0500610024, 0.1090417728, -0.0741626918, -0.2483388335, -0.0971716717, -0.0679072216, -0.1395990849, -0.1008626744, -0.1047418267, -0.1623143554, 0.0388462618, -0.0348142274, -0.0466735214, 0.0411435738, 0.0996085629, -0.0503808670, 0.0572069697, -0.0888614058, 0.2440484613, -0.3316887915, -0.0062785996, 0.1267614812, -0.2023792863, -0.0886611193, 0.0994822085, -0.0579106770, -0.0990201458, -0.0861159042, 0.0705257878, -0.0362485722, 0.2998512387, -0.1453320384, 0.0007032563, 0.0088546928, -0.0857769847, 0.0117819132, 0.0053633293, 0.0384830236, -0.0335367657, -0.1383320838, -0.1549891680, -0.0149467895, 0.0976727456, -0.0212150794, -0.0506431796, -0.0015268899, 0.0893146917, 0.1496961415, 0.1141605377, -0.0552917346, -0.0231913570, 0.0587280057, 0.3221428990, -0.0431986041, -0.2010783255, -0.0860893428, -0.1834970713, 0.1413798630, 0.2106344402, -0.0449288152, 0.2251437008, -0.0153878080, -0.0257611591, -0.1004988104, 0.1442127526, -0.1012992859, 0.1129641011, 0.0355115011, -0.0440210663, 0.0379130095, 0.0215056352, 0.2106784880, -0.0521144494, 0.0609711595, -0.0292319376, -0.1592726111, -0.0483275838, 0.0455221087, 0.0535639487, 0.1098714098, 0.1006501615, 0.0153602362, -0.0772591606, 0.0160411745, 0.0310100168, -0.0148188509, -0.1208796278, -0.1248914301, -0.0369403176, 0.1364199370, 0.0975837857, -0.0510126129, 0.1521030962, -0.0315769203, 0.0765237063, -0.0179188307, 0.1149463430, 0.2182358354, -0.1038027927, -0.0388623029, -0.0387661606, 0.0382391438, 0.0210541990, -0.1681712717, -0.0435734764, 0.0258712936, -0.1504402310, -0.0398250297, -0.1400452703, -0.0596447699, -0.0952994749, -0.1179749444, -0.0332893059, -0.0202659369, 0.1135602519, -0.0576477423, 0.0741094202, -0.0121168550, 0.1153883561, -0.2940180004, -0.0722362548, 0.1083395034, -0.1548446268, -0.0205621216, 0.0870283172, -0.0009698517, -0.2914691865, 0.1125267297, 0.0140887862, 0.0418219641, 0.3778713942, -0.1261461675, 0.1063696593, -0.0547800064, 0.0120433159, -0.2422819734, -0.0790051147, -0.0307784919, -0.1300209165, -0.2437093705, -0.2267720401, 0.0182802081, 0.0736947954, -0.0072032339, -0.0244954024, 0.0505302623, 0.0782586411, 0.0579506047, 0.0927634016, 0.0441765524, 0.1434092522, -0.0217122287, 0.2826377451, -0.1355850101, -0.2777965069, -0.1376878470, -0.1115829125, 0.2254051715, 0.2586996853, 0.0184540153, 0.2361300439, -0.1125762761, -0.2192943245, -0.0347048193, 0.0521819256, -0.1169055104, 0.0837021098, -0.2173195779, -0.0056454758, -0.2265529335, 0.0336816199, 0.3233076632, -0.0146422209, -0.0863114670, 0.0898484513, -0.0490902886, -0.0723760277, 0.0157995187, -0.1022180691, -0.0132123688, 0.0702459887, 0.0487450585, -0.0176892076, -0.0219519958, -0.0556596629, -0.0809550211, -0.0181690734, -0.0650432557, 0.0986136273, 0.2302058935, -0.0056768511, -0.0141503494, -0.0569533296, -0.0824079067, 0.0708453357, -0.0738127753, 0.1575290561, 0.2352696359, 0.0236500651, 0.1181902513, -0.1376625448, 0.1262174547, -0.0162776690, -0.1542507410, 0.0077961269, -0.0832078904, 0.0962636694, -0.1354424506, -0.0423314646, -0.0766213164, 0.0311876275, 0.0557823069, 0.0370339751, -0.0495306142, -0.1132703796, 0.0657960325, -0.0457625203, -0.1119167879, 0.0199841857, -0.1775397360, -0.0086905602, 0.1546110809, -0.0297135394, 0.1470101178, 0.0335082188, 0.1173436642, -0.1261915267, 0.1348200142, -0.0309487991, 0.0160284881, 0.2587917149, -0.0436905585, 0.1312695593, -0.0653721392, -0.0602523088, -0.1190910041, -0.0444824696, 0.0068911347, -0.0833363235, -0.0406201445, 0.0029532537, -0.0521800332, 0.0168769620, 0.0488795824, -0.0520379208, -0.0442878790, -0.0620401092, -0.0072896471, 0.1856415719, 0.0876768753, 0.0065875906, -0.0205551796, 0.0392069593, -0.0874772668, -0.1164861768, 0.1082982719, 0.0610401817, 0.1529769450, 0.0636492595, 0.0565548949, 0.1778211296, 0.2013695389, -0.1440495998, 0.0359301381, -0.0733066872, 0.1144906953, 0.1306124181, -0.0537903048, -0.0107582351, 0.0558481812, 0.0344255082, -0.0220130961, -0.0683951750, -0.1809055656, -0.0068338378, -0.1166810244, -0.0775227547, 0.0794612765, 0.1040202677, 0.0816927850, -0.0089483866, -0.1411963552, -0.0529317334, -0.0466345176, 0.0165075939, 0.1642992347, 0.0864783823, -0.0424795114, 0.0762879997, 0.1009177715, 0.0847110674, 0.0707231462, 0.0130802281, -0.1461479515, 0.0114018824, -0.0603904389, 0.2055004686, -0.0517049544, 0.0298894551, 0.1348000169, 0.0281930901, -0.1133283377, 0.0499247685, 0.1225102767, 0.0478367098, 0.1831375211, -0.0037875192, -0.0812474415, 0.0601154156, -0.0178038329, 0.0870382935, -0.1052014977, -0.0051688952, -0.2325472832, -0.0483876616, 0.0014999732, -0.1740363091, -0.0409215949, -0.0518749207, -0.1709683388, 0.1016843095, 0.2088567019, -0.0202979799, 0.0556806065, 0.0020639286, 0.0266617108, 0.1346957237, -0.0039035501, -0.1495570540, -0.0209494028, 0.0416109562, 0.0343980603, -0.0423997007, 0.1587669104, 0.0093300305, -0.0244221296, 0.0561552681, 0.0782555565, -0.1478592306, 0.0083782887, -0.0363739431, -0.0403879993, 0.1075810716, -0.0755373538, 0.0223987009, -0.0313993096, -0.0414704680, -0.2094783187, 0.0004321494, 0.1667465419, -0.0359431058, -0.0463450290, -0.0654280931, -0.0061584297, 0.0663636923, 0.0595995747, 0.1557791531, 0.1385957152, -0.0913945809, 0.0896367356, -0.0660191104, 0.0775591582, -0.1304017156, 0.0378517509, 0.0382759310, 0.1356805712, 0.0716934055, -0.1279827356, 0.1039785370, 0.0677321702, -0.0819207653, 0.0007334087, -0.0535352752, -0.0812861174, -0.0956787616, -0.1499136388, -0.0504697748, 0.1714384556, -0.0347850956, -0.0851349533, -0.1582013071, -0.0226933304, -0.0895709991, -0.0323409699, 0.0042401054, 0.0160084087, -0.0183726735, 0.1125418395, 0.0351383276, 0.0615260117, -0.0212678760, 0.0610836297, -0.1161408946, 0.0086288452, 0.0003041842, -0.1552411318, 0.1791790873, -0.2248228788, 0.0076976838, 0.0542339161, -0.0599964932, -0.1023048311, -0.0931361094, 0.1135965511, -0.0349774323, -0.0110299289, 0.0881619081, -0.1363500655, -0.0323429331, 0.0198268667, -0.0787120238, 0.0057078013, -0.0183936860, -0.1492021531, -0.0356763303, 0.0453044772, -0.0664292052, -0.1823345423, -0.1026981771, -0.0574922934, 0.0141153224, 0.0291477330, 0.0538094528, 0.0723915026, -0.0588617548, -0.0777560249, 0.0885317326, 0.0195361767, -0.0610451996, 0.0602821559, -0.0316006467, 0.0320993252, -0.0037397810, 0.0601336509, -0.0932582542, 0.0601545572, 0.0426646471, -0.0475889258, -0.0566069596, 0.0965515077, -0.1560415626, 0.0470847636, -0.0644405261, 0.0086400332, 0.0892627388, -0.0114561990, -0.0337680429, 0.0397936106, 0.0107261110, 0.0634285212, 0.1109792292, -0.0158373080, -0.0365230478, 0.0524182916, 0.1209108979, -0.0181030482, 0.1788084805, -0.0725573450, -0.0693052635, 0.1220010445, -0.0511388965, 0.0324296430, 0.0336541384, 0.0514343679, -0.0077236742, 0.0432249308, -0.0714906678, -0.0625099838, -0.0134663582, 0.0469426662, -0.0496853143, -0.0496167056, 0.0253820941, -0.0716674477, -0.0287590325, 0.0416442230, -0.0710879043, -0.0680017471, -0.0473532416, 0.0379982963, -0.0787291974, -0.0747526810, 0.0087624341, -0.0785716474, 0.0648279339, -0.0680974796, -0.0317504182, 0.0344439074, -0.0346947014, 0.0370303914, -0.0348909087, -0.0399836116, -0.0541431867, -0.0005064309, 0.0664038956, 0.0641812831, 0.0370516852, -0.0533459894, -0.0168972015, -0.0165361613, -0.0185536817, 0.0226201266, 0.0081029460, -0.0744780824, 0.0073700398, -0.0115213916, -0.0557473451, -0.0205477178, 0.0709657669, 0.0216008574, -0.0410896838, -0.0783962235, -0.0501228273, 0.0047392026, -0.0480195433, 0.0211053789, -0.0181630403, 0.0302383453, -0.0451844297, -0.0733569860, 0.0653401911, -0.0361635052, 0.0305856541, 0.0273676962, -0.0204183348, -0.0215199888, -0.0156599805, 0.0488906503, -0.0700685158, 0.0675491095, 0.0084045753, 0.0296072811, -0.0097836107, -0.0440029316, 0.0555378050, 0.0514501333, 0.0499190390, -0.0470988341, 0.0823264122, -0.0113997310, 0.0149174109, -0.0673939139, 0.0748089403, -0.0302213356, -0.0088150352, -0.0329396129, 0.0645343661, 0.0574784875, -0.0509783030, 0.0358968452, -0.0623656586, -0.0551558360, -0.0226559937, -0.0105921030, 0.0314169899, -0.0753024817, 0.0187309161, -0.0689384416, -0.0753186494, -0.0599034876, -0.0195415691, -0.0482425392, 0.0309847668, -0.0589797981, 0.0375386328, 0.0228930563, 0.0597794652, -0.0286467597, 0.0584946126, 0.0161942244, -0.0809016675, -0.0460818410, 0.0479339212, 0.0396874100, 0.0420713425, 0.0487933457, -0.0279462412, 0.0176472589, -0.0419956781, 0.0008124411, 0.0132508650, -0.0346060582, -0.0712888613, 0.0522085875, 0.0298415124, -0.0530575812, -0.0068728179, -0.0023045018, 0.0402812883, -0.0413583480, -0.0553107932, 0.0168036073, -0.0003961399, 0.0575356483, -0.0026593357, -0.0364243537, 0.0652313679, 0.0344603285, 0.0435192287, 0.0729884058, 0.0763470381, 0.0708377212, 0.0397044197, -0.0080301762, 0.0360097289, -0.0494108945, -0.0742410049, 0.0783194304, 0.0763574392, 0.0622754991, -0.0593086667, -0.0576686412, -0.0544397645, 0.0650430620, 0.0794665217, -0.0665339828, 0.0794801861, 0.0784211159, 0.0113715455, -0.0330235250, -0.0757794380, -0.0579673611, 0.0268098637, -0.0562821627, -0.0294217616, -0.0798243284, 0.0657469183, 0.0187593400, 0.0078099668, 0.0512328893, 0.0709931701, 0.0338178575, -0.0261419304, -0.0392527469, -0.0190770105, -0.0421658605, -0.0716645792, -0.0411657393, -0.0015902668, -0.0356440283, -0.0593579113, -0.0204257406, -0.0166676641, 0.0662920475, 0.0025571734, 0.0338201523, -0.0546191931, 0.0017079860, -0.0524506979, -0.0222624242, 0.0623569489, 0.0731135458, -0.0798651427, 0.0575442463, 0.0062128231, 0.0458890498, 0.0528654605, 0.0161678270, 0.0545996875, -0.0470877774, 0.0483334064, -0.0801566541, -0.0609551296, -0.0741691887, 0.0124144033, -0.0420475528, -0.0266460069, 0.0288665146, -0.0748736933, -0.0183445364, -0.0611953363, -0.0393844880, -0.0309837461, 0.0062560365, -0.0563025698, 0.0747568458, 0.0606916696, -0.0083074644, -0.0001806319, -0.0375624001, 0.0572110415, 0.0561396927, 0.0448432863, 0.0590641648, 0.0289270505, 0.0686829686, 0.0438805670, -0.0578364655, -0.0531773195, 0.0115537047, -0.0288219079, -0.0316160060, 0.0212524384, 0.0288796946, -0.0230769850, -0.0813092217, -0.0006666183, -0.0048883483, -0.0353467055, -0.0546835810, 0.0250187665, 0.0644527376, 0.0694877654, 0.0682570934, 0.0137071386, -0.0200206414, -0.0106066167, -0.0749425441, 0.0229897350, -0.0659800768, 0.0442954302, 0.0128619522, -0.0265207104, -0.0645068511, -0.0335218273, 0.0344517455, 0.0250961185, -0.0607390292, -0.0012460202, -0.0322450660, -0.0510613881, -0.0120508447, 0.0223384798, -0.0437231697, 0.0259848535, -0.0745382085, 0.0726536661, 0.0613535792, 0.0272244290, -0.0779309049, 0.0437125564, 0.0389665440, 0.0008624271, 0.0413044691, -0.0492260605, -0.0380776152, -0.0504683889, -0.0456500463, 0.0677178502, -0.0399660729, 0.0480778068, 0.0142052770, 0.0066551417, 0.0502067506, -0.0090073347, 0.0290300921, -0.0470073596, 0.0235867575, 0.0743555427, -0.0283268839, -0.0176819861, 0.0320223272, -0.0686571077, 0.0681840628, -0.0537556261, 0.0226063579, -0.0758170336, -0.0124298856, -0.0424573682, 0.0580720901, -0.0286631398, 0.0064852554, 0.1584235579, -0.0744837299, 0.0213444047, 0.0472736433, 0.0251355711, 0.0926549360, 0.0485384576, 0.0425141752, -0.0118290056, -0.0051828856, -0.0548480973, -0.0035977075, -0.0081560928, 0.0115338163, -0.0646459684, -0.0187030528, 0.0266174097, 0.0465967581, -0.0545111038, 0.0908827484, 0.1066946238, 0.0531175621, 0.0244352017, 0.1268442124, 0.0460332856, -0.0455395393, 0.0298243593, 0.0371862128, -0.0066607692, 0.0470783599, 0.0088075455, 0.0542252809, -0.0429675207, 0.0709881037, -0.0503241569, -0.1025655493, -0.1073197573, -0.0401784815, -0.0619214401, 0.0096810153, -0.0395718105, 0.0859675407, -0.0223619379, -0.1148845181, -0.0084840264, -0.0448115729, -0.0073211887, -0.0320467353, -0.1909341961, 0.1193469316, 0.0191362053, 0.0205265805, -0.0239411555, 0.0349589288, 0.0755278096, 0.0316546932, 0.0203727856, -0.0908567384, 0.0919233784, -0.1725364774, -0.0892258510, -0.0299995355, 0.0860352144, 0.1270395964, 0.0562705733, 0.0190517064, -0.0680013448, -0.1025500745, 0.0030327514, 0.0537455939, -0.0009442533, 0.0511077829, 0.0413601063, 0.0079635782, -0.0599105842, -0.0387758575, -0.0433096029, -0.0120155942, -0.0788568035, -0.0097615030, 0.0615847521, 0.1759332418, 0.0193045605, 0.0806153566, -0.0170589909, 0.0471411720, 0.0099069085, 0.0868645012, -0.0307358298, 0.0220585577, 0.0027113855, -0.1069962308, 0.0198921598, -0.0295182541, -0.0911219791, 0.0756452531, 0.1406585872, 0.0093772076, 0.0334722139, -0.0176392552, -0.0138961561, 0.0193209182, -0.1170091406, -0.0004751733, -0.0294237640, -0.0239669364, 0.0220956858, -0.0724142566, 0.1244164705, -0.0817738548, 0.0509452894, 0.0839025453, -0.0358549729, -0.0653925836, -0.0147927571, 0.0019684490, 0.0746157020, -0.0841776431, 0.0076173986, 0.0152944680, -0.1736856699, 0.0508959778, -0.1464873999, -0.0040137051, -0.0027867202, -0.0008064018, 0.1066178754, -0.0233470779, 0.0392319858, 0.0826766267, -0.1751527935, -0.0746485069, 0.0354090184, 0.0327216275, -0.0982522890, -0.1163735166, 0.2743065059, -0.0155381560, 0.0780963004, -0.0702698380, -0.0171415173, -0.2034131736, -0.0128391730, -0.0074272337, 0.0385320038, -0.0052563213, 0.0002721970, -0.1288775206, -0.0045630331, -0.1805785596, -0.0294471569, 0.1491982043, 0.2165489495, 0.0467226058, -0.0125059290, 0.0458206870, 0.0294667222, 0.0205292683, -0.0569283925, 0.0191027969, 0.1253200918, -0.0185960494, 0.0580134653, -0.0665013120, 0.0725851059, -0.0161565319, -0.2027966827, 0.2058633864, -0.0103798341, 0.0011957573, 0.0580064207, 0.0887298733, 0.0204211343, 0.0355668962, 0.0903293043, -0.0363787152, -0.0240737125, -0.0156716518, -0.2353769690, -0.2428281158, 0.0427972041, 0.0408362150, 0.1831751913, 0.0769774839, -0.0401540473, 0.0944397300, -0.0548132695, 0.1372135878, -0.0079854419, 0.0028978111, -0.0034003567, 0.0153699443, 0.0738445073, -0.0295617152, -0.0076842089, 0.0490281433, -0.1136584952, 0.0169554446, -0.0195922181, 0.0412212461, 0.0915078819, -0.1255820841, -0.0124691501, -0.0108922906, -0.1680780053, 0.0371320955, 0.0746712014, -0.0780105665, 0.0042814715, -0.0477239154, -0.0595878102, 0.1006169394, -0.0558951758, -0.1766595542, -0.0075404230, -0.0739830881, 0.0625412464, -0.1211765558, 0.0079096165, -0.0664268732, -0.2177587003, -0.0957773998, -0.0943663046, 0.0351644941, 0.0153673049, -0.0895716995, -0.1183658019, -0.0758013427, -0.0862804949, 0.0974654555, -0.0464931540, -0.0593413115, -0.0963257030, 0.0061005112, -0.0623181090, 0.1022380367, 0.0739879608, 0.0519820042, 0.0370040685, -0.0596236996, 0.0228772238, -0.1377038062, -0.0718776360, 0.0026078238, -0.1494398415, 0.1766721904, 0.0024012758, -0.0443102308, -0.0247192588, -0.1072235480, -0.0244589429, 0.0724068508, 0.2584494352, -0.0068991557, 0.0289084092, 0.0490710102, -0.0503687710, -0.1166652218, 0.0743248239, -0.0395238437, -0.0554455146, -0.2880463600, 0.0138632245, 0.0429196805, 0.2152030468, 0.0294930525, -0.2319088429, 0.0569909215, -0.1696400344, 0.0023598468, 0.0151193384, 0.0084129162, -0.0270098094, -0.0612794831, 0.0322970599, 0.1066965312, -0.0090203490, 0.0424799211, -0.1919283718, -0.1110922620, 0.0374282636, -0.2161936313, -0.0352184772, -0.0690695643, -0.0183787718, 0.0642885789, -0.0549404509, 0.1136488542, 0.2031858563, -0.0797338635, 0.0843211114, 0.0306278449, 0.0197167732, 0.0949098021, 0.0511511415, 0.0963312164, 0.1751654297, 0.0545660108, -0.0570432059, -0.0096405307, 0.0218567699, -0.1513506770, -0.0240579490, 0.1426143050, -0.1824398786, -0.1107946262, 0.1340220273, 0.0235775132, 0.0217101742, 0.0637286082, -0.0866895765, -0.0015587357, -0.2128919959, -0.0749805421, -0.0795108229, 0.0009998855, 0.0728231147, 0.0845703706, -0.1808908880, -0.1702561826, -0.1141822264, 0.0241056811, -0.1576943398, -0.0984193385, -0.0754342079, -0.1556002796, -0.1854678988, -0.1510264426, -0.2249683142, 0.2037100047, 0.0775964707, 0.0997666791, 0.1246446818, -0.0617817827, -0.1647251248, 0.1335669905, 0.1469129026, 0.0371226743, -0.0267169923, -0.2985766828, -0.0408147871, -0.2888169885, -0.0776303038, -0.1366605312, -0.2041047662, 0.2762078941, -0.1544070691, -0.0138820941, -0.0013576297, -0.0260572396, 0.0347974561, 0.0069884863, 0.3311773241, 0.0123208910, 0.0189192202, 0.0599381700, -0.0667109191, -0.2016680390, 0.1086209491, -0.0883162692, -0.1292103827, -0.2744111419, 0.0262558032, 0.0580144003, 0.1044015586, 0.0658684373, -0.2250707000, 0.0702275410, -0.0042948369, -0.0140430126, 0.1145505607, -0.2197945565, -0.0156923272, 0.0528980605, -0.2421979904, 0.0598134957, 0.0955044851, 0.0355777070, -0.0387436338, 0.0420430899, -0.0721935034, -0.0721966401, -0.1769485623, 0.0319526978, -0.0501653515, 0.0219801553, -0.2052943408, 0.0689943507, 0.1984179169, -0.0629917011, -0.0567500889, 0.0047415928, -0.1134074926, 0.0083392235, -0.0625379905, 0.0536822826, 0.2044645697, -0.0710744262, -0.1467976272, -0.0046610730, -0.0240240060, -0.1351806074, 0.0392844193, -0.0419518054, -0.0190304164, -0.0506254025, 0.1860932112, -0.0449155346, -0.0597915873, 0.1174812689, 0.1452136487, -0.0671498999, -0.1887832731, 0.0608082339, -0.0756414905, -0.0461454764, 0.0767059848, 0.0973846018, -0.3460114002, -0.1631526649, 0.0053001298, 0.0053156675, -0.1118281037, 0.0681513473, 0.0186885167, -0.0240518302, -0.0096323164, -0.1208352521, -0.0779629648, -0.0025197894, 0.1169908121, 0.1380327642, 0.1365225464, -0.0887501091, -0.2170708477, 0.2366257459, -0.0164275430, -0.0344560407, -0.0634685233, -0.2132158279, -0.0029929080, -0.1424348056, -0.0078989500, -0.0290438663, -0.0642173514, -0.0035898804, -0.1841328889, 0.0053929691, -0.0092387209, -0.0425243191, 0.0585538000, -0.0551749915, 0.0466800705, -0.0017734319, 0.0655606240, -0.0274329893, 0.0137386369, -0.0176549852, 0.1744255275, -0.0251591429, -0.1208075210, -0.0616806597, 0.0627458394, -0.0354721211, 0.1137869209, -0.0669837818, -0.0253256690, 0.0954264775, 0.1646197289, -0.0526321530, 0.0312609002, -0.0121996300, -0.0873383135, 0.2696907222, -0.0058472450, 0.0102949915, 0.1394964606, 0.0535950102, 0.0967354327, 0.0879847705, 0.1364616901, 0.0872864276, -0.2189143300, 0.1778666079, -0.0583534315, -0.0539007597, -0.1157152504, 0.1434197873, 0.1575103104, -0.1397033483, -0.1296724081, -0.0219717529, 0.0000798499, -0.0029631206, -0.2739734054, -0.0098206447, 0.0613359325, -0.0782168284, -0.0496487953, 0.0330690332, -0.0860108137, -0.0028369769, -0.1049658805, 0.0074188667, -0.0432641655, -0.0279834010, 0.1917162687, -0.1274110526, -0.1231503412, 0.2094346434, 0.0628745258, 0.0147826485, -0.0193985756, 0.1954840720, -0.1890173256, -0.0440627299, 0.1866196841, 0.1494603455, -0.2042355239, -0.1455922276, -0.0264649168, 0.0808249712, -0.0316231437, 0.0855948403, 0.0316538438, -0.2257739156, 0.0329644606, -0.1178744882, -0.1378100812, 0.0620248429, 0.1060508862, 0.0066645974, -0.0407862291, 0.0647178143, -0.2672223151, 0.2540172040, -0.0118377050, 0.1251558959, -0.0138296755, -0.1852785945, 0.0105193816, -0.2175316960, -0.1159536988, -0.1355568767, -0.0692460313, 0.0873240083, -0.0809446648, -0.0121141151, 0.0460361764, 0.1604658961, -0.1083109602, -0.0868439004, -0.0239966735, -0.0434399098, 0.0449530631, 0.1525924057, 0.0261057969, -0.0862946585, 0.0833060816, -0.0324438103, -0.0540872440, -0.0083740838, 0.1289944798, -0.0188835543, -0.0549012721, -0.0977071598, -0.0888017640, 0.0531312525, 0.1498181373, -0.1468686908, 0.0886276513, -0.0490383133, -0.1662903428, 0.1799407154, -0.1587469578, -0.0654916614, 0.0479251668, 0.0073002609, 0.1897620559, 0.2385514677, 0.1069116071, 0.1052790061, -0.0375058986, 0.2289595902, 0.0280339438, 0.0206089243, -0.0288262554, 0.2124863714, 0.2760775685, -0.0886683241, -0.0787436590, 0.0142534701, -0.1386820227, -0.0565773584, -0.2468262613, -0.0752597898, 0.1361423731, -0.0515476577, -0.0472601540, 0.0944877937, -0.0553871132, -0.1569731086, -0.0404539034, 0.0709720030, 0.0103472071, -0.1604783833, 0.1483679414, 0.0125303706, -0.1037556380, 0.1555743068, 0.0428354107, 0.1165296808, -0.1580624431, 0.0698574185, -0.2302207798, -0.1258911490, 0.0110803824, 0.1577106118, -0.0628411472, 0.0003699270, -0.0501769520, 0.0472135618, -0.0089962482, -0.0631697774, -0.1234831885, -0.2795951366, -0.0647989884, -0.3197775781, -0.0537018739, 0.0660367385, 0.1917517483, -0.0588748045, -0.0009701442, 0.1551231891, -0.3413740695, 0.2317710370, -0.0192742255, 0.0808016136, -0.1659798026, -0.1587783396, -0.0619885176, -0.0571683235, -0.2111548483, 0.1060267091, 0.0732204542, 0.0469044633, -0.1653401256, -0.0997983068, 0.0736987144, 0.1741525531, -0.1046094000, -0.1214658767, 0.1328013539, -0.0829937086, 0.1034711227, 0.1927782446, -0.0763340071, 0.0861447752, 0.1007208899, 0.0878804550, 0.0221805163, -0.0287224371, 0.1745095104, -0.2077937871, -0.0071379887, -0.1790762544, -0.0913720354, 0.0911252126, 0.1058532298, -0.1095167920, -0.0360770114, -0.1369111091, -0.0924896002, 0.1266191900, -0.1044058204, -0.0422189608, 0.1802373976, -0.0479593761, 0.0153383110, 0.1650433391, -0.0290932953, -0.0429889150, -0.0836190432, 0.1470226496, -0.1183091700, 0.0042430935, 0.1708049923, 0.2720292509, 0.2783794403, -0.0401533358, -0.1458900124, -0.0326525383, -0.1482421160, -0.0467975810, -0.2137492448, -0.0330551416, 0.1258414835, 0.1197753549, 0.0408920795, 0.0382899605, 0.0563537776, -0.1473996341, 0.0142627899, -0.1968271732, -0.0257912204, -0.3089843392, 0.0046308907, -0.0002981400, -0.1380292624, 0.0279198494, -0.0962017924, 0.1598327309, -0.2438616902, 0.0673664361, -0.1892243326, 0.0456531793, 0.1382503808, 0.1337296367, -0.1913544685, -0.0000493256, -0.1127038822, 0.1724053323, 0.0063478104, -0.0956015736, -0.1295648664, -0.1994511187, -0.0094837770, -0.1268057376, -0.1386105120, 0.0356409997, 0.1578316391, 0.0767625794, -0.1070380211, 0.2396152765, -0.2657093108, 0.1334640086, -0.0427236930, -0.0485407934, -0.0833450854, -0.1186945885, -0.0150988335, -0.1757204235, -0.0322356559, 0.0735321641, -0.0530836768, 0.0189695600, -0.0840797573, -0.1951529980, 0.0223614033, 0.1078296378, -0.0626353547, 0.0309110731, -0.0224178340, -0.0787293464, 0.1110124439, 0.1888290644, 0.0522446372, 0.1737449318, 0.0698760375, -0.1846763641, 0.0879387334, 0.0939628705, 0.0968739316, -0.3560596704, 0.0380922407, -0.2837578356, -0.0952941850, 0.1545892209, 0.0403586999, -0.0584361516, -0.0859631598, 0.0959945321, -0.2057567239, 0.2435741127, -0.0693489984, 0.2419828176, 0.1801375896, -0.1695696115, 0.1518797278, 0.1484671086, -0.0235751420, -0.0569062755, -0.1429584473, 0.1393657178, -0.1659640074, 0.1814869195, 0.1555079073, 0.1411235332, 0.0276707057, 0.0824830607, -0.1185520217, 0.0005701703, -0.2174800336, -0.0626926422, -0.1337709576, 0.0435144715, 0.1232313290, -0.0200686175, 0.0810198411, -0.0912685394, 0.1610454768, -0.0476223938, 0.1376754045, -0.1731068641, -0.0043664360, -0.2461399436, 0.0546150915, 0.0918885767, -0.1256666034, 0.0260354336, -0.2190955132, -0.0737665892, 0.0358237773, 0.0149812503, 0.0640890375, 0.1490008980, -0.2087926865, 0.0881239027, -0.1341418177, -0.0529011823, -0.0877389908, 0.0082504516, 0.1422180086, -0.2149710804, 0.1560826004, -0.2388766259, -0.0893522203, -0.0808452889, -0.0969258994, -0.1685043871, 0.1970445216, -0.0415709578, -0.0580518842, 0.1867908537, -0.1091736853, 0.0716104656, -0.0911607370, -0.0491128974, -0.1336564571, 0.0230906382, -0.0920578390, -0.1220451742, -0.0921598598, 0.0695282295, -0.0391606279, 0.2004580200, 0.0295761209, 0.0189383682, 0.0220601894, 0.1942067742, -0.0158042293, 0.0175562743, -0.1613702029, -0.0014986376, 0.0550859161, 0.0591057092, -0.0497031398, 0.0241062213, 0.2441654503, -0.2151916623, 0.1420299858, 0.1895433962, 0.0590395704, -0.0091707427, -0.0134715950, -0.3966503739, -0.2042348236, 0.0338337794, -0.0053352271, -0.1444792747, -0.0407148749, 0.0088175843, -0.2680441439, 0.1694122255, -0.0337873884, 0.0415310338, 0.3019420207, -0.1578377634, 0.0400241464, 0.1003247499, -0.0736238137, -0.0872636810, -0.0690843165, 0.0127438158, -0.1409539729, -0.0214709714, 0.1696773171, 0.0490807258, -0.0783016905, -0.0272369590, -0.0347279646, -0.0424796604, -0.2035108954, 0.0108481161, -0.1047929600, 0.0321916714, 0.1004515216, 0.0505116358, 0.0938018933, 0.0272837002, 0.0824384913, -0.0238693636, 0.0478690267, 0.0509661846, 0.0094965026, -0.0811913237, 0.0145934876, 0.1045746878, -0.1111149117, 0.0160912015, 0.0076620905, -0.1743251234, 0.0267802160, 0.1428759992, -0.0802284777, -0.0516730174, -0.2162304521, -0.0018826991, 0.0980264172, 0.0298825316, -0.0064694360, 0.0885203853, 0.0543311052, -0.0938549042, 0.0747125894, -0.0947553143, -0.0711621568, 0.0380710289, 0.0334874578, -0.0827034488, -0.0521143451, -0.0143432459, -0.1084923893, 0.1197579578, 0.0047041774, 0.0283705369, -0.0418041497, -0.0674499571, -0.2119442821, 0.1693830639, -0.0855172127, -0.2425756305, -0.0114859957, 0.0493539982, -0.1353497505, 0.1823059618, -0.0711103529, 0.0215708092, 0.1088976413, 0.0240300130, 0.0784702972, 0.1671337783, -0.0675326139, -0.0232204814, -0.0219362564, 0.1434464008, 0.0849592984, 0.1729545891, 0.0736153349, -0.1249587387, 0.0509783924, 0.0733647123, 0.0254685283, 0.1079698354, 0.0407527760, -0.2843621373, -0.2961670458, 0.0647977144, 0.0631756634, -0.1790595502, -0.0069573680, 0.1318545192, -0.3057185411, 0.1532419622, 0.1590924114, 0.0127405738, 0.2284772247, 0.0173266530, 0.0659142584, -0.0634028390, -0.1355440319, -0.0691081136, -0.0916944742, 0.0617578551, -0.1260459274, 0.0598111749, 0.1104948446, -0.2176289856, -0.0342545547, 0.0646648109, -0.0561215319, -0.0587856397, -0.0093062948, 0.0526912920, -0.1097343117, -0.0173641443, 0.0758955479, 0.0639900118, 0.1452940702, -0.1567784548, -0.1064891592, -0.0447683707, -0.0039626551, -0.0699851289, -0.0744329467, -0.2776533365, 0.0532668717, -0.1085179076, 0.0017605987, 0.0491781645, 0.2061038613, -0.1218336076, 0.0286469124, 0.2404532433, -0.0107615404, -0.1172776818, -0.0220109653, 0.1480882913, 0.0434051119, -0.0470583998, -0.1236476377, 0.1481205970, 0.0872599110, -0.1355660558, 0.0477025062, 0.0349443704, -0.0071897404, 0.0491252132, -0.1298296601, 0.0492897816, 0.1913771927, 0.0916086435, -0.0800155550, 0.0707662329, -0.1654970199, 0.0978012979, 0.0650500655, -0.0535890013, -0.4395984709, 0.1049322560, -0.0449816957, -0.1874344349, 0.0177667215, 0.0682250038, 0.1715724468, -0.0864480361, -0.0988103524, -0.0665139481, 0.1231852025, 0.0825109631, -0.0444446504, 0.0292981789, -0.1408090889, 0.0226994269, -0.1020397618, 0.0828363150, -0.1377397925, 0.0431741588, 0.0729318112, -0.0877921358, 0.1081648469, -0.0644117519, 0.1813092828, -0.2317309529, 0.1007870436, -0.1139383242, -0.0841509476, 0.0232697986, 0.1088348180, -0.0759501010, -0.1156824157, 0.0325300284, -0.1626666784, 0.1154913530, -0.0248895139, 0.0191279948, 0.1830801666, 0.0901198164, 0.0714857057, 0.0226077419, -0.0309386458, -0.0356790274, 0.1457431018, 0.1902527958, -0.1135286465, -0.0363261551, 0.1043900922, -0.2544075549, -0.1249299198, -0.1312365532, -0.0912377685, -0.0054651727, 0.0726096109, -0.0347961709, -0.2889937460, 0.0042777159, -0.0062287599, 0.0382283777, -0.0019903742, 0.0066983998, -0.1180103347, -0.0212566406, 0.0843532681, -0.0302175973, 0.0610771514, -0.1038198471, -0.0198842902, -0.2832256258, 0.0480930880, 0.0587475821, 0.0519647039, -0.0624917746, -0.0840729028, 0.1246640161, 0.0477974489, -0.0164695233, -0.0616008006, 0.2009338439, 0.0035176526, -0.0833623484, 0.0996522680, -0.1351862550, 0.0830786005, 0.0331372805, -0.0448830836, -0.2085395008, 0.0601163208, -0.3203010261, -0.1253043115, 0.1128852516, 0.1730391979, 0.1239271834, -0.0565966778, 0.0414810181, -0.2085493952, 0.2079239190, 0.0270962398, -0.0775594264, -0.3928636312, -0.0127207004, -0.1239079610, -0.0810317174, -0.0286001861, 0.0543420538, -0.0381290801, -0.1268748939, 0.0258542895, -0.0200034585, -0.0877650157, -0.0402516201, 0.0636928380, 0.0082529848, -0.0503684692, 0.0306446552, -0.0796419308, -0.0028361282, -0.0005188687, -0.0593924373, 0.0038506021, 0.0514745601, -0.0297441725, 0.0354490057, 0.0592017472, -0.0903088897, 0.0295895655, -0.1384094208, -0.0034953298, 0.0273843110, 0.0641278476, -0.0760917589, 0.0062935161, 0.0071540223, -0.0588163100, 0.0241130739, 0.0497123823, -0.1198983490, 0.2873292863, 0.0164293610, 0.0784971640, -0.1154628545, 0.0756045952, 0.0943194628, 0.1572968960, 0.2300345749, -0.0707794055, -0.0599781834, 0.0207541808, -0.0589425303, -0.0163634475, -0.0927855894, -0.0033380375, 0.1055790409, 0.0064746346, -0.1085301489, -0.1614779085, 0.0328092538, 0.0984643698, 0.0839410275, -0.0240482651, 0.0104311798, -0.0047427649, -0.0277892239, -0.0264411960, 0.1560776830, 0.0301666912, -0.0932929963, -0.1742970943, -0.2540234327, -0.0453256443, -0.0072450824, 0.0197000243, -0.1036316529, -0.0325057283, 0.0213954821, -0.0168414600, 0.0514716767, -0.2061508745, 0.0238668863, 0.2035716027, 0.0237447601, 0.1138209254, -0.2323709428, 0.0124299442, 0.0183632541, 0.0405362621, -0.1301858127, 0.0438412726, -0.3407564461, -0.0549602509, 0.1460426748, 0.0420860983, 0.1150207967, 0.1205530837, -0.0555586703, -0.3938938677, 0.0308712311, -0.0696202666, -0.0128221009, -0.2457792759, -0.0710194483, -0.1150711924, -0.2063275129, -0.0228127055, 0.0628915057, 0.0115854498, 0.0348396003, -0.0158189517, -0.0767564625, -0.0526084080, -0.0500330925, 0.0600243472, 0.1405271143, 0.0455579609, -0.0507063679, 0.0867880657, 0.0382658206, 0.1251978278, 0.0754825771, 0.0248403773, 0.0065953732, -0.0142634017, -0.0033955693, 0.0926145017, -0.1395110786, 0.0338102356, 0.0246051941, -0.1205816865, -0.0657176971, 0.1500959098, -0.2220519185, 0.0228897966, -0.0606431849, -0.0524505191, 0.2413884699, 0.0933492184, 0.0682941303, 0.0791795179, 0.0236276854, -0.0151133491, -0.0091784820, -0.1226147562, 0.1517088860, 0.1051447317, -0.0493680052, 0.0147888260, -0.1533981264, 0.0497819968, 0.1234376505, -0.0830934793, -0.1486203223, 0.1129014716, -0.0776241049, -0.0017208697, 0.0389384590, -0.2400284111, 0.1011239588, -0.0906023458, 0.1237372980, -0.0696818680, -0.1920087188, 0.0417664386, 0.0292972568, -0.0228474587, 0.0713315457, -0.0811335146, -0.0536965504, -0.1387365311, -0.0325011574, 0.1325952113, 0.1152905077, 0.0065163085, 0.1053572819, -0.1034585834, 0.0328032784, 0.0145182339, -0.0182112604, -0.1412860304, 0.0682582334, 0.1116213351, -0.0048045539, 0.1069223434, -0.1147466898, -0.0136858802, -0.0443037637, 0.2788560688, -0.1484604329, 0.1859464794, -0.3449571431, -0.0593822040, -0.0140742417, 0.0260993093, 0.0310292169, 0.0951792672, -0.1347604245, -0.1967626959, 0.1408206969, -0.0993709266, 0.0743891001, -0.3454223871, -0.0409988277, -0.1363172084, -0.1811666638, -0.0848514512, 0.0649024174, -0.0596168116, -0.0162867811, -0.0694088936, 0.0418242589, 0.0669888780, -0.0655790940, -0.1183113381, 0.0673106983, 0.0208897982, 0.0525321141, 0.0019206200, 0.0627851114, 0.1297683865, -0.0085223643, -0.0265746713, 0.0922344774, -0.1390296221, 0.0132441781, -0.0441236496, -0.2560545206, -0.0170597825, -0.1356179416, -0.2583417594, -0.1933796555, 0.0453803465, -0.3346948326, -0.0206955355, -0.1281439662, -0.1195254102, 0.2663684785, 0.0941583216, 0.1231126562, 0.2033227086, 0.0300589055, -0.0612718910, -0.1886229813, -0.2237103879, 0.0273285974, -0.0026440672, -0.1410615444, -0.1601722538, -0.0676316023, 0.1292885989, 0.0065271133, -0.0191029869, -0.1684630513, 0.1245137751, -0.0096771251, -0.1026209891, 0.0418366417, -0.2007642388, -0.0050097597, 0.0330789424, 0.1158903912, 0.0688245147, -0.1474097818, 0.0076562949, 0.1919316649, 0.0202851743, 0.0591154024, -0.1289737970, -0.0301640667, -0.2665380239, -0.2253660560, 0.2020789236, 0.1345763057, 0.1094356775, 0.1497133076, -0.2278168499, 0.1585011184, 0.0956640095, -0.1242830679, -0.3938173652, 0.0495584719, 0.1034035459, 0.0899513289, 0.0944169983, -0.1292938739, 0.0160830915, -0.2345931083, 0.2042886168, -0.2195183039, 0.2470234931, -0.1200667918, -0.0411602184, 0.1109901443, 0.0257824939, -0.0386191793, 0.0422492325, 0.1707220227, -0.2396281064, 0.2369666994, -0.0741039440, -0.0242672469, -0.3707818687, 0.2349727154, -0.1839650124, -0.0560730696, -0.0152479829, 0.1010762230, -0.1540243924, 0.0964934379, -0.0736632794, 0.0301093329, 0.1195401028, 0.0099034943, 0.0130498409, 0.1982138306, -0.0011339453, 0.0611104704, 0.1322556436, 0.1825871766, 0.1620309502, 0.0595647059, 0.0136467256, 0.0143075204, -0.0817415789, -0.1164463758, 0.0202071853, -0.3244205713, 0.0191993285, -0.0175348390, -0.1361053586, -0.0573006831, 0.0304057691, -0.1903378218, 0.0363822952, -0.1819445938, -0.0741102174, 0.2668636143, 0.0002164593, -0.0055084759, 0.1885749549, -0.0708214417, -0.0619970299, -0.1103241444, -0.1906378120, 0.1313955188, -0.0079303104, -0.1284599900, -0.0293614063, -0.0014407680, 0.0712126493, -0.0867428333, 0.0101664579, -0.1815577000, 0.1379938424, -0.0264613032, -0.0526827462, -0.0198442452, -0.0121503463, 0.0348778442, 0.0147753935, 0.0473927706, 0.0916615874, 0.0220759194, -0.0291297995, 0.0564946495, 0.0087831151, -0.0993798003, -0.1184097901, -0.1176694930, -0.1910105199, -0.2251884788, 0.0469151549, 0.0666163489, 0.1023069546, 0.1385733038, -0.0635961592, 0.0531652384, -0.0819225907, -0.0931359380, -0.0815530792, 0.0818807706, 0.1109378487, 0.1715612411, 0.0538441278, -0.0459607318, -0.0003341723, -0.1449249238, 0.1718133092, -0.1915254593, 0.2989977002, -0.1772137284, 0.0433474928, 0.0541744865, -0.0562878624, -0.0038702055, 0.0538370088, 0.1680267453, -0.0025232455, 0.1628616303, -0.0589750782, -0.1202219203, -0.2475811690, 0.1092336625, -0.1118602827, -0.2033623010, 0.1358311325, 0.1604013443, 0.1526884139, 0.1315059066, 0.0349018723, -0.0241290424, 0.1927428246, 0.0206611957, -0.0391924083, 0.0899010599, 0.0070910589, -0.0063014678, 0.1586803049, 0.1000214592, 0.0332406648, -0.2108214051, 0.0273400210, 0.0940129384, -0.0769942701, -0.0528164804, 0.0284033678, -0.2283265144, -0.0583415516, 0.0062211226, 0.0304155443, -0.1106741801, 0.1063658819, -0.0546442419, -0.0895988941, -0.3656250536, 0.1354559213, 0.2750753164, 0.0437068231, 0.0249570422, -0.0911674127, 0.0058878157, -0.0005164317, -0.0369959138, -0.0403623842, 0.1412847340, -0.0053026280, -0.0315887183, 0.0709804893, 0.0283187535, 0.1379768699, -0.1883350760, 0.0197375957, -0.1340012848, 0.0677695349, -0.0042066858, -0.1193602458, 0.0015351566, -0.2906332016, 0.0186596364, 0.1090104952, 0.1050829887, 0.1608670652, 0.0969892889, -0.0145278890, -0.0020101997, 0.0637612641, -0.1361557096, 0.0070802844, -0.1920676529, -0.2355960160, -0.0885176882, 0.0940839425, 0.0639797151, 0.2083136141, -0.0243137050, -0.0539450124, 0.0630363673, -0.0674770921, 0.0236128569, 0.1596225500, -0.0638807490, 0.0134940799, 0.1726897210, 0.0396266654, 0.0161830802, 0.1081227511, -0.1140257791, -0.0214317143, -0.1840274185, 0.3220776618, -0.0456066579, -0.0549805276, -0.1481497139, -0.0646963194, 0.0410002992, 0.0018714624, 0.0497395769, -0.0639861524, 0.1714763045, -0.1750094891, -0.2416983247, -0.1913576424, -0.0077058552, 0.0890194476, -0.1477293074, 0.1145803779, 0.0850032568, 0.0024733604, -0.2104192674, 0.0039182990, -0.0743484944, 0.2128628492, -0.0297167208, -0.0596075244, 0.0545033701, -0.0761336461, 0.0090383133, 0.1487798989, -0.1035656482, 0.1187194213, -0.2812082767, -0.0505322292, 0.2110982686, -0.2832008600, -0.1210790649, 0.0647289604, -0.1332090050, -0.1233262047, 0.0359167531, 0.0518641248, -0.0889259502, 0.0792069733, -0.0885293260, -0.0284751672, -0.2991541326, 0.1731073111, 0.1442654282, 0.0407327488, 0.0441814065, -0.0410731547, -0.1635659486, -0.0163641069, -0.0398069844, 0.0080840457, 0.0865226835, -0.0453764945, -0.0453519672, 0.0508160926, 0.1877078563, -0.0582366809, -0.1375176162, 0.0322005264, -0.1259939820, -0.0682873800, -0.0580664761, -0.1389587224, 0.0075611109, -0.3023187220, 0.0849655047, 0.1194269434, 0.0648594275, 0.3168385029, -0.0891004279, -0.1363581419, -0.1624457091, 0.1365601718, -0.1913738251, -0.0470248237, -0.2038658112, -0.2532749474, -0.0159623958, 0.0494451970, 0.2039121687, 0.2228120267, 0.0144671481, -0.0133578312, 0.1905935407, -0.0189470109, -0.0229346231, 0.0172301624, 0.1072092131, -0.0233113430, 0.0965526998, 0.1674629599, 0.0699698925, 0.0506843403, -0.2187718749, -0.0736792833, -0.2882201970, 0.0776957572, -0.0095949434, -0.0955701619, -0.2598848045, 0.0803696960, -0.0525527783, -0.0059322752, 0.1102999598, -0.1262754798, 0.2464293838, -0.1781612337, -0.2067964673, -0.1254045963, -0.0122259008, 0.0223058779, -0.1217554137, -0.0176671967, -0.1842332333, 0.0699048340, -0.2865270376, -0.1346836239, 0.0666808188, 0.0074430336, 0.0805422813, -0.1329776049, 0.2577790618, -0.0494352318, 0.0098377531, 0.0123424241, -0.1111799031, 0.0928115770, -0.2955694199, -0.1356677115, 0.0973221511, -0.1691929400, -0.0672554448, 0.0933817104, 0.0597788058, -0.1578421891, -0.0460834950, 0.0869507194, -0.2458262444, 0.0698821917, -0.0625661686, 0.1042740867, -0.2152127177, -0.0482690334, 0.1523930728, 0.0240173377, 0.0263914950, -0.0383901820, -0.1854836941, 0.0685832351, 0.0221731141, 0.2040175349, 0.0696486980, -0.0092125759, 0.1517115384, -0.0209016483, 0.2651297748, -0.0125401374, -0.0096667418, 0.0178447757, 0.0415860601, 0.1090961620, -0.1229865849, 0.0445705466, 0.0413396098, -0.2752853334, 0.0317262560, 0.1286393553, -0.0225133989, 0.3469750583, -0.0681998655, -0.1065181494, -0.1954946369, 0.0699355751, -0.0953188613, 0.0135193113, -0.2308030277, -0.0553986058, 0.1293206811, 0.0206562150, 0.2427252680, 0.0703543425, -0.0282431282, -0.0383806154, -0.0905244574, -0.2009200007, 0.2289315015, 0.0112668062, 0.0824098289, -0.0203081109, 0.0703416392, 0.1735115051, 0.1083294600, -0.0876889080, -0.0772632584, -0.0640736818, -0.1438111216, 0.1984951645, -0.0972240046, -0.0986570194, -0.1584414095, -0.0269428324, -0.0407744721, 0.0495914258, -0.1258951873, -0.1477180421, 0.2278996557, -0.3315437138, -0.2956254482, -0.0937557220, -0.1475709975, -0.0802408904, -0.1649480462, -0.1094705313, -0.2408810258, -0.0075527146, -0.1187233478, -0.1093004569, -0.0283284336, 0.0141192693, 0.0950274989, -0.2228686661, 0.0224018004, 0.0043893191, -0.0806594640, -0.0147734778, -0.1358935684, 0.0795561820, -0.1950959712, -0.0977422670, 0.0370389633, -0.1093522608, -0.1289976537, 0.0953602642, -0.0422907211, -0.0615592450, -0.0683069900, 0.0193912555, -0.1921332926, 0.1549829841, 0.0157757383, 0.1139903665, 0.0268996153, -0.0885022953, 0.0741377920, -0.0462432466, 0.1121819466, -0.0012981581, -0.1052233577, -0.0535996296, 0.1344868392, 0.0567979589, 0.0905317813, 0.2031197846, 0.0978070423, 0.0564841218, 0.1841088682, 0.1372087151, -0.0881918743, 0.0001724356, 0.0405667163, 0.1599831879, -0.1648936719, -0.0950912908, -0.0932955965, -0.1743873060, 0.0898360610, 0.1278210580, 0.0789061263, 0.2509889901, -0.1091103554, -0.1112635285, -0.0227424931, -0.0254181083, -0.1165822297, -0.0042121583, -0.0493615866, 0.0127574345, 0.0601357780, 0.0175735522, 0.2678451836, 0.1667859703, 0.2021129429, 0.0343223773, -0.1239671111, -0.0642555729, 0.1470610350, -0.0638759136, -0.2888739705, 0.1163272932, 0.2254459411, 0.1115046665, 0.1502561122, -0.0273786746, 0.0505406186, -0.2108228207, -0.0363017060, 0.0440929234, -0.1205816120, -0.1325638145, -0.0967671573, -0.1992789507, -0.0007743601, -0.0300223846, -0.0516999289, -0.0261350535, 0.1578295380, -0.1189550608, -0.0118675986, -0.1522534341, -0.0066001350, -0.1571951509, -0.2579341531, 0.0803831443, 0.0272583906, -0.1232412979, -0.1300128549, -0.0909962803, -0.0711347014, 0.0038548175, -0.1035414785, -0.1265011877, 0.0891470090, -0.0967786163, 0.0425115824, -0.1031288058, -0.0536480583, 0.1025156975, -0.1283922195, -0.2438649535, -0.0739881024, -0.1459743232, -0.2492125332, 0.0129161132, -0.0626894608, -0.1529020369, -0.0698885769, -0.1052784175, -0.0381132662, 0.0502044484, 0.0071327523, 0.1753399521, 0.0086668804, -0.0924199969, 0.0478240848, -0.0886342674, 0.1816582978, 0.0646482706, -0.1370582134, -0.2435275465, -0.0592798814, 0.0014214185, 0.0404302590, 0.0558911711, 0.1744309217, -0.0178103447, 0.2533814311, -0.0173531864, -0.0683550760, -0.0356250368, -0.0318634361, 0.1938150972, 0.1510337591, -0.0598085299, -0.1722334623, -0.2498608083, 0.1033340171, 0.2151571065, -0.0071770726, 0.2916083336, -0.0370472260, -0.1593097895, -0.0120897023, -0.0530753359, -0.0667432472, 0.0913102925, -0.2152537405, 0.0727252215, -0.0228263214, 0.0780584961, 0.1463632584, 0.2886291742, 0.1746493578, -0.0798333287, -0.1003509462, -0.0640859902, 0.1922737211, -0.0437529087, -0.3325909376, 0.0516053587, 0.2500947714, -0.0925781131, 0.1452939361, -0.0224562176, -0.0842140839, -0.3765559494, -0.2335766703, 0.2527077496, -0.0184222106, -0.1156916395, -0.0350335389, -0.0971600115, -0.0180498324, 0.0041161641, -0.0891979784, 0.0299109872, 0.1118458807, 0.0284385458, 0.1094877422, -0.1298948228, -0.0297462028, -0.1760180146, -0.2995260060, 0.1605479419, 0.0462472364, -0.1879290789, -0.0607415885, -0.1087210178, -0.2635697722, -0.1145266443, -0.1219937727, -0.1068628654, -0.0986414552, 0.0141439503, -0.0628325120, -0.1120642573, -0.1112098992, 0.1617810577, -0.2563559711, -0.2397019863, -0.0768982768, -0.1873214394, -0.0557444319, 0.0395362079, -0.0151064601, -0.2142148763, -0.0671633780, -0.1035712808, 0.1115998849, 0.0717311054, -0.1846380234, 0.1715556383, -0.1079114825, -0.1567864567, 0.0140673174, -0.0408209600, 0.0741597638, 0.0154344374, -0.0012380700, -0.3586077094, 0.0053598816, -0.0166984983, -0.0274867620, 0.0867611095, 0.3155395091, -0.0043387255, 0.1263514608, 0.0849078745, 0.0631257817, -0.0317760780, -0.1192719191, 0.3144793808, -0.0440689363, -0.1796991527, -0.2151895911, -0.2295197248, 0.1095424220, 0.3067673147, -0.0470070355, 0.0769492388, 0.0440264195, -0.0722971261, -0.0660844147, -0.0356107727, -0.1301610470, 0.1311572045, -0.1737919748, 0.1031599939, 0.0889097676, 0.0356989652, 0.1322940588, 0.2263663113, 0.0670248643, 0.0504278541, 0.0306353252, 0.0068549719, 0.1511379778, 0.0288146231, -0.0599184558, -0.0739010274, 0.1486487985, -0.2032078654, 0.0984730795, 0.0372185111, -0.1770240515, -0.1817137301, -0.1338326633, -0.0158975087, -0.0053180051, -0.0010894403, 0.1370713711, -0.0197566487, 0.0510700680, 0.0756478161, -0.0118552763, 0.0718127787, 0.1426590532, -0.0543916635, 0.0192558244, 0.0112744914, 0.1143079847, -0.1498290896, -0.1402920485, 0.1220671311, -0.1397777796, -0.0337696932, -0.2028933018, -0.1429449469, -0.1305746734, -0.0128293056, -0.0739842728, 0.0595896393, -0.0665052757, -0.0819300786, 0.0633492172, 0.0530366711, 0.1088548750, -0.0015393259, -0.0456164703, -0.1011887342, -0.0368515030, 0.0302960631, -0.1263495684, 0.0248013362, 0.0409228168, -0.0836396217, -0.0338115245, 0.0823850334, 0.0403971523, 0.0522377864, 0.0613772757, 0.0590761267, -0.1251454055, -0.1284255981, -0.0390175618, -0.0856670290, -0.0866531655, 0.1175256893, -0.0415601842, -0.1593960822, 0.0032376724, 0.0619892590, 0.0230738260, -0.0398535691, 0.2605493963, 0.0016220232, 0.0513403192, -0.0486129411, 0.0830028355, -0.0457951687, -0.1720304489, 0.2994131446, -0.0078385798, -0.1081958562, -0.2584157288, -0.1418206692, -0.0235457700, 0.2880687416, -0.0086508477, 0.1146739274, -0.1162073761, -0.2300825864, -0.0467654951, -0.0347040221, -0.0707507208, 0.0088038417, -0.1632027626, -0.0866776332, -0.0276943408, 0.0434539057, 0.0700350478, 0.1186607853, 0.1414731443, 0.0787528083, 0.1080916896, -0.0493483655, 0.0375453942, -0.0012318951, -0.1120511144, -0.1163215116, 0.0847260430, -0.1437185407, 0.0120083606, -0.0985104814, -0.2815087438, -0.1619746387, -0.0878277943, -0.0247451682, 0.0272669271, 0.0590665452, 0.0104779331, -0.0355390608, 0.0231238548, 0.0038188861, -0.0154211279, 0.0593117960, 0.1907688826, 0.1534112990, -0.0404657573, -0.0821275339, 0.0482447632, -0.1324340552, -0.2867895663, 0.0971449241, -0.2724172175, 0.0282792673, -0.1394407153, -0.2047385722, -0.1604759544, 0.0222979020, -0.0431648381, 0.1870255321, -0.1479453593, -0.2052825540, -0.0102237538, 0.0098942723, -0.0038064378, -0.0399328396, 0.0524635129, -0.0183887705, -0.0899526030, 0.0824812427, -0.0911767483, -0.1242692992, -0.0018971902, -0.1271315217, 0.0350310169, 0.0025316947, -0.1087067798, -0.0410380252, 0.0365181677, 0.0521806702, -0.1268329918, -0.0037377677, -0.1274884641, -0.1383753270, -0.0834011659, 0.0234147552, -0.0359591804, -0.1406632662, -0.0232320447, 0.0972302780, 0.1157787740, -0.0071184407, 0.1485605836, -0.0633221120, 0.0969853550, 0.0047822157, -0.0595490299, 0.0391075276, -0.1864063144, 0.1177005395, -0.0223096851, -0.1352880895, -0.1019730419, -0.1052977294, -0.0491334833, 0.1547642946, 0.0410351306, 0.2043222785, 0.1110693216, -0.0098760724, -0.0080545023, -0.0180714112, 0.0394566245, 0.0369299613, -0.0647760034, 0.0549461842, 0.0327433273, -0.1139900088, -0.0458896980, -0.0356823839, 0.0677584410, 0.0744103938, 0.0031074507, 0.0211251378, 0.0608864613, -0.0622074977, 0.0068107313, -0.0715929419, -0.0598689504, -0.0858680457, -0.0752700716, -0.1310313791, 0.0535148382, 0.0069747493, -0.0333960503, 0.1244499236, 0.0325980559, -0.0688440800, 0.0487258732, -0.0735329986, -0.0518670119, -0.0462964140, -0.1402188390, 0.1165561005, -0.1729837507, 0.0667806938, 0.0648755431, 0.0163152441, 0.0161837768, 0.0081946701, 0.0211798083, -0.0554845482, 0.1013213247, 0.0700253546, -0.0117820306, 0.0174779911, 0.0515045300, -0.0264151748, -0.0092187971, -0.0226763412, -0.1283015460, -0.0942030922, 0.0132751614, -0.0628214255, 0.0123455776, 0.0483978279, 0.0107064089, -0.1063134670, -0.0487546250, 0.0709424168, 0.0825481266, -0.0030185466, 0.0349560045, -0.0005968047, -0.0165557489, -0.0646582097, 0.0608545132, -0.0429052301, 0.0494558699, 0.0591430515, 0.0154844746, 0.0352271050, 0.0140683129, 0.0192758460, 0.1467400193, -0.0542636774, 0.0110301916, -0.1952873319, -0.0010287762, -0.0153508447, 0.0125578688, 0.0695802495, 0.1319954544, -0.0687711239, 0.0555268228, 0.0884296596, 0.0303338617, -0.0632243007, -0.0269767381, -0.0442306139, 0.0324336141, -0.0220381916, 0.1095278040, 0.0392273553, 0.0854682773, 0.0530799292, 0.0541229360, 0.0392916128, -0.0059305653, 0.0042868340, -0.0126118632, -0.0156520978, 0.0008133181, 0.0845683888, -0.0638247207, 0.0528795272, -0.0005742013, 0.0709837973, -0.0271154512, -0.1166499108, 0.0483733118, 0.0422533862, 0.0624390990, -0.0496389009, -0.0101568103, -0.0639959574, 0.0041981284, 0.0015964441, -0.0009627169, 0.0179124009, -0.0549076796, -0.0533652268, 0.0700602829, 0.0754697248, -0.0232960843, 0.0370810814, 0.0426046029, 0.0462194085, 0.0688895285, -0.0688127801, 0.0435889810, 0.0182280447, -0.0294866040, 0.0846112221, -0.0387823544, -0.0075775385, 0.1011890993, 0.0216092393, -0.0202293210, -0.1027355567, 0.0950829834, 0.1248844638, -0.0683171600, 0.0142357470, 0.0077105761, 0.0522558354, 0.0487517864, -0.0536291935, 0.0315505825, 0.0495941788, -0.1360967159, -0.1645382345, -0.0608176962, -0.0160312224, -0.1482570171, -0.0800833479, 0.0607388765, -0.0602191016, 0.0605604053, 0.1191264614, 0.0431869179, -0.0247934889, 0.0567137152, 0.0279196538, -0.0632596165, 0.0305508673, 0.0312405415, -0.0216590352, 0.0784319565, -0.0802612156, -0.0261323638, 0.0001889051, 0.0820739865, -0.0029877871, 0.0171977654, 0.0751856863, 0.0290836170, -0.0491668284, 0.0095844194, -0.0012068087, -0.0632687211, 0.0738335773, 0.0562328547, -0.0523759797, -0.0070941634, -0.0179299768, 0.0343679339, 0.0394498743, 0.0204279926, -0.0920262933, -0.0211931020, 0.1201073527, 0.1493324041, 0.0977287143, 0.0226746779, -0.1444454640, -0.0712767616, -0.0368007086, 0.0255042091, -0.0751943961, -0.0269152820, -0.0043432787, -0.0572647974, 0.0190688223, -0.0193470344, 0.0168269575, -0.0438186117, -0.0510575585, 0.0723880529, 0.0051672682, -0.0236775242, -0.0229792260, -0.0062325597, 0.0187743232, 0.0164500847, -0.0498256385, -0.0275495648, 0.0511424541, 0.0041580126, -0.0351336263, 0.0595211387, 0.0281751677, 0.0092834830, 0.0359862894, -0.0625706613, 0.0392505452, -0.0502234921, -0.0095972270, -0.0695258379, 0.0764795095, -0.0191595480, -0.0819242969, -0.0018734112, 0.0113053471, -0.0371102951, -0.0166112334, 0.0039891899, -0.0292176008, -0.0218488947, 0.0068016127, 0.0373728946, -0.0801025629, -0.0569723845, 0.0709684044, -0.0061368644, -0.0636083037, 0.0182057619, 0.0778872818, 0.0717919767, -0.0031286255, 0.0780296028, -0.0519112460, -0.0033575147, 0.0098803714, 0.0382264405, -0.0110828802, 0.0322395712, -0.0314220786, 0.0415852740, -0.0353702754, -0.0326004550, 0.0159635916, -0.0343506895, -0.0235666037, -0.0781428814, 0.0798710436, -0.0235348232, 0.0369245633, -0.0723197982, 0.0464024246, 0.0161619186, -0.0282149054, -0.0084900185, 0.0383925214, 0.0572014600, 0.0753382295, -0.0052097738, 0.0404441804, 0.0381809324, -0.0438322611, -0.0211651139, -0.0137997866, 0.0647542030, 0.0718133301, 0.0384091735, 0.0385608897, 0.0604877025, 0.0461059809, 0.0345333591, 0.0124042332, 0.0228682235, 0.0501767695, 0.0552034378, -0.0128108859, 0.0390364677, 0.0821142793, -0.0145478994, 0.0623280406, -0.0711130649, 0.0351486132, -0.0670141578, -0.0153165981, 0.0622695684, 0.0187459216, -0.0541193783, 0.0123689324, -0.0000902787, 0.0785861611, 0.0329928622, -0.0139460638, -0.0705730841, 0.0597768128, 0.0488834679, -0.0599482544, -0.0666979924, -0.0711377561, -0.0607270859, 0.0696532428, -0.0574856959, 0.0532318503, 0.0278661996, 0.0129610449, 0.0611075163, -0.0194179416, 0.0340188146, -0.0731744692, 0.0747766644, 0.0811556131, -0.0209550783, 0.0305946544, -0.0218604244, -0.0324570276, 0.0305922180, 0.0602303296, -0.0125589296, 0.0001376495, 0.0076804459, -0.0816548988, -0.0760004893, 0.0239006951, -0.0442349650, 0.0676572174, 0.0561720878, 0.0721554011, -0.0453549251, 0.0119119212, -0.0532316938, -0.0010795146, 0.0027868152, 0.0557271540, -0.0351283215, 0.0752473325, 0.0600108355, -0.0085795224, -0.0571308210, -0.0014697835, -0.0714093894, 0.0481412709, 0.0021899045, -0.0092735216, 0.0199660361, 0.0342077166, -0.0726731420, -0.0701471195, 0.0378559753, 0.0546159148, 0.0551927239, 0.0515990406, 0.0403184891, -0.0164948478, 0.0462126583, 0.0335152447, -0.0057296976, 0.0101667345, -0.0202956907, 0.0285676420, 0.0433026105, 0.0408307612, 0.0068819672, -0.0806332752, 0.0294886380, -0.0595734417, 0.0155745745, 0.0075264126, 0.0012588874, 0.0719380230, 0.0270851478, -0.0346435346, -0.0332534574, 0.0298039168, -0.0109871477, 0.0801270157, 0.0187484771, 0.0617333353, -0.0042663589, -0.0413110703, 0.0147143826, -0.0771856606, -0.0407408960, 0.0564516783, 0.0617696196, -0.0408559628, -0.0220524296, -0.0698653162, -0.0041220114, -0.0576941967, -0.0307329744, -0.0819412619, 0.0049348623, 0.0089017376, -0.0024692565, -0.0542139187, -0.0724880397, 0.0793764889, 0.0455257148, -0.0039900690, 0.0504205823, 0.0438739806, 0.0668119937, 0.0772228986, -0.0691968128, -0.0719871596, -0.0511781424, -0.0704369396, -0.0290030278, -0.0476951897, 0.0653330833, 0.0544686168, 0.0566737503, 0.0402644575, -0.0367671475, 0.0293670967, -0.0169135630, 0.0587985218, -0.0403343625, 0.0536383390, -0.0391749851, 0.0335825458, 0.0160677508, 0.0029807612, 0.0523363054, -0.0315186419, 0.0640803576, -0.0543099269, -0.0586788207, 0.0593908429, 0.0291690826, 0.0598854572, -0.0644715130, 0.0488365740, 0.0298180804, 0.0711873472, 0.0118783712, -0.0580638237, 0.0336614475, 0.0024969503, -0.0310650431, 0.0644964427, -0.0560136512, 0.0541058928, 0.0316655412, -0.0170658082, 0.0426403284, -0.0412063003, -0.0703193992, 0.0346619785, 0.0653485507, -0.0552164540, 0.0683489591, -0.0739711970, 0.0653526038, 0.0271111950, 0.0755705386, 0.0026649311, -0.0782217234, 0.0025002733, -0.0170207918, 0.0675324351, -0.0441364013, -0.0313591845, 0.0070715174, 0.0411595926, 0.0744983703, 0.0680334121, -0.0787638128, 0.0329581797, 0.0322013274, -0.0016391426, -0.0159239918, 0.0248153955, 0.0152009055, 0.0725198239, -0.0804723427, -0.0552321076, 0.0705777556, 0.0575898737, 0.0578115433, -0.0068051890, 0.0715241134, 0.0488598943, 0.0736567676, 0.0040324628, 0.0058116466, -0.0194134787, -0.0042416304, -0.0642831251, 0.0692033470, 0.0730427504, 0.0323254988, 0.0043770447, -0.0271579213, -0.0604559258, -0.0467544086, -0.0394723676, 0.0486948043, -0.0304883122, 0.0056208074, 0.0375315845, -0.0634256080, -0.0351735801, -0.0143839642, -0.0505834930, -0.0015921518, 0.0354529694, 0.0458460003, 0.0507605523, -0.0357161351, -0.0092741549, -0.0687604025, 0.0742218047, 0.0777654946, -0.0329217985, -0.0491600260, -0.0034659803, 0.0354046673, -0.0773187354, 0.0282325074, 0.0047702193, -0.0609527975, 0.0007557720, -0.0269515216, -0.0602335185, -0.0690834597, -0.0314320177, -0.0794207007, 0.0072410107, -0.0013907626, -0.0592787713, -0.0301479101, -0.0795226470, -0.0272416957, -0.0116175190, 0.0119085833, 0.0623311847, 0.0510703772, -0.0097363517, -0.0105923414, 0.0151993930, -0.0346096903, -0.0584676862, -0.0764555782, -0.0224728510, 0.0757437646, -0.0317828879, 0.0519383252, 0.0675913841, 0.0434093326, -0.0210783742, -0.0341623202, 0.0052361116, 0.0550053418, 0.0559924394, -0.0500200205, -0.0114198998, 0.0068489909, -0.0494457223, -0.0373156369, -0.0530927628, 0.0135784820, 0.0628346354, -0.0146521032, 0.0467664450, 0.0176567286, -0.0802419037, -0.0236785859, -0.0090288594, -0.0651306883, 0.0751062930, 0.0376322120, 0.0767159909, -0.0697834492, 0.0548030436, 0.0373612642, -0.0785324052, -0.0654662699, -0.0518734939, -0.0181678906, -0.0727450699, 0.0080188187, 0.0697943419, -0.0580343008, 0.1423580199, 0.0122041227, 0.0639694259, -0.0461503118, 0.1208145916, -0.0370699428, -0.0541000515, 0.0875427276, -0.0329845771, -0.0232429989, -0.0630869716, -0.0350439996, -0.0526914001, 0.0984774753, -0.0483657159, -0.0831787363, -0.0209506005, 0.0426387638, 0.0243115593, -0.0788569748, 0.0438955799, 0.0120314276, -0.1306577325, -0.0538238063, -0.0103029758, -0.0266653411, -0.0318227224, 0.1033818349, -0.0281287096, -0.0008129814, 0.0184450932, -0.0117614195, -0.1022894755, 0.0546602048, -0.0637611300, -0.0597543865, -0.0575659946, 0.0588320047, 0.0309798941, 0.0831707716, -0.0358896330, -0.0513777956, 0.0766256005, 0.0143043166, -0.0278727021, 0.0146009838, -0.0958372951, -0.0419923626, -0.0400673561, 0.0092385281, 0.0803460032, -0.0355685428, 0.0290977247, 0.1654721200, 0.1037568673, 0.0267137103, 0.0103257764, 0.0391533971, 0.0105082318, 0.0371840149, -0.0745787174, -0.0836637616, 0.0056987237, 0.0783933252, 0.1005735323, -0.0822985172, 0.0509086251, -0.0589198954, 0.0537759699, -0.1656380892, 0.0608252063, -0.0248757750, 0.0564727336, 0.0033236295, 0.0072656064, -0.0572594553, -0.0990512818, 0.0482398942, 0.0147217950, -0.0078291092, 0.0212875418, -0.0312595405, -0.0311052501, 0.0054276064, -0.0100989314, -0.1447948664, 0.0276260916, 0.0998136476, 0.1290932596, 0.0442307889, 0.0469403416, 0.0405484699, 0.0358997881, 0.1057799309, 0.0303764716, 0.0392374173, 0.1185412407, -0.1127758771, 0.1911872476, -0.0629769117, 0.1957358122, 0.0748818815, -0.0523293242, -0.0855943337, 0.2278908640, -0.1849776655, -0.1319307685, 0.0014823878, -0.0134964734, 0.0420978107, -0.0831760466, 0.0038137832, -0.1617174894, 0.0678548664, -0.0784066245, -0.0510121882, 0.0243163928, 0.1008077040, 0.2039725482, -0.0094938083, -0.0125140399, 0.0884622037, -0.1929770112, 0.0246454943, 0.1672568917, 0.0904182792, 0.0033862137, 0.1897592843, -0.0314041711, -0.0061405082, 0.0537231639, 0.0025384640, -0.1188523248, -0.0250746608, -0.2490076423, -0.0644679442, -0.0803795457, -0.1519148052, 0.0943229273, 0.1158399358, -0.1209784299, -0.1628863513, -0.1488811076, 0.0822444633, -0.0488696136, 0.1489362419, -0.1828241795, -0.1245107651, -0.1152431667, 0.0836045146, 0.2607539594, -0.0382409021, 0.1163053289, 0.0476949401, 0.3542363048, -0.0604356453, -0.0625378042, -0.2035037428, -0.0632841140, 0.0072350376, -0.0018465871, -0.1434653848, -0.1787274927, -0.0094819646, 0.1093272790, -0.0154525647, -0.0191336721, 0.0304991454, 0.2811940312, -0.0499002375, 0.0645251870, -0.0491081290, 0.0163556505, 0.1381022334, -0.0707535148, 0.0704407021, -0.0408491306, 0.0140582845, 0.0736247003, 0.0828400776, 0.1570251733, -0.0140774800, 0.0397335514, 0.0305023324, -0.1520697474, 0.0520188473, -0.1186802387, -0.0092908852, 0.1841540188, 0.1693601757, 0.0100988997, -0.0198292509, -0.0305892974, 0.0513390936, -0.0053982106, -0.1564809829, 0.1490664631, 0.0009725576, 0.0031662837, -0.2356708199, 0.0980353206, 0.0922769010, 0.0067901737, -0.1102988049, 0.1734649986, -0.1728965938, -0.0177973062, -0.0081444494, 0.0547221452, 0.0095144426, -0.0199607480, 0.0096117230, -0.1488899142, 0.0143006779, -0.1385954469, -0.0903730467, -0.1139230281, -0.0759716108, 0.1993515491, -0.0791776851, -0.1420863867, 0.0927197412, -0.2271279693, -0.0196307078, 0.0902436674, 0.0717681050, -0.1107950881, 0.1358464509, 0.0262091216, -0.0789918303, 0.1719869077, -0.0937105343, 0.0089784050, -0.1123951524, -0.1585856080, -0.0345057622, 0.0465068072, -0.1801186800, 0.0936375409, -0.0303122699, -0.1404226869, -0.2200917751, -0.1514223367, 0.0295301434, -0.0743533894, 0.1109727994, -0.2646938264, -0.1687969118, -0.0626918525, 0.0623330437, 0.3363201320, 0.0758922994, 0.0195588879, 0.1160499603, 0.2845295668, -0.2235497832, -0.1442194283, -0.1368726641, -0.1281295568, -0.0290286951, -0.1125074327, 0.0137194544, -0.1139803380, 0.0319095924, 0.0486906320, 0.1247514635, 0.2272480875, -0.0652702674, 0.1951797307, 0.0908631086, -0.0104957120, 0.0328435674, -0.1290800720, 0.0384466462, -0.0222541764, -0.0193567891, -0.1184113771, 0.0819792971, -0.0250104312, 0.1944631636, -0.0310397577, -0.1397781521, 0.0662765503, -0.0606225505, -0.1351301223, 0.1269557476, -0.0804183856, -0.0347191244, 0.0064060143, -0.0009099164, 0.0449781679, -0.0795999318, -0.0039925226, 0.0303676650, -0.0135552306, -0.2216587961, 0.0583214536, 0.1246692985, 0.1462115198, -0.2112348229, -0.0357226916, 0.1251635402, -0.0954073593, 0.0105718570, 0.0749384165, -0.1117720753, 0.0711512938, -0.0565793999, 0.0222417470, -0.0568660423, -0.1481141746, -0.0471855998, -0.2277552634, 0.1028630361, -0.0478039980, -0.0230702199, -0.1050563753, -0.0734222159, 0.1386149079, -0.1316601932, -0.1147232726, 0.2855760157, -0.1588705480, -0.1138551980, 0.0283787623, -0.0899715647, -0.2861442864, 0.2523399889, 0.0261049159, -0.0524635725, 0.1308389157, -0.0005317923, -0.1468619853, -0.0321366452, -0.1664444655, 0.0100594796, 0.0213359501, -0.2222098410, 0.0667558834, -0.0549996309, -0.0784443691, -0.0502753332, -0.1559157819, 0.1085082144, -0.0299515743, 0.1366038471, -0.1886618435, -0.1644957662, -0.0748901442, 0.1020584926, 0.3088616431, 0.0265870020, 0.1249082610, 0.1401779652, 0.1329160631, -0.1108107716, -0.0866100863, -0.0219099112, -0.1907303333, 0.0147806359, -0.0724944174, 0.0054344581, -0.0575984977, -0.0863112733, 0.0096241077, 0.1484041810, 0.2799210250, -0.0349790454, 0.1632122099, -0.0014702661, -0.0524657555, -0.0074097589, 0.0356537439, 0.0643637180, -0.1027489975, -0.0152442921, -0.1287337095, 0.0562929586, -0.0578735359, 0.0851373896, -0.1726829559, -0.1931926310, -0.0448391996, 0.0661273226, -0.1786663681, 0.2682403922, 0.0293373652, 0.0487940758, 0.0152043626, -0.1097193137, 0.0062111248, -0.0369128361, -0.1109379381, 0.1135707349, 0.0902455151, -0.1320639104, 0.0720020905, -0.0029305129, 0.0611199215, -0.1338141412, -0.0108633833, 0.2215422690, -0.1529663801, -0.0072479281, 0.0642671511, -0.1201587543, 0.0802914947, 0.1159425154, 0.0461587347, -0.0298986398, -0.0621765181, -0.2182354927, -0.3631678224, 0.0144243147, -0.1020477712, 0.1748591959, 0.0063216351, 0.0583592430, -0.0190712493, -0.1017340124, -0.0017793142, 0.3019473851, 0.0463370383, -0.1470948756, 0.1135366261, -0.1308603436, -0.3217963278, 0.2346999943, -0.0037768490, -0.0263481606, -0.1146063730, 0.1114217490, -0.3476559818, 0.1312036514, -0.0386081114, 0.2720141709, 0.0015127225, -0.2891445160, 0.0265569575, -0.1317068636, -0.1450307220, -0.1449970603, -0.1324440539, 0.1290932298, -0.0866720676, 0.2208893150, -0.0077927331, 0.0145545276, -0.1693334132, 0.1235153601, 0.2583619952, 0.0669243336, 0.2929889560, 0.3103868961, 0.2070044279, -0.0667978898, -0.0926746577, -0.0260807332, -0.1884089112, -0.2238605171, 0.1594028771, -0.0501065925, -0.0396462232, -0.0867683366, -0.2596414089, 0.1270480603, 0.4375313520, -0.1247295365, 0.0340476222, -0.1579185128, 0.0186374635, -0.0718853772, -0.0022252668, 0.2156120688, -0.1357210577, 0.0176939480, -0.0937130377, 0.0471082143, -0.1347156614, -0.0135177765, -0.0505511574, -0.0905666798, 0.0657531768, 0.0387072898, -0.1277867556, 0.1948511750, 0.1011218131, 0.0239272118, -0.1204992607, 0.0159574505, 0.0503354929, 0.0991943479, -0.1893612891, 0.0837925300, 0.1514800936, -0.1227225214, 0.0886962563, 0.0625573397, 0.1314617991, -0.1954252273, 0.0023118444, 0.1183537617, -0.0997141823, -0.1128439158, 0.0626714677, -0.1038498804, -0.0309199654, 0.1633059680, -0.0062649362, -0.0112268580, -0.1319907904, -0.1686887294, -0.2789008915, -0.1117444932, 0.0898958966, 0.0797054619, 0.0757165402, 0.0181503426, 0.1082096845, -0.2088329941, -0.0793717876, 0.1572037935, 0.1705357283, 0.0437103249, 0.1081995592, -0.0182244964, -0.1663130522, 0.1026160046, 0.0422114395, -0.0170000810, -0.1283853650, 0.3245414793, -0.3002813756, 0.1685625166, -0.0292017516, 0.2990323603, -0.0353419334, -0.1592403501, -0.0464993753, -0.0417759232, -0.0640344545, -0.0707642138, -0.0822593719, 0.0614207424, -0.1047944501, 0.0588167086, 0.0954496786, 0.2395351827, 0.0387869552, 0.3282034993, 0.1448604912, -0.0553528592, 0.2674297690, 0.3363223672, 0.0755034238, 0.1050609797, 0.1595713198, -0.0623502396, -0.2515913248, -0.2073458433, 0.2420039922, -0.0498736762, 0.0192087088, -0.0767343193, -0.1192310303, -0.0113702109, 0.4788973331, -0.1301853359, -0.0746379569, -0.1117049679, 0.0856725797, 0.0730374157, -0.1025418788, 0.2428165674, -0.0928643718, -0.0466996618, 0.0761553124, -0.0126669463, -0.1397323012, 0.0854510888, -0.0615055114, -0.1814184338, -0.0376707353, -0.0700832605, -0.1233284175, 0.2185849845, 0.1585221589, -0.0238561127, -0.0726614073, -0.0231185723, -0.0314104296, 0.1874987781, -0.1325889826, 0.1334141940, 0.0419444442, 0.0523995087, 0.1476448625, 0.0574532896, 0.0841894001, -0.0752196312, 0.2217058986, 0.0668131337, -0.1537311524, -0.2421885729, 0.0992802158, 0.0366131514, -0.1171810552, 0.0797843561, -0.0923362374, -0.0272722319, -0.1278231442, -0.1041887626, -0.2846367061, 0.1006670594, 0.0168660134, 0.2305605263, -0.0414596982, 0.1351478547, -0.0196930487, -0.1112735868, -0.1627661139, -0.1468180716, 0.0262315478, -0.0485558771, 0.0928014666, 0.0807260200, -0.1537586898, 0.1917157620, 0.2062565088, 0.0931604430, 0.0499088205, 0.2353668511, -0.2791338265, 0.0759390742, -0.0388954505, 0.3314048052, -0.2113573402, -0.2969994545, -0.0154810520, -0.2715265453, -0.0943633467, 0.0168045945, 0.0814763755, 0.1730339229, -0.0826053470, -0.0751292408, 0.0657342970, 0.0989198312, 0.0662025362, 0.2787997425, 0.2012030929, -0.0026701284, 0.2586142421, 0.3012934625, 0.0313570388, 0.1917855442, 0.0256922115, -0.0743618980, -0.0952663273, -0.1098905057, 0.2259302735, -0.1433305591, -0.0464453399, 0.0426063798, -0.1039451957, 0.0167115945, 0.3836176097, -0.0272134542, 0.0665739328, -0.0639524907, 0.0467026234, 0.0811434016, 0.0582543239, 0.0502461717, 0.0137145137, 0.0643779561, -0.0791720375, 0.0413431786, -0.1751702577, 0.1335563660, -0.0551679060, -0.2190118432, 0.0488221683, 0.0264888518, -0.0215867367, 0.1615963280, 0.0259495713, 0.0520674326, -0.0067662881, -0.0454718210, -0.0636468828, 0.1548035145, -0.2044300437, 0.3020678461, 0.1222055331, 0.0089365840, 0.0680902600, -0.1572326124, -0.0345115475, -0.0952970237, 0.1942910254, -0.0009790371, -0.1342719942, -0.2656789720, 0.1973471493, -0.1531332582, -0.0528747216, 0.1381060332, 0.0113145979, -0.0744277760, -0.1659629494, 0.0497285724, -0.2973757982, 0.0587218255, 0.0003524497, 0.2208500654, -0.1236499175, 0.0535631478, 0.0452155359, 0.0268800594, -0.0031182114, -0.1039255112, 0.0446929522, -0.0577854179, 0.0999599621, 0.0539675355, -0.1783323288, 0.1307305545, 0.1406533271, 0.1396517903, 0.0034067451, 0.1560322642, -0.1529133469, 0.0968178213, -0.0825354382, 0.0348066390, -0.1378289014, -0.1790011674, 0.1601428241, -0.1771352738, -0.0558075868, -0.1087408438, -0.1191279963, 0.2172435224, -0.1163231209, 0.0936068073, -0.0074766474, 0.0970247164, 0.0261503104, 0.0385303460, 0.0091385506, -0.0136961499, 0.0883428827, 0.2182495594, 0.0743850768, 0.0734364912, 0.1086287796, -0.3103595376, -0.0351462923, -0.1478345394, 0.1244313344, -0.1368616670, 0.0254868753, -0.1163259000, -0.1452245116, 0.0630367771, -0.0071065235, -0.1740037650, 0.0988121182, -0.1133286729, -0.0289409384, -0.0047984249, -0.0128363883, 0.0998875052, 0.2415411770, 0.0699482709, 0.0916578397, 0.2294539213, -0.1408862919, 0.1557223946, -0.1547552049, -0.0351175852, -0.0068831979, -0.0032085103, 0.0642500371, -0.0126253227, 0.0332922004, -0.0203660820, -0.0180530101, -0.3077789843, -0.1015627310, 0.0681945980, -0.2754816115, 0.3614754081, 0.1485002041, 0.0313721858, -0.0614454970, -0.0863467902, -0.0188387129, -0.2160298377, 0.1698227823, -0.0136946496, -0.1805340648, -0.0927927941, 0.1212782264, -0.1694669425, -0.0264144447, 0.1154337004, 0.1427454501, -0.1742409021, -0.0570339002, 0.1933217943, -0.0892413855, 0.0697846189, -0.0755111128, 0.0770398006, -0.0282836352, 0.0739240795, -0.0163957421, -0.0584056564, -0.0947464630, 0.0852318928, 0.0437754244, -0.1086023599, 0.2781677842, 0.0545293726, -0.2713754475, 0.0255641192, 0.0568154342, 0.1123712063, -0.0129002491, 0.0849403888, -0.0903779566, 0.1803898662, -0.1000622436, 0.0572713651, -0.0761234835, 0.0538295768, 0.1067787260, -0.1208092645, 0.0376486368, -0.1228185669, -0.1872849017, -0.0119861905, -0.0510035753, 0.0892828330, -0.0179445054, 0.1698024124, 0.1625120491, 0.1892762184, 0.0494026057, 0.0385995023, -0.0054470184, 0.0778983980, 0.0138681633, -0.0531793088, 0.0417966954, -0.1175391451, -0.2130477726, -0.0713666230, 0.0400949642, -0.1166660041, 0.0055776108, -0.1575651467, -0.1791811138, 0.1176589057, -0.0347973555, -0.1163854524, 0.1350999027, -0.1353794187, 0.0320732333, 0.1193158478, 0.0840238705, -0.0167688318, 0.1238724515, 0.0479275547, 0.0470352694, 0.2525659502, -0.0661461800, 0.0720667019, -0.0603468269, -0.0516425446, 0.1128391325, 0.0014033448, -0.0765660778, -0.1183811352, -0.0401799828, -0.1194629148, 0.0017047275, -0.1052240133, 0.0370566323, 0.1169120297, -0.3447771072, 0.2528054714, 0.1733273119, -0.0530338399, -0.0071387710, -0.0699071586, 0.0398257151, -0.0288983565, 0.1010052711, 0.0636763126, -0.2429457009, -0.0834832788, -0.1105497777, -0.0407672934, -0.0046603796, 0.2843429744, 0.1668327451, -0.1211254969, 0.1051352769, 0.0570212975, -0.0175323207, -0.1203642935, -0.1397207230, -0.0121389814, -0.0343905278, 0.0802162513, 0.0647990853, -0.0981256515, -0.0795628801, 0.0334268883, -0.0691167861, -0.0892408565, 0.2980740964, 0.0635332167, -0.1956267208, 0.1530779004, 0.0141062057, 0.0410137959, 0.0099454485, 0.0945623070, -0.1147749126, 0.2120764852, 0.0213593710, 0.1373968124, -0.1306363493, 0.1457153708, 0.2513026893, -0.0097684739, 0.0597616881, -0.0067247259, -0.3463410437, -0.0178782046, -0.0705217496, -0.0804044306, -0.1010941267, 0.1137112528, 0.1425996572, 0.2543101311, -0.0750235245, 0.0227544494, 0.1211157739, 0.2405245602, 0.1171967611, 0.0229828637, 0.2203761339, -0.1449350864, -0.1466444880, -0.1049112231, 0.0850164816, -0.0362540260, -0.1579066962, -0.0577184781, -0.2103210837, 0.0192215983, -0.0072898776, -0.3016630113, 0.0581386723, -0.1449167728, 0.0939182639, 0.0759720281, -0.0308052022, -0.1230681837, 0.1084387675, -0.0032899978, -0.0708535910, 0.1431481093, -0.0859466344, 0.0951989442, 0.1160603017, 0.0416556112, -0.0888392404, -0.1010252163, -0.0723934621, -0.0205548946, 0.0825648904, -0.1887273490, 0.2059158683, -0.0490380228, 0.0486077666, 0.0615292005, -0.2868387401, 0.1429715455, 0.2319104224, 0.0579542033, 0.1939491183, -0.0910114497, 0.0152518200, -0.0275826175, 0.0799817964, 0.0874449536, -0.3546290100, -0.0323148035, -0.0917598978, -0.1388356835, 0.1803682297, 0.2164377719, 0.1085828394, 0.0278749540, 0.0753465891, 0.0624662340, -0.0568190105, -0.1662066430, -0.2469506264, -0.0413570851, 0.0819057301, 0.0086224554, 0.0196025185, -0.0744608343, -0.2535479069, 0.1126755476, -0.0134490635, -0.1004488617, 0.1798851639, -0.0432395451, -0.3748213649, 0.1271030754, -0.0698208585, 0.1237168983, 0.1033615023, 0.1722238362, -0.2312477976, 0.3625955284, 0.0083861966, 0.0296698660, -0.2064470947, 0.0321232863, 0.0396923088, -0.0860539079, -0.1388122737, -0.0415524766, -0.4212380052, -0.2155016512, -0.1347431093, -0.0869300291, -0.1415893137, -0.0096898880, 0.1747435331, 0.2196718603, -0.1038367525, -0.0693763867, -0.0177041888, 0.2959894836, 0.1664971858, 0.1209173650, 0.1099147722, -0.0487419367, -0.0255544819, -0.0556066819, 0.1006962582, -0.0174591094, -0.0804517865, 0.0168078579, -0.1872482449, 0.0713920966, 0.0768223628, -0.1890375614, 0.0539310575, -0.0850844458, 0.0657057613, -0.0050067389, 0.1359353513, -0.0217816923, 0.1425716579, 0.1371676773, -0.1530513018, 0.3620319366, -0.0910243243, 0.0743177906, -0.0855860934, 0.1018020660, -0.1418862045, -0.0230743568, -0.0520463288, 0.1411174685, -0.0245997254, -0.1504117101, -0.0639529899, 0.0370991193, 0.0706059411, -0.0162468906, -0.1321922690, 0.1027795598, 0.4341658056, 0.2193233371, 0.0644293278, -0.1013130844, -0.0123569947, -0.1120175123, 0.2163414359, 0.1323370486, -0.2008553445, -0.3561362624, 0.0112168547, -0.2248597592, -0.0220586807, 0.3439396024, 0.1177450791, 0.0473428145, 0.0799373090, -0.0948553756, -0.2575606704, -0.0182321724, -0.1477061659, 0.1307816207, 0.1380475760, 0.0808165073, 0.0649653003, -0.0896926373, -0.3406436443, -0.0136207286, 0.1063704267, -0.0387987494, 0.2600619793, -0.1951621175, -0.4370131493, 0.3559613526, -0.1010822579, 0.2953563333, 0.2359291166, 0.1993086189, -0.5467806458, 0.1640651077, -0.1241262481, -0.0620091259, -0.1202668250, -0.3914055228, -0.0071380641, -0.0518954471, -0.2633249164, -0.1507305801, -0.3687963784, 0.0548397712, -0.0526606105, -0.0738191456, 0.0017524961, -0.0102144852, -0.1059691831, 0.2023088783, 0.0368713029, -0.0456507280, 0.2698585689, 0.3254522085, 0.2344850153, 0.0248368289, 0.1924315989, -0.0820541307, -0.0837203562, -0.0135810012, 0.2280154079, -0.1878797114, -0.1341977865, -0.0598774105, -0.1935682744, -0.1138665080, 0.0554522909, -0.2730538249, 0.0141497962, -0.2210344821, -0.0162256043, -0.0003451449, 0.1963648945, 0.0412989035, 0.0259552300, 0.0162301846, -0.3369159102, 0.2940379083, -0.1334295273, 0.2634993196, -0.0179237649, -0.0958048925, -0.2260735929, 0.0298405755, -0.0480083264, 0.1594279706, 0.1630044132, -0.0302964766, -0.0288173519, -0.1521333754, -0.0611581467, 0.0192281716, -0.2794465125, 0.1830907166, 0.4803575873, 0.2376007587, 0.1080923975, -0.1100843474, -0.0415128879, -0.0810604021, 0.0031702779, 0.0461240634, -0.1249431968, -0.1851369590, -0.0588061698, -0.0308094490, 0.1399490386, 0.2460728586, 0.1049722508, 0.0346768014, 0.0235589165, 0.0136400312, -0.1135014743, -0.1039268747, 0.0716616213, 0.0342146829, 0.0624949820, 0.0947121158, 0.0181674231, -0.1959500164, -0.3555279970, -0.1276898086, 0.0530542843, -0.0276145823, 0.1129042134, -0.1324928701, -0.2467768043, 0.2419829220, 0.0131930197, 0.2830535173, 0.2229879946, -0.1140264198, -0.3033141792, 0.0889395252, -0.1689988077, 0.0241890997, -0.2785825133, -0.2533001900, -0.0937200189, -0.1931410581, -0.0797752962, -0.0075596683, -0.1681045294, -0.0139945680, -0.1885225028, -0.2892153263, 0.0891553611, 0.1300592721, -0.0908496529, -0.0303764082, 0.0612216964, 0.0583713241, -0.0547923222, 0.1413023025, 0.1009451523, 0.0390140265, 0.2215115577, 0.0232110564, -0.0891788527, -0.1600280404, 0.0808982253, -0.1963271946, -0.1813411713, -0.0539504029, -0.2110963762, -0.0869896188, 0.0681170002, -0.1432881057, -0.0371011086, -0.1359082907, 0.0161023252, -0.0115834745, 0.2277602851, -0.0969254747, -0.0502773635, 0.1362835020, -0.3393625617, 0.0622986481, -0.1126615554, 0.1038222462, -0.0886375979, 0.0330780260, -0.0989936590, 0.0866532773, 0.0112473555, 0.0332637653, 0.0595403686, -0.0835950971, -0.0851112828, 0.0660622567, -0.1846105158, -0.0444163121, -0.2445645034, 0.0445358418, 0.3526405394, 0.1331781447, -0.0784875825, -0.1806852072, -0.0278030392, -0.0370544828, 0.1178117618, -0.0014236798, -0.2730852962, -0.2088551223, -0.0798265412, 0.1082489863, 0.0877482146, 0.1116985977, 0.2248749435, -0.0111692837, -0.0494850762, -0.0493689924, 0.0132069783, -0.1249698550, 0.0488029420, -0.0014137881, 0.0177241173, 0.0926739722, 0.0679806694, -0.1627158374, -0.2245813757, -0.1390245110, -0.0944873542, 0.0568731688, 0.1364058852, 0.0057207206, -0.2363420278, 0.2470314056, 0.0390964895, 0.1967655867, 0.1942234635, 0.1563165486, -0.2133105397, 0.1022637561, -0.1424855590, -0.2228903025, -0.1516856700, -0.1690958887, -0.0814194679, -0.0649167746, -0.0871049687, 0.0691645220, -0.0442451797, -0.0601192825, -0.0439144634, -0.2374728620, -0.0888249278, 0.1245739162, 0.0056422958, 0.1674903333, 0.1938614994, -0.0742332488, 0.0639886707, 0.3277165890, 0.0715225935, 0.2534129322, 0.1006585434, -0.0329597257, -0.1485892236, -0.0257531479, 0.0044364170, -0.1277821809, -0.0315933004, 0.0137192830, -0.1160971969, -0.0615975745, 0.1993927062, 0.0409028940, 0.0333895944, -0.1681484282, 0.0368383862, 0.0345765874, 0.1449558586, -0.0430765226, 0.0667205229, 0.0623861253, -0.2161376923, 0.0928938612, -0.0658804327, 0.1206225082, 0.0933080092, -0.0875787437, -0.0099061755, 0.2485890388, -0.0784520805, -0.1599597931, 0.0772584900, -0.1277249753, 0.1435033083, -0.1211705431, -0.1298653781, -0.1793364733, -0.2207774073, 0.1534165591, 0.2698581219, 0.0578532256, 0.1461819261, -0.2248588204, 0.1223325804, 0.0135797514, 0.1620342582, -0.1563342065, -0.1655593663, -0.1311828643, -0.1041168720, -0.1351467222, -0.0263510719, 0.1324984431, 0.0645081550, -0.0577667095, -0.0663149729, 0.0809946656, -0.1253613532, 0.0536162071, 0.0240976866, 0.2030813545, 0.0127661657, 0.2529284060, 0.1063731536, -0.0347485729, -0.1100615785, -0.2354970872, -0.0136095081, -0.0912869871, 0.2726548612, -0.0888824165, -0.2023715079, 0.2864417732, 0.2170048654, 0.1554844826, 0.1389140487, 0.3025015891, -0.1671803892, 0.0014189609, 0.0031997582, -0.1537417173, -0.1472491771, -0.1714311093, -0.0846910849, -0.0251097158, -0.1170604751, 0.0354065858, 0.0305499956, 0.0470794402, -0.0649203137, -0.0708600059, 0.0706524104, 0.0449668132, 0.0688040033, 0.2077219337, 0.1588845998, 0.0192867648, 0.1987801492, 0.2998553216, 0.0383813307, 0.1873663664, 0.0875962004, -0.0401174016, -0.1272924840, -0.1642974019, -0.0291132070, -0.1601036191, -0.0586163662, 0.0337058529, 0.0774342492, -0.1072867662, 0.0760745034, 0.0698936209, 0.0590426102, -0.1026981026, 0.1921834648, -0.0661860108, -0.1015913859, -0.0143837864, 0.0631890893, -0.0141771855, -0.1184111983, 0.1752204597, 0.0470484160, 0.2542365789, 0.0172532815, -0.1748574227, 0.0366842486, 0.0745692775, -0.2037701607, -0.1760652363, 0.2351028472, -0.0902382210, 0.3148391247, -0.1811779886, -0.1148419827, -0.1686457992, -0.2684725821, 0.1428533643, 0.2730304301, 0.0827239454, 0.1137301475, -0.1329904348, -0.1082574725, -0.0606501251, 0.0506392010, -0.1213495657, -0.0717358664, -0.2367477417, -0.2290605456, -0.2558725476, -0.0066129472, 0.1981441826, 0.0543200076, 0.0171546601, 0.0537768528, -0.0667495877, -0.1701020151, 0.0109053720, 0.0384060778, 0.1675969660, 0.0878693014, 0.2194921821, 0.1125922278, -0.0902862921, 0.0128130997, -0.1274112761, 0.0613041669, -0.0978374258, 0.2104701102, -0.0983202904, -0.3523908854, 0.1512397677, 0.1414725929, 0.1531644166, 0.1276520044, 0.3181944191, -0.2466112226, 0.1142607555, 0.0146900713, -0.0422346406, -0.1673328131, -0.0788584650, -0.0409483500, -0.0821265876, -0.1064214483, -0.0991616324, -0.0053952793, -0.0760279894, -0.1793288141, 0.0115653556, 0.1611720473, 0.0595011003, -0.0785098523, 0.2095152438, -0.0333037041, -0.0345737301, 0.1462007016, 0.1101688147, 0.0330668278, 0.0843372196, 0.1196694225, 0.0838481858, -0.2430579364, -0.1570913345, 0.0818751603, -0.0330978483, -0.1655942351, 0.1471460313, -0.0568333268, -0.0275268517, 0.0371094085, 0.0109600266, 0.1258486956, -0.1106940135, 0.0919961706, -0.0580794886, -0.0229427591, -0.1327947080, 0.0539104827, -0.0589309856, -0.0621127225, 0.1517162323, -0.0288819186, 0.2086372375, 0.0612998269, -0.2369236052, 0.0297629219, 0.2338254303, -0.0975030363, -0.0461862199, 0.1071256250, -0.1666280329, 0.2610586286, -0.0804148316, 0.0022055877, 0.0295788124, -0.2134055048, 0.1266301423, 0.0888445228, 0.0042014108, 0.0500361249, 0.0261855703, -0.1421360224, -0.1049235463, -0.1129657850, -0.1005910560, -0.0886976421, -0.1950353235, -0.1431237012, -0.0035786259, 0.1481959224, 0.2267820090, 0.1818379313, 0.2003263235, 0.0647472516, 0.0935322717, -0.0333685763, -0.1843763441, 0.0738425478, -0.0854798704, 0.2502152324, -0.0604499951, 0.0064578084, -0.0802322552, -0.1367861778, -0.1644465029, 0.0831807926, -0.0491619147, 0.0924688131, 0.1088545471, -0.3121401966, 0.1777416170, -0.1956401318, 0.1530998498, 0.1443300545, 0.2690925896, -0.1433343291, 0.1801331788, 0.0117519135, 0.0312098972, -0.0113965478, 0.0205977578, -0.1302378327, -0.1912433058, 0.0312435292, -0.0245254729, -0.0939331427, -0.0759779364, -0.2095403075, 0.0401048288, 0.1299714297, 0.1248442605, -0.0187492501, 0.1731036752, -0.0585783795, 0.0314315557, 0.0098870713, -0.0530078746, -0.0073385458, 0.0923045129, 0.0780400187, 0.2488813549, -0.2394455522, 0.0238477681, 0.2450170517, -0.0920998827, -0.0840172470, 0.0738313645, 0.0178085845, -0.0796325654, 0.0945479199, -0.0312855840, 0.2254988551, -0.1569611877, 0.1861070544, 0.1074431613, -0.0991578624, -0.0872871578, 0.0883326828, -0.0353761986, -0.2181138843, 0.0943211541, 0.0278524496, -0.0214249417, 0.1134647354, -0.0616483465, -0.0863419548, 0.2011307031, -0.2009729445, 0.0418441817, -0.0115385950, -0.2068018764, 0.1249325275, 0.0783609375, 0.0698214248, 0.1139198765, -0.2425848544, 0.0549077988, 0.1056783274, 0.1671320051, -0.0014838730, -0.0421999954, -0.1622396111, -0.1935990751, 0.0136460150, 0.0249824058, -0.0503736250, -0.1137808934, -0.1855310947, -0.1064369082, -0.0157725774, 0.3847049475, 0.0419042334, -0.0342221856, 0.0375518911, 0.0605651066, -0.0404815972, -0.0384803303, -0.0994567946, 0.0493624508, 0.0900516734, -0.0835319012, 0.0083916085, -0.0407865569, -0.1825471073, -0.0265636444, -0.0989707857, -0.0811088532, 0.0901149213, -0.0709022209, -0.2936542332, 0.0723859072, -0.0337763689, -0.0065017049, 0.1381760389, 0.2297981679, -0.1626377553, 0.1659488380, 0.0171829928, -0.0503052473, -0.1066234261, 0.0881804228, -0.0623769425, -0.0854745433, 0.0074649472, -0.0913217366, -0.1716339439, -0.1141176820, -0.1230496764, -0.1255320907, 0.0018528675, 0.0942057893, -0.0353522114, 0.2902530134, 0.0083122058, -0.0172866154, 0.0240432061, -0.1080208346, 0.2160052806, -0.0160272140, -0.0349891484, -0.0456102602, -0.2232932597, -0.2032029778, 0.3153046966, 0.1083459333, -0.2223473489, 0.0693467408, -0.0364741795, 0.1051836759, 0.1509303451, -0.2725650668, 0.2121151835, 0.0277931951, 0.0271718092, 0.0001836205, -0.0686234385, 0.1702473313, 0.0506755337, -0.0517594405, -0.2142832130, -0.0088742133, 0.1214115024, 0.1406148374, 0.0872562900, -0.0127397459, 0.0442455783, 0.2877267599, -0.1234516576, -0.0051518790, 0.0628795698, -0.0650667921, -0.0431588553, -0.0361763649, 0.0676416159, 0.1117578596, -0.2735512853, 0.1065857261, 0.1425525993, 0.1667199433, 0.1138013899, -0.1832215637, -0.1087182015, -0.1592255533, -0.0126792789, 0.0022493796, 0.0159067195, -0.0924077630, -0.1142397076, -0.0380326957, 0.0080940276, 0.2162348479, 0.0969673470, 0.0419209190, 0.0818228871, 0.0277678333, -0.1254151464, -0.0821893662, -0.2089617550, -0.1083860174, 0.0861501768, -0.0126045458, 0.0604998358, 0.0272256713, -0.1516893357, -0.0891689435, -0.0666891262, 0.0293135718, 0.1201674342, -0.0334786139, -0.0351542979, -0.0115224216, 0.1578033417, 0.1321480125, 0.0840779841, 0.1914297491, -0.2822741866, -0.0174325928, -0.0496645756, -0.1130311638, -0.0782854706, 0.0205256492, -0.1484973878, -0.0608105958, -0.0777476355, -0.0489903577, -0.1628710777, -0.1102151424, -0.0391372815, -0.0539224558, -0.2342548966, 0.0068730246, -0.0311954450, 0.2497845441, -0.1155310795, -0.0602686778, -0.0155629981, 0.0008672940, 0.1180873066, -0.1416535079, -0.0588883385, -0.0753449276, -0.2031388581, -0.1515763402, 0.1685496718, 0.0669465885, -0.0244530458, 0.0662525520, 0.0042833923, 0.0371485204, -0.1039047539, -0.2534336746, 0.2744884789, -0.0127574494, -0.0250252131, -0.0895215198, 0.0114286635, 0.2908808887, -0.0102630416, 0.0936061144, -0.1520591825, 0.0775664896, -0.0012264085, 0.1133371815, -0.0649331808, 0.1009516045, 0.0468912721, 0.3598252833, -0.0623336472, -0.0265911799, -0.0137041127, -0.0524003655, -0.0227199439, 0.0585684776, -0.0540559478, -0.0256730337, -0.0849969536, 0.0841045380, 0.1235230267, 0.1066954732, 0.1422010809, -0.0967698693, -0.1679585874, -0.1500812173, 0.0107283182, 0.0496392213, -0.0666640401, -0.0031194435, -0.0252469648, -0.1456874758, -0.0125908880, 0.1865543276, 0.2299173027, 0.2299234569, 0.0359531753, -0.0553711504, 0.0034622182, -0.0600137524, -0.1823359132, -0.0310400650, 0.0027222228, -0.0817428529, 0.0607644431, 0.0010667765, -0.0731697753, -0.0470538661, -0.1041009948, -0.0589656420, 0.2570779324, 0.0107715698, -0.0757712871, 0.0716712698, 0.1273965836, 0.1882803142, 0.1548876613, 0.0988440290, -0.1632630676, 0.0142005710, 0.0985322297, -0.0210470092, -0.0099110557, 0.0984961689, -0.0866959319, -0.1044120640, 0.1105546430, 0.1166294143, -0.0437117852, -0.0420446247, -0.1145084351, -0.0288513005, -0.1660835743, -0.0315401927, -0.0897049829, 0.3512088954, -0.2001235187, -0.0638278797, -0.0975365713, 0.0259583127, 0.1724303514, 0.0418068506, -0.1698272079, 0.0603196397, -0.0317437835, -0.1535794288, 0.1530019492, -0.0816311538, -0.1879716963, 0.1422182024, 0.1106117517, 0.1185158566, -0.0691077188, -0.1810441613, 0.2277174592, -0.0021236490, -0.0615470782, -0.0962331817, -0.1729575992, 0.2351021767, -0.0132805072, 0.0200264901, -0.2005791217, 0.0743364766, 0.0987092704, 0.0903269202, -0.0768512487, 0.1571812630, 0.0054559857, 0.2133479565, 0.0489251092, 0.1012503803, -0.0626417547, -0.0239408836, -0.0953985155, 0.2122745663, -0.1032436267, 0.0500796996, -0.1224891767, 0.1436293125, -0.0304058604, 0.1209918261, 0.1022356376, -0.0835079402, -0.0371353365, -0.1259528995, 0.1058165058, -0.0383985713, -0.0045444905, -0.0476300977, 0.0090862084, -0.0494998917, 0.0153934211, 0.0659261793, 0.0247736499, -0.0572688952, -0.0237059966, 0.1518212706, 0.0728459954, -0.0451003946, -0.1365810037, 0.1649747193, -0.1278563291, -0.0358068608, 0.1967148483, 0.0415303297, -0.0237790272, -0.0180690046, 0.0111945532, -0.0239957143, 0.0996735021, 0.0350905880, 0.0362220109, 0.0463791080, 0.1155689657, 0.0519296378, 0.1821513623, 0.1226040050, -0.2101691663, 0.1812333316, 0.0453591533, -0.0448882431, -0.0124892378, 0.0995127931, 0.0544039793, -0.0045511071, 0.0941910967, -0.0928773731, 0.0074290568, -0.0284156557, -0.1097643748, 0.0287730377, 0.0365165807, 0.0292696897, 0.0418665707, 0.2974579632, -0.2074247599, 0.0615656525, 0.0983588770, -0.1063669920, 0.0516857915, -0.0309384987, 0.0607383102, -0.0801923200, -0.1357013583, -0.0740474835, 0.1237769872, -0.1033093482, -0.0425755642, 0.0618536584, 0.0539806634, 0.1350994557, 0.0285158716, -0.1185686886, 0.1670495272, 0.0694248378, -0.1764111519, 0.0300265849, -0.0775675699, 0.0306093562, 0.0418209359, -0.0444528721, 0.0604717545, 0.0350956060, 0.0396399610, 0.1450334787, -0.0968042165, 0.1329269111, -0.0079138130, 0.2417007089, 0.0787381753, 0.0016112961, 0.0524506755, -0.1420363039, -0.1381223351, 0.0791190565, 0.0552081540, 0.1204184890, -0.0667370409, 0.0296310931, 0.2406080514, 0.0312195662, 0.1756055951, -0.0711833313, 0.0107412282, -0.0977298468, 0.0990927517, 0.0115621649, 0.0639934838, -0.0798578411, 0.0303319022, 0.0804125667, -0.0575722493, 0.0205669384, 0.0470793843, 0.0278348364, -0.0268207025, 0.0007274370, -0.0449673496, 0.0694798976, -0.0323346145, 0.0305291843, -0.0038958816, 0.0249898937, 0.0057677459, 0.0080425972, -0.0913144574, -0.0611641556, 0.0327524245, 0.0525978059, 0.0269346405, -0.0657790750, -0.1033541411, -0.0472668521, 0.0086405352, 0.0856704637, -0.0150450692, -0.0190804489, 0.0178111792, 0.0912052765, 0.0134644760, -0.0859717727, -0.0141443433, 0.0772692487, -0.1092276722, 0.0288131461, 0.0328439213, -0.0816816688, -0.0707039088, -0.0914096609, -0.0367514640, 0.0223489031, 0.0595262460, -0.0054228664, 0.0062707337, 0.0125181647, -0.1285014004, 0.0421646237, 0.1020396128, 0.0138036786, 0.1336924434, -0.0085080937, 0.0284640733, -0.1006440222, -0.0282698143, -0.0710281432, -0.0500025637, 0.0602866560, -0.0143860234, 0.0612461567, -0.0467220396, 0.0440283865, 0.0736574531, -0.0024411629, -0.0055188444, -0.0538001619, 0.0010690019, 0.0327171683, -0.0707492456, -0.0190335307, -0.0600761622, -0.0882386938, 0.0009877458, -0.0302540902, 0.0700605512, 0.0174976140, 0.0476909280, -0.0703266189, 0.0463633686, 0.1270827353, -0.0490129441, -0.0834363103, 0.0772184283, -0.0779393315, 0.0786560178, -0.0493129008, -0.0043299431, 0.0804962143, -0.0716626868, 0.0729460269, 0.0181756243, -0.0675946325, 0.1561629325, -0.0521481372, 0.0635139495, 0.0815896690, 0.0646231696, 0.0566447712, -0.0124351857, 0.0410142019, 0.0229728594, -0.0426738635, -0.0149666406, -0.0491518416, -0.0705280975, -0.0181978643, 0.0480012335, -0.0611173250, -0.0880777612, -0.0288801454, 0.0277564377, -0.0072098346, 0.0538159460, -0.0277344175, 0.0525932349, 0.0325158164, -0.0125678172, 0.0267535988, 0.0376169309, 0.0463751219, -0.0814737603, 0.0388562679, -0.0564309470, -0.0296724103, 0.0482285917, 0.0535441525, 0.0020942816, 0.0264794696, 0.0076835491, 0.0626629218, -0.0487743616, 0.0858455822, 0.0776579529, 0.0498764850, -0.0798700154, 0.0326500423, 0.0532172769, 0.0690388232, -0.0735765025, 0.0161027778, 0.0198524483, 0.0638572127, -0.0111198770, -0.0206501056, 0.0052765193, -0.0446666218, 0.0370452404, 0.0519469380, 0.0714898929, 0.0277708638, -0.0839389488, 0.0164516736, -0.0543674491, 0.0461033173, 0.0241205264, 0.0404314324, -0.0067018662, -0.0534400567, 0.0482003167, 0.0743678361, 0.0711608827, 0.0673957616, 0.0194472000, -0.0787331089, -0.0688473433, -0.0845922232, 0.0094803115, 0.0166997164, 0.0218737312, 0.0179855302, -0.0653373376, -0.0153559539, -0.0787874907, 0.0529110022, -0.0116079422, -0.0292089097, -0.0200791731, -0.0519316718, 0.0566862226, -0.0385330990, 0.0124438414, 0.0936975628, -0.0146472454, -0.0092826318, 0.0037203142, -0.0538766123, -0.0722216591, -0.0214725100, 0.0062927706, 0.0683479309, 0.0493086390, -0.0516834892, -0.0065181730, -0.0607379079, -0.0754290968, 0.0631729513, 0.0749302506, 0.0361449420, 0.0493999571, -0.0787776560, 0.0116605014, -0.0285749063, 0.0174406841, -0.0658201650, 0.0117755234, -0.0811112821, 0.0685420781, -0.0689338595, 0.0705395937, -0.0744849592, 0.0420736820, -0.0555259958, 0.0814211667, -0.0274848454, -0.0306293033, 0.0022979975, -0.0536749363, 0.0796221197, 0.0467958003, 0.0753810406, 0.0334646478, 0.0369585007, 0.0172922835, 0.0036432669, 0.0255477130, -0.0345938019, 0.0044089630, 0.0234316438, -0.0684373304, -0.0631929636, -0.0384699292, -0.0328924917, -0.0104528591, 0.0523763299, 0.0710512847, 0.0663587302, -0.0254893750, 0.0472917408, -0.0444466285, 0.0770992339, -0.0307714902, -0.0681850463, -0.0823083594, -0.0291411132, -0.0571388155, 0.0172082782, -0.0051638484, -0.0575100519, 0.0298661068, -0.0365884639, -0.0210720859, -0.0305972472, -0.0567227751, -0.0087759495, 0.0281700194, -0.0248981677, 0.0814062059, -0.0296247602, -0.0197521895, -0.0408090949, 0.0340562761, -0.0703980699, 0.0488211960, 0.0555110127, -0.0703815892, -0.0018325597, 0.0326386988, 0.0632607639, 0.0384907126, 0.0559449196, -0.0074370578, 0.0769046396, -0.0636985749, -0.0313200392, -0.0079700649, -0.0787137225, 0.0549287200, -0.0515648760, 0.0714501888, -0.0295102075, -0.0533587933, 0.0679612458, -0.0102103949, -0.0521263666, -0.0297772065, 0.0538582355, -0.0335109457, 0.0820708126, -0.0617035776, 0.0787630230, 0.0632902682, 0.0180414766, 0.0730576068, -0.0266434513, 0.0274486616, 0.0319523215, -0.0117474347, -0.0808933526, 0.0365106389, 0.0131577849, 0.0575419664, 0.0305547416, 0.0448453873, -0.0722900033, -0.0815483630, 0.0021745265, 0.0550495386, 0.0293716714, -0.0328562520, 0.0016400442, 0.0134774819, 0.0723833889, 0.0137619600, 0.0502475500, -0.0359490700, 0.0646845102, 0.0411084592, 0.0345716029, -0.0402650647, 0.0032273680, -0.0742242858, -0.0760142952, -0.0034528822, -0.0209412687, 0.0552328229, -0.0688660592, -0.0578123853, 0.0338218659, 0.0021331608, 0.0184572190, -0.0022111759, 0.0298403725, -0.0352889746, 0.0207105130, 0.0666126162, 0.0068879575, -0.0170335546, -0.0147540048, -0.0789909512, 0.0400397331, -0.0242805369, 0.0608778447, -0.0586361177, 0.0572564751, 0.0661663413, -0.0241168812, -0.0003605708, 0.0675929338, 0.0553972870, 0.0151018277, 0.0712426305, -0.0705415159, 0.0101598203, 0.0439704061, -0.0599748306, 0.0234949067, 0.0027090684, -0.0582887270, -0.0636409074, -0.0523437262, 0.0811939240, 0.0735195279, 0.0307392552, 0.0013463348, -0.0459725894, -0.0808799565, 0.0419006273, 0.0467228442, -0.0641594604, 0.0074355453, -0.0132959485, 0.0014511421, 0.0016208738, 0.0056342632, -0.0182823315, -0.0469099544, 0.0818726122, -0.0172052085, -0.0532330461, 0.0384953022, -0.0003761649, -0.0382111818, -0.0625347346, 0.0135343820, 0.0323908329, -0.0215570703, -0.0301290341, 0.0745632499, 0.0366499797, 0.0314233974, -0.0100774541, -0.0476132631, -0.0041321665, -0.0672348514, 0.0223491266, -0.0306464098, -0.0125609189, 0.0585259497, -0.0257706530, -0.0028208122, -0.0636388063, 0.0209745243, -0.0201630667, -0.0811497420, 0.0447755903, 0.0286381319, 0.0167492926, 0.0798717290, 0.0544805229, -0.0339672752, 0.0426614434, -0.0600725710, -0.0807303414, -0.0336861946, -0.0558613092, 0.0492583513, -0.0323024429, -0.0232755281, -0.0078994334, -0.0782301873, -0.0176738948, 0.0707905740, -0.0372058153, 0.0321528241, 0.0304544866, -0.0266576745, 0.0279636607, -0.0388441496, -0.0646900311, 0.0137736276, -0.0180393755, -0.0778599530, -0.0585614182, -0.0561644062, -0.0054502934, -0.0020320788, 0.0446614027, 0.0007821098, 0.0625447333, -0.0787913874, 0.0362813547, 0.0104574338, -0.0112995952, -0.0424975380, -0.0406449847, 0.0512977988, -0.0100232065, 0.0360138342, -0.0764708221, -0.0142891929, 0.0729179084, 0.0600070953, 0.0569006354, -0.0165057927, -0.0566634163, -0.0795192495, 0.0814264566, 0.0613981634, -0.0387117825, -0.0269411094, 0.0749728233, 0.0217703283, -0.0058845207, 0.0020620152, 0.0767751634, 0.0184526294, 0.0356125608, -0.0702988580, 0.0677506328, -0.0450713485, -0.0592024401, 0.0323410779, 0.0788720548, 0.0630721897, -0.0547496751, -0.0213833563, 0.0287598968, 0.0649197847, 0.0020493641, -0.0625189021, 0.0605026484, -0.0741544366, 0.0531707853, -0.0750520453, -0.0221473575, -0.0278907493, 0.0637914240, 0.0655623227, 0.0586396754, 0.0155543610, -0.0427303948, 0.0309949443, -0.0320885591, 0.0576509684, 0.0428116471, 0.0423455238, 0.0245656818, -0.0393751189, -0.0481102876, 0.0545401424, -0.0603670254, -0.0253949948, -0.0225158259, 0.0078654513, 0.0417136401, -0.0157409683, 0.0008635521, -0.0783055574, -0.0518000312, 0.0062384158, -0.0784732252, 0.0327669829, -0.0442620143, -0.0148217082, 0.0065925047, 0.0369026214, 0.0780069530, 0.0243231431, 0.0745251030, 0.0413798019, -0.0572628528, 0.0621610880, -0.0253162906, -0.0496023856, 0.0327459201, 0.0036524832, -0.0476980582, 0.0099424571, 0.0616844445, 0.0776652545, 0.0048318356, 0.0677939653, -0.0159588382, 0.0628005117, 0.0815408379, -0.0512105525, 0.0711225122, -0.0732071176, 0.0162468851, 0.0740873814, 0.0684347302, 0.0018449724, -0.0562841222, 0.0524342358, 0.0155600607, 0.0201134086, -0.0368739031, 0.0557587743, 0.0665426254, 0.0152181461, 0.0585919023, -0.0816248134, 0.0800532848, 0.0125184879, -0.0536994115, -0.0796696693, -0.0648814663, 0.0176033005, 0.0443298966, -0.0434366278, -0.0751177669, 0.0584881753, 0.0532561392, -0.0441587344, -0.0532080010, 0.0060541481, -0.0065895170, 0.0093298927, -0.0797352940, -0.0811163560, -0.0037580803, -0.0372180529, 0.0445505977, -0.0393985324, 0.0511641204, -0.0547848791, 0.0054328293, 0.0462381691, -0.0600861832, 0.0526185930, -0.0681378022, 0.0041615516, -0.0682451501, -0.0534686521, 0.0697524101, -0.0618404634, -0.0623795241, 0.0638920367, 0.0565218925, -0.0260563679, 0.0545320809, 0.0626755655, 0.0345007181, 0.0408774316, 0.0509679168, -0.0618667081, -0.0406318642, -0.0172514096, 0.0323652178, 0.0638106316, 0.0267546698, 0.0662165284, 0.0810081810, 0.0371561795, 0.0419725031, 0.0366073400, -0.0011111796, 0.0387982279, 0.0528559685, -0.0038213879, 0.0752117038, 0.0706425309, 0.0764439106, 0.0066508800, 0.0059053451, 0.0402060449, 0.0535382330, -0.0607648790, -0.0401139781, -0.0537283048, 0.0757635087, 0.0522755086, 0.0711241364, 0.0342068672, -0.0624304190, 0.0605376363, -0.0232261643, -0.0034794137, 0.0716412365, -0.0409534462, 0.0817604959, 0.0601691753, 0.0265891254, -0.0776716471, 0.0349410772, 0.0805547833, -0.0493765213, -0.0673391372, -0.0302187800, -0.0037340149, 0.0095355138, -0.0635918975, -0.0655036271, 0.0545949638, -0.0119492784, -0.0789560080, 0.0257121995, 0.0016470179, -0.0477671213, 0.0816171914, -0.0304136500, 0.0576080084, -0.0690683946, -0.0271514580, -0.0441782214, 0.0543357432, -0.0259730667, 0.0302534848, -0.0418863110, 0.0473079979, -0.0545417853, 0.0796126425, 0.0489333719, 0.0285319462, 0.0477417558, 0.0247387737, 0.0533142090, -0.0775542408, 0.0172722712, 0.0471192449, -0.0280066803, 0.0476920903, 0.0300930291, -0.0457299724, 0.0555869639, 0.0799376518, 0.0553721040, -0.0719683617, -0.0503008813, -0.0393006951, 0.0593520999, 0.0735818893, -0.0780174285, 0.0045328662, -0.0025766790, 0.0727117807, -0.0108191669, 0.0664835423, 0.0003436953, -0.0500664338, 0.0126978010, 0.0304780379, 0.0590482950, 0.0426230878, -0.0697363839, 0.0718582422, 0.0369624719, -0.0116071105, 0.0585813820, -0.0403083377, -0.0165037289, -0.0756310374, -0.0187820643, -0.0100269392, 0.0495515764, -0.0271229781, -0.0474170782, -0.0288209654, 0.0005291775, -0.0275839381, -0.0119166747, -0.0191864595, 0.0325986296, -0.0819668621, -0.0330078527, 0.0148337930, 0.0084384531, -0.0530424975, -0.0250927210, 0.0749337971, 0.0608077943, 0.0294431522, 0.0611963123, -0.0208608545, 0.0757979453, 0.0403717607, 0.0802157521, -0.0266074277, -0.0502404422, 0.0469032377, -0.0596840680, 0.0775996894, 0.0275501758, -0.0698092952, 0.0459249169, 0.0515191108, 0.0010354593, -0.0561316609, 0.0310141295, 0.0590835661, 0.0493239015, 0.0693927407, 0.0733364671, 0.0647697747, 0.0472484082, 0.0015568212, -0.0017445162, -0.0726820976, 0.0337100774, 0.0774738938, -0.0068366155, 0.0178331733, -0.0676061511, -0.0709388778, -0.0348233767, -0.0757234916, -0.0583336093, 0.0814586431, 0.0194196478, 0.0613641441, 0.0126430765, 0.0302150846, -0.0130606890, 0.0703603029, 0.0120363683, 0.0692667365, 0.0321068615, -0.0118076950, 0.0275710523, 0.0507745147, -0.0671028197, -0.0046720058, -0.0045326278, -0.0256446302, -0.0200232342, -0.0013949871, -0.0156309679, 0.0303924382, 0.0083701760, -0.0611653402, -0.0534937754, -0.0582011044, -0.0536357500, -0.0184533149, 0.0338156521, -0.0093946382, -0.0488502495, -0.0295484513, -0.0282574706, -0.0588038415, 0.0035732836, 0.0102564991, 0.0512069613, 0.0109781493, 0.0002922588, -0.0256482791, -0.1289294809, -0.0162465405, -0.0874099210, -0.0083215237, 0.0485436320, 0.0491929501, 0.0717104748, 0.0134450896, 0.0761571974, 0.0762812942, 0.0039863898, -0.0275283456, 0.0897666216, -0.0177855939, 0.0136650605, -0.0032913503, 0.0034193695, -0.0032161851, -0.1153945252, -0.0438152328, 0.0390507989, -0.0561164878, 0.0875528604, 0.0207618177, -0.0507028624, -0.0757334530, 0.0466370620, -0.0000069650, -0.0628863126, -0.0440881960, -0.0602772236, -0.0229381751, 0.0945924595, -0.0448178984, 0.0659677610, 0.0621492267, -0.0355210230, -0.0082553579, 0.0481334440, 0.0006019244, -0.0629870892, 0.1115952581, -0.0188347790, -0.0712535977, -0.0189949274, -0.0604485013, 0.0198409446, 0.1173639819, 0.0836794451, -0.0909620225, -0.0953643173, 0.0578007698, -0.0411932804, -0.0217591282, 0.0150596425, 0.0971120968, -0.0253184345, 0.1076514944, 0.0803966299, -0.1101467535, 0.0864582360, -0.0826500803, -0.0066125374, -0.0129942596, 0.0389867574, 0.0290330518, 0.0705382451, -0.0343696885, 0.0140968934, 0.0410700962, -0.0821324140, 0.0002307966, 0.0329971798, 0.0004052814, -0.0548557565, 0.0693756789, 0.0047909054, -0.1235224605, 0.0492933728, 0.0206980091, 0.0512362868, -0.0157809928, -0.0723237842, -0.0006331126, -0.0625087321, 0.0012935799, 0.0108303865, 0.0064822547, -0.0828694031, 0.1886167377, -0.0107732071, 0.1016004309, -0.0691518784, 0.0247656386, 0.1183162406, 0.0417648256, -0.0744679943, 0.1257253289, -0.0594056919, 0.0375509933, -0.0629379973, -0.0398517251, -0.0533699170, -0.0657765418, -0.0671468973, 0.0438216291, 0.0391235761, 0.0607249103, 0.0381906778, 0.0490486473, -0.0793509334, -0.0278429724, 0.0743001178, -0.1102952212, 0.0604451187, -0.0842217505, 0.0312567614, 0.0441300496, -0.1692030579, -0.0364363529, -0.0577364787, -0.0370867960, 0.0845547691, -0.0725235119, 0.0492654182, -0.0381323956, 0.0388778448, -0.0538093932, -0.0725211948, 0.0879876241, 0.0325859040, -0.0369316377, 0.1459338814, 0.0504880138, 0.0503933616, -0.0163595732, -0.0735279322, -0.0386498831, -0.0067000599, -0.0476204455, -0.0472897105, 0.0413575172, 0.0263803396, -0.1109372675, -0.1198927239, -0.0919459239, 0.0428209864, 0.0397783369, 0.1149819046, -0.0737394691, -0.0931752101, -0.0198413283, -0.0029725784, -0.1233031824, -0.0419678688, 0.1212320179, -0.0397563130, 0.1442077756, 0.0821928754, -0.1251748800, 0.0686160848, -0.1525913924, 0.0481565744, -0.0342283770, 0.0228513591, 0.0608319975, 0.1544258446, 0.0480313189, -0.0235479474, -0.0227874331, -0.0612878688, 0.0623398721, 0.0683247074, 0.0012834949, 0.0823901221, 0.0905319676, 0.0554552525, -0.1805377007, -0.0280320309, 0.0520044230, -0.0385313630, -0.0914764404, 0.0303007066, -0.0602711216, 0.0494275987, 0.0272147506, 0.0566333123, -0.0137463650, -0.0339408889, 0.1789561063, 0.0243800189, 0.0064612674, -0.0758522227, -0.0604666546, 0.0435208790, 0.1122665629, -0.0791071579, -0.1242513582, -0.0247339141, -0.1439502984, -0.1475686580, -0.0778966770, 0.0482386760, -0.0280709434, 0.0623822212, -0.0404002480, 0.1787331700, 0.1880571991, -0.0773334876, -0.0052599609, -0.0461394228, -0.0491349138, -0.0195281096, -0.0542279929, -0.0782917663, -0.1258445531, 0.0385137945, 0.0214977302, 0.0986544192, 0.0076721758, -0.1061470509, -0.0862862617, -0.0213492494, -0.0315232761, 0.0845513269, -0.1194301918, -0.0705794469, 0.1073288992, -0.0944314972, 0.1542415321, -0.0058069280, -0.0144126974, -0.1702524126, 0.1104516312, 0.0182496943, -0.0331578963, -0.0433958061, -0.1130206883, 0.0018021778, 0.0471910276, 0.0390414447, -0.1154836491, -0.0564684495, -0.1107127890, -0.0838704035, -0.0165225845, 0.0440941490, -0.0206366945, 0.0161049422, 0.0221548807, -0.1578836143, 0.0213705078, 0.1117716357, 0.1467979997, 0.0318285264, 0.0785722658, -0.1251370013, 0.1523831040, -0.0557423793, -0.0679556206, 0.0471586399, -0.2148471028, -0.1004282162, 0.0876990110, -0.0632717535, -0.0388960466, 0.1091014221, -0.0198167581, 0.0947444513, -0.0546715148, -0.0590999536, -0.0181077123, 0.0323782861, 0.0565912798, 0.0680818856, 0.0217779316, -0.0273601413, 0.1033405364, 0.0383353271, -0.0698988065, 0.0548845567, 0.0001464430, -0.0637044683, -0.0219543613, -0.0374666341, 0.0675897375, -0.0679013059, -0.1133905426, -0.0308389366, 0.1284965426, 0.0382213779, 0.1063821390, -0.0820026323, -0.0934579521, 0.0816175714, 0.0491998494, 0.1316985190, -0.1146790832, -0.0734535828, 0.0219328348, -0.0804787576, 0.0035410207, -0.0819730237, 0.0260936916, -0.1015317291, 0.0910139009, 0.1905828267, 0.1712732911, -0.0420617536, 0.0735826790, 0.0489697233, -0.0627249405, -0.1426859051, -0.1498993784, -0.0675692931, -0.0962336734, 0.0420598723, -0.0392082483, -0.0805806667, 0.0656486452, -0.1349386573, -0.1400916576, 0.0887477696, -0.0695443824, -0.0693473741, -0.0070892721, -0.1465529650, 0.0218189377, 0.0125673041, 0.1155625805, 0.1427381635, 0.1914787441, -0.2325631082, 0.2179712057, -0.0164813530, 0.0137571376, -0.0674218684, -0.1694437116, -0.1305008233, -0.0623786040, -0.0881728679, 0.0217828248, -0.2048643529, -0.0604655221, -0.1757457554, -0.1177597865, 0.1906886846, 0.0642537624, 0.1200029030, 0.1359918267, -0.0901828855, -0.0022717938, 0.0458034128, 0.0250412561, 0.0536003970, 0.1420248300, 0.0012921006, 0.2893816531, 0.0294968411, -0.1574658751, 0.2123869956, -0.1768928617, -0.0391503759, 0.0140401814, -0.0982592329, -0.0309557803, 0.2534945905, -0.0453471541, 0.1318399310, -0.1128976196, 0.0442045107, 0.0377796814, -0.0328906514, 0.0207117293, 0.0823445991, 0.0863791332, 0.0468265079, 0.0907347798, -0.1223145872, -0.0135377208, 0.0577573590, 0.0389789604, -0.0476159528, -0.0774171650, -0.0467439629, 0.0875550881, -0.0691708028, -0.1106897891, -0.1160632446, -0.0125446087, -0.1413483024, 0.1933847368, -0.1008095443, -0.0132476054, 0.0609685034, 0.1275884509, -0.0615655147, -0.0764931291, 0.0400016233, -0.1021860316, -0.1484794766, 0.0031085908, -0.0204034280, -0.0561149046, -0.1254278570, 0.0920047238, 0.0965671986, 0.1294357777, -0.0221842043, 0.0006563471, -0.0091166627, -0.0727006942, -0.0413450003, -0.3075200915, -0.0840591416, -0.1216985807, 0.0236708783, 0.0141819967, -0.0900214836, 0.0016645789, 0.0283759888, -0.1176846474, -0.0452953763, -0.0143180313, -0.1195196211, -0.0799488351, -0.1030038521, 0.1277272105, -0.1480289698, 0.1569177061, 0.0771682933, 0.1218366325, -0.1004640236, 0.2169380784, 0.0955533609, -0.0180619415, 0.0565823354, -0.1091112420, -0.0844916776, 0.0413174182, -0.0588664077, 0.0025324170, -0.2881430686, -0.1370119452, -0.1724452376, -0.0005275988, 0.1262222826, 0.0668875203, 0.1243005320, 0.2141147852, -0.1788916588, -0.0066099688, 0.0957220420, 0.1031027883, 0.0411745608, 0.0627024621, -0.0048026857, 0.3414023817, -0.0157669093, -0.1013419628, 0.0236759949, -0.2517490089, -0.1002468765, 0.0922961161, 0.0049184747, -0.0798080638, 0.1760801673, -0.0098701250, 0.1456408650, 0.0100626620, -0.0828778818, -0.0523690470, -0.0329569504, 0.0156228598, -0.0214931462, 0.0637950003, -0.0756877884, 0.0696784779, -0.0094463676, -0.0170799885, 0.0858432353, 0.0046680211, 0.0459120497, 0.0217745099, 0.0395307019, 0.0873125941, 0.0707992092, -0.0684744865, -0.0854123607, -0.0142505663, 0.0310114920, 0.0894308910, -0.0768567920, -0.0394451842, 0.1231379807, 0.0258030426, -0.0351729877, -0.0605075061, 0.0416975468, -0.0405985415, -0.0404844359, -0.0623985603, -0.0666096509, 0.0087288627, -0.0964847282, 0.0182753634, 0.1001344025, 0.1791582108, 0.0810798258, 0.0684834272, -0.1115046367, -0.1204067990, -0.0338398851, -0.1774293780, 0.0152537627, -0.0368665159, 0.1468827277, 0.0159409437, -0.0340077132, -0.0582911558, -0.0529159978, -0.0031118025, 0.0890326872, 0.0327018499, -0.0443441793, -0.0131339729, -0.1508029401, -0.0197957605, -0.0936023667, 0.1033043116, 0.0380050614, 0.0455508493, -0.1118892431, 0.2045072317, -0.0950561985, -0.0645883009, -0.0289086271, -0.0481322557, 0.0281797163, -0.0262821671, -0.0663050190, -0.0295869745, -0.0994701609, -0.2119282484, -0.0799567550, 0.0595930293, 0.0145232612, -0.0835618079, 0.0307971332, 0.0970218852, 0.0076508522, 0.0297761038, 0.0501677841, 0.0667778030, 0.0795668289, 0.1561799198, 0.0318712518, 0.2375362366, -0.0650310442, -0.0310933907, 0.0842574611, -0.3158463240, -0.0737581551, 0.2189296037, -0.0198269952, -0.0764071494, 0.2055879533, -0.0310465116, 0.0722572282, -0.0203166697, 0.0094930427, 0.0246250853, 0.1609747559, 0.0775696263, -0.2411296368, 0.0901162922, 0.0140779382, -0.0420862399, -0.0662967786, -0.0736478046, 0.0736128092, -0.0867854580, -0.0186233819, 0.0152321970, -0.0810853317, 0.0242852271, -0.0322664157, -0.0846982151, -0.0951274335, 0.1418552548, -0.0126215760, 0.0843544751, 0.0292108767, 0.0336158797, 0.1700028330, 0.0449150577, 0.1631624103, -0.0346877389, -0.0076346486, 0.0370650291, 0.0687491745, 0.0787990838, -0.0302909799, -0.0499585979, -0.1769116819, -0.0333986841, 0.1011231691, 0.1388266385, 0.1622222066, 0.0547495261, 0.0185815189, -0.0721216202, -0.1570248902, -0.1651521325, -0.0109111816, -0.0563035831, 0.1258910596, 0.0773357973, -0.0451757684, 0.0054908856, -0.1431544721, -0.0014699691, 0.1376161128, -0.0622402541, 0.0790652409, -0.1571767628, -0.0602022037, 0.0418273062, -0.0616145097, 0.0846441090, 0.0220563337, 0.0769831762, -0.0668890625, 0.1266536564, 0.0644741505, -0.0278524533, 0.0341510512, -0.0967081189, -0.0346921049, -0.1785743535, 0.0562929101, -0.0823795199, -0.0756043419, -0.0335634016, -0.1853504926, 0.0433787443, 0.0177473258, 0.0141135054, 0.0908807591, 0.1476719081, -0.0537551455, -0.0234718584, 0.1000104919, 0.1565048844, 0.0431438498, 0.1277486831, -0.0672187731, 0.1330239475, 0.0512432940, -0.0290383752, 0.1595342010, -0.2911686301, -0.1302319914, 0.2423885465, -0.1649395823, 0.0898057967, 0.2557529807, -0.1458289027, 0.1246802509, -0.0086803734, -0.1364083439, -0.0305337235, 0.2147181332, 0.2332228422, -0.0046972279, -0.0053088199, 0.0507934242, 0.1362497211, 0.0376328044, -0.0271007791, -0.0963231549, -0.0732959285, 0.0387443714, -0.0145261949, -0.0029217356, 0.0160951205, 0.1100774780, -0.1227220148, -0.0159669667, 0.1080892757, -0.1085279509, 0.0764389038, -0.1775409430, 0.1284980178, 0.1165932342, 0.1252412498, -0.0036273098, -0.1186462343, -0.0871551186, -0.0901868567, 0.0596456341, -0.0063218712, -0.0719756857, -0.0141616268, -0.1015917510, 0.0148924282, -0.0229211394, 0.1984421462, 0.1075472310, 0.0898865089, 0.0856540054, 0.0248837676, -0.2145658731, -0.2540835142, -0.1439868212, 0.0598157719, 0.0401536338, 0.0314378589, 0.0721124038, -0.0466550142, -0.0263632722, 0.0230536722, 0.0083740400, -0.0966404304, 0.1023804471, -0.1359214038, -0.0442349762, 0.1187585518, -0.1632038653, -0.0585699901, 0.0454310328, 0.1064633578, -0.1468497515, 0.2195626646, -0.0842604116, 0.0125182550, -0.0191970542, -0.0072639417, 0.1105639637, 0.1126049235, 0.0245230570, -0.1332804561, -0.0482317060, -0.1151795462, -0.0952994525, 0.0757039115, 0.0382149704, 0.1002655923, -0.0042351908, 0.2239041477, -0.0402784012, -0.0483399928, 0.1077192798, 0.1108687222, 0.1766820848, -0.0293361656, -0.0389600433, 0.0093394015, 0.0612913035, 0.0241287127, 0.0643841103, -0.2811242342, 0.0128965396, 0.0785805732, -0.1391911954, -0.0502431244, 0.3071964085, -0.0131058488, 0.0686223805, -0.0367096029, -0.0354797393, 0.0082384422, -0.0227457527, 0.2439743727, -0.2371883690, 0.0594169721, 0.0151787829, 0.1920786798, -0.0090036439, -0.0633805245, -0.1159899235, -0.0529163405, -0.0111659467, 0.0205659140, -0.0549886562, -0.0277294572, 0.0306114703, -0.1264614463, 0.1400413364, -0.0028037708, -0.0702992678, 0.0668400824, -0.0757437572, 0.2201891690, 0.2279824913, 0.0732623637, 0.1375976503, -0.0368560776, 0.0662632361, -0.1376984268, -0.0287337471, 0.0707521215, -0.1314117610, 0.0107471459, -0.0852373242, -0.1019632518, 0.0419664010, 0.2242982090, 0.1723957211, 0.0207961425, 0.1164728254, 0.0489534326, -0.0769889206, -0.1856481135, -0.0789295882, -0.0500519946, 0.0447012372, 0.0358012728, 0.1214579418, -0.0995261446, 0.0316604376, 0.0100355754, 0.0164540727, 0.0682515427, 0.0364135429, -0.0503034666, 0.0070139701, 0.1846484989, -0.0968374982, 0.0447834991, -0.0088246763, 0.2235435992, -0.2006500959, 0.0856379941, -0.0505699217, 0.1338865012, 0.0433613323, -0.0675595403, -0.0213552285, 0.0333431140, 0.0586799905, -0.0724605843, -0.1160046607, -0.1512676924, -0.0884141698, 0.0222593658, 0.0495750532, 0.0507141650, -0.0053840904, 0.2676026225, 0.0132276723, 0.0745450780, 0.0018450195, 0.1644125879, 0.0787834376, 0.0489958413, -0.0049780584, -0.0314216204, 0.0776966512, -0.0154168708, 0.0956404358, -0.2203038186, -0.0251162406, 0.1134289131, -0.1179188415, 0.0017904078, 0.2724674046, 0.0862553194, 0.0117629142, -0.0050571891, -0.0331248194, -0.0311421193, -0.0100501701, 0.1918042451, -0.2142875791, 0.0134124765, 0.0022500069, 0.2058846503, 0.0613828525, -0.0072319093, 0.0666668788, 0.0246945228, -0.0351166427, -0.0042640576, -0.0219890885, 0.0065372777, 0.1185966358, -0.1561263800, 0.0244290121, 0.0034091298, -0.0806294158, -0.0631400794, -0.0720185563, 0.0119650047, 0.1637663990, -0.0108579835, 0.1643476486, 0.1422712207, -0.2432372272, 0.1608711779, -0.0892849192, 0.0444508418, -0.1371991634, -0.0580812246, -0.0806297138, -0.0561816767, 0.1700158864, 0.2472709119, 0.1178972498, 0.1877342910, -0.0076689278, -0.1424574256, 0.0838256776, -0.1605987102, -0.0752915442, -0.0860777274, 0.2014283836, -0.1682824492, -0.0991651490, -0.0361542441, -0.1586628258, -0.0152966529, 0.2256163210, 0.0242861584, 0.0017611140, 0.0413968414, -0.1151963919, -0.0454558022, -0.1118736342, 0.1825861335, 0.0149140451, 0.0894006118, -0.1544837058, 0.1785004288, 0.2357462943, 0.0327870063, -0.0148995370, -0.0212647598, -0.0912651122, -0.0692448989, 0.0709924102, 0.1303729266, -0.1069112122, -0.2007449269, -0.2056435049, -0.0510593876, 0.0224501826, 0.1037532836, 0.2323824018, 0.0886656940, -0.0776706189, 0.0224306602, -0.0770878494, -0.1196498573, -0.2032022327, 0.3160791695, 0.0423930511, 0.1538851410, 0.0478857309, 0.0056804623, 0.0972338989, -0.1772468388, -0.0639016181, 0.0559544452, -0.0434996709, 0.0583938099, 0.2815588713, -0.1171003282, 0.0144179408, 0.0702428892, 0.1298457831, 0.0700880811, 0.3275341988, 0.1763376892, -0.2225089073, 0.1125747561, -0.0783582181, -0.0296821482, -0.0160989799, 0.0087002171, 0.0149193034, -0.0371970646, -0.0876545087, -0.0960068032, -0.0659321472, -0.0616692118, 0.0267654695, -0.1588861495, -0.1848811060, 0.2833203971, -0.1161454245, 0.1460504532, -0.1593263298, -0.0009852075, 0.1903353184, 0.3454706073, -0.1305429935, -0.2855908275, -0.1437011659, -0.1377505511, 0.0845570862, 0.1059889346, -0.2293168604, -0.1498925686, -0.0494994037, -0.2629656196, 0.0411551408, 0.1659055352, 0.0572533086, 0.1504837126, -0.0598375350, -0.0077141798, -0.1525638700, 0.1149280965, -0.2121550888, 0.1377255917, 0.1304796338, -0.0541633107, 0.1430271715, -0.0662066191, -0.1958077401, -0.0869070515, 0.1683093160, 0.0133144269, 0.2196540385, 0.0199130364, -0.2877753973, 0.2154192924, 0.1100327075, 0.2514689267, 0.2091472000, 0.2421267778, -0.3546793461, 0.1598007977, 0.0184754133, -0.0074568950, -0.0236370713, -0.2070004791, -0.1245598644, -0.0525018834, 0.0246359631, -0.0921999216, 0.0196165685, 0.0044418713, -0.2234325409, 0.1027632728, 0.0584062599, 0.1236916110, 0.0500523560, 0.2388774753, 0.0306898467, 0.0592305735, 0.0592393614, 0.3584960103, 0.0735063329, 0.2731093764, 0.0742930621, 0.0705296472, 0.0704252049, -0.0969666094, 0.2541743815, -0.3950004578, -0.0188864879, 0.0142843202, 0.0348012336, 0.0442376062, 0.3192697763, -0.1056261286, 0.2127232999, -0.0490168519, -0.1104325503, 0.0605861172, 0.0404648371, 0.0912474394, -0.1227145195, -0.0487483256, -0.0360957310, 0.1813162565, -0.0287387222, 0.3742446303, 0.0843855962, -0.0902401507, -0.0162422489, -0.0025065199, 0.0616259612, -0.1585470438, 0.2494784147, -0.1320845336, 0.0846490487, -0.1280979663, -0.0372771025, 0.0959941074, -0.0919279531, 0.2065328062, 0.2210896015, 0.2605260015, 0.0606815033, -0.1926455349, 0.0374532901, -0.1190291122, 0.0357736163, 0.0656186864, 0.0017906153, -0.1578427553, 0.0139681473, -0.2286825478, -0.0367431678, 0.1237504408, -0.0074994043, 0.0904583186, 0.0078117917, -0.1484669000, -0.2372174412, 0.0405299440, 0.1353365481, 0.1291613281, 0.0346052200, 0.0064545642, 0.0288050491, -0.0155786751, -0.1102815792, -0.0706014335, -0.1009329185, 0.0387919806, 0.1881179363, 0.0532148778, -0.0946908519, 0.2638093233, 0.1671726257, 0.1368015558, 0.1032363102, -0.0868059546, -0.3577800691, -0.0247359313, 0.0056475392, -0.0552284680, -0.0719312802, -0.1277597845, -0.0267226677, -0.0919291526, -0.0774450079, -0.0519866087, 0.0605943464, -0.1487792283, 0.0275831558, 0.0235040504, 0.0567166805, -0.0288858972, -0.0426742025, 0.1103439108, 0.0823604465, 0.0034383866, 0.1280191392, 0.1835345775, 0.0432590693, 0.3362315893, 0.1968481094, -0.0863192827, 0.0807980448, -0.0335292034, 0.0917974263, -0.1583270580, -0.0647808611, -0.0944505259, -0.0252960902, 0.1738353819, 0.3234718442, -0.0320933647, 0.0622091703, -0.0770598501, -0.0732272938, 0.0426269732, 0.0280953497, 0.2066327929, 0.0321465619, 0.0199930239, -0.0458212458, 0.0728402063, 0.0215947833, 0.1348279864, 0.0126044136, -0.0415178128, -0.0082129547, 0.0049621384, 0.0191457290, -0.0595352836, 0.2164545804, -0.0408854038, -0.0246694554, -0.1599599570, -0.0835920423, 0.0171463992, -0.0018230397, 0.2534167767, 0.2002384961, -0.0201193467, 0.0987100378, -0.1730743051, -0.0069975243, -0.0281807575, -0.0006531647, 0.1390332133, 0.0266829468, 0.0566553585, -0.0614632219, -0.2360586822, 0.0990132317, 0.0050438978, 0.0741526708, 0.1728907824, 0.0835380852, -0.1375016272, -0.0961299092, -0.0264870934, 0.0806484446, -0.1302615851, 0.1140693128, -0.1081853956, -0.0762923732, -0.0550525412, -0.1778975874, -0.0649632514, 0.0734796599, 0.0479915291, -0.0208404921, 0.0260088891, -0.1467997283, 0.1081268489, -0.0952166393, 0.1360541284, 0.2511633337, 0.0524079166, -0.1592375487, -0.0610093288, -0.0471394137, 0.0303471517, 0.0013409744, -0.0179101899, 0.0745038614, -0.1657963842, -0.0560826398, 0.0883075297, -0.0395697579, 0.0083946036, -0.0568779819, 0.0735850483, 0.1549677998, 0.1797066778, 0.0826438367, -0.0003195318, 0.0931710601, -0.0047799647, 0.0196301714, 0.0989395529, -0.0313070081, 0.2522056997, 0.1279632598, 0.0883233324, 0.0985125452, 0.0268157534, 0.1097323522, -0.0824220330, 0.0638956279, -0.1828459650, -0.0547004044, 0.0456936583, 0.3660817444, 0.0268811435, 0.0273256805, -0.0885380283, 0.0363881513, 0.0342868716, 0.0512400158, 0.1518963575, -0.0233933683, 0.0038043612, -0.1258422732, 0.1326723844, -0.1248886585, 0.0614936240, -0.0916099176, -0.0403610393, 0.0527689084, 0.0761058554, -0.0141601600, -0.0168328900, 0.0776715055, 0.0474507324, 0.0945715681, -0.0463645086, 0.0312622897, 0.1386707723, 0.0327460580, 0.2079299092, -0.0580234751, 0.0855850652, -0.1359290481, -0.0736651793, -0.0947290882, 0.0175277721, -0.0212440733, 0.1230136678, -0.1153868958, -0.1274997294, -0.0815955624, -0.1711993217, 0.2668250203, 0.1312213093, 0.0582069233, 0.2085610479, 0.1286381483, -0.0775388777, 0.0308180712, -0.1574910581, 0.0291940179, 0.0601891316, 0.2959519029, -0.2130594999, -0.1396980435, -0.0759477764, -0.2920399606, -0.1622242779, 0.1117592528, -0.0047505209, -0.0274758115, -0.0067088604, -0.2313106209, 0.1169996783, -0.1738376766, 0.2591640055, 0.2626579106, 0.0696764514, -0.2297955900, 0.0832604915, 0.1301531792, 0.0517035834, -0.0245358609, -0.0332650393, -0.0284121539, -0.1317216456, -0.0075189075, 0.2594194412, -0.2726994455, -0.1136284843, -0.1902581602, -0.0697797611, 0.0360329859, 0.0431546010, 0.1217766553, 0.0821558014, 0.0467921905, -0.0731271505, 0.0665887296, 0.0753062889, -0.1028317437, 0.2452509254, 0.1745161861, 0.2386132479, 0.0790564567, -0.0945872217, 0.1809046417, -0.1801868826, -0.1389217824, 0.0698613822, 0.0644988716, -0.0032852900, 0.2865968943, 0.0260303561, 0.2514995039, -0.0689427704, 0.1225201488, -0.0261431672, 0.1337132901, 0.0233181287, 0.0245569628, 0.1114480346, -0.2350697517, 0.0624504015, -0.0971575677, 0.0650862977, 0.0135874283, -0.0299365353, 0.0102607859, 0.2027591616, -0.0019136593, 0.0600315705, 0.0958077163, -0.1251369417, 0.0931461900, 0.0392863899, 0.0189861618, 0.1003659293, -0.0411305279, 0.0815094411, 0.1671405882, 0.1784780174, -0.1898712218, -0.0795596465, -0.2043459415, 0.0233462732, 0.0500379950, 0.0346880406, -0.0050993836, -0.1660137773, -0.0720974058, -0.1071387604, 0.1273433864, 0.1322456151, -0.0405101851, 0.1180936471, 0.1348392069, -0.0974459052, -0.0492737517, -0.1133154407, 0.0253030546, 0.0732298642, 0.2852641940, -0.1047970578, 0.0384960063, -0.0400782265, -0.1809876412, -0.0687264577, 0.0819502994, -0.0366627499, 0.1625230610, 0.0180174708, -0.1834737957, 0.0164626427, -0.1161285564, 0.1911921054, 0.1261819452, 0.2398906350, -0.3383073509, 0.1116993651, 0.0102148186, 0.0647603497, -0.0410381481, -0.0533716604, -0.0529893897, -0.0332702175, -0.0460172445, 0.2150535882, -0.1835623085, -0.0231717043, -0.1150201261, -0.0734969079, -0.0018075181, -0.0247715097, -0.0498073474, 0.1487960517, 0.1002391577, 0.0468815267, 0.0207778029, 0.1840668470, -0.0277008172, 0.2099770159, 0.1154144704, 0.1292083412, 0.0355044603, 0.0405101776, 0.0740708932, -0.1038675755, -0.0634829625, 0.3018009365, 0.1074385270, -0.1046156213, 0.1428119689, -0.0573996529, 0.2233787775, -0.1080199704, 0.1296437234, 0.0184405446, 0.1273667663, -0.1245355159, -0.0678866282, 0.0435805246, -0.1200878769, -0.0060873986, -0.1631474942, 0.1155159026, 0.1081919521, -0.0942252502, 0.0104121193, 0.2351500988, 0.0579762459, 0.0333879739, 0.0123357587, -0.1361296624, 0.0548061952, 0.1554754078, 0.0582441613, 0.1616132855, -0.0797674283, 0.2066237032, -0.0207593795, 0.1145652235, -0.0821099803, -0.0243649837, -0.1206692904, -0.0240870565, 0.0894176215, 0.0104444679, 0.0705845430, -0.1000399813, -0.1262746751, -0.0928425863, 0.2956334651, 0.2892663777, -0.1033243015, -0.0031126812, -0.0281954091, -0.1988293976, -0.0436860956, -0.0611437373, 0.0250311065, 0.0074124113, 0.3135993481, -0.2336970419, 0.0761599243, -0.0146150012, -0.1791201383, 0.0075632050, 0.1059964150, 0.0738059729, 0.1542632729, 0.0119388700, -0.1879840791, 0.1168614551, -0.0387893952, 0.2479854524, 0.1922026575, 0.1568715572, -0.1734664738, 0.1324239373, 0.0256208573, -0.0347387232, 0.0091377618, 0.0100435168, -0.0344750918, -0.0205086246, -0.0859204531, 0.0720431805, -0.1804702878, 0.0193095487, -0.0648550838, 0.0539259501, 0.0363754146, 0.1321951747, 0.0642677248, 0.2785969377, -0.0689640865, -0.0630007088, 0.0683908761, 0.2374917418, 0.0578674525, 0.0282191429, 0.1374699473, 0.0832063407, -0.1441731602, -0.0965055674, 0.1823487580, -0.1124952063, -0.0064928769, 0.2829399109, 0.0089885518, 0.1196279377, 0.1930234283, -0.1869499832, 0.0727213696, -0.0698092207, 0.0069968640, -0.0670487285, -0.0636223778, 0.0152141834, -0.0488111861, 0.0111111272, -0.1580268890, -0.0093079833, -0.1298060566, -0.0812291205, 0.0956638381, -0.1865492314, -0.0501319990, 0.1672508717, 0.0106234327, 0.0167987514, 0.1126979664, -0.0368778929, 0.1737010479, -0.0641774163, -0.0763577148, 0.2677654624, -0.1284889132, 0.0181531366, 0.1294454932, 0.3147532940, 0.0252525136, 0.0747332126, -0.1070784405, 0.0497841723, -0.1266128719, 0.1204869151, 0.1100896746, -0.1024722308, -0.0843732581, -0.0097548859, 0.0141464965, 0.0610048361, 0.0856873915, -0.0414896794, -0.0570598617, 0.0898063108, -0.0715074465, 0.0225019567, 0.0621696822, -0.1009515449, 0.2004816979, -0.0379919596, -0.0113178911, -0.0065226709, -0.0068122717, 0.0874148533, 0.0792335048, -0.0349712670, -0.0564238653, 0.0499019623, -0.1547085792, 0.1202293783, -0.1712844819, 0.1446039975, 0.1704499722, 0.0778797343, -0.0257517137, -0.1527517438, 0.0911198556, 0.0166365132, -0.0411480330, 0.0661290362, -0.0694168732, -0.0737066343, -0.0649575442, 0.0727300271, -0.0962701067, -0.0670990422, -0.1423341036, -0.0004024011, 0.0071854382, -0.0047606500, 0.0152559383, 0.1531819850, -0.0370978452, 0.0514497459, -0.1038522571, -0.0345352739, 0.0500236750, 0.0257365555, -0.0297169834, 0.0002549060, -0.0913330764, -0.0504135340, 0.0942598507, 0.0374759324, 0.0414550342, 0.0781295672, -0.0202697814, 0.1512683928, 0.0080535505, -0.1000072137, 0.0123873213, 0.0697727352, 0.1710460633, 0.0476149321, 0.0119294412, 0.1609980166, -0.0366023034, -0.0139304269, -0.1031006575, -0.0390835144, -0.0961757898, -0.1038898677, -0.0499003381, -0.0908248797, -0.0475046597, 0.0281321779, -0.0662285686, 0.0855540857, -0.0144218532, -0.1105131879, -0.0030441168, 0.0108394586, 0.0807949454, 0.0686070547, -0.2158256620, 0.0435430780, 0.0973146707, 0.1483608186, -0.0885774940, 0.0774287209, -0.1310585886, 0.0220010765, 0.0100268135, 0.0324054882, 0.0392860323, -0.0198272299, -0.0877863094, -0.0021877093, 0.1264036447, 0.0245819520, 0.0667878166, 0.1299792081, 0.0089165904, -0.0132994857, -0.0401919037, -0.0191825237, -0.0367041416, 0.0647477508, 0.1044211090, -0.0974808484, -0.0352355540, 0.0246250201, -0.0612806864, -0.1031796262, -0.0888466313, 0.0262913890, 0.0242081154, -0.0094562545, -0.0566959903, -0.0093520954, -0.0548554398, 0.1325161755, 0.0992513597, 0.0178475119, -0.1546225399, -0.2107832879, 0.0271836724, -0.0049198940, -0.0348001271, 0.0556171462, -0.0733604282, -0.0827924833, -0.1135352477, 0.1798102856, -0.0542279221, -0.1535875648, -0.1326334476, -0.1069943309, -0.0192486998, 0.0043783267, 0.0410211012, 0.1255931407, 0.0503822044, -0.0766585246, 0.0044356720, 0.0497462936, 0.0836742222, 0.0044411346, 0.0328952745, -0.0479852520, -0.1148345023, -0.0843020007, 0.0124347191, 0.0064998013, 0.0158710815, 0.0820541680, 0.0145327151, 0.1268913150, 0.0588700175, -0.0265785940, 0.0818374828, 0.0104995295, 0.1440015733, 0.0158571228, -0.0871089101, 0.1744552702, 0.0662282780, -0.0488240309, -0.1286839396, 0.0368325189, 0.0240176264, -0.0620110929, 0.0217502564, -0.0005961134, -0.0370054282, 0.1919741482, -0.0800331086, 0.1541490108, 0.0036872744, 0.0528663285, 0.0212089475, 0.1775433570, 0.0469897315, 0.0197555479, -0.0142596271, 0.0632430762, -0.0450970940, 0.2141991854, -0.1241932139, 0.0265608057, -0.0348629057, -0.0072750314, -0.0378236659, 0.0257003866, -0.0065246196, 0.0551487952, -0.0598546676, 0.0451596230, 0.1089702919, -0.0403456613, 0.0874821693, 0.1397967637, -0.0267584454, -0.0519099645, 0.0489366800, 0.0140055334, -0.0024887600, -0.1236890405, 0.0840293095, -0.1327395290, 0.0332120620, -0.0748438090, -0.0817501172, -0.1110305414, -0.0092392676, -0.0456600077, 0.0853384510, -0.0510925986, -0.0920428708, 0.0546333641, 0.0525309145, 0.1445654333, 0.1313428879, -0.0140723689, -0.0494544655, -0.1215009987, 0.0057373536, -0.0442481861, -0.0084735686, 0.0194879789, -0.0632553324, -0.0089714760, -0.1091786325, 0.0512301587, -0.0405337587, -0.1081078798, -0.0886641964, -0.0891255587, -0.0210485179, -0.0262324624, 0.1700201929, 0.1578353941, -0.0990771651, 0.0762698352, -0.0499098636, -0.0305515472, -0.0617183596, 0.0113749579, -0.1283737868, 0.0836458132, -0.1409995258, -0.0295092519, -0.1172021031, -0.0993507579, -0.0842991248, 0.0198180806, 0.0470345616, 0.0651921555, 0.0769550055, -0.0361197367, 0.1057685018, 0.0024330989, 0.0694286451, 0.0425081104, -0.1506258994, 0.0568971857, -0.0449461825, 0.0981689617, -0.0436909422, 0.0681212693, 0.0176991876, -0.0066403612, 0.0582341552, -0.1121045500, 0.0779032707, 0.0458463021, -0.0074348599, 0.0877585113, 0.0250951201, -0.0282822028, 0.0036310537, 0.0619810112, 0.0465289578, -0.1972754151, -0.0698328614, -0.0561335348, -0.1018866897, 0.0522740930, -0.0866524354, 0.0220062248, -0.1520380080, -0.0317890793, -0.0625556707, -0.0388393104, -0.0019641221, -0.1474199444, -0.0728860646, -0.0817887858, 0.0355473123, 0.1777054220, -0.0268981345, 0.1481649131, -0.0309382025, -0.0378157981, -0.0328263491, -0.0086800903, -0.0285282582, 0.0677881390, 0.1005703360, 0.0515709817, -0.0539358109, -0.0323241279, -0.0114193689, -0.1683873683, 0.0061788931, -0.0036714748, 0.0328205600, -0.0667106062, 0.0417956263, -0.0267212540, -0.0321933702, 0.0887057707, 0.0641552135, 0.0445447452, -0.1197818518, -0.1148302555, 0.0076701068, 0.0429837853, 0.0039434065, -0.0703909621, -0.0396318920, -0.2015703917, -0.0338897072, 0.1909054816, 0.0675193369, -0.0815367997, -0.0601405427, -0.1712573320, -0.0238928013, 0.0750349164, 0.1187492460, -0.1409222484, -0.0806515589, -0.0222658589, -0.0705572516, 0.0009524726, -0.1640442759, -0.0459300280, -0.0254410356, 0.0760951564, 0.0706680268, -0.0971824080, -0.0445278585, 0.0046207341, -0.0629891157, -0.0518210083, -0.0119325072, -0.0107759908, -0.0303738564, 0.0084330738, 0.1307120621, 0.0413911939, -0.0344392397, 0.0021090582, 0.0290048346, -0.1244404167, 0.0119950222, -0.0089441575, 0.0247463882, -0.0210458860, -0.0872125477, -0.0584845431, -0.0346877873, 0.0285756513, -0.0807249621, -0.1049736366, -0.0733692423, 0.0267252196, 0.0282076970, -0.0581158921, 0.0396292284, 0.0555499643, -0.0375513211, -0.1279862225, -0.0927673802, -0.0420678444, -0.0135400631, 0.1651408821, -0.0391443856, -0.0384100191, 0.0820429176, 0.0323132426, 0.0004275739, 0.0660950392, -0.0169305131, -0.0572409742, -0.0046901032, -0.0600810163, -0.0530821383, -0.0656696707, -0.0268589072, -0.0406800471, 0.0249069259, -0.0777510554, -0.0697338507, 0.0152857602, 0.0055115148, 0.0625609010, 0.0654689372, -0.0138048381, -0.0376098752, 0.0660880804, 0.0578334630, 0.0317424610, 0.0432986766, 0.0403186530, -0.0583233945, -0.0475471094, -0.0341245271, -0.0741827041, 0.0556312352, -0.0347186849, -0.0732868612, -0.0721631125, -0.0147513524, -0.0789235756, 0.0265364423, 0.0703295320, 0.0555462539, 0.0073821992, 0.0079194307, 0.0739475638, 0.0177898780, -0.0303711258, 0.0592402518, 0.0286447182, -0.0365751274, 0.0323602110, 0.0084067732, -0.0631825775, -0.0045946613, -0.0627270937, -0.0138059184, -0.0568530411, 0.0579897314, 0.0410853028, 0.0115800276, 0.0554418117, 0.0113444775, -0.0547768027, 0.0708034635, 0.0315103158, 0.0213734359, -0.0531328917, 0.0094952658, 0.0638673604, 0.0503100008, 0.0118829682, -0.0811709017, -0.0162261054, 0.0781029463, 0.0155555829, -0.0021356568, -0.0588416345, -0.0003796443, 0.0002632663, -0.0089040697, 0.0099573657, 0.0185706988, -0.0748956203, -0.0080290735, 0.0271151811, 0.0276981220, 0.0523655266, 0.0556823611, -0.0123241097, -0.0420164391, 0.0107516199, 0.0004183203, 0.0504905283, -0.0382091776, -0.0548932031, 0.0433645248, 0.0278468728, -0.0361920036, 0.0466438085, 0.0737141520, -0.0318457223, -0.0225442685, 0.0005604923, 0.0526754260, 0.0602604896, -0.0529245064, 0.0143256262, -0.0049200282, -0.0293009207, -0.0066491514, -0.0575487465, -0.0224532261, 0.0664092153, -0.0055888668, 0.0155974627, 0.0532772988, -0.0330072418, -0.0296981074, -0.0604885332, -0.0359840728, -0.0463859402, -0.0384265967, -0.0633677244, 0.0433750302, -0.0427563041, -0.0273877345, 0.0798177719, -0.0395601690, -0.0083141029, -0.0195189193, 0.0649140477, -0.0450926796, 0.0075366646, -0.0160187036, 0.0782683939, 0.0104474947, -0.0146933123, 0.0248418748, -0.0246652886, -0.0397718698, -0.0321532786, 0.0580326915, -0.0734637231, 0.0110510215, 0.0768453181, 0.0360052511, 0.0417518988, -0.0534075648, -0.0170342848, 0.0125011057, -0.0372492075, 0.0158209875, -0.0115829110, -0.0524384603, -0.0353419892, -0.0043779463, -0.0203804076, -0.0012421086, -0.0723632276, 0.0565437376, -0.0239528082, 0.0619754195, 0.0102081373, 0.0196980387, 0.0102689117, 0.0707489997, 0.0695503652, -0.0255965628, -0.0445937514, -0.0784219205, 0.0677789599, -0.0075739250, -0.0040593669, -0.0147841126, 0.0085598230, -0.0088333189, 0.0779263526, 0.0768290609, -0.0613392964, 0.0032802597, 0.0821577609, -0.0217934474, 0.0432661176, 0.0717423558, 0.0659310520, 0.0141248256, 0.0302305445, 0.0049521476, -0.0701921433, 0.0637809932, -0.0015412793, 0.0338171273, 0.0378703326, -0.0459261946, 0.0645616055, -0.0300393887, 0.0273281559, 0.0439426303, 0.0318949074, 0.0059841871, 0.0122444183, 0.0501557142, 0.0704581290, -0.0809953734, 0.0815649629, -0.0082729310, -0.0203789733, -0.0273621008, 0.0685407817, 0.0519587994, -0.0765253454, 0.0419993103, -0.0700562969, 0.0305289328, 0.0402119532, 0.0089079440, -0.0182446167, 0.0815577060, 0.0224650726, -0.0512377173, -0.0552319922, 0.0188582167, 0.0444252342, 0.0578442812, 0.0714216381, -0.0668757781, 0.0506320745, 0.0179076120, 0.0580601096, 0.0576836914, -0.0467508733, 0.0431897044, -0.0416699722, -0.0200863034, 0.0426369160, -0.0511828139, -0.0244414844, 0.0037477240, 0.0593850911, -0.0302656852, 0.0363430306, 0.0224890113, 0.0010418370, -0.0798082054, 0.0431062132, 0.0106115118, -0.0256734639, -0.0053526536, -0.0105950683, -0.0172481090, 0.0586679429, 0.0718739033, 0.0244548023, 0.0379298702, -0.0431418195, -0.0466616191, -0.0358357169, -0.0030665770, -0.0659871399, -0.0587612391, -0.0582052469, 0.0484664142, -0.0433033966, 0.0733573139, 0.0639433712, -0.0402436741, 0.0616866797, 0.0474928916, -0.0725011379, 0.0749492049, -0.0242250673, -0.0430027731, -0.0190027654, 0.0167600214, -0.0310086310, 0.0291477516, -0.0149539411, -0.0267888047, -0.0386977792, -0.0315272249, -0.0371691249, 0.0366971418, 0.0235472545, 0.0320923105, -0.0473232083, -0.0661844462, -0.0372098237, 0.0566540509, -0.0223707110, -0.0811443031, -0.0359650776, -0.0041873381, -0.0483033508, -0.0239346586, 0.0590539873, 0.0226740018, 0.0140408948, -0.0278946012, -0.0623947456, 0.0253730565, 0.0151340589, 0.0060720071, -0.0407728553, 0.0552474707, 0.0438396484, -0.0352071673, -0.0425485484, -0.0095021799, -0.0292580016, 0.0082141384, 0.0276953131, -0.0614426322, -0.0356126204, 0.0660661012, 0.0786534548, 0.0507458746, 0.0410742462, -0.0287727043, -0.0796595886, 0.0596626252, -0.0691102073, -0.0532282516, 0.0510111302, -0.0306170061, 0.0658774674, -0.0327426828, -0.0661516488, -0.0119284764, -0.0501132011, 0.0591780394, 0.0585792214, 0.0604265481, 0.0063580126, 0.0094358101, 0.0179668739, 0.0172382891, -0.0738926306, 0.0592461824, 0.0583661944, -0.0474393889, -0.0007377565, 0.0161188766, -0.0357404500, -0.0658487678, 0.0457594097, -0.0666525215, 0.0636450052, 0.0482483506, -0.0077683032, -0.0427478366, -0.0374522284, -0.0363284610, 0.0592589378, -0.0400600210, 0.0775068104, 0.0418522730, 0.0271416381, 0.0459645391, -0.0794790611, 0.0649052113, 0.0372509956, 0.0115164667, 0.0776972175, -0.0362471417, -0.0024740100, 0.0229985490, -0.0346386433, 0.0551245064, 0.0163778439, -0.0457779951, 0.0776213259, 0.0147285685, 0.0449126065, 0.0113680065, -0.0460395701, -0.0795444474, 0.0794939101, 0.0811815709, 0.0700589120, 0.0540553629, 0.0444817841, -0.0411107615, 0.0466564149, 0.0493103117, -0.0296784639, 0.0819409043, 0.0551293045, -0.0664935783, 0.0605254471, -0.0213532858, 0.0242221430, -0.0480436422, 0.0544589013, -0.0343278833, 0.0424722210, -0.0127215087, 0.0258290097, -0.0435080267, -0.0378015451, 0.0572758317, 0.0228996947, -0.0603427067};
# 18 "firmware/parameters.h" 2
# 1 "firmware/weights/b2.h" 1
# 12 "firmware/weights/b2.h"
model_default_t b2[100] = {0.1093766317, -0.0123337870, 0.0807478428, 0.0858669654, -0.0599603392, 0.0518332012, -0.0537999943, -0.1080331355, -0.0166805275, 0.1219577938, 0.0433711149, 0.0351546593, -0.0011696636, 0.0276837721, -0.0215053298, 0.0520811304, 0.0215760544, -0.0527087525, 0.0501445346, 0.0257061571, 0.0535646565, 0.0365297236, -0.0196639318, 0.0381606482, 0.0922767743, 0.0304511338, 0.0402646996, 0.0967417657, -0.1182818264, 0.0615746528, 0.0389075913, -0.0040329774, -0.0967228413, 0.0639971122, 0.1003317013, 0.1054340824, 0.0741218701, 0.0341074876, 0.0886431932, -0.0343704484, 0.0969013125, 0.0340257548, 0.0085235573, 0.0217530634, 0.0562230572, 0.0354039185, -0.0591633171, 0.0868179277, 0.0400064401, 0.0132836243, -0.0466695018, -0.0067217899, 0.0262989625, 0.0221981946, -0.0222593285, 0.0189042669, 0.0688515604, 0.0919582695, -0.0242962707, 0.0032509279, 0.0249803420, 0.0112419333, 0.0023881409, 0.0110599101, -0.1405418962, 0.0295607708, -0.0593444072, 0.0265958346, -0.0536740609, 0.0607841760, 0.0531199835, 0.0457419753, 0.0144501459, 0.0029370110, 0.0289160348, 0.1023189723, -0.0139816022, -0.0383745246, 0.0002260011, -0.0121925622, -0.0369927511, 0.0368074328, 0.0461836085, 0.1507715285, 0.0341618769, -0.0189553238, -0.0741373822, 0.0678172037, -0.1110637337, 0.0251414441, -0.0163610689, 0.1448838115, 0.0552899502, 0.0604596213, -0.0537000336, 0.1022155955, -0.0499638431, 0.0158187784, 0.0274023954, 0.1091365740};
# 19 "firmware/parameters.h" 2
# 1 "firmware/weights/w4.h" 1
# 12 "firmware/weights/w4.h"
model_default_t w4[5000] = {-0.0571738631, -0.0776838139, 0.2096839845, 0.2225382179, -0.0874922648, 0.2833286822, -0.2091861218, 0.0559130497, -0.0010740694, -0.0526016355, 0.2841123343, 0.2643527687, 0.1368813217, -0.0550205261, 0.1171933934, -0.0917363316, -0.3654241860, 0.0300846081, 0.0442187898, -0.1911646426, 0.1987369508, -0.0434610657, 0.0917607173, 0.1765433699, 0.0071257874, 0.1115810052, 0.3851336539, 0.2503978014, -0.2387213707, 0.2095963806, 0.3399423659, -0.0982407182, 0.0963502377, 0.1559697986, 0.1297453046, -0.1838652194, -0.1108614504, 0.1778737009, 0.0726768970, 0.0797481909, 0.1269733608, 0.2756844461, 0.4321659803, 0.1253453791, 0.2081536055, -0.0429200679, -0.0300849676, -0.1717131436, 0.3060477078, 0.0777676776, 0.2398975492, -0.0942287222, 0.0787114501, 0.0081513552, -0.0393031053, -0.1678079367, -0.1390222460, -0.1711360812, 0.2196875513, -0.0170088708, 0.0856912509, 0.0957267880, -0.1794930398, -0.0209257677, 0.1518729478, 0.1467242986, -0.0057687755, -0.0205144547, -0.0527497083, -0.1218538210, -0.1240348890, -0.1470490098, -0.2040977329, -0.0680980682, -0.0784156024, -0.2411350012, -0.0383964665, -0.0372396745, -0.2646953166, -0.0420854874, -0.2416851223, -0.0599577650, 0.0985661596, 0.0553127714, -0.1392371655, 0.1240199655, 0.0680720583, 0.0686625689, -0.0696154237, -0.0680684298, -0.0780325159, 0.0079499912, 0.0696158111, -0.1877574474, -0.1187148020, -0.0014998096, 0.1767331511, 0.0603204779, 0.1896874309, 0.0345501117, 0.2321516424, 0.1236738041, 0.4497704804, -0.1093218029, 0.1854460835, -0.0094670290, -0.1584669054, 0.2439381778, 0.2127277255, -0.3542058170, -0.1906862259, -0.1197862774, 0.1221487746, -0.2540566921, 0.0725632533, 0.3327630162, 0.0163037218, 0.0397884250, -0.1478622258, -0.1730948985, 0.1965584457, -0.1175087467, 0.3512656689, -0.0183655601, -0.1671977639, -0.0595090389, 0.0376692414, 0.1502226591, -0.0017778249, 0.0204302091, -0.2355361879, -0.1703329235, -0.2194193751, 0.1728400737, 0.1863861531, 0.0504145734, -0.1430634856, -0.0743969604, -0.1478646547, 0.2601611316, -0.2775832117, 0.0691287145, -0.0802092031, -0.4177880883, -0.0336059332, -0.0216624588, -0.2584711015, 0.1129861251, 0.2791361511, 0.0137768304, -0.0046275137, -0.2213134170, -0.1815636903, 0.2180041820, -0.0755873546, -0.1263207495, 0.2005573660, -0.0625426173, 0.2306241691, -0.4192127585, -0.1181762516, 0.1849654615, -0.0537272729, 0.0632761195, -0.0802612528, 0.0169456843, -0.0595433339, -0.0709432364, -0.0500990599, 0.2079513669, 0.2316751480, 0.0233789869, -0.0592839010, -0.1136028990, 0.0532504842, 0.0643757656, 0.0904514268, -0.0723552480, -0.2853596210, 0.2135185897, -0.1601537466, 0.0068222391, 0.0298179295, 0.2230563015, 0.0990727991, -0.1918492913, 0.0984755233, -0.0232298207, -0.0152016142, 0.1911108345, 0.2226746678, -0.0252952464, 0.2111473382, 0.2416176498, -0.0468873903, 0.1334191412, 0.2350035906, -0.1854243726, 0.2614543736, 0.1978940666, -0.0600317344, 0.1920950711, 0.1871257424, -0.0920102224, 0.1503772736, 0.0252561495, -0.1710879207, -0.2376901060, -0.1118527129, 0.0565226153, -0.3613273203, 0.0332939103, -0.0585862361, 0.1207424700, -0.0607908927, -0.1839733422, -0.1722294837, 0.1242082492, 0.0559366494, -0.2627064586, -0.0285405088, -0.2913642228, -0.0888211578, -0.1768671870, 0.0330575854, -0.2688722610, 0.3519962728, -0.0667112097, -0.1041861400, -0.0530071035, -0.1457341760, 0.1245692745, 0.2041154951, 0.0390256830, 0.1059927791, -0.0147197582, 0.0315457471, 0.2029029876, 0.0618202463, -0.1665777713, 0.0746862665, 0.0402411446, 0.0953280255, -0.2149022967, -0.1038611680, -0.2630718350, -0.0171364322, -0.0330625623, 0.0917290971, -0.0960128680, 0.1543454975, 0.1262857318, 0.0426992886, 0.0385950580, -0.0873549357, -0.0845291987, 0.3316613436, 0.1621762216, 0.0260688867, -0.1364534646, 0.0771611929, 0.1233241409, -0.1663791239, 0.1107423827, -0.0095073935, 0.2332528830, -0.0195026994, -0.1900629252, 0.0596244000, -0.3500376046, -0.1276005059, 0.0423860326, 0.2936076224, -0.1496592462, 0.1912330538, -0.3541479707, 0.1129816100, -0.1901363879, -0.0840275288, 0.0814932287, 0.3088764846, 0.1663477272, 0.0212159008, 0.0715700462, 0.1497761160, 0.0543824174, 0.1467347294, 0.0870577618, 0.1014378667, 0.1081512868, 0.1188559681, 0.0994312018, 0.2887727618, 0.1179927662, 0.3371443450, -0.1905443668, -0.0667374805, -0.1790759265, -0.0543452539, -0.1732097417, 0.1818010807, 0.0851736292, 0.1469728947, -0.1861082762, 0.2425797135, 0.0230702218, -0.0664883927, -0.0898013860, 0.2103235424, -0.2375631928, 0.0229207445, -0.0590868704, 0.1876764745, -0.2432910055, -0.0133538926, -0.0708796605, -0.1056543365, 0.1443112642, -0.0381296165, 0.0115223965, -0.3291406333, -0.1806169301, -0.2503193915, -0.2508036792, 0.0870619640, -0.0691010579, -0.1981910914, 0.0185687151, -0.0467896089, -0.2335440516, 0.1628619730, 0.1513789296, -0.2060481012, 0.0494756401, 0.1483626813, -0.0904067382, -0.2052358836, -0.0645750538, 0.0067338874, -0.0038559588, -0.0144844661, -0.2193555832, 0.1132062525, -0.0394500308, 0.0127324536, 0.0174282752, -0.0057398700, 0.0016051995, -0.0345504805, -0.1420502365, 0.0191053618, -0.1429330111, -0.0480325036, 0.2680379152, 0.0483052433, -0.0332164988, -0.2489865869, -0.1380074322, 0.1316347867, -0.0217918251, 0.1745192111, 0.0635349825, -0.1608189940, -0.2905311584, 0.2578979135, -0.2570453584, -0.2812763751, -0.3146626651, 0.1193295494, 0.1635116935, 0.2549586892, 0.2500593364, -0.1288937181, 0.2452885807, 0.2703734934, 0.1354604512, 0.1030523330, 0.2894383967, 0.1784371287, 0.1754859686, 0.0280536693, -0.1877833754, -0.1364837289, -0.1081772521, -0.1185865328, -0.1851629317, 0.1061793342, -0.0896221623, 0.4344483912, -0.2708730102, 0.2764808238, 0.0805408880, -0.1341597885, 0.1009272486, 0.0371798724, -0.1729387194, 0.1660677642, -0.0473751239, -0.0389007851, 0.0729999915, 0.0542913973, -0.0273480956, -0.1128897220, -0.2603237033, 0.1488534212, -0.2288506925, -0.3281013370, 0.2165487260, 0.1274556965, -0.3299938142, 0.2177821696, -0.1098435298, -0.1984057724, -0.6151906848, -0.2215651274, 0.2619266212, 0.1081297547, 0.0977474600, 0.2176659256, -0.0225844029, 0.0205577146, -0.0416941270, -0.4193269610, 0.2342078686, -0.0219657049, 0.2689842880, 0.2759419382, -0.0574429221, -0.0856959149, -0.2688846886, 0.3080067039, -0.2540210485, 0.0382656679, 0.2662117183, 0.3461159468, 0.0524442866, -0.1781162173, -0.2429735959, 0.1034936011, 0.1404434592, -0.0724393353, 0.2120172679, -0.0636380762, -0.2184775174, 0.2092467099, 0.2983083427, -0.0441156998, 0.0274106618, -0.1810346693, -0.0404837467, 0.2777698040, -0.2279941142, -0.1500887275, -0.1634951085, 0.1369262338, 0.1093318090, 0.1122706160, 0.1172301918, 0.1239474565, -0.1882072985, -0.0556131378, 0.2355243415, -0.0385594070, -0.0260420647, 0.1130946726, 0.1036558449, -0.0082938224, -0.0546781346, -0.1892621070, -0.0513945967, 0.1378223449, 0.1158346683, 0.1215566024, 0.2347835004, -0.3094230294, 0.0854902416, 0.1648160070, 0.0194540694, -0.0851019397, 0.1908972412, 0.0590867326, -0.0997135937, -0.1034791619, 0.1523255855, -0.2208202928, -0.0076903645, -0.2098020613, 0.0267354995, 0.2319276035, 0.0924185961, 0.0009180878, 0.1434414387, -0.0363488384, -0.2266242653, -0.1524226516, -0.0075050076, -0.0848392472, 0.0657842234, 0.1611935198, 0.1359229237, -0.2274763882, -0.1403399110, -0.1775162369, 0.1274544895, -0.1511262953, 0.0907406509, 0.0917067453, 0.0715313479, -0.1150668189, -0.0191104449, -0.2083681822, 0.2247697711, -0.0029564584, 0.2194909155, -0.0355431698, -0.0584981292, -0.0565053076, -0.2263151705, 0.1778772622, 0.1993535608, 0.1995898336, 0.0817383155, 0.3476662934, 0.1218218580, 0.1009204760, 0.0202946439, 0.0173872244, -0.0854064971, -0.1845463216, -0.1860936582, 0.2467316091, 0.1343673766, -0.0415196232, 0.1111638471, -0.2940267026, 0.1324321926, -0.1596181691, 0.0716300309, 0.0631179512, -0.1964715272, 0.0656446293, 0.2064430416, 0.1523476839, 0.1712750047, -0.1502549797, -0.3442622721, -0.0798258185, -0.1449268460, 0.0062230560, 0.1014700234, 0.3157752752, 0.2783085704, -0.0922270417, 0.0821638852, 0.1093331948, 0.2949842513, -0.0028103413, 0.2546323836, 0.2824627459, -0.2789449394, 0.1196965724, 0.0199611094, -0.4165448248, 0.0702685490, 0.0685916319, -0.1808093786, 0.1399618238, -0.2380801737, -0.1866204143, 0.1765058339, 0.1092399359, 0.1203141659, 0.2154943943, 0.1232565045, -0.3284936547, 0.0822678953, 0.2789958119, -0.1297773272, 0.0137649700, 0.0068428596, 0.2888216972, 0.1719265580, -0.0739087313, -0.1414711475, -0.0504405014, -0.0051732454, -0.0384124927, 0.0289859120, -0.0685899556, -0.3225944936, -0.0390956476, -0.0006329233, 0.0927017406, -0.0120043224, -0.0759019032, 0.0969770849, -0.0385274924, -0.1097408533, -0.6496871114, 0.0997080430, -0.0813163444, -0.1121218204, 0.3012968004, 0.2548382878, 0.0057144118, 0.2226621956, 0.0092118578, 0.1676834822, 0.0758097619, 0.3407925367, 0.0250471607, -0.2644974589, -0.0859922841, -0.0313743353, -0.3092314005, -0.3802971840, -0.1493879855, -0.2684451938, 0.0668236390, 0.2331237644, 0.0111585651, 0.3156920075, -0.0713107362, -0.1785316914, 0.1325245202, 0.1443677694, -0.0720475167, 0.0549063273, -0.1309023350, 0.0095523559, -0.0678457469, 0.2873490155, -0.1003978848, 0.3326868713, 0.1601717472, 0.0560873449, -0.0721212476, 0.1702498645, -0.2745751143, -0.1483888924, -0.0478949994, -0.3803073764, 0.2605220675, -0.4010864496, 0.1688533127, 0.2066874951, -0.3022787273, -0.1175344661, -0.3278780878, -0.2556605935, 0.1739913076, 0.0692161024, 0.1046366096, -0.0539223552, 0.2432193756, 0.1058580801, 0.0723939016, -0.0694119185, -0.0054420270, 0.1190828681, -0.0918442830, -0.0520743802, -0.1633461863, 0.1161402762, 0.0352130085, -0.0919431299, -0.1648371220, 0.0409938917, -0.2508854866, -0.0320871435, -0.1191363633, 0.1016155258, -0.0187730454, -0.2612760961, 0.1250968426, -0.2002934068, -0.0413437821, 0.0275560450, 0.0903115124, 0.1696614176, -0.2947363257, 0.0524552613, 0.0237563588, -0.0939912274, -0.1705454886, 0.0662026629, 0.0542497411, -0.0153682278, -0.1326674819, -0.0321184918, -0.2869521379, -0.0001307170, -0.0032698696, -0.1211820543, 0.1536567658, 0.0684241354, 0.0714802295, 0.0593384728, -0.0747718066, 0.1147053987, -0.1697225124, 0.0231328979, 0.1128455326, 0.0805778056, 0.3251307607, 0.0161569472, 0.1811520457, 0.1839000285, 0.0377768129, 0.0206557009, -0.0201979727, 0.0526734181, -0.1821985990, -0.0885637030, 0.3051398098, 0.0023238633, -0.0908676311, 0.0128894486, 0.0552388951, 0.1789786071, 0.1041055620, 0.1471546143, 0.1602662802, -0.2468970120, -0.3620917499, 0.1958832890, -0.1116699874, -0.1990611255, -0.0350871757, -0.0798674226, -0.1344056875, 0.0742085874, -0.2342394888, -0.2057963163, -0.1926886439, 0.2809544504, -0.0819582567, -0.1554254591, 0.2289538682, -0.0767460242, 0.0436429679, 0.1200094074, -0.2308959216, 0.1487163156, -0.2158170938, -0.0846002772, 0.0392858349, 0.0922620595, -0.1937159151, 0.0218340345, 0.0558735542, -0.1085646152, 0.0576798655, -0.0756714419, -0.0850531608, -0.0763204768, 0.0027502403, 0.1932303756, 0.0769458041, 0.2417962402, -0.0870557204, -0.0510593057, -0.3407970071, 0.0831032693, 0.1791011095, 0.2011159658, -0.0833936110, -0.1211864352, 0.1458052546, -0.3115081191, 0.2304755598, 0.1379452944, 0.0585934408, -0.1471585184, -0.0262096338, -0.2757076025, -0.3028835952, 0.0956022367, 0.2305790782, 0.0954893827, -0.0334334671, 0.0367671326, -0.2161503434, 0.1915987283, -0.3181667924, 0.2658948302, -0.1824499518, -0.0364394523, -0.0420518890, 0.1014149860, -0.0194058530, -0.2769275606, 0.2152723521, -0.2451578230, 0.2758997083, -0.0148222214, -0.1109322608, 0.1366756111, -0.1893181503, 0.0216914471, -0.0166920740, 0.1538196355, -0.0851927549, 0.2408711612, 0.1207747236, -0.0972683579, 0.0235209260, -0.0663267225, 0.2142428607, 0.1961697638, -0.1498640031, -0.2078233808, -0.3872497380, 0.1008108854, 0.1694317162, -0.2348040193, -0.1934168935, -0.2322611362, -0.0842110440, -0.2017925382, 0.1331198961, -0.0287526678, 0.0595349930, 0.1217116416, 0.0820300132, 0.0624824613, 0.1957809180, 0.0629159734, 0.2882482708, 0.0791067481, 0.3347776234, -0.1940350235, 0.0053898715, -0.1611009538, -0.0020561127, -0.2166720182, 0.0019532805, -0.1212503538, 0.4049843252, 0.1161856949, 0.2775958180, -0.0417657718, 0.2228914350, 0.1558650434, 0.2871821225, 0.1172279716, 0.0388435274, -0.2027443498, -0.0777146742, -0.0169522054, 0.0147460382, 0.0973943770, -0.0933267102, -0.0526095107, -0.0491118543, 0.1866724491, -0.1418964565, 0.1502892524, 0.1761565506, 0.1719981879, 0.0399164185, -0.1245345026, 0.1567630470, -0.3140668571, 0.1361052543, -0.0219235346, -0.1719276756, -0.0601320490, -0.2309674770, 0.1390218437, -0.2321267128, -0.0009337753, -0.2535755038, 0.2284422815, -0.0116901435, 0.0909943953, 0.0843222514, 0.1082158536, 0.2262557894, 0.0366509855, 0.1504023820, -0.2430246770, 0.0967449993, 0.0558515936, 0.2652573287, 0.1417736411, -0.1001906246, -0.3157132268, 0.1464602053, 0.0666295215, 0.0373959281, -0.0911629573, 0.1106489003, -0.1975676119, 0.2675879598, -0.1087698787, 0.1729960293, -0.1743028164, 0.0541224889, -0.0800018087, -0.1418245137, -0.1707407087, -0.0527915470, -0.0558438189, 0.0368968248, -0.0773943886, 0.1986375302, -0.1741692722, 0.1118355691, -0.1277904660, -0.1060699821, 0.1758399457, -0.0645888448, -0.1054930165, 0.0831444561, 0.1386512965, -0.0042777113, -0.0709754676, -0.1490799487, 0.1448345780, -0.0048442436, -0.0751929283, 0.0909550637, -0.0025017567, -0.1502529234, -0.2726612389, 0.0744348913, 0.1406917721, -0.1535173357, 0.0230225679, 0.0112235434, 0.0713511929, 0.1697295159, 0.0426322743, 0.2112329900, 0.0229339916, -0.2347940654, 0.1763625592, 0.0345577858, 0.0927820876, 0.2131884396, 0.1273400486, 0.0464651287, 0.1207791343, -0.1261419207, 0.0206522718, 0.0688642859, 0.0398803502, 0.1698538810, 0.1080897227, 0.0450153276, 0.0487484746, -0.1177665293, -0.0144874891, -0.3745154738, -0.0462911949, -0.1201669052, 0.0432253778, 0.2829827070, -0.1903924942, -0.0157210175, 0.1240221709, 0.0991893858, 0.2299153805, -0.0197092500, -0.2881508470, 0.0547471270, -0.0890385062, 0.1867498606, 0.0131097520, 0.1115220040, 0.1863923669, 0.1074787751, -0.2301700860, -0.0230115950, -0.0278003179, 0.0101520149, 0.3303564489, 0.0705704838, 0.1076009795, 0.1809899807, 0.1216678470, 0.0108833434, 0.2110868096, 0.1327286661, -0.3819209337, 0.1071658731, 0.3169383705, 0.0140209664, -0.1397719085, -0.0815582350, -0.2282909155, 0.0885945931, -0.0945617855, 0.2562558055, -0.1285729557, 0.2553020120, 0.1946981400, 0.2669619918, 0.0535982251, -0.0780630335, 0.1065620631, -0.0475794263, 0.2139811814, 0.1867849231, 0.1364584416, -0.1556442678, 0.2938758433, 0.3790582120, 0.0072043850, 0.0888652503, 0.1048171148, -0.2453275919, -0.1661857814, 0.2046076059, 0.1171735898, 0.0256950855, 0.0195346847, 0.1661120206, -0.0320835076, -0.1628475934, 0.0950450376, 0.0279217903, -0.0782015026, 0.2269543111, 0.0056354450, -0.1465992182, -0.1319049299, 0.0053032897, 0.0528432876, 0.1259121001, 0.0709645972, 0.0510227382, -0.0003284315, -0.1381018162, -0.0392955616, -0.1008725613, 0.0658978373, -0.1239182726, 0.3710436225, 0.1384605169, -0.0352822617, 0.2138171494, 0.0865342766, 0.2197859585, -0.1603554338, -0.2287354916, -0.2609164417, -0.1229806170, -0.1385932863, 0.2030935138, -0.0791746229, -0.1517172605, -0.0093500279, 0.2613606751, -0.1082887128, 0.2095660418, -0.1657573879, 0.0607653111, 0.1236137301, 0.1908918321, 0.0235856622, -0.0816856027, 0.0809361637, 0.1047160104, 0.0452779904, 0.1417577416, -0.2015741467, -0.1939304471, 0.0591633432, -0.1888901144, -0.2158724070, -0.1682781279, -0.2513021529, 0.1473078430, -0.1095188856, 0.0537171178, -0.0697679520, -0.3143990636, -0.0554780811, -0.1412871927, -0.0463140197, -0.1506443918, -0.1125156209, 0.0057679517, 0.1930554807, -0.2349112481, 0.1152542979, -0.0735249668, 0.0532805137, 0.0800599009, 0.2052885741, -0.0501005724, -0.1146925315, 0.0219580457, -0.1674898416, 0.0125312032, -0.0475350842, 0.0143157225, 0.1622424722, 0.0519240238, 0.4012636542, -0.0399270542, 0.2724786997, 0.1622960269, 0.1816352159, -0.4304753542, 0.0344691649, 0.1562432200, 0.0530284792, 0.0693370476, 0.0734803751, -0.0772300363, -0.0029927357, 0.1513001323, -0.0015980289, -0.1130675450, -0.2949759960, 0.0884512141, 0.1438958645, 0.4134929478, 0.1485649347, 0.2449204177, -0.0164836198, -0.0167060718, 0.0768559799, -0.1468475908, 0.1843999624, 0.0732082874, 0.0270716138, -0.2972395420, 0.0692788363, -0.1832497865, -0.4690759480, 0.0873555541, -0.1851477772, -0.0841264874, -0.3176952302, 0.3509088755, -0.3461565971, -0.0810468495, -0.3023016453, -0.4030551910, 0.1453443319, 0.2091990560, 0.1379837394, 0.1427258849, 0.0199353546, -0.0617225729, 0.2604782283, -0.0741833597, 0.0958748087, -0.0510471389, 0.1937269717, 0.1058909744, 0.0532948337, 0.0650127679, -0.1108326018, -0.0764219686, -0.3155716062, 0.1572656333, -0.0807216391, -0.0043970561, -0.1540203989, 0.0162862893, 0.1914945990, -0.0804122686, 0.2209682316, 0.1675933450, 0.0319110714, -0.0949492007, -0.1461274326, -0.0038772731, -0.0752598941, 0.0180464722, 0.1861770749, -0.1891428381, 0.1555484831, -0.1638741195, -0.0120399166, -0.1671628803, -0.3304176927, -0.1571179777, 0.0772956312, -0.0424118638, 0.2818427384, -0.1645095944, -0.0467227176, 0.1575886458, 0.2626426518, 0.0586582944, 0.1103347912, -0.0358360447, 0.2734460235, 0.0677709058, 0.0214842930, 0.2081476003, -0.0695983469, 0.1858108342, 0.0614297912, 0.2849377394, 0.0784395114, -0.0392700918, -0.0605715625, 0.2026548237, -0.1084170565, 0.0580869652, -0.0233888291, 0.2693239450, -0.2464119047, -0.0271942914, 0.2877674699, -0.0613077953, -0.1625200361, 0.1606304497, 0.2036435306, 0.0699583367, -0.1456430405, -0.2308016419, -0.1543884873, -0.1540216357, -0.1447626054, -0.2313849330, 0.1805543602, 0.2320649773, 0.1984858066, 0.0279850475, 0.1520906985, 0.0706218034, 0.0594324581, -0.3182041943, 0.1605413109, -0.0798279643, -0.0156754367, 0.1220792532, -0.0948452875, 0.0029596733, 0.1702836007, 0.0493796356, -0.1423742324, -0.1813520789, 0.1217468977, 0.0427330509, -0.0218281392, -0.2350745350, -0.0253707208, -0.1198833138, -0.1031245813, 0.0922552645, 0.1858775020, -0.0395912342, -0.0136133702, -0.0346360430, -0.0748641640, 0.1093786433, -0.2398307920, 0.1807676852, 0.1895827353, 0.0854096860, -0.2023131549, -0.3473203182, 0.0699636340, 0.0087305745, -0.0069621624, 0.0002807344, 0.0913095176, 0.0821455643, -0.0730065852, 0.0682885423, -0.1987384707, 0.2448262870, -0.2119223028, 0.2673297226, -0.2108830810, -0.0274582580, 0.0020190715, 0.1334248483, 0.2162147909, -0.0880960003, 0.1228811294, -0.1472824663, 0.1435505152, 0.0280437693, -0.0011153488, -0.0167622361, 0.0032275640, -0.1552965194, -0.1355800927, -0.1981651485, 0.2188628316, 0.0504554100, -0.0298914239, -0.0042272573, -0.0236231610, -0.0207137465, -0.0350516438, -0.0259411652, 0.1872866154, 0.1861324161, 0.0198048726, 0.1249085963, 0.2572770417, 0.0345785581, 0.2805783153, 0.2880178988, -0.1737709641, 0.0624352619, -0.1609583199, -0.1117911860, -0.1064662039, 0.0144075528, 0.2243822515, -0.1445224881, 0.0093995817, 0.2854962349, 0.0169586204, -0.3237689734, -0.2569884360, 0.0214275941, -0.2385236919, -0.1003497466, -0.2114201188, -0.0172294397, 0.1192217991, -0.2045961767, -0.1567465961, -0.0800873637, -0.3105140030, -0.1883267015, 0.0829494447, -0.1062675565, -0.1052966192, -0.0421064608, -0.2297006100, 0.1615328491, 0.2310667783, -0.2142533213, -0.1736739874, -0.0603348464, -0.1763222218, -0.1164921448, -0.1493917257, -0.1586539447, -0.0216840766, -0.1264947206, -0.0176846236, -0.1831656843, 0.1628816575, -0.1308166683, 0.2321450561, 0.0400914550, 0.1577071995, 0.0081004100, 0.1951532066, 0.2269704044, 0.1717562675, 0.1173207983, 0.1064034998, -0.0375953652, 0.0109536201, -0.0654434115, 0.0096253352, -0.1104094833, 0.1191669852, 0.2435612381, -0.1042497829, 0.1758840531, -0.1141693518, 0.0153560471, 0.0603143238, -0.1684177816, -0.0917985588, 0.2244193256, 0.1874403507, 0.2353521585, -0.3421398401, 0.0366729163, -0.2262256593, 0.1223753318, 0.1715467721, 0.0659753382, 0.1792059541, 0.2207733542, 0.0648548007, -0.0223256629, 0.1055141389, 0.0567200333, 0.1051623970, 0.2201183438, -0.0653196275, -0.0267290324, -0.0690036714, 0.0459003188, 0.0607710369, 0.1858583391, -0.1165318638, 0.0570319258, -0.2036695331, 0.2314523607, 0.0444420986, 0.3316546977, 0.1004654542, 0.3793103099, 0.2827357352, 0.0970522165, 0.1442400217, -0.0360320248, 0.5486413836, 0.1969547570, 0.0861230269, 0.0566828884, -0.3151312470, 0.0310198348, -0.2252114266, -0.0654304922, -0.1110793576, -0.2978409529, 0.0744785741, 0.0968427211, 0.0512727499, -0.1254918426, -0.1877261400, 0.0292059761, -0.0791203603, 0.0707395524, 0.0948330909, 0.1685899049, 0.1273658127, 0.1140410453, 0.0996204689, -0.0459313095, 0.1836928874, -0.2036298960, 0.0588911138, 0.1457213908, -0.2550540268, 0.0690653473, -0.0146347582, 0.0161915030, -0.0620165728, -0.0016449890, -0.0879623070, 0.2141128480, 0.0081246262, 0.0965086743, 0.5081678629, -0.2721920311, 0.1424686611, -0.3405573070, -0.3051369786, -0.0542802364, 0.3072142005, -0.0221308451, 0.1838840693, -0.3059103191, -0.0710602477, -0.2346878052, -0.0887159035, 0.0027740188, 0.1266529709, 0.1220989078, -0.2363744080, 0.1282995343, -0.3848963082, 0.1667855382, 0.1789346486, -0.1514206827, 0.1409772038, 0.2147072107, -0.2090050876, 0.4448101223, 0.2814667821, 0.3778302372, -0.0092882114, 0.1225293577, 0.1836054623, -0.2438820451, 0.2893629968, 0.0694985539, 0.1805793196, 0.0808634311, -0.1544722468, -0.4864113629, -0.0059475712, -0.0612233654, 0.0515236408, 0.1466126889, -0.1202522293, 0.2223031223, 0.1159449294, -0.1417683363, 0.0993306711, 0.0593119413, -0.1009277105, 0.2582050264, -0.1277718395, -0.2219459862, 0.0263227709, 0.3331549466, 0.2180046886, -0.1122713760, -0.2812092602, -0.1374785453, 0.2727764845, -0.0082383044, 0.0516825877, -0.0929417089, -0.0649513230, -0.0931513682, -0.0568392836, -0.0307564717, 0.0862162337, -0.1083647013, 0.1500524580, -0.0201603007, 0.0493093878, -0.0522557050, 0.1426303536, -0.0650271103, 0.2647197843, -0.0264083687, -0.1284360439, -0.2792911828, 0.1447762102, 0.0889999196, -0.2177761644, 0.0251600333, 0.1856898367, -0.2507241666, 0.0362093560, 0.1292126775, 0.0220911019, 0.1744616181, 0.0962250903, 0.1420872658, -0.0739259198, -0.1541756988, 0.2218953222, 0.1752971709, 0.0762619227, 0.3702668250, 0.0785240605, -0.0979571939, 0.2203633338, 0.0714225024, 0.1297098994, 0.1371718794, 0.0714023188, 0.0428617150, -0.0868237093, -0.0936882272, 0.1672173738, -0.2160490006, 0.0731464997, 0.1252889335, -0.2472029775, 0.0997027382, 0.1026454568, 0.0146695832, -0.1763793379, 0.0832328275, 0.2342424691, -0.0830681771, -0.0059645250, 0.2575661838, 0.0845275521, 0.2134283781, -0.2771242261, -0.0959279388, -0.0657886788, -0.1365207434, 0.1794359237, 0.0465728268, -0.1262513399, 0.0336361527, 0.0501460060, -0.1428666264, -0.1740214825, -0.1040201336, 0.0437699705, 0.2051195502, -0.1348566115, 0.0104207704, -0.0218613017, -0.1174533814, -0.0493674390, 0.1479389966, -0.1209941655, 0.1809016168, -0.0922242180, 0.2763327658, 0.2060166746, -0.1870293468, 0.3448649645, -0.2253725082, -0.2808751166, 0.1651589572, -0.1167687923, -0.0452760719, -0.1207038015, 0.0393360928, -0.2057681531, -0.0709634349, -0.0873253793, 0.1511256248, -0.0128518464, -0.2533429265, 0.1982668042, -0.1672625691, 0.1364925504, -0.1185168400, -0.0480998866, -0.3034301698, 0.2202511281, 0.1999036968, -0.2455330491, -0.2294177711, -0.1578806788, -0.1840641946, 0.1879839152, 0.1816556603, 0.0275130458, -0.0347793363, 0.2639637291, -0.2536464036, 0.0220381524, 0.2220530957, -0.1891663820, -0.1225434542, 0.0908216536, 0.0029358517, 0.1754703075, 0.1553021073, 0.1670862734, -0.2467863113, 0.1579506993, -0.1557457894, 0.1495767236, 0.2199587375, 0.0180845931, 0.2193096727, -0.0307025500, 0.0307420325, 0.1682228595, -0.0898203328, 0.2144343257, 0.2069038749, 0.2356854826, -0.3586366475, -0.1018592045, 0.2162414640, -0.2546843588, -0.3410951793, 0.0368042476, 0.0005714658, -0.0974296108, 0.1745913029, 0.2399493605, 0.2198839486, 0.0230225455, 0.3059582114, 0.3127684891, -0.0535422787, 0.1611354798, 0.2107740343, -0.1422942132, 0.1536673754, -0.1825052649, -0.1640622467, -0.1359130591, 0.1262691468, 0.0168374293, -0.1619757712, -0.0088097956, -0.1738783121, -0.2421094179, 0.1600600630, 0.0571517944, -0.2102549076, -0.0480945371, 0.1249402240, -0.0084519116, 0.2349947840, 0.1329077482, 0.1468684077, 0.0320808627, -0.0504818037, 0.0757475495, -0.0062203822, 0.0584198125, 0.1261450499, -0.0148862088, 0.1617066860, 0.1883343160, 0.0502422005, 0.3888899386, -0.0320550725, -0.0502413101, -0.2653074265, -0.0202880651, 0.1842755079, 0.0623990633, 0.1790793836, 0.0968771055, 0.1873201281, 0.1659084260, 0.1983529776, 0.1758168787, 0.2416063398, 0.1736894846, 0.1429624707, -0.1509105861, 0.3485253453, -0.0089438669, 0.1507884860, 0.2150328308, 0.2114414722, -0.1677088886, 0.0927419141, 0.1409918517, -0.1329544783, -0.0581206903, -0.0013198656, -0.3026486337, 0.1309334040, -0.1633886546, 0.1164801121, 0.2390770167, -0.0218657572, -0.2645508647, 0.0020439038, -0.0324089937, -0.0471528471, -0.1386083364, -0.0409951471, 0.0081735207, 0.0486048460, 0.2594128847, -0.2851857543, -0.0294340886, 0.0332418345, -0.2084935755, -0.0540391207, -0.0382565595, -0.0782031119, 0.1026431769, 0.1422891170, -0.0117598390, -0.0689311251, -0.2654673159, 0.2198102325, 0.2495313585, 0.1798239052, 0.1462148428, 0.0807332769, -0.0994527340, -0.4202543497, -0.0956705064, -0.1276487708, -0.0430652425, 0.0810000598, 0.0078438455, 0.1474403143, -0.2184222639, 0.1110474765, -0.3454014957, -0.0587735996, 0.2331217229, -0.0349734537, -0.1768350601, 0.3197562099, 0.0540701859, 0.2353535891, 0.0729509220, 0.1564837843, -0.1183654889, 0.0239137821, 0.0111746024, -0.2662797868, 0.0354793444, 0.0517999977, 0.1421632916, -0.2308880240, 0.0145172793, -0.0027311356, 0.3170780241, 0.0342301205, 0.0495860875, 0.1535746008, -0.1623719931, -0.1076874435, 0.1475112885, 0.2432307601, -0.1099071577, 0.2005563080, 0.2474743277, -0.2241327465, 0.0256074499, -0.0713468343, 0.1027576551, -0.4892068505, -0.1712919921, -0.1841439456, -0.0590506904, -0.2373135984, 0.1698074341, -0.1221355572, -0.0980461538, 0.0048663449, -0.0145843355, -0.0098122805, 0.2120176107, -0.0574910156, 0.2633597255, -0.0868642405, -0.0769607276, 0.3695890605, -0.1382499933, -0.1670337021, 0.4818951786, 0.4699714184, 0.1574395299, 0.3768554628, -0.1931557357, 0.1143039688, 0.2364722937, -0.1005643383, -0.0627634302, -0.0379253775, 0.0928228721, 0.0768439919, 0.1180150136, -0.1297032833, -0.2001795322, -0.3376940191, -0.1558216810, 0.0144501207, 0.1086363047, 0.0932841823, -0.1978440434, 0.0159415361, -0.1290681958, -0.1957020313, -0.0329102278, -0.2269884646, -0.1055771336, 0.2578206062, 0.0719637275, -0.0437906757, 0.2886233032, -0.1343748569, 0.2429577708, -0.4008840621, 0.2177039087, -0.1871147901, -0.1578758508, -0.2365763634, 0.1217116714, 0.3161256611, -0.1556399614, 0.0769031644, -0.0942889303, -0.2713972330, 0.0663234964, -0.0913707837, -0.0907493457, 0.0958732665, 0.0565825179, -0.0654679090, 0.0083404984, 0.0563356578, -0.1035612002, 0.3179470301, 0.1135913879, -0.1413773298, -0.1173526868, -0.0502862670, 0.1811345369, -0.1858345866, 0.1681699902, 0.0840758979, 0.3204603195, 0.3839383423, 0.3891946971, 0.3052149415, -0.0865350589, -0.1710310727, -0.1017224863, -0.0149689708, 0.0047028475, 0.3846599758, -0.1664987952, -0.1503364146, 0.0401909761, 0.2673016191, 0.4007278383, -0.2136317343, 0.2727661133, -0.3429159820, -0.1414209008, -0.1620572954, 0.3645740151, -0.0850636587, 0.1266008317, -0.2976810634, 0.2026676387, 0.0758041218, 0.0254434552, 0.1362505555, 0.2216009498, 0.0432167277, 0.2379028946, -0.0497913100, 0.1294461936, -0.3431090415, -0.1232873350, 0.0254066195, 0.0359644480, 0.0639879853, -0.2533046603, 0.1187716350, 0.1198151782, 0.3941082656, 0.2783282697, -0.0489885956, 0.2141899168, 0.1478170753, 0.1906355023, -0.1484642923, 0.2186056077, 0.0567350909, 0.0222362410, -0.1442889869, 0.1388345063, 0.3519797623, 0.1492688507, 0.1340176910, -0.1827330142, 0.2207431197, -0.3911407590, -0.2570784390, 0.1426595598, -0.2311923206, -0.3172416091, 0.2196842432, -0.2305630147, -0.3188198209, 0.0731800944, 0.1992327720, 0.2931918502, 0.0313056335, 0.1808944196, 0.3323137462, -0.0109618902, -0.0418235399, 0.0761742666, 0.2066353112, -0.2134137005, -0.1970718801, 0.2177595347, -0.1933275312, 0.0227583814, 0.0470465273, -0.2708560824, 0.0985516757, -0.3010615110, -0.1660555303, -0.0406340435, -0.0883665755, 0.0195073504, 0.0523226969, -0.0834592804, 0.0836119875, 0.0227758642, 0.0926998183, -0.0701981708, 0.2844742239, -0.0219496805, -0.1955585182, -0.0639617443, -0.0098654674, 0.2352384925, -0.2442609221, -0.0187572427, 0.2461680919, 0.2706576884, -0.2144412398, 0.2370577604, -0.0713436007, -0.0018865759, -0.0686900765, 0.0231319163, -0.0042591128, -0.2515236437, -0.2650565803, -0.2219349295, 0.1229215562, -0.1613399088, -0.0346834622, -0.0838747174, -0.0623013377, -0.0347664095, 0.1159931198, -0.0512425266, 0.2934475839, 0.2003267109, 0.0931643173, -0.0223718546, 0.2035247535, 0.3492111266, 0.0653172582, 0.0818177536, -0.1888255775, 0.0060150023, -0.1255895048, 0.1724795550, -0.1701325029, 0.0222466420, -0.0818875954, 0.0033425563, 0.0965131372, 0.0688480213, 0.0830192119, -0.2981940210, 0.1251469105, 0.0048340396, -0.2081027627, -0.1088120937, -0.0800065994, 0.1644489467, -0.1981494725, 0.3446778953, -0.1688734740, -0.0288733840, -0.2645908892, 0.0741735548, -0.1361657083, -0.0152833359, -0.0630984232, -0.0031808519, -0.0922052413, -0.3051082194, 0.2145677656, 0.1553226560, 0.2063933760, 0.1194933653, -0.2474577129, 0.1431017369, 0.1078331918, 0.0410809144, 0.1698703915, 0.0439835824, 0.1688395441, 0.1657539457, 0.0085248174, -0.1115519553, -0.0722794011, -0.0069642188, 0.2388246059, 0.0845007524, 0.1787559241, 0.1534059197, -0.4022818804, -0.0654639751, 0.1660704762, 0.0396215692, -0.1651906669, -0.1968430132, 0.0704182312, -0.3758284450, -0.1991293430, 0.1294928044, -0.0817213058, 0.1561038196, 0.2266989201, -0.4150686264, -0.0853210986, -0.1393728554, 0.1398534477, 0.1273386776, -0.1890217364, -0.0061039831, 0.2820261717, -0.0666045323, 0.0652904883, 0.0255754907, 0.1044141650, 0.1428131461, 0.1643456817, -0.1171213835, -0.3329168260, -0.1067693606, 0.1815945208, -0.1506232321, 0.1841484010, 0.1737809479, -0.0877077952, 0.0551692881, 0.0660218522, 0.0570103936, -0.0593967475, 0.1774651855, 0.2509682477, -0.2836476266, 0.2883793414, -0.3182327449, 0.0814451203, 0.1346783042, -0.1175678000, -0.1699193418, 0.0241510868, -0.2223443091, 0.3021657765, -0.0668564066, -0.0055904514, -0.0646172985, 0.0830021799, 0.1475746185, -0.0669865310, -0.2020452023, -0.1190322936, -0.0385154746, -0.0560965613, -0.0477854088, 0.0453149937, -0.0181753300, -0.0066393055, 0.0735361353, -0.1841633618, -0.2054716647, -0.1572204381, -0.0857678503, 0.0140494201, -0.2366147041, 0.0054424177, 0.1603208482, -0.0107157147, -0.0326265544, -0.3338805139, -0.1372840405, 0.1546048820, -0.1927299052, -0.1296831518, -0.0609315261, -0.1747452617, 0.1583209932, 0.0107018985, -0.2253340632, 0.0851740092, 0.0501466841, 0.1631693095, 0.2330074459, 0.2394019514, 0.1438192725, 0.2178934216, 0.1890929341, 0.1704669744, 0.0823934227, 0.2483763695, 0.1615204811, 0.0285131838, -0.0340825468, -0.0016352352, -0.1663707048, -0.0142434267, 0.0117741739, 0.2437801361, -0.0381361023, 0.0202389956, -0.1744208038, 0.2307702005, 0.0990264565, 0.1688887924, -0.3472231627, -0.1419631839, -0.2229249328, 0.1637368500, -0.1107464582, -0.4228325486, 0.2312080711, -0.1352330744, 0.2230887711, -0.1119737178, -0.1086130664, -0.2840841413, 0.2621223330, -0.1186946556, -0.0321219601, 0.0291502476, 0.1043236777, -0.1750595868, -0.2441167235, 0.0044093546, 0.1576425433, 0.0442442559, -0.2042031139, -0.1346055120, -0.0563672930, 0.0033761307, -0.0267801248, -0.0847238600, 0.0781416893, 0.2421619147, -0.3652990460, -0.1315461099, -0.0524173416, 0.0602065027, 0.2947106659, 0.0560782291, -0.0319509618, -0.0104038315, -0.1057473421, 0.0309094563, -0.1573612392, -0.2657833099, 0.2321100384, -0.2662926912, -0.1599009186, -0.1522524804, -0.3308583498, -0.1430562586, 0.1414442807, 0.0664225444, -0.0010984115, -0.0093673132, 0.0320008583, 0.3342881501, -0.0289379060, 0.0960755572, 0.0271350332, 0.1665461808, -0.0396577604, -0.1249409318, 0.3444045484, 0.1718692034, -0.0157403164, -0.0952716619, 0.1057710648, -0.0203598347, 0.1227679849, -0.4224856198, 0.3510201275, 0.0009504827, -0.0690537766, 0.1602148712, 0.0389123894, -0.2256449610, 0.1810444444, 0.0033125479, -0.2968997061, 0.0322093666, 0.2429918796, -0.2091731429, 0.1230606958, 0.0165229477, -0.0299144797, 0.0117736040, -0.0844471529, 0.2103515565, 0.1888074279, -0.2680270076, 0.1728522629, 0.0414638706, 0.1645345241, 0.2345632166, 0.1474728435, 0.0035916129, -0.2525067925, 0.2849194407, -0.1282834709, 0.2256716341, 0.0307957716, 0.3082450628, 0.1476934254, -0.1543084532, -0.2140993178, 0.1477522254, -0.1374659538, 0.0519455597, 0.0400090106, 0.0323202573, -0.3307226896, 0.0368900448, -0.2188969553, 0.2276388109, -0.0425109304, -0.2202558070, -0.2394962609, 0.1157450601, -0.1047651246, 0.1766609550, 0.2551167607, -0.1516751200, -0.0329541638, 0.2046197951, 0.0978209078, -0.1119746789, -0.1117587239, -0.1517931670, 0.2848485112, 0.0521426499, -0.0563631430, -0.0106818015, 0.0946277976, -0.1625567973, -0.2012278736, 0.0645588338, -0.1268205047, 0.1478088051, -0.1823790073, -0.0585142151, -0.0305772424, -0.1465007216, -0.0454796441, -0.1222086176, -0.0268372670, -0.1385056674, 0.1306899339, -0.0516395941, -0.0551347509, -0.0465225726, -0.0638939440, 0.1435587853, -0.1192533374, -0.0432798155, -0.1772968471, 0.1571999639, 0.2384875417, -0.0988368690, 0.1903261095, -0.2641591132, -0.1107470989, -0.0245076455, -0.1443849951, 0.2184027135, -0.0804663971, -0.1234167293, 0.1027676836, -0.1133392975, -0.0145572396, 0.2212298959, -0.1217266247, 0.1281483024, -0.2217262387, 0.0063898684, -0.1859982461, 0.3190702200, -0.0767486617, 0.0033611732, 0.1015279368, 0.2987040579, -0.1489890367, 0.1451680809, -0.0143160503, 0.1289129555, -0.3830305338, -0.0261413455, -0.0208685510, 0.0199163612, -0.0975657478, 0.1479799151, 0.0556916520, -0.0551300421, -0.1101775542, 0.1848231852, 0.1775691658, -0.0615901500, -0.1302385926, -0.1345680803, -0.0479684994, 0.1495282352, -0.0304425862, -0.1548215747, 0.0359774195, 0.0711416751, -0.3006588221, -0.1056175753, -0.0306316931, -0.2324795127, 0.1953574717, -0.1969715357, 0.0346562490, 0.1244048327, 0.0496091768, 0.1059835032, -0.0030946187, 0.0927705467, -0.0015268276, -0.1566743106, 0.3128738701, -0.0319828726, -0.0058835070, 0.2215267420, -0.2004685551, -0.1542366892, 0.2483523488, 0.2573280036, -0.1028739810, 0.2049635649, -0.0449686572, -0.0034844370, 0.3053961992, 0.1175789684, -0.0653801337, 0.0967694297, -0.1312336922, -0.0932007208, 0.0068926164, 0.0941599086, 0.0923301354, -0.3476720452, 0.1896888018, 0.0103596589, 0.2066642791, -0.1788956523, 0.1664845049, -0.0855654404, 0.0262088906, -0.0537718050, 0.1667315364, -0.1198213324, -0.0882775486, 0.1475466043, -0.0318041407, -0.0381683446, 0.0539099462, -0.1428401023, 0.1341363192, 0.1198473796, -0.2589394748, -0.0141103128, 0.0731860027, -0.1482965499, -0.1493160874, 0.1061107963, 0.1355338246, 0.1288505793, 0.0644096956, -0.1597584188, -0.1623519510, -0.0915223435, 0.0154602733, -0.1254688650, 0.0908407420, 0.0502724126, -0.2255607098, 0.0214732680, -0.1702472568, 0.1112142578, -0.0827434734, 0.1896305233, -0.0548181757, -0.0954861119, 0.0757815391, 0.1731277853, -0.1913462877, 0.1685934216, -0.0939000174, -0.0719577298, -0.2348017991, -0.3886235058, 0.4015682042, 0.1903619319, 0.2708375454, -0.1516956389, 0.1107318923, 0.0885682926, -0.2112918794, 0.0544995405, 0.3485782444, 0.3461280465, -0.0075010415, 0.3174735606, -0.0791611671, -0.1264640689, 0.2421552688, 0.2111543119, -0.2344978899, -0.0077897008, -0.1617598832, 0.1549592763, -0.1109998524, 0.1846487075, 0.0357121937, -0.0426221602, -0.0340420045, 0.0809079409, -0.1818436384, -0.2483323365, -0.2385223359, -0.0026067700, 0.1468311995, -0.1355513781, -0.1456158906, 0.0098314090, -0.1205440387, 0.0976079106, 0.1066322252, 0.0303158704, -0.0243526474, -0.1188807636, 0.0354881398, -0.0629834086, 0.1340463758, 0.2206377387, 0.1576087326, 0.1131393835, 0.0121776443, -0.0088605899, 0.1547195464, -0.0460922420, -0.0195568744, 0.1059865132, 0.0932328850, 0.2332175821, -0.1671551019, 0.0447009988, 0.0610310361, 0.1049054936, 0.1814315468, -0.2226677239, -0.2689100504, -0.1286915094, -0.0620640591, -0.1078187004, -0.2526559234, 0.1328070760, -0.2033674270, -0.2109545171, -0.1102838665, -0.0372250974, -0.1676430255, 0.1787429452, -0.3487088084, 0.0128800748, -0.0949180126, 0.0503915437, -0.2017935067, 0.0965478420, -0.0805698261, -0.0452524684, 0.0300598796, -0.2877344191, -0.1752118170, 0.1476767808, -0.0224820394, 0.1671880037, 0.1453138441, 0.1321318150, 0.1944448948, 0.0736248791, -0.3266939819, -0.1256864071, -0.2578116059, 0.0689042583, 0.0368586592, -0.3367319107, 0.0123484759, 0.0600604601, -0.0600030161, -0.0116332555, 0.3145551682, -0.0236626416, -0.2807336152, -0.1191330329, -0.0897493958, 0.1452915370, -0.1818163544, -0.2212780118, 0.2116689384, 0.3485469818, 0.1362062693, 0.0599361472, -0.1059092581, -0.1241762340, 0.0764054656, 0.0713648945, 0.2990065217, -0.0613315143, -0.0970757231, -0.1819614321, 0.0636635721, 0.0612128675, -0.0438830666, -0.0917206779, 0.0085160807, -0.0350298882, -0.2234738767, 0.3868420124, -0.0260672849, -0.1920273006, 0.0919674635, -0.0110889245, 0.0272343475, -0.2357225418, 0.2638157308, -0.0561371595, 0.3014894128, 0.1234238148, 0.2257002592, -0.0811966211, -0.2134739757, 0.1058556288, -0.1493780315, -0.0272612590, 0.0645531118, -0.2237796336, 0.1359148473, 0.1840045154, -0.1382452846, 0.0656342432, -0.1519694477, 0.2225790918, 0.0522007905, 0.2002081424, 0.1512100697, 0.0310541950, 0.0145143792, 0.0381831452, 0.2525093257, -0.1668698788, -0.1418759972, -0.0074551078, -0.2553153634, 0.0388971455, -0.0098465774, 0.1002594009, -0.1513896883, -0.2149195224, -0.1532487571, -0.1893599480, 0.2058861703, 0.1302881539, -0.1131774560, 0.1095911413, 0.2041462958, -0.2537618876, 0.1336017847, -0.2950333953, -0.0424253605, -0.1206868812, 0.0365873910, 0.0268790796, 0.0184512623, 0.1976189613, 0.0719774440, 0.1101218835, 0.0331082866, 0.1281463355, -0.0988959298, 0.3508187830, -0.1257305890, -0.0373663828, 0.2952130735, -0.1053215563, -0.3444066048, -0.1231463328, -0.3255686462, -0.1530031562, -0.1693189144, -0.3719781935, -0.0820566118, 0.0271054097, -0.2040860951, -0.2240809798, -0.1479754299, 0.0421880223, 0.1124701127, -0.0957446694, 0.2693930268, 0.1692935079, 0.0867849141, -0.3443746269, -0.0878290534, 0.1290347725, -0.0080593387, 0.2965132892, 0.3221483827, 0.0469324328, -0.0552487113, 0.0693175793, -0.0424233936, 0.1117975786, 0.2297702134, 0.1106382236, -0.3964318633, -0.0814240053, 0.1509358287, -0.0245032907, -0.3133310974, 0.0721515641, 0.0729359388, 0.2094536424, 0.1719513983, 0.1374205351, -0.0216606408, -0.0281278193, -0.1854378432, 0.0687719807, -0.1985284984, 0.1000970453, 0.1105696931, 0.0357094109, 0.1485222876, 0.1911147535, 0.0314864330, 0.1028739139, -0.1707677841, -0.1475974023, 0.1857868284, -0.0318789147, 0.0904387906, -0.0848153010, 0.0317660719, -0.1749480665, -0.0630717129, -0.1323462129, 0.0001141947, 0.0600079447, -0.0729809850, 0.1602775306, -0.1714345515, 0.1093421057, -0.1807694584, 0.0048195776, 0.1760846823, -0.1260561049, -0.1173318177, 0.1566766202, -0.0113525633, -0.1120776609, 0.1655118465, -0.0934720114, -0.1660358161, -0.0670512393, -0.1560377479, 0.1509559900, -0.0312706456, -0.1214971468, 0.1820310056, 0.0233301204, 0.1363271475, 0.1399893016, 0.1624597609, 0.1332112253, -0.1246115416, 0.0082222838, 0.0039187716, -0.1745591611, 0.0923050642, -0.1788686663, -0.1460364610, -0.0241103191, -0.0503943488, -0.0395614691, 0.0170320366, 0.1209761798, -0.1364076436, -0.0201804545, -0.0764612257, 0.0283174459, 0.0326541066, -0.2203901559, 0.1648061872, -0.1245855764, 0.1978340894, 0.0330821723, 0.0886509344, -0.1742150038, 0.0166006237, -0.1732553542, 0.1756085157, -0.0575284772, -0.0594546869, 0.1958313137, -0.1009186134, -0.0416084528, 0.2410392463, -0.0543266907, 0.2841836512, -0.2293462604, 0.0161369387, 0.0537243523, -0.0366343260, -0.0102191009, 0.1573274285, -0.0624508336, 0.1679773629, 0.1022374257, 0.1928863972, 0.0201362986, 0.0827654451, 0.1523274034, 0.0082128327, -0.0016677368, -0.1011170745, 0.1369405240, 0.1608044356, 0.2044811845, -0.1836757511, 0.0704178661, 0.1006009728, -0.1885352284, -0.0146398665, -0.0728467703, -0.0817915052, -0.0556851216, -0.0282840654, 0.1311511546, 0.0240168385, -0.0957468599, 0.1922679245, -0.1085532457, -0.1066439226, 0.0731725395, 0.0431121886, 0.0007960792, 0.0980398804, -0.0119921537, -0.0642835721, -0.0753454864, -0.1095072851, -0.0396998115, -0.1057512015, 0.1443620771, -0.0445228405, -0.0164970197, 0.2108987421, -0.0895146653, 0.0672562644, -0.1612007022, 0.1432498246, 0.1614926457, 0.1063313335, -0.1344819963, 0.1626121104, -0.0278268717, 0.0772272646, -0.2205528617, -0.0331887677, 0.2342453152, -0.0477379188, 0.0701877698, 0.1479123682, 0.1404808909, -0.0215581115, 0.1731067598, 0.2445560694, -0.1162468642, -0.0779639706, 0.2726916671, -0.1585111618, 0.1277811378, -0.0286682546, 0.2133024931, -0.2786470354, -0.1518467963, 0.2279977202, 0.1323463470, 0.1180043295, 0.1844382584, 0.1818686426, 0.1431001872, 0.1413361579, 0.2200462669, -0.0642294139, 0.1357176751, -0.2590694726, -0.2656691074, -0.0061119758, 0.0646129325, 0.1611824036, -0.1491371244, -0.0763740987, 0.2270448059, -0.2209547758, -0.0240323953, 0.0194292311, -0.1977019012, 0.0010981804, -0.2136396170, 0.2116436362, 0.1588325351, 0.1278704107, -0.0929153785, 0.0979749188, -0.2653821707, 0.1310278028, -0.1528238207, -0.0308056567, -0.1502451599, -0.1572609544, -0.0979829431, 0.0079028672, 0.0185369980, -0.1639075130, -0.0891991630, -0.1583789140, 0.2589332163, 0.1106778234, -0.3636883795, -0.2095426917, -0.2913862169, -0.2344037443, -0.1961963177, 0.2475868613, 0.0851276070, 0.1104321703, -0.1858821362, 0.3469978869, 0.1558070034, 0.2443936616, 0.2144819051, 0.4389551580, -0.2468689978, -0.1070141196, 0.1282851845, 0.2281854749, 0.0335417055, 0.0665444657, -0.3911665678, -0.0055593695, -0.0361440741, -0.1170679778, -0.2196505517, -0.0532115139, 0.3713176250, -0.1903311610, 0.1480161548, -0.1295600384, 0.3312452435, 0.2186356336, 0.4657650292, 0.3041410446, -0.0006413173, -0.2006426007, -0.1003158316, 0.3209921718, 0.1023281440, 0.1390133798, -0.0455190763, -0.0541975610, -0.0129209515, -0.1643279195, 0.0633243099, -0.0997263119, 0.0884455517, 0.1808213890, -0.2440479249, -0.1571130008, -0.0906542987, -0.1163188741, 0.0592763573, -0.1296522170, -0.0236999840, 0.0140989497, -0.0626723394, -0.1151433885, -0.2114201188, -0.0305816140, -0.1304681301, 0.2499982566, -0.0071019372, -0.0399110205, -0.1767647415, 0.3272839785, 0.1737378687, -0.1331250370, -0.0941988081, 0.0310436785, 0.2515968084, 0.0696186349, 0.1187339798, -0.0337381996, -0.1919890642, -0.0506150313, 0.0403590575, 0.1437837631, 0.2213820219, -0.3069506586, 0.1568940580, -0.0533593222, -0.2176320255, 0.1732143611, -0.0750683248, 0.0200216342, -0.1614125222, 0.0177811924, 0.0484995730, -0.0738873854, 0.0840850547, 0.1758381128, 0.2466877401, -0.0181777868, -0.1889011562, -0.0921964124, 0.0047380258, 0.2183834463, 0.2005776018, 0.3400277793, 0.2207079530, -0.1593092680, 0.2071534842, -0.6452696323, 0.3195548356, 0.2904534936, 0.1672063023, 0.2129116505, -0.2046645731, 0.0098702675, 0.2140291035, 0.1026943773, -0.1554863006, 0.0286592022, -0.1385446340, 0.4373134077, 0.1550904065, 0.0093048010, 0.2649914920, -0.3127317429, -0.0179543626, 0.0443882123, 0.4107710719, 0.0947239101, -0.1051524803, -0.0518188886, -0.0281336214, -0.2839635015, 0.2506105304, 0.1269975007, 0.0180620831, 0.0807226077, 0.1367861778, 0.0135143781, 0.2045263350, -0.0894314796, -0.1817265153, -0.3019110262, -0.0724316463, 0.2934433520, -0.1598385423, -0.0890418068, 0.0441362374, -0.0136526618, 0.1271958053, 0.1258866340, -0.1906051040, 0.0972869024, 0.1805837452, -0.0135662332, 0.0107364571, 0.1754508018, -0.1626527756, -0.2902369797, -0.2918212712, -0.2164729387, 0.0193488840, -0.1862195283, -0.3204264343, -0.2486151904, 0.0569790341, 0.1408151835, -0.1743989438, -0.2109059095, -0.0236717593, -0.1877963990, 0.0974308252, 0.0049893819, 0.1331461966, 0.2776387930, 0.1344148070, -0.3411902785, -0.1459001005, 0.1177965477, -0.2997966707, 0.1597470343, 0.3018214703, 0.2626392543, -0.0187739953, -0.2614501715, -0.2345165312, -0.2231193334, -0.2527121902, 0.4286174476, 0.3396182060, 0.1298951507, -0.0634912103, -0.5047667027, 0.2587472200, 0.0715084672, -0.0719211996, 0.0052291956, -0.1222908646, 0.0887229443, -0.1605612338, 0.0942072123, 0.2030223161, 0.2686137259, 0.0964976400, 0.2755429447, -0.0217935983, -0.0170427635, 0.2978110015, -0.0597736426, -0.0483172610, 0.1366973519, 0.2722466290, 0.0236824919, -0.2188346088, 0.0937936604, -0.1064674780, -0.0889678672, 0.0606598705, -0.0089109056, 0.1896997541, 0.2635309100, 0.1354136914, -0.0972406939, -0.2470987141, -0.1897276789, -0.0085873287, -0.2031838000, 0.1560659856, 0.1569056809, -0.2059752196, -0.0412525013, -0.2605636418, 0.0061915237, -0.2775022984, -0.0165784527, -0.1206494272, 0.1318400055, 0.0551566184, -0.2721759975, -0.0491124913, 0.4552906752, -0.0195962843, -0.0937854946, -0.2009472400, 0.0896183848, -0.0607596301, 0.1656118780, 0.0766041428, -0.0795585439, -0.1383015662, -0.0466289967, -0.1859340221, -0.1847284287, -0.0407052264, 0.1706563681, -0.2530372143, -0.0526176505, -0.0125801647, 0.0683138818, 0.1475535929, 0.1351725608, 0.2399808615, -0.1447172612, 0.0111399302, 0.0852542296, -0.2050688863, 0.1932688802, -0.0018407198, 0.1236161441, -0.1779552996, 0.0063713104, 0.0670669451, 0.0649104044, -0.1234540641, 0.1631417274, 0.0095920246, -0.1055083573, 0.1615438163, 0.2537626922, -0.1867024750, -0.1955786943, 0.2021531463, -0.0445396155, 0.2577998340, -0.0188132171, 0.2148796469, 0.1629510075, -0.1342867166, -0.0396582708, 0.0467029214, -0.0843059272, -0.2575690746, 0.1620208323, 0.0658578500, -0.2560799718, 0.1016897559, 0.0465487838, -0.0280738100, 0.0584628321, 0.0771736577, 0.0097176414, 0.1292630434, 0.0105486521, 0.0053584664, 0.1107707396, -0.0593243651, -0.2204831541, 0.1946711987, -0.0762042403, -0.1480145156, -0.1263280511, -0.0841433853, -0.2321528643, -0.2838591337, 0.2584140003, -0.0278720651, -0.0648078471, 0.2693645954, 0.0132934339, 0.0738280863, -0.3105325401, 0.1654446870, -0.0274757333, -0.0197501034, 0.2011853009, -0.0243782233, -0.1321840733, -0.0537406504, -0.0062475409, 0.0331075713, -0.0124897975, -0.1012667194, -0.0261248238, 0.1416230202, 0.2020709664, -0.4354225993, 0.2029379308, 0.0020571637, -0.2592151761, 0.0927911475, 0.1734621078, -0.2316440195, 0.1499148607, 0.2083045244, -0.4830324054, -0.0540473871, 0.0888928920, -0.1135559976, -0.2196115702, 0.0802538022, 0.0847315118, 0.2018626779, 0.1926717907, -0.1599438936, 0.2008073926, 0.1487696022, 0.2900322974, 0.1507339478, -0.1618079096, -0.1800567210, -0.2113727182, 0.0772056282, -0.1580315232, -0.1598077714, -0.1969425827, -0.1024874896, 0.2206995636, 0.0203076508, -0.2476183921, 0.1370520741, 0.0302688591, 0.2538498640, 0.2686676383, 0.0357908942, 0.1085275039, 0.1252660900, -0.3178055286, -0.2010140866, 0.1746839732, 0.0956015736, -0.0902403072, 0.3128204346, 0.1544214785, 0.2221966237, -0.2577218413, 0.0955932066, -0.0291154124, -0.3106351495, 0.2566889524, 0.2245855331, 0.0147299133, 0.0067621344, -0.2509023249, 0.1395577937, -0.1111561656, 0.1069041342, 0.2061906308, -0.0609268956, -0.1484530419, -0.0821406022, -0.0098072235, 0.0977737978, 0.2102404088, 0.1732785106, 0.2614287436, 0.2197571546, -0.1893981844, 0.0029799584, -0.0857402757, 0.3683266640, -0.1714252383, 0.4161294103, -0.1378490627, -0.3769986033, 0.0306861121, -0.2302099913, -0.1674972177, 0.0727870762, 0.3322343826, -0.2890066206, -0.0187610593, 0.1333134174, 0.0071462221, 0.0400461406, 0.1359715164, -0.0758577064, -0.2525098920, -0.1703976095, 0.2399969846, -0.2277761400, -0.0534245111, -0.0621533282, -0.2271992117, 0.3123814166, -0.1267938465, 0.2532147765, 0.3144852817, 0.0630401894, -0.1346856505, 0.1110148057, 0.0964859352, -0.1570713669, -0.0814623535, -0.2219930589, 0.0600491613, 0.1397249252, -0.0123278443, 0.0021675806, -0.2743996382, 0.0379517823, 0.2009721398, -0.1335067004, 0.1343693733, 0.0046057026, 0.0131096942, -0.0587074608, 0.2055071443, -0.0111103123, 0.2535908818, -0.0182925649, 0.2927418053, -0.2481040359, 0.2882393599, 0.1157951951, 0.0969850868, -0.3189368844, -0.1249658391, -0.0748658553, 0.0945181921, 0.4216668904, -0.0930751339, -0.2841498256, 0.1850977391, -0.0374302231, 0.1768280715, 0.0817204565, 0.0793586001, -0.0449199900, 0.1093441918, -0.2206901759, -0.2343116254, -0.3705626726, 0.2046763748, 0.0372223221, 0.2089646012, 0.1221785322, -0.0538051650, -0.1461920440, -0.0260118060, -0.2549491525, 0.2251899689, -0.0992888883, -0.0913652554, -0.0286440458, 0.2248599231, 0.2003435642, -0.2384692729, -0.1392271817, -0.0232554581, 0.2668606639, 0.2822312713, 0.0510034151, -0.2473274469, -0.0861216560, 0.1529599428, -0.0456318073, 0.1069472656, 0.0987561569, -0.1956480443, 0.0189507492, 0.0912831426, 0.2390271723, 0.1926970035, -0.0750537738, -0.1017163992, -0.1435785145, -0.1454441845, -0.1484186798, 0.2180379331, -0.1431398243, -0.0806110874, -0.0845836625, 0.3078880906, 0.0633880347, -0.0011609244, -0.1543647051, -0.1425196975, -0.0341630541, -0.0492833629, 0.0770965517, -0.0600610748, 0.3182693422, -0.1592430025, -0.1382003427, -0.0463177375, 0.1374235302, 0.2782270312, 0.2269065082, 0.2924088836, 0.2848030925, -0.1170366630, -0.0409192182, 0.1897559762, -0.1177592799, 0.2841280103, 0.0751121864, 0.1200403720, 0.0442554727, -0.1285642982, 0.3258310258, 0.2394374311, -0.0562244095, 0.0929052681, 0.0033818309, -0.3380588591, 0.0897789225, -0.1339799017, 0.0888916999, 0.0379007012, -0.1583339572, 0.3518739939, -0.0585326217, -0.2132146955, -0.4103775620, 0.1895386428, 0.0547162294, -0.1399099231, 0.0101084812, -0.0650489926, -0.1656516045, -0.4338346422, 0.0621877536, 0.2588125765, -0.0568269044, -0.0413439907, 0.3217916191, -0.0050913361, 0.5560541749, 0.1994867921, -0.1821213067, 0.2199885547, 0.2015214562, -0.2315285057, -0.0480685681, 0.2162707597, 0.1970386058, -0.4712085724, -0.5690588951, 0.1554374099, 0.4950355887, 0.1414035559, -0.0576387979, -0.0385539271, 0.5468376279, -0.4238768816, -0.3476420045, 0.1585565507, -0.1010554358, -0.0709236637, -0.0588150173, 0.1736330986, -0.1030451208, 0.0668841004, 0.2626840174, 0.3409209251, 0.1226683930, 0.2390868813, -0.2501957715, -0.0972502902, 0.1187892482, -0.1809909791, 0.0477198027, 0.2010938525, 0.1662863940, 0.0866047293, 0.0442642048, 0.0678993762, 0.0619119518, -0.1330235749, -0.0091510219, 0.2680546939, -0.0666926131, 0.0085486956, -0.0283276774, -0.0513584428, -0.0985583588, -0.2305253595, 0.1188206077, 0.0323789716, -0.1097936332, -0.1769307405, 0.0093133189, 0.1164379567, 0.0197157618, 0.0956537575, 0.0096632894, -0.2253139019, 0.1244057864, -0.1629419774, 0.1228137687, -0.1205667630, -0.1303621680, -0.2256223708, 0.0163212959, 0.1976596117, -0.0033161424, 0.1017656997, -0.1666843146, 0.0399544872, 0.0932305157, 0.1446397305, 0.1447912902, 0.1297765970, -0.0301387291, 0.1372710317, 0.0560363494, -0.2781744897, -0.0431594625, 0.0198672023, 0.0979941860, 0.0739182010, 0.0077390000, 0.0623913519, 0.0425900854, -0.0478975251, 0.0992566943, -0.0032614302, -0.4028622806, 0.2086732388, -0.0079670195, -0.0953868181, -0.2024152726, -0.2840520442, -0.3268189132, -0.0602444001, -0.0785441920, 0.2364622802, -0.1091825739, -0.3054817617, -0.2709937096, 0.1332876086, -0.1875918806, 0.1244144887, 0.0802922174, 0.1966039836, -0.0885794759, 0.1287288815, 0.1834959090, 0.0599244535, -0.2241884768, 0.0035490554, 0.1116173044, 0.1838227808, -0.0651131570, 0.0082796579, -0.2378898561, -0.1825207174, 0.1070407405, 0.0150414063, -0.2061037123, 0.0869226530, 0.2557862997, -0.0625085458, -0.1175751016, -0.0110782981, -0.0364670493, -0.1888072342, 0.0520468801, -0.3103444278, -0.2651566267, -0.1749794036, 0.2694568932, -0.1155261323, 0.1023187861, -0.0633825436, 0.3160677254, -0.0667351708, -0.0087717455, 0.2524241507, 0.0201516077, 0.0988786742, -0.2503052354, 0.0950286612, 0.0290345792, -0.4273024499, -0.0840978771, 0.1705741733, -0.0670044869, 0.0186513886, 0.1100281999, 0.0177909471, -0.0962488651, -0.1479169279, -0.3627138138, 0.3167001903, 0.2549233139, 0.1170638204, 0.2875573337, 0.3522965908, 0.2361625582, 0.2556298375, 0.0542405359, -0.1165085658, 0.0468484499, 0.3733153641, 0.0643454567, -0.0230935961, 0.0150143504, -0.3111070693, 0.2405961305, -0.1808791459, -0.3304518759, -0.0122576933, 0.2036721259, 0.2125051171, 0.0508867167, 0.1509728283, 0.1212486848, -0.0449146740, -0.0517697260, -0.0380450152, 0.2659693956, 0.0289283246, 0.0332109593, 0.2190619260, -0.0188987125, -0.2093338668, 0.0459298827, 0.0583171882, -0.0553472377, -0.2042965293, -0.3766614795, 0.0912706032, 0.2446885109, 0.1066707820, -0.3395259380, 0.0232713856, -0.2309372276, -0.0899728984, -0.0491291359, -0.2172435671, 0.2664293647, 0.2504896820, 0.1883601099, 0.0363035426, -0.0599507578, 0.1403940171, 0.1553598940, 0.2596818507, 0.1467889696, -0.0105776368, -0.1422139853, 0.2357366979, 0.1081114113, 0.1411175281, -0.0690126196, 0.2037033588, 0.3703858852, -0.0209207367, 0.2625625432, 0.1495435834, 0.0766299367, -0.0658072904, 0.0668056384, -0.1780047268, 0.3546760678, 0.3262529373, -0.0458774641, 0.4947103262, -0.1924002618, 0.2815692425, -0.0815919265, 0.0490326248, 0.3540987074, 0.1161404401, 0.4850594997, 0.1806500703, -0.1747528613, 0.0499225892, 0.1231011674, -0.3130392730, 0.0220207796, -0.0146236084, -0.0137773575, -0.2773163617, 0.2654612958, 0.1622023731, 0.3932421207, -0.0467954129, -0.2671583891, -0.0708268136, -0.1541320533, -0.1819210947, -0.1487970799, 0.5325953960, -0.1026035026, -0.1617824286, -0.0356470905, -0.3664070368, -0.0218726676, 0.3212718666, -0.2232156843, -0.1167893261, 0.1208565161, -0.2104054093, -0.0125225019, -0.4074108005, -0.2655704618, -0.1275411993, 0.2180885077, 0.0978064761, -0.3221544921, -0.0213323329, -0.1857383102, 0.3150769472, -0.2080885619, 0.0713449940, -0.1774632186, 0.2284280062, -0.3583851159, -0.1097929329, -0.2629026175, -0.1146593019, 0.0376511738, -0.1210187376, -0.1061718315, 0.0945552066, 0.3381929994, 0.0011089521, 0.1041474789, -0.2158474028, -0.1939712614, -0.1723459214, -0.1058788672, -0.1342107952, 0.1416783482, 0.0329808891, 0.2254386693, 0.0270371325, 0.1891555041, 0.0340990610, 0.3222015500, 0.1747900695, 0.2762036324, -0.3184753358, 0.1635501981, -0.0131393746, -0.1539588720, 0.2522895634, 0.2222784162, -0.1484910101, 0.0441687591, 0.2906109393, 0.2766904831, -0.0641164407, 0.0329794921, -0.0270107109, 0.2477783263, 0.2051675171, 0.2846456170, -0.1789315045, 0.0130929304, 0.2409627140, -0.0536149926, -0.0257597007, -0.0137871820, 0.0001492030, 0.1580438912, -0.1086807251, -0.1509988755, -0.0782334134, 0.3276293278, -0.0218526479, -0.2396203429, 0.1543797255, 0.1921231747, 0.2131729126, 0.2776421607, 0.0351548009, -0.3961811066, 0.0856376365, -0.4184704721, -0.0202559829, 0.0858335271, -0.0563652031, -0.3448048532, -0.2309469134, -0.0978530496, -0.1980138421, 0.0534754843, -0.3705787957, 0.1595954001, 0.1504204273, 0.1614030153, 0.1608267725, -0.0542953573, 0.0423219129, -0.0710425228, 0.2658364475, -0.0638520867, 0.0949138775, -0.1872280538, 0.3265449405, -0.1311060786, -0.1532534361, -0.2993389070, 0.0292307362, 0.3483682275, -0.1044799909, 0.1328590661, -0.1829558164, -0.0726239905, -0.1306423396, 0.4718871713, -0.1962611228, -0.1589370072, -0.1212191433, -0.2741264105, 0.2183980346, -0.1997889280, 0.1168279722, -0.0978180394, 0.0505516231, 0.2979783118, 0.0874131173, -0.0383997113, 0.1848362088, 0.2648477256, -0.0113595957, 0.3845770359, 0.1638184339, 0.1116731614, -0.3918864727, 0.0059362329, 0.1713930219, -0.0890263170, -0.0488362052, -0.0016859672, 0.0432188958, -0.1096834615, 0.0452480465, -0.3435857594, -0.0325050242, 0.0021319841, 0.2529288828, -0.1822425872, -0.0018756557, 0.1059623808, -0.0537765659, -0.4220154881, -0.1840395033, -0.0040321834, 0.0532240495, -0.0477965176, 0.0150934653, 0.1175120622, 0.0730200782, 0.1684550494, 0.0309274327, -0.0811574608, 0.1325904876, 0.1537390053, 0.1138328537, -0.1101419553, 0.0990148187, 0.2440962344, 0.1344698817, 0.2411535382, -0.0615222566, -0.0050753369, -0.0299061630, 0.1577137411, 0.1424633116, -0.0670696646, 0.1089940518, 0.0604792349, 0.1638925672, -0.3341768682, -0.0296154302, -0.2576333284, -0.3038882315, 0.0673092827, -0.1456411034, -0.1877029985, -0.0660241544, 0.1764527112, -0.1667080671, -0.1314453483, 0.1409791112, -0.2026667893, -0.1661556512, -0.0078054615, -0.1307590306, 0.1318493634, 0.1166662276, 0.2613454461, -0.0396090634, 0.2274388969, -0.0225049853, 0.2916966975, -0.2868462503, -0.0522812009, -0.0909966007, 0.0036389951, -0.1627822369, -0.0033975898, -0.2193972468, 0.0012589713, -0.1866528541, 0.1396008581, -0.0309758112, 0.1407631338, 0.1831430197, -0.0832578763, -0.1566122025, -0.0360275358, -0.1063477397, -0.0561796986, -0.0238429513, 0.2151735276, 0.0336824805, -0.0005629960, -0.0625272393, -0.0144294752, -0.0996624008, -0.2705260515, -0.0894925371, -0.0195612032, 0.1015245616, -0.1548968256, 0.2041316479, 0.0348883457, -0.0610714257, -0.1012616754, 0.0507784486, 0.1431871206, -0.0779931098, 0.0986804515, 0.0800089985, -0.2497522533, 0.0687442571, -0.0738542899, 0.1210366413, -0.1032587439, -0.1076401323, 0.0077143386, 0.0225018431, 0.0946959034, -0.1824163795, 0.0247402415, 0.1921831071, -0.1569331288, -0.2412877679, 0.2379037738, 0.0487206280, 0.2468477488, -0.0372713245, -0.3016689718, -0.1219062433, -0.2382775396, -0.0084305778, -0.0905907154, 0.0201118886, 0.0331237465, 0.2148962915, -0.1875188053, -0.2493906170, -0.0193215813, 0.0745367780, 0.0235219598, -0.0258329194, 0.0242498666, 0.0856051967, -0.2280904800, 0.0899492949, -0.0872481018, 0.1675124168, -0.1497696489, 0.0404824652, 0.2522930503, -0.2509411275, -0.0974659622, 0.2265991867, 0.0346563943, 0.1947344542, 0.1079743505, -0.1601166427, -0.0835852101, 0.1353383958, -0.1217139885, -0.2330358326, -0.1834720522, -0.2512407005, -0.0668753684, -0.2150353938, -0.0085915364, 0.1831002086, 0.2350196242, -0.1770961732, -0.2210643142, 0.1928547472, 0.0134014310, 0.1690641642, 0.2372184396, -0.1804936677, 0.0567480810, 0.1381185055, -0.2362971306, -0.0081679681, -0.3291840255, 0.0607064702, 0.1577844173, 0.2819544077, -0.2207485586, 0.1811435074, -0.0171594061, 0.1036311090, 0.1734892130, -0.0831243321, 0.1974605322, 0.1918220818, -0.0340331383, -0.1028806791, -0.1677249074, 0.0693749636, -0.0865500420, 0.0353683457, -0.3840070665, 0.1135011315, 0.1142921895, -0.1096135154, -0.0708818287, -0.3028288782, -0.0720453635, -0.0597996265, 0.1617364585, 0.1451375484, 0.1288403124, -0.0170966219, 0.0980903655, 0.1635307819, -0.0960118696, 0.0985519886, -0.1277126968, -0.0913772061, -0.0232472960, -0.1546173990, 0.0631054714, -0.1834314764, -0.0720314682, 0.1084052920, 0.1310828477, 0.0949727893, 0.0739933252, -0.0866499767, 0.0708142966, 0.0405928157, -0.0619084686, 0.1780854166, 0.2195316702, -0.0074974527, -0.0576235093, 0.1537922174, -0.1148042232, 0.1767222732, 0.0488247350, 0.2403476983, -0.1265169233, -0.0898469239, 0.0937708318, 0.1283829063, 0.1831891239, 0.1004409567, 0.1560724676, -0.0452147052, -0.1699237972, 0.1478454769, 0.1971397400, 0.0680043250, 0.1732514054, 0.0893173590, -0.1607820243, -0.2208256871, -0.0497828946, 0.0892030522, 0.2249011099, 0.0655698255, -0.0797292665, -0.1274419129, 0.1062912419, -0.1871218532, 0.2758007050, -0.1919421554, -0.1819738597, -0.0532388613, 0.2783097625, -0.0314399116, -0.0839135349, -0.1851216257, 0.1287747771, 0.1710012406, -0.1472576708, 0.1017834544, -0.0220936518, -0.0907408595, 0.1432969272, 0.1926220059, -0.1045104936, 0.1064845473, 0.0579416491, -0.1811654419, 0.0535062924, -0.2663507164, -0.1435571164, 0.0355522707, -0.3197359145, -0.0378597267, -0.0405131653, 0.2039057463, 0.0099055022, 0.3949000239, 0.1745661199, 0.0096941618, 0.2188221812, -0.0467059836, -0.0060659582, -0.0837523043, -0.3240829706, 0.4485973120, 0.2793551087, -0.0008478510, -0.0962289944, 0.0242585987, -0.0173824299, -0.1706885099, 0.0241988227, -0.0445891917, -0.0781370252, 0.0899661556, -0.0227843933, 0.0396498926, 0.0013279894, -0.1944167167, -0.4938175380, 0.0653596744, -0.0277896877, 0.3177800775, -0.0054720859, 0.1991190165, 0.0625410601, 0.2998633981, -0.1662161499, 0.3629076183, 0.0724918991, 0.2494088411, 0.2933878601, -0.2457924187, 0.0772391781, 0.0178892389, -0.0445463024, 0.2822227776, -0.0296622775, -0.0686942339, -0.0696151704, -0.1942947954, -0.0820943564, 0.0085793678, 0.1898655295, 0.3589089811, 0.1744626164, 0.1731999367, -0.0800711513, -0.0407840200, 0.0309839677, 0.2697237730, 0.0599395782, 0.1481409967, -0.1130951643, -0.1404882371, 0.2337693870, -0.3320458233, -0.1938924491, -0.0738462135, 0.0301481467, 0.3089891076, 0.1473754793, 0.3523345292, 0.1962140352, 0.0994072258, 0.2183701694, -0.1460789144, 0.0444573201, 0.0056601656, 0.2627637386, 0.2907673120, 0.2424538285, 0.0220213048, -0.1851260960, -0.0699451119, -0.2716481686, 0.0071206531, -0.0127647510, 0.0642293468, 0.2212700099, -0.1747796535, 0.0698529184, -0.1634124517, -0.2858433425, 0.3538357615, -0.3410490155, -0.2564455867, 0.3160785139, 0.2362145036, -0.1380588859, 0.0952242762, -0.0378064550, 0.2252089679, -0.1382082701, -0.0528965592, 0.0596633106, 0.4285138547, -0.1160795987, -0.1351639479, -0.2008632123, -0.3979182243, 0.1241023540, -0.3336367011, -0.2605420947, -0.0479669198, -0.0079241069, -0.1452631354, -0.2181895822, 0.5091364384, -0.0472560078, -0.0567055605, -0.0864107236, 0.2397706360, -0.1784597784, 0.0776469484, -0.1135066748, -0.1675092578, 0.3444353044, -0.3162191212, 0.0750055090, -0.1159766465, 0.5095196962, -0.2732138634, -0.1293313205, 0.5510186553, 0.2817529738, 0.0820006132, 0.0649826974, -0.0982599407, 0.1163161024, 0.3267704844, 0.3269954622, 0.3397757709, -0.0371638313, 0.2775895298, 0.4657186866, 0.4305303991, -0.5177223682, -0.3134524822, -0.1449416578, 0.0573237129, 0.0381540991, -0.1357268542, -0.0970856845, 0.0485917330, 0.3018893003, 0.2253769785, -0.0790651962, 0.1414822936, 0.2048192322, -0.0561740063, 0.2823507488, -0.1793457419, 0.1220516190, 0.2208485603, -0.1890341491, -0.0338696577, 0.1202136204, -0.1638644636, -0.1882997304, 0.1281937808, -0.0815403536, 0.2973116338, -0.1155463979, 0.1560977548, 0.1613957584, 0.1489645392, 0.0629864335, 0.0396367349, 0.1224284694, -0.0151057011, 0.0635711253, 0.1164544076, 0.1018580645, -0.2887510061, -0.3415376842, 0.0847069696, -0.1044692174, 0.2771951258, 0.0100159533, -0.0082039656, 0.1029336527, -0.2066627294, -0.0645071641, -0.1021785662, -0.0631062314, 0.1093162373, -0.1229953468, -0.0662159324, -0.2878514528, -0.1652390063, -0.0519257262, 0.0909062847, -0.0883730799, 0.1794650406, -0.2923217118, -0.1055819988, 0.1562387496, -0.3167349994, 0.0213683117, -0.2022805214, 0.1175532192, 0.2412427366, -0.0740874857, -0.0086819446, -0.0284782052, -0.2218540758, 0.3526755869, 0.0176582783, -0.0361767970, 0.0633060187, 0.1086668894, -0.0265738331, 0.2674504817, 0.3879838884, -0.4271543920, -0.0121191479, 0.4917151332, 0.1407125443, 0.0965059549, -0.2048398554, -0.1275525242, -0.3602083921, -0.0945921317, -0.0287635867, 0.0374614932, -0.1840822250, 0.0276046712, -0.3943300843, -0.0077669960, -0.2055437267, -0.0698864982, 0.0144029520, -0.0109293386, 0.0953121856, -0.1816231757, -0.1052336022, 0.1730714440, 0.2646463215, 0.2356707752, 0.5055740476, 0.0765968859, -0.1451790184, 0.1163366735, -0.2680262923, 0.0274129473, -0.1534266770, 0.0672799274, -0.2234360278, -0.2158110589, 0.0236393865, -0.1492737383, -0.1506747752, 0.0117862066, 0.1612109989, -0.1296300888, 0.1663041413, 0.0490553603, 0.0539443754, -0.2363872528, -0.1336857080, -0.3069843054, -0.1476655602, -0.1653000563, -0.1797375530, 0.1131057367, -0.3091471195, 0.0425016880, 0.1075121984, -0.3036703169, -0.2078748047, 0.1323172152, 0.2783017755, 0.1245126650, -0.0112388954, 0.2171283215, -0.2306375951, -0.0444607772, 0.1058090478, -0.2645877302, -0.0522991940, -0.0260276627, 0.2215853482, 0.0651901364, -0.0834073871, -0.2240021825, -0.1697769165, -0.0971008018, 0.3928364813, 0.2042459548, -0.3358683586, -0.0982318893, -0.1753543913, -0.1483211368, -0.1683815718, -0.1966374665, -0.5114220381, 0.2478416860, -0.3079906106, -0.2260091603, -0.2639455497, -0.0952370167, 0.0859799311, 0.2784081697, 0.2111119777, -0.1802593172, 0.0612132363, 0.0042619617, 0.1550744921, -0.3226395845, 0.0141631849, -0.0018106258, -0.3131048083, -0.2228145897, 0.1037149951, 0.0545705259, 0.0858625099, 0.2724949718, 0.2372669131, -0.1141518429, 0.1776210517, -0.0639257580, -0.2911598980, 0.0848556533, 0.2152147889, 0.1426249295, -0.2231928706, -0.0380114578, 0.1730197072, -0.0446471423, -0.0089507774, 0.1517943889, 0.3891373873, -0.1001689658, 0.2289308459, 0.0449815467, -0.2525627017, 0.3054108024, 0.0754964277, 0.2225184739, 0.0192925110, 0.0377584882, 0.1329376847, -0.0248229168, -0.0618211776, 0.2050183862, -0.3244214654, -0.0670623630, -0.1030283645, -0.1505015045, -0.2186480910, -0.1466915011, 0.0131852319, 0.1903764457, -0.1379706413, -0.0103414273, -0.1031619385, -0.0289074760, 0.1199907959, 0.0920601934, 0.0369508006, -0.1319661289, -0.3549690843, -0.3737248182, 0.2797789872, -0.0074564726, -0.1180036813, -0.1024941057, 0.1784564555, -0.3360036314, -0.1046834067, -0.2333061099, 0.0228595678, 0.1368236095, 0.2967646122, 0.1420269310, -0.1937039047, 0.0580024123, 0.0975148007, -0.2228340060, 0.1891645193, 0.2679928243, 0.2467004508, 0.2839201093, 0.1142728776, 0.1677536815, 0.0676632896, 0.0507058315, -0.0218544323, 0.2852054238, 0.1558327526, -0.2160299718, -0.1618738174, 0.1673047692, 0.2530348897, 0.1723246127, 0.1367174983, 0.0098436922, 0.1706986576, 0.3915674388, 0.0217337906, 0.2359491289, 0.1454799771, -0.0360209681, 0.0853568017, 0.3057866991, 0.1160455868, -0.2818537354, 0.0367960967, -0.0526930168, 0.0322592556, 0.1665269434, 0.2201113552, 0.1038427651, 0.1144036204, 0.1146443188, -0.2397484779, -0.0361447483, 0.2322445214, 0.1588877589, 0.3090892136, 0.0100975372, 0.1248734146, 0.2020656168, 0.1901222616, -0.2916893363, -0.0206991192, -0.1003430188, 0.2159144431, -0.0024162855, 0.2078849971, 0.1618305743, -0.1941022575, 0.3109511435, -0.0847710967, -0.0303336829, -0.1966644824, 0.1757592857, -0.2577015162, 0.1871046871, -0.0345135443, -0.2705848813, -0.1047837213, 0.0404341593, -0.1309518069, -0.0054081501, 0.2991139293, -0.0803784132, 0.2499315739, 0.0181710664, 0.2029455453, 0.1572244763, -0.2516087890, 0.0520249531, -0.1608860940, 0.0109295957, -0.2582448125, -0.2420951724, -0.1262181103, 0.0061250380, -0.0860487595, 0.0367809758, 0.2522516251, 0.1284011751, 0.2990058959, -0.2304800749, -0.1207008734, 0.0434021279, 0.1014666557, -0.0910608396, -0.0437435284, 0.0026019728, 0.0029546216, -0.1006692499, 0.3715083003, 0.3913794756, 0.1292780042, -0.1992957145, 0.1424028724, -0.0642330721, -0.0350679159, -0.0893603489, -0.1202638671, 0.2627118528, -0.1763107926, 0.2305072248, -0.0834654570, -0.2753887177, 0.0364828929, 0.0744345486, -0.1990317106, 0.3630103767, 0.1752290726, 0.1419552863, -0.0888655335, 0.0357344374, -0.1672537327, -0.0891755298, 0.1624715775, -0.3033896685, -0.3699938655, 0.2669321895, -0.0024290578, -0.1689605713, 0.1011107489, 0.0920465738, -0.2324744463, -0.0824152529, -0.0497713499, 0.1456627399, -0.1866604090, 0.3876005411, -0.0122973258, 0.0718551651, -0.2173240781, -0.3610424697, -0.2757272124, 0.2662565708, -0.3237265348, -0.3092278540, 0.1486126781, 0.2273717523, 0.0157034323, 0.3271086812, -0.3772170842, 0.1090072915, -0.1786850840, -0.1118384227, -0.1275587082, 0.1524983197, -0.2360350043, -0.2504706681, 0.0077341869, 0.0708346739, -0.1533312947, -0.3045418262, -0.1272519380, 0.0136903301, -0.1989665031, 0.2200553566, -0.0082158893, -0.2804626226, 0.0808792040, 0.1735875309, -0.1778246760, 0.0441110693, 0.0016823194, -0.0385256745, -0.0040076645, -0.1546720266, -0.0530415326, -0.3495461941, 0.0004586465, 0.1993783712, 0.0261151474, -0.1368115544, 0.1329063177, 0.0035527286, -0.0486024134, 0.0631382316, -0.0187528729, -0.1425469667, -0.1739009321, 0.2142992020, -0.0765676275, -0.1180170178, -0.0999356359, 0.0506110787, 0.0778791532, -0.1094899401, -0.3066305816, -0.0773378760, -0.0323714837, -0.0397259928, -0.0326147676, 0.1615543962, -0.1335168779, 0.0852724537, 0.1452275217, -0.2226213068, 0.0245184228, 0.1511438787, -0.0766338706, -0.2153900713, 0.0946880281, -0.1186148226, -0.0669008046, 0.1897498071, 0.1884006560, 0.1319658309, 0.1401122212, -0.1438302398, 0.2035763711, 0.2273217291, 0.0591498464, -0.0283405315, -0.2065913379, -0.2168983221, 0.1901461184, -0.0060110795, 0.0126264514, -0.0460801907, -0.2930436432, 0.0905704126, -0.1073558256, 0.1113926172, 0.2591625452, -0.0865392685, -0.3669288456, -0.2813328803, -0.1779005975, 0.1592111737, 0.0246751364, 0.0576203987, 0.0891609341, 0.0421636812, 0.0985480249, 0.1834304929, 0.1707967371, -0.0923523605, -0.1564899832, 0.0583246872, -0.0029928121, -0.2481280267, -0.0596350767, 0.1114673242, 0.3247807324, -0.2263648957, -0.1626479626, -0.0179614034, -0.1514514536, -0.1664409488, 0.0714853629, -0.1949264407, -0.0905536041, 0.0326632038, 0.1646638215, -0.2391971350, -0.1132172346, 0.3346019387, 0.1001874804, -0.1222009212, -0.2208758146, -0.0177585520, 0.0019238071, 0.1072383001, -0.0607223772, 0.1951362789, -0.2379089445, -0.3028478026, 0.2049551457, -0.0967790633, 0.2635005116, -0.2225113064, 0.3644257784, 0.1287560761, -0.1508185118, -0.0115710394, -0.3260675967, 0.0246874895, 0.0816488862, -0.2253767848, -0.0714014322, -0.1173075661, -0.1442213356, -0.0559686907, 0.1858340353, 0.2083649635, -0.0612686798, -0.0279571731, -0.1989874095, -0.0704209134, 0.2636346817, -0.0312232934, -0.1827943176, -0.1855162680, -0.0227965266, -0.2196256071, 0.1799975038, 0.1754577756, -0.1950063854, -0.0578178577, 0.0469290093, 0.1690682769, 0.0960041732, -0.4439003766, -0.1413374096, 0.0324060433, 0.0664762333, 0.2679049373, 0.0358355008, -0.2725278437, -0.0940906852, -0.1166599691, 0.3305493593, -0.1569232941, 0.1990990192, -0.0898349285, -0.2248781472, 0.2105071247, 0.0080621596, -0.0294066966, 0.2172860503, -0.3648013175, 0.1361279190, 0.1214324757, -0.0901139751, -0.1504050493, -0.3913466334, -0.1356251687, 0.1208721548, 0.2399551719, 0.0891869292, 0.0893476754, 0.1033642069, 0.3601844907, 0.1704525352, -0.2035754472, 0.2610648572, 0.1278450191, 0.0444115251, 0.2905131876, -0.2133141607, 0.0073533943, -0.0395249501, -0.0213628467, -0.0101537285, 0.0283939037, -0.0546248332, 0.1824429929, -0.1744714826, 0.2498878837, 0.1486658305, 0.1848429441, -0.0826661065, 0.0571532734, -0.2497217953, 0.0494692661, 0.3169548512, -0.0315344632, 0.0125087760, 0.0357554853, -0.0462734029, -0.1054647267, 0.1703095436, -0.0579879135, 0.0286865234, -0.1295472533, 0.1837438494, 0.0167747345, -0.2187495530, 0.0177969579, 0.1461297125, -0.0282478016, 0.2689650953, 0.0582924522, -0.2529764771, -0.1933594048, -0.1382159293, -0.0635525584, -0.2685398459, 0.2106591612, 0.1224829033, 0.0389133431, -0.1840011626, 0.0535712801, -0.0610047467, 0.2111981958, -0.1011076495, 0.0837893337, -0.1916331947, 0.1099847183, 0.2442717105, 0.2814858556, 0.2232317924, -0.0153698539, 0.0203553010, -0.0822751150, -0.0059946617, 0.0774860010, -0.0535792857, 0.0478695408, -0.1741240174, 0.1762493104, -0.1570039988, -0.1390211582, 0.0874199718, 0.0767254978, 0.2470579892, -0.0994122103, -0.0808433369, -0.2219471484, 0.1552778184, 0.2111221254, 0.0825344622, 0.1064935848, 0.1441057622, 0.0543535724, 0.1567678005, 0.1760689765, 0.0447082147, 0.1918660402, 0.2404597849, 0.2135849595, 0.0341043361, 0.1218551472, 0.0623667166, 0.2739232183, 0.0232052617, 0.1546643972, 0.0748886988, -0.1130914688, 0.0481266491, -0.0121517144, -0.1263602674, 0.2381895781, -0.0500993058, -0.1535522491, -0.0337051488, 0.2171100676, -0.1288270354, -0.1186013520, 0.0704410449, 0.0351224877, -0.0893956944, -0.1751910001, 0.1936317980, -0.2173175663, 0.1677929014, -0.1756552309, 0.1482823789, -0.0897682309, 0.0753853917, -0.0798414424, -0.0778734386, 0.0629955530, -0.0380807258, 0.0761674121, -0.0158909410, 0.1068272740, 0.1666711569};
# 20 "firmware/parameters.h" 2
# 1 "firmware/weights/b4.h" 1
# 12 "firmware/weights/b4.h"
model_default_t b4[50] = {0.0271092281, 0.0660758391, 0.0076879002, 0.0494598337, 0.1001079977, 0.0053643421, 0.0617436282, -0.0252456497, 0.1676123738, -0.1345706880, 0.0398562402, 0.1287510991, 0.1005965844, 0.0717179179, 0.1421219558, 0.1680418253, 0.0048221466, -0.0429596789, -0.0030019847, -0.0549810752, 0.0666393042, -0.0150360549, 0.0684200451, 0.0035742973, 0.1632449031, 0.0167303104, -0.0426116399, 0.0263021328, 0.0364384428, -0.0644040182, 0.0405210257, -0.0224495921, 0.0926646292, 0.0131883686, -0.0260315407, 0.0842887610, -0.0494620539, 0.0238182712, -0.0220118240, 0.0832288787, 0.0752618462, 0.0621548630, 0.0505514070, 0.0757462382, 0.0359156765, -0.0457273200, 0.0928129107, -0.0431290083, 0.1046601757, 0.1193406284};
# 21 "firmware/parameters.h" 2
# 1 "firmware/weights/w6.h" 1
# 12 "firmware/weights/w6.h"
model_default_t w6[1250] = {0.3331990242, 0.2397076488, 0.1435093135, 0.2745008171, 0.0107816719, -0.1384120882, 0.0904383361, -0.0804633871, 0.1852503270, -0.1990251541, 0.3678143620, -0.0210000705, 0.1559502631, 0.0169643834, -0.0349056125, 0.3026334345, 0.0028915012, -0.1422596723, 0.0983625874, -0.0820056871, 0.4040666819, -0.2666784227, 0.3280113935, 0.2534955144, 0.2403117269, -0.2878761292, 0.1794665903, 0.0540140755, 0.0943779871, -0.3406039774, 0.3760694563, 0.0761659667, 0.2048835754, -0.0913337246, -0.1671451479, 0.3683398664, -0.2442534119, 0.0134471375, -0.3113572299, -0.3496022522, -0.1560245305, -0.3918344676, -0.0702773482, -0.0824303105, -0.0161609109, -0.0923282802, -0.0075276569, 0.3103926480, 0.3211487234, -0.1582013518, 0.0778666586, 0.2827601433, 0.3709105253, -0.1005605683, 0.1083007529, 0.0734525770, -0.2954114377, -0.2069793195, -0.2658970654, 0.0975843519, -0.1953063905, -0.0146203320, 0.0063362541, -0.1548897475, -0.1884126365, -0.1273409128, -0.1493200511, -0.1100769639, -0.3013515472, 0.2294301838, 0.2030236125, 0.1909287870, 0.2046937644, -0.0660341755, -0.1076879501, -0.0952737555, 0.2429318726, 0.0925168991, -0.2009249181, 0.1557095647, -0.0153010236, -0.2250997424, -0.4199783802, -0.2521378696, -0.1371691525, 0.0160918199, -0.1407404244, -0.1556113213, 0.4931613207, -0.0287551377, -0.1268969327, 0.0828610063, 0.6254952550, -0.0470030010, 0.0863754675, -0.0571736880, 0.5150464177, -0.2008279413, 0.1148732379, -0.2555793226, -0.2926840782, 0.2558356524, 0.2755446434, -0.0498889089, 0.0987000689, 0.0491475612, -0.0383290537, -0.2252829224, -0.0296403896, 0.2888412774, 0.1760792732, -0.1321911067, 0.2650508285, 0.1104092374, 0.3058641255, 0.0661772266, 0.1329531670, 0.1225827858, -0.2645748258, -0.0134540247, 0.3946813345, 0.0974116698, 0.3010376394, -0.0292009525, -0.0884471014, 0.1968677193, 0.4999049306, -0.1320864558, -0.3194538951, 0.1797794998, -0.2488959730, -0.1613853127, -0.0848466083, 0.1431175172, -0.1607950479, 0.3013075888, -0.2659808397, -0.0072328569, -0.3316311836, -0.2597638071, -0.0867722407, 0.2118674368, -0.0914104730, -0.0468241796, -0.3588323891, -0.2745314538, -0.0210926663, -0.1462434530, -0.3047329783, -0.0843603089, 0.0937793553, 0.0485737137, 0.1532463729, -0.1386145502, 0.1813607365, -0.2654028535, -0.1908564717, 0.2592228651, -0.2599418759, 0.4309757352, -0.3278847039, 0.0096280556, -0.0135088433, -0.0471220985, -0.0461361520, -0.3180862367, 0.0782035738, -0.2732764781, -0.1790882796, -0.3247564137, 0.3376074731, -0.0843567923, 0.0185617954, 0.1140651554, 0.2059961706, 0.0483665019, 0.2424653620, 0.2729437947, -0.3125665188, 0.0212824922, -0.1790055633, 0.0869197473, -0.1733244658, -0.2257030606, -0.1830844581, 0.2237896472, -0.3237453103, 0.3197840154, 0.1337850690, -0.0010148983, 0.1804154366, -0.0342827663, -0.2838508487, 0.2447158545, -0.0420093723, -0.2424625158, 0.0079328818, 0.3164482713, 0.1187365502, 0.0746340677, -0.0462310091, -0.1965320557, -0.1509186327, -0.2565169632, -0.2790498734, 0.0522468239, 0.3542463183, -0.4807190597, 0.1101241037, -0.3037219644, 0.0557982363, -0.2531934381, 0.1463424414, 0.2927505970, 0.0785260946, 0.0541977994, -0.3166998327, 0.1285860240, 0.1485766470, -0.0446673520, -0.1652144641, 0.2569809556, 0.2219818830, 0.4270155132, -0.1744460464, 0.2011473775, 0.1909184903, -0.1033995077, 0.1939035356, 0.1705429405, -0.2068692893, -0.2248953283, 0.2150389105, 0.1003918946, -0.1913728863, -0.0428031236, -0.1403437853, -0.1359751374, -0.0913583189, -0.1474127173, 0.0035629270, 0.0359445438, 0.1744827032, -0.1188824847, -0.0097005032, -0.0774525851, 0.1366162598, -0.4644874334, -0.3102067411, 0.1826830059, 0.1852137446, 0.1341111064, -0.2865605354, -0.0781283081, -0.2718299925, 0.1073659584, 0.2944709957, 0.2552101612, -0.2767809927, -0.2823137045, 0.3354008198, -0.4223751426, -0.1811571121, -0.2286713123, -0.1943250000, 0.0894110054, -0.1749144047, -0.3043307364, -0.0637345389, -0.2283891290, 0.0117548937, -0.0190779604, -0.0411255844, 0.3719288111, 0.1262709349, 0.3413437307, -0.0834559649, -0.1983588934, -0.1866306067, 0.0686035156, 0.1825296283, -0.0166281927, 0.2595898211, -0.0428137146, 0.2631465495, 0.2187885195, 0.2064974010, -0.1248928159, 0.1598567814, 0.1139591634, -0.1780678779, 0.1373393983, -0.1767801940, 0.1559588015, -0.0705891848, 0.1108251885, 0.2144076675, 0.0181555115, 0.2289537787, 0.2113461047, 0.1992183924, 0.0413819626, 0.0467475951, 0.0822994113, -0.2140822113, 0.5347372890, -0.5290597677, -0.0177331418, -0.2200194746, 0.0535010360, -0.2459753603, -0.0296851955, -0.0036447663, 0.4586676657, -0.0262408238, 0.3341304362, 0.0273101907, 0.3149950802, 0.1956895292, 0.2539770305, -0.3407394588, 0.1100836992, 0.0609542504, -0.0759103596, 0.1790277809, -0.0445059538, -0.0188019425, 0.0549248904, 0.0817689896, -0.0519452393, -0.0370093510, 0.2134884447, -0.0528904870, -0.0283952001, 0.3115154207, 0.1839476228, -0.0523309484, -0.2390364707, 0.2073090225, 0.1564317346, -0.1596775949, 0.0377472788, -0.1973399371, 0.3687662780, -0.3673970401, 0.1725066900, -0.1590282768, -0.2616149485, 0.1035824940, 0.3930058479, -0.0571678355, 0.0290319286, -0.2659086287, -0.2376541793, 0.2302702963, 0.1890886724, 0.1577011198, -0.1244549379, 0.1274977624, 0.1730802357, 0.2964118421, -0.2382185310, -0.2804522812, 0.2542977929, 0.2622555196, -0.2930931747, 0.1567714065, 0.2601453066, -0.2624261081, 0.0852329656, 0.3083543181, 0.0286115520, 0.3066215813, -0.2098871320, -0.2378861904, 0.2035353184, -0.1992674321, -0.0093276696, 0.0532993525, -0.0895553753, -0.2221224457, 0.3658556342, -0.1464795619, -0.2536440194, 0.2119278908, -0.0185851790, 0.4656026065, -0.0513905250, -0.1274053603, 0.1190503761, 0.1694750339, 0.2978458107, -0.0610300526, -0.0895228907, 0.2197622508, -0.0531009063, 0.0107652890, 0.4079690874, 0.0158714242, -0.0070043681, -0.0559064448, 0.1104358509, 0.0151893571, -0.0477898233, -0.0949770287, -0.0048670536, 0.2118617147, -0.2768347561, -0.0540991947, -0.1787594855, 0.2856253088, 0.4226423204, -0.1844884604, -0.1111729890, 0.3564316034, 0.3255611956, 0.0548942089, -0.3358828127, -0.1803251654, -0.3582173884, 0.0578804053, -0.2470779270, -0.2042670846, 0.0746929571, -0.0893557295, -0.4016835690, -0.2757008970, 0.2428354621, 0.0954048708, -0.0244911835, -0.2575919330, 0.1017880067, -0.1673616171, 0.1782171875, 0.3142061234, -0.0117949331, -0.0751638934, 0.2046787888, 0.0197808184, -0.0185098425, -0.1709700525, -0.2232680768, 0.2746962905, -0.1401955932, 0.0898223668, -0.1046748608, 0.0197039954, -0.1997816563, -0.1207277626, -0.3652890921, -0.1259354353, -0.2725981176, -0.1147634462, -0.0696880296, 0.1761240959, -0.2293399274, 0.0390037186, 0.1086271852, -0.1476295888, -0.0777808800, 0.2160001248, 0.1719330549, 0.1823974848, 0.0762803182, 0.1053299159, 0.2010328770, 0.0112783937, 0.0147626651, 0.1477558613, 0.2398946136, -0.0557566173, 0.1387360096, 0.3093442619, -0.1505873501, 0.1580558270, -0.2384953797, 0.2816336453, -0.3482417762, 0.1457006335, 0.0569023304, -0.1381798089, -0.3027916551, -0.0804163292, 0.1134599447, -0.2457872629, -0.0443015248, 0.2393511236, 0.2994875014, 0.4130535126, 0.2756152153, -0.2889210880, 0.2296911478, -0.0200582426, 0.2323185503, -0.0991762206, -0.0708860978, -0.0516165011, -0.2114119232, 0.0383307599, -0.0283922553, 0.2147240490, 0.2507926226, -0.3110980690, -0.1446046084, 0.0529396571, 0.3709670305, 0.2556119561, 0.0432868488, -0.1606309414, 0.0561052263, 0.1892786622, 0.1165929809, 0.1297451705, 0.3173110187, -0.2509742379, -0.0066167158, 0.2686505318, -0.2189652175, -0.0747548565, -0.2057777494, 0.0676091388, 0.0366917215, -0.3800459504, -0.3341082036, 0.0150860269, 0.0375319682, 0.2215128988, -0.1990853548, -0.2278354466, 0.0645438954, 0.2361147702, 0.0136561580, 0.0389788598, 0.1996397823, -0.2665464580, 0.0919344574, -0.4435634911, -0.1982318312, -0.1925285459, -0.0423414297, -0.3933924139, -0.0436217561, 0.1778862178, 0.1739602685, 0.1267944872, -0.2033316344, 0.1403519809, -0.3108664453, 0.1524020135, 0.0250480119, 0.2786549926, 0.3302082717, -0.4099296331, -0.1515322030, -0.1841971874, 0.1343442649, 0.2343916744, 0.3113611042, -0.2498729974, -0.0242076498, 0.2309324443, 0.3460704386, -0.2453601807, -0.0736219957, -0.3876705766, -0.0135372421, 0.2368287891, -0.0835103542, 0.0522173941, -0.4200426340, 0.1442485750, -0.1482517123, -0.1516868174, 0.0552603230, -0.2886178493, 0.0737675726, 0.0106932223, -0.2780523598, -0.0343178548, 0.1221271157, 0.1128880903, 0.1337582469, 0.2042033076, 0.0328410156, 0.2433985919, -0.2581296861, -0.1990042031, 0.3446741402, 0.2111144513, -0.1789158285, -0.2427816540, 0.4159258902, 0.2845166326, -0.0309912190, 0.0588927604, -0.0413538776, 0.1851078272, 0.2809809744, -0.0205946341, -0.1914259195, -0.0190575551, -0.3976671994, -0.1980871707, 0.1322814226, -0.2928239405, 0.5141651034, 0.1215334684, -0.2191541791, -0.2036991566, 0.2038182467, -0.3856912553, -0.1746862233, -0.0696144998, 0.1883612275, -0.1564522535, -0.0116280559, 0.0409251265, 0.0941304341, -0.4141075015, 0.3054242730, 0.1355561465, -0.0029270109, -0.0382489972, 0.6281672716, 0.2591368258, 0.0019059188, 0.0130636925, -0.0208184067, -0.2056443393, -0.3036578596, 0.0833896995, -0.1785553694, 0.0481074303, 0.0247164872, 0.0534648038, 0.0771110952, 0.1595741063, 0.3294931948, 0.1999447048, 0.2664749026, -0.1658867598, 0.3200387061, 0.0062845363, -0.0285244249, 0.2612356246, 0.0667079911, 0.2508305311, 0.1689885855, -0.2717040479, -0.2152727842, 0.1724051535, 0.3161394298, 0.2634592354, 0.1282725781, 0.0286092665, 0.0594190918, 0.0423565246, 0.4669967294, -0.1407612413, 0.3350125253, 0.3253616095, -0.0134862084, 0.2276487797, -0.2563660443, 0.2417892367, -0.1102815717, -0.1958471239, 0.2132885605, 0.3431485295, 0.2388945371, -0.0037439852, -0.0630656928, -0.1649038941, -0.3948267698, 0.1289967299, 0.0931346491, -0.2256437987, 0.2078209072, -0.1131046638, 0.0129738310, 0.2640998363, -0.0169120412, 0.2930461764, -0.2311337888, -0.2732990086, -0.0063211252, 0.3206945956, -0.1583575457, 0.2415381223, -0.0763258338, -0.0422257297, 0.0728884339, 0.0456049219, 0.1765390337, 0.2142660767, -0.2337298989, 0.1995297372, 0.2242257446, -0.0828210786, 0.2989106774, 0.2550379932, -0.0145913288, -0.2334654331, -0.3550786376, 0.0725413859, 0.1666127741, -0.2935213447, 0.2224015743, 0.1529788971, 0.2457181960, -0.1127344593, 0.0354640782, -0.2176843882, -0.1650020480, 0.1768881232, -0.1784282327, 0.0263831709, -0.2969397902, 0.1509691924, -0.0697716996, 0.2424310297, -0.3406410813, 0.3219195306, 0.1884124279, 0.1005874872, 0.1988355815, -0.0299630389, -0.0640791357, 0.0010897074, -0.1608478278, 0.1810927838, 0.1197994873, 0.1629569083, -0.1654497087, -0.0794532225, -0.1779006273, 0.1292969733, -0.4513214231, 0.4417443871, -0.3100184500, -0.1134811342, -0.3144147694, 0.1292472184, -0.1873866618, -0.0266409200, 0.1172310039, 0.2373622060, 0.0173660666, 0.2327180803, 0.4108817577, 0.1896911412, -0.0794151723, 0.3444594443, 0.0890117064, 0.1222780272, 0.0907023102, -0.1118858233, 0.6546687484, 0.0029638156, 0.3323215842, 0.2227701247, -0.2796272635, 0.3325486481, -0.0436564833, 0.0158054177, 0.0135045685, 0.0126002487, -0.1167163625, 0.1945483536, 0.2759761512, -0.4680027664, 0.0907685906, -0.2067653537, -0.3293423951, -0.0705516189, -0.0123777241, 0.2662727833, 0.2209562063, 0.1691854894, 0.3344243765, -0.1952933818, 0.2675096095, -0.2166501880, 0.1865669042, -0.1350296736, -0.1315512955, -0.2004761994, 0.1709747761, -0.1221540719, 0.1876550913, 0.1307991743, 0.1174703762, -0.0510481112, 0.2432190776, -0.0078641167, 0.0555430688, 0.2270764410, -0.1930051744, 0.2370566875, 0.3312735260, 0.2039474249, -0.0958113149, 0.1113078445, -0.3528552651, -0.4309898913, -0.3081538677, -0.3014080226, -0.0493387133, -0.2009429783, 0.3107911646, 0.0852688178, -0.1983045042, 0.2403063923, 0.2926810682, -0.0200657956, -0.0428155959, 0.0629223660, 0.1493655741, 0.1206018031, -0.1824615747, -0.0691267326, -0.1494927555, 0.2095913887, 0.1132677794, 0.1749574393, 0.3182608783, 0.2300834507, 0.3961870968, 0.1616792530, -0.3731352389, 0.0235042498, 0.0207390413, 0.2742889524, -0.1878798604, -0.2276228219, 0.3586373925, -0.3127791286, -0.1314464808, -0.0127346916, -0.3275296092, -0.1363321543, -0.4197556376, 0.4697786272, 0.3162588179, -0.0536737368, -0.1799913943, 0.4448156059, 0.1078458577, -0.4548107386, -0.0800477639, 0.1881202757, 0.1281374693, 0.1957102567, 0.0191677958, 0.1093045101, -0.1370564550, -0.1524999291, 0.4118147790, -0.0066287690, 0.0332838669, 0.3596315086, -0.2418690473, 0.1696235687, -0.4487233460, -0.2987365723, 0.3363695145, -0.3994609118, 0.0022034019, -0.1013494655, -0.0844327211, -0.0967472941, 0.2291065753, 0.2402093112, -0.2391764969, -0.0735398531, -0.4336484075, 0.1854630262, 0.0381696112, -0.2874946296, 0.1480051726, 0.0462795496, 0.2046451420, 0.0561152436, -0.1182395443, 0.0332176872, -0.0778515562, -0.0261436421, -0.1569940597, -0.0702923387, -0.1351027489, -0.1704894900, 0.3625275195, -0.0145612825, -0.1225152314, 0.1189631820, 0.2072555423, 0.1035664827, 0.1120567247, 0.0261238180, -0.1250797957, 0.0674343556, -0.0335869193, -0.3011632562, 0.1182662547, -0.1792859137, -0.1806358099, -0.1911774576, 0.0967983380, 0.0139533514, -0.2143176794, 0.3146366477, 0.2822715044, -0.0227091219, -0.0096563147, 0.1564802676, -0.2071035951, -0.1551305801, 0.1080649868, -0.2993906140, -0.1589389741, -0.1921129078, 0.0676137060, 0.0396207236, -0.0784077495, 0.1045881361, 0.2972201705, 0.0247342624, 0.3275725543, 0.2254487425, 0.2951786518, 0.0839314684, -0.2964523137, -0.1566086411, -0.2919285595, 0.1986623704, -0.1594928950, -0.3948761225, -0.2307912260, 0.1207516789, 0.0550497770, 0.2460349798, -0.2364128232, -0.1522878557, 0.1883651763, 0.2207392603, 0.0492961295, 0.4661842883, -0.2717477679, 0.1416651905, 0.2117709070, -0.2132437378, 0.1033006981, -0.0723510608, -0.2939770818, 0.0982431397, 0.5041351318, -0.1999439597, 0.4893621206, -0.1602394879, 0.0212266278, -0.0271027721, 0.0263629425, 0.1049242690, 0.1581238359, -0.1136488467, -0.1406652033, -0.0815079659, 0.4698544443, -0.0658024251, 0.1207129359, -0.4749160707, -0.0641241595, -0.2068428993, 0.1672257930, 0.0583407916, 0.1321184486, -0.0959619358, -0.0286645386, -0.4108238816, -0.0885860100, -0.2407587916, 0.4341213107, 0.2153340131, 0.2403145880, 0.1999361962, -0.2803898752, -0.2390175462, 0.1360550374, -0.0273695625, -0.1931587458, -0.1456604302, -0.2463130951, 0.1319054365, 0.0851736069, 0.1362641603, 0.0797229856, 0.3524093628, 0.3292524219, 0.0719183832, -0.1652602702, 0.0368778892, -0.1608752459, 0.2207430154, -0.1976228803, -0.2471217811, -0.1293519139, 0.2076160759, 0.1911187619, -0.3165238202, 0.0553694367, -0.2733019888, 0.2674480379, 0.2066829503, 0.1568936557, 0.2846994996, 0.0841590911, 0.2694350481, 0.2857474685, 0.1801865101, -0.2155531943, -0.2098176330, 0.3824278116, -0.0771303698, 0.1070634797, -0.0553358197, -0.1628874391, -0.1576247364, 0.0904851630, -0.1015541479, -0.2185406983, 0.1073094904, -0.0951970965, 0.3881344497, 0.1124741212, 0.2429235131, -0.1170455441, 0.0688516498, 0.2976107597, -0.3020461798, 0.1027112007, -0.0167098120, -0.0206926111, -0.1159024611, 0.0108622890, 0.2627232373, -0.2147468477, -0.1128988191, -0.0191177633, 0.0718921050, 0.1537931114, 0.4487433434, 0.2963121533, 0.2096499950, 0.0389456190, -0.0499483012, 0.1537104398, 0.1620881110, -0.2568356395, -0.0067968951, 0.0722194538, 0.0686390698, -0.2323224843, -0.4471277297, -0.0772432536, -0.2282826155, -0.2580097020, -0.0846822634, 0.0253216773, 0.0509747155, 0.1011167988, -0.2623484731, 0.1761007756, -0.1053587273, 0.0047430964, 0.4564606249, -0.0551595427, -0.2285187691, -0.2953231037, -0.2497414947, -0.2094928026, 0.2924650013, 0.2457381487, -0.2323894054, 0.1758209169, 0.1777348816, -0.0804268792, -0.0659070015, 0.1569561809, 0.2962643504, 0.1918650866, -0.0941919833, -0.0675403252, 0.3315296769, -0.1149629727, -0.1419773251, -0.0356892683, 0.0832595453, -0.0389526635, -0.0870248899, -0.3157393634, -0.0653050914, -0.2535026073, 0.0232824534, 0.1647169888, -0.4242855012, -0.2549801171, 0.3309721053, -0.1081131473, -0.1810741425, 0.0989301875, 0.2869390547, 0.1037015170, 0.0606038310, 0.0535892285, -0.2874743640, -0.0869300663, -0.4980479479, 0.0852730572, -0.2422870696, 0.1550682187, -0.0549495295, 0.4305128753, -0.0763417706, 0.1003340557, 0.2618513703, -0.4233622253, 0.3635998070, 0.2446779907, -0.0749021024, -0.0100553725, -0.1789062023, 0.0194752030, 0.0386689417, -0.1373050958, -0.3689279556, 0.2709389329, -0.3605285287, 0.1297335774, 0.0191256125, 0.1938094944, 0.2464475930, 0.2464294136, 0.1944199502, 0.0562759638, -0.3022298515, -0.0988529548, 0.1858350337, 0.2338501364, -0.0505024083, -0.2306406945, -0.0967882276, 0.0331873670, -0.0774087533, 0.0636157766, -0.2561248839, 0.2291056663, -0.0984486416, 0.2802762687, -0.0476242639, 0.0526156947, -0.1698199809, 0.2852619588, -0.0594347715, 0.1205180511, 0.2898116708, 0.0477053076, 0.2011613995, 0.2346268594, 0.0626631454, -0.0064252568, 0.0911241993, 0.2181146890, 0.1465125531, 0.1190984696, 0.3130365610, 0.1747364998, 0.3178048432, -0.2666988969, 0.0701813996, 0.3890984952, -0.1719974875, -0.2858397067, 0.2675993145, 0.0974632427, -0.1914414316, 0.3369912803, 0.3787388206, 0.1819347292, 0.1201828048, 0.2450820804, -0.1031264290, 0.0053371582, -0.2267254740, 0.1755075455, -0.2481434494, 0.2583065629, -0.1607710570, -0.2224684954, -0.1004802957, 0.1812451780, 0.2345011979, -0.1635482013, 0.1325564682, -0.1935141385, -0.1514197439, 0.3152006865, 0.0377750322, 0.2271768451, -0.0629868507, 0.2628081739, 0.0253258497, 0.4420502186, -0.0833867639, -0.1053058505, 0.1782615632, 0.0935521200, -0.0596456341, -0.2334164828, -0.2462080717, 0.3659319282, -0.0228592996, -0.2163512707, 0.1089155301, -0.1241054311, 0.4006022811, -0.1811347604, 0.1989894658, -0.2602080107, 0.0591595098, -0.2454219162, 0.1852087229, 0.1508583277, 0.3052335680, -0.1690482497, 0.0416842178, 0.1479166597, 0.2356358320, 0.1828317046, 0.2632485926, -0.2446467727, -0.3691254854, 0.2223052979, -0.1129559651, 0.0886250138, 0.1484973133, 0.1527715176, -0.1660780460, -0.0532737300, 0.1650251299, -0.0145076793};
# 22 "firmware/parameters.h" 2
# 1 "firmware/weights/b6.h" 1
# 12 "firmware/weights/b6.h"
model_default_t b6[25] = {-0.0067135994, 0.0060827467, -0.0301739797, -0.0273172762, -0.0107982615, 0.1121283099, 0.1204419732, 0.0391494632, -0.0308117159, 0.1408582479, -0.0028148694, 0.0982317999, -0.0331012309, 0.1197267175, 0.0597925484, 0.0844130069, 0.1310496479, -0.0185746420, -0.0598167330, 0.0521828160, 0.0023107657, 0.1085435078, 0.1573064327, 0.1015924588, -0.0146292448};
# 23 "firmware/parameters.h" 2
# 1 "firmware/weights/w8.h" 1
# 12 "firmware/weights/w8.h"
model_default_t w8[250] = {-0.4649142921, -0.4054077864, 0.0537208989, 0.0115765808, 0.1931126267, -0.4744496942, 0.0748778582, 0.4686223865, -0.3849269152, 0.0394395627, 0.3179948032, -0.2796709836, 0.1368071884, -0.3756585717, -0.4462512732, 0.1463604718, 0.2706745267, 0.1553561538, -0.4693218470, -0.2528794110, 0.4910773635, 0.3328408599, -0.0905371457, -0.4417517483, 0.3241448700, -0.2737237811, 0.3243111372, -0.0945375189, -0.2151295841, -0.0002994387, -0.1753643900, 0.0196399130, -0.0671350211, -0.3622151315, 0.2134085000, 0.2325588167, 0.3374722004, -0.3131896853, -0.2042516321, 0.0726874769, 0.5995962620, -0.4171002805, 0.2226151228, -0.2318303138, 0.2025631070, -0.2083937824, -0.0614119284, 0.1695718616, 0.2484695315, 0.2568943799, -0.4113559127, -0.2322910726, 0.2774642408, 0.3789955080, 0.1798788607, 0.2745563388, -0.5363875031, -0.4109094739, -0.4282105267, 0.0604564510, -0.3385335505, 0.2144467980, -0.2182705253, -0.3245678246, 0.0113274399, 0.2011761367, -0.1283067912, -0.2634968460, 0.4713988304, -0.2943541110, -0.4284619391, 0.2929190993, 0.1575386524, -0.0557509661, -0.2038414627, -0.3269603848, -0.5410585999, 0.0841571540, -0.3086449802, -0.3025455773, -0.1643984020, -0.1282433867, 0.2118275166, -0.2573663592, -0.3703606129, -0.0310306158, -0.2406499535, -0.0267629959, 0.2912243903, 0.0444867425, -0.3045687675, 0.3701960444, 0.4086942673, -0.2635749578, -0.2573947012, -0.5527665019, -0.3874363005, -0.3346437812, 0.3962866366, 0.2148465216, -0.4023700953, -0.0992698073, 0.0523724705, -0.0996791273, -0.2300542891, 0.1802918464, 0.4695680737, 0.2474879473, -0.3366710842, -0.4605629742, -0.1091891378, -0.1141068339, 0.3271146715, 0.5601474047, -0.1331439614, -0.3394021094, -0.3623200953, 0.4804683626, 0.1642168015, -0.4396939874, -0.0734067634, 0.0864535868, -0.3879500628, 0.1623201370, -0.1707975715, -0.3494719565, 0.0804432184, -0.2955623865, -0.1860795319, -0.5191323757, -0.1042764783, -0.2011345178, -0.3803286850, 0.3458282351, -0.1179772168, 0.2667430937, -0.4306772053, -0.1088919342, 0.1692790091, 0.3953239024, 0.2902464271, -0.2253303975, -0.3191094697, 0.4143472314, -0.6504074931, -0.3221262395, 0.2891858518, 0.0284112673, 0.2987134755, 0.3500516415, -0.0747825503, -0.4812584519, -0.4640186727, -0.2039206177, 0.1760799736, -0.0451142937, 0.2887765467, -0.2905874550, -0.5582216382, -0.0857266709, 0.2927464545, -0.2634982765, -0.0146016916, 0.3750901818, -0.4170013368, 0.1579131037, -0.4011795521, -0.5011036992, 0.1646252126, -0.5328919888, -0.4025626183, 0.3920989037, -0.3334833980, 0.1608588994, 0.2951615155, 0.1582025886, 0.1483704001, -0.2105357200, -0.2056343406, 0.2800005376, 0.1000027061, 0.1385061145, -0.2128364891, 0.1205332056, -0.2360821813, -0.0950627103, -0.4704122245, 0.4679828584, -0.0779147223, 0.2187359780, 0.0087417513, -0.3100621402, 0.2639682293, 0.0246779621, 0.5574132800, -0.4462532103, -0.4290527403, -0.3022615016, -0.2456209660, -0.1001526043, 0.4073461890, -0.0135351121, 0.2550173402, -0.0789704099, -0.4566389918, -0.1544223577, 0.3866032362, -0.1952849329, 0.1732206792, 0.0663080588, 0.3705390692, 0.4037616253, -0.4355742037, 0.1314209104, 0.4120640755, 0.4597267807, 0.0063143955, 0.2617602050, 0.2038126290, 0.3349464536, -0.0876470283, -0.2235051543, -0.0242917277, 0.0353391431, 0.2577437758, 0.1050594524, 0.4056238234, -0.1879158020, 0.3696284890, -0.4323337376, -0.3957848251, -0.3946996033, 0.0279271659, -0.1881310046, 0.0626546517, 0.1984585077, -0.0346282497, 0.0509557314, 0.2413247526, 0.1917474270, 0.2810121179, -0.2978351712, 0.1728075594, -0.1336356997, 0.1815845072, -0.3572661877, -0.3637315333, 0.4825307727, -0.1368879825, 0.3494021595};
# 24 "firmware/parameters.h" 2
# 1 "firmware/weights/b8.h" 1
# 12 "firmware/weights/b8.h"
model_default_t b8[10] = {-0.0908612832, -0.0356810205, -0.0165511891, -0.0530379154, -0.0041263932, 0.1191305220, -0.1073312834, -0.0170261189, 0.0726383254, 0.0194916185};
# 25 "firmware/parameters.h" 2



struct config2 : nnet::dense_config {
    static const unsigned n_in = 784;
    static const unsigned n_out = 100;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned strategy = nnet::latency;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 78400;
    static const unsigned multiplier_limit = ((n_in * n_out + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    static const bool store_weights_in_bram = false;
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef layer2_index index_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};


struct relu_config3 : nnet::activ_config {
    static const unsigned n_in = 100;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 1;
    typedef dense_relu_table_t table_t;
};


struct config4 : nnet::dense_config {
    static const unsigned n_in = 100;
    static const unsigned n_out = 50;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned strategy = nnet::latency;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 5000;
    static const unsigned multiplier_limit = ((n_in * n_out + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    static const bool store_weights_in_bram = false;
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef layer4_index index_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};


struct relu_config5 : nnet::activ_config {
    static const unsigned n_in = 50;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 1;
    typedef dense_1_relu_table_t table_t;
};


struct config6 : nnet::dense_config {
    static const unsigned n_in = 50;
    static const unsigned n_out = 25;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned strategy = nnet::latency;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 1250;
    static const unsigned multiplier_limit = ((n_in * n_out + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    static const bool store_weights_in_bram = false;
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef layer6_index index_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};


struct relu_config7 : nnet::activ_config {
    static const unsigned n_in = 25;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 1;
    typedef dense_2_relu_table_t table_t;
};


struct config8 : nnet::dense_config {
    static const unsigned n_in = 25;
    static const unsigned n_out = 10;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned strategy = nnet::latency;
    static const unsigned reuse_factor = 1;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 250;
    static const unsigned multiplier_limit = ((n_in * n_out + reuse_factor - 1) / reuse_factor) - n_zeros / reuse_factor;
    static const bool store_weights_in_bram = false;
    typedef model_default_t accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef layer8_index index_t;
    template<class x_T, class y_T>
    using product = nnet::product::mult<x_T, y_T>;
};


struct softmax_config9 : nnet::activ_config {
    static const unsigned n_in = 10;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 1;
    static const unsigned axis = -1;
    static const nnet::softmax_implementation implementation = nnet::softmax_implementation::stable;
    typedef dense_3_softmax_exp_table_t exp_table_t;
    typedef dense_3_softmax_inv_table_t inv_table_t;
};
# 5 "firmware/myproject.cpp" 2

void myproject(
    input_t dense_input[784],
    result_t layer9_out[10]
) {_ssdm_SpecArrayDimSize(dense_input, 784);_ssdm_SpecArrayDimSize(layer9_out, 10);


_ssdm_SpecArrayReshape( dense_input, 0, "COMPLETE", 0, "");
_ssdm_SpecArrayPartition( layer9_out, 0, "COMPLETE", 0, "");
_ssdm_op_SpecInterface(dense_input, "ap_vld", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");_ssdm_op_SpecInterface(layer9_out, "ap_vld", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
# 39 "firmware/myproject.cpp"
 layer2_t layer2_out[100];
_ssdm_SpecArrayPartition( layer2_out, 0, "COMPLETE", 0, "");
 nnet::dense<input_t, layer2_t, config2>(dense_input, layer2_out, w2, b2);

    layer3_t layer3_out[100];
_ssdm_SpecArrayPartition( layer3_out, 0, "COMPLETE", 0, "");
 nnet::relu<layer2_t, layer3_t, relu_config3>(layer2_out, layer3_out);

    layer4_t layer4_out[50];
_ssdm_SpecArrayPartition( layer4_out, 0, "COMPLETE", 0, "");
 nnet::dense<layer3_t, layer4_t, config4>(layer3_out, layer4_out, w4, b4);

    layer5_t layer5_out[50];
_ssdm_SpecArrayPartition( layer5_out, 0, "COMPLETE", 0, "");
 nnet::relu<layer4_t, layer5_t, relu_config5>(layer4_out, layer5_out);

    layer6_t layer6_out[25];
_ssdm_SpecArrayPartition( layer6_out, 0, "COMPLETE", 0, "");
 nnet::dense<layer5_t, layer6_t, config6>(layer5_out, layer6_out, w6, b6);

    layer7_t layer7_out[25];
_ssdm_SpecArrayPartition( layer7_out, 0, "COMPLETE", 0, "");
 nnet::relu<layer6_t, layer7_t, relu_config7>(layer6_out, layer7_out);

    layer8_t layer8_out[10];
_ssdm_SpecArrayPartition( layer8_out, 0, "COMPLETE", 0, "");
 nnet::dense<layer7_t, layer8_t, config8>(layer7_out, layer8_out, w8, b8);

    nnet::softmax<layer8_t, result_t, softmax_config9>(layer8_out, layer9_out);

}
