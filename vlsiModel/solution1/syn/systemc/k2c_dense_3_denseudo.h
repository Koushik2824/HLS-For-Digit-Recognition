// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __k2c_dense_3_denseudo_H__
#define __k2c_dense_3_denseudo_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct k2c_dense_3_denseudo_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 50;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(k2c_dense_3_denseudo_ram) {
        ram[0] = "0b00111100110111100001010000101100";
        ram[1] = "0b00111101100001110101001011000101";
        ram[2] = "0b00111011111110111110101011001000";
        ram[3] = "0b00111101010010101001011001100101";
        ram[4] = "0b00111101110011010000010101101100";
        ram[5] = "0b00111011101011111100011101011101";
        ram[6] = "0b00111101011111001110011011100011";
        ram[7] = "0b10111100110011101100111111110111";
        ram[8] = "0b00111110001010111010001010010100";
        ram[9] = "0b10111110000010011100110011100110";
        ram[10] = "0b00111101001000110100000001001100";
        ram[11] = "0b00111110000000111101011101010100";
        ram[12] = "0b00111101110011100000010110010101";
        ram[13] = "0b00111101100100101110000011011000";
        ram[14] = "0b00111110000100011000100001101011";
        ram[15] = "0b00111110001011000001001100101000";
        ram[16] = "0b00111011100111100000001100011001";
        ram[17] = "0b10111101001011111111011001111101";
        ram[18] = "0b10111011010001001011110011110010";
        ram[19] = "0b10111101011000010011001111010110";
        ram[20] = "0b00111101100010000111101000110000";
        ram[21] = "0b10111100011101100101100111001001";
        ram[22] = "0b00111101100011000001111111001111";
        ram[23] = "0b00111011011010100011111011000010";
        ram[24] = "0b00111110001001110010100110101100";
        ram[25] = "0b00111100100010010000111000000001";
        ram[26] = "0b10111101001011101000100110001011";
        ram[27] = "0b00111100110101110111011110010010";
        ram[28] = "0b00111101000101010100000001111010";
        ram[29] = "0b10111101100000111110011001000001";
        ram[30] = "0b00111101001001011111100101100000";
        ram[31] = "0b10111100101101111110100000110101";
        ram[32] = "0b00111101101111011100011011110100";
        ram[33] = "0b00111100010110000001010000000111";
        ram[34] = "0b10111100110101010100000000011001";
        ram[35] = "0b00111101101011001001111110010110";
        ram[36] = "0b10111101010010101001100010111001";
        ram[37] = "0b00111100110000110001111010001001";
        ram[38] = "0b10111100101101000101001000100100";
        ram[39] = "0b00111101101010100111001111100111";
        ram[40] = "0b00111101100110100010001011100010";
        ram[41] = "0b00111101011111101001011000011001";
        ram[42] = "0b00111101010011110000111011111110";
        ram[43] = "0b00111101100110110010000011011000";
        ram[44] = "0b00111101000100110001110001010001";
        ram[45] = "0b10111101001110110100110010010010";
        ram[46] = "0b00111101101111100001010010110010";
        ram[47] = "0b10111101001100001010100000001011";
        ram[48] = "0b00111101110101100101100000010011";
        ram[49] = "0b00111101111101000110100011011100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(k2c_dense_3_denseudo) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 50;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


k2c_dense_3_denseudo_ram* meminst;


SC_CTOR(k2c_dense_3_denseudo) {
meminst = new k2c_dense_3_denseudo_ram("k2c_dense_3_denseudo_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);


meminst->reset(reset);
meminst->clk(clk);
}
~k2c_dense_3_denseudo() {
    delete meminst;
}


};//endmodule
#endif
