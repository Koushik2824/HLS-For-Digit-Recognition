// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "k2c_relu_func_3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic k2c_relu_func_3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic k2c_relu_func_3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> k2c_relu_func_3::ap_ST_fsm_state1 = "1";
const sc_lv<4> k2c_relu_func_3::ap_ST_fsm_state2 = "10";
const sc_lv<4> k2c_relu_func_3::ap_ST_fsm_state3 = "100";
const sc_lv<4> k2c_relu_func_3::ap_ST_fsm_state4 = "1000";
const sc_lv<32> k2c_relu_func_3::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> k2c_relu_func_3::ap_const_lv32_1 = "1";
const sc_lv<1> k2c_relu_func_3::ap_const_lv1_0 = "0";
const sc_lv<32> k2c_relu_func_3::ap_const_lv32_2 = "10";
const sc_lv<64> k2c_relu_func_3::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> k2c_relu_func_3::ap_const_lv32_3 = "11";
const sc_lv<1> k2c_relu_func_3::ap_const_lv1_1 = "1";
const sc_lv<64> k2c_relu_func_3::ap_const_lv64_1 = "1";
const sc_lv<32> k2c_relu_func_3::ap_const_lv32_17 = "10111";
const sc_lv<32> k2c_relu_func_3::ap_const_lv32_1E = "11110";
const sc_lv<8> k2c_relu_func_3::ap_const_lv8_FF = "11111111";
const sc_lv<23> k2c_relu_func_3::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> k2c_relu_func_3::ap_const_lv5_5 = "101";
const bool k2c_relu_func_3::ap_const_boolean_1 = true;

k2c_relu_func_3::k2c_relu_func_3(sc_module_name name) : sc_module(name), mVcdFile(0) {
    vlsiModel_fcmp_32lbW_U41 = new vlsiModel_fcmp_32lbW<1,1,32,32,1>("vlsiModel_fcmp_32lbW_U41");
    vlsiModel_fcmp_32lbW_U41->din0(x_q0);
    vlsiModel_fcmp_32lbW_U41->din1(ap_var_for_const0);
    vlsiModel_fcmp_32lbW_U41->opcode(ap_var_for_const1);
    vlsiModel_fcmp_32lbW_U41->dout(tmp_2_fu_54_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_60_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_60_p2 );

    SC_METHOD(thread_exitcond_fu_60_p2);
    sensitive << ( size );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_42 );

    SC_METHOD(thread_i_3_fu_65_p2);
    sensitive << ( i_reg_42 );

    SC_METHOD(thread_notlhs_fu_89_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_75_p4 );

    SC_METHOD(thread_notrhs_fu_95_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_14_fu_85_p1 );

    SC_METHOD(thread_tmp_14_fu_85_p1);
    sensitive << ( x_load_to_int_fu_71_p1 );

    SC_METHOD(thread_tmp_3_fu_105_p2);
    sensitive << ( tmp_2_reg_138 );
    sensitive << ( tmp_s_fu_101_p2 );

    SC_METHOD(thread_tmp_fu_75_p4);
    sensitive << ( x_load_to_int_fu_71_p1 );

    SC_METHOD(thread_tmp_s_fu_101_p2);
    sensitive << ( notlhs_reg_128 );
    sensitive << ( notrhs_reg_133 );

    SC_METHOD(thread_x_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( x_addr_reg_123 );
    sensitive << ( i_reg_42 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_x_d0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_x_load_to_int_fu_71_p1);
    sensitive << ( x_q0 );

    SC_METHOD(thread_x_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_105_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_60_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "k2c_relu_func_3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_we0, "(port)x_we0");
    sc_trace(mVcdFile, x_d0, "(port)x_d0");
    sc_trace(mVcdFile, x_q0, "(port)x_q0");
    sc_trace(mVcdFile, size, "(port)size");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_3_fu_65_p2, "i_3_fu_65_p2");
    sc_trace(mVcdFile, i_3_reg_118, "i_3_reg_118");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, x_addr_reg_123, "x_addr_reg_123");
    sc_trace(mVcdFile, exitcond_fu_60_p2, "exitcond_fu_60_p2");
    sc_trace(mVcdFile, notlhs_fu_89_p2, "notlhs_fu_89_p2");
    sc_trace(mVcdFile, notlhs_reg_128, "notlhs_reg_128");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, notrhs_fu_95_p2, "notrhs_fu_95_p2");
    sc_trace(mVcdFile, notrhs_reg_133, "notrhs_reg_133");
    sc_trace(mVcdFile, tmp_2_fu_54_p2, "tmp_2_fu_54_p2");
    sc_trace(mVcdFile, tmp_2_reg_138, "tmp_2_reg_138");
    sc_trace(mVcdFile, i_reg_42, "i_reg_42");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_3_fu_105_p2, "tmp_3_fu_105_p2");
    sc_trace(mVcdFile, x_load_to_int_fu_71_p1, "x_load_to_int_fu_71_p1");
    sc_trace(mVcdFile, tmp_fu_75_p4, "tmp_fu_75_p4");
    sc_trace(mVcdFile, tmp_14_fu_85_p1, "tmp_14_fu_85_p1");
    sc_trace(mVcdFile, tmp_s_fu_101_p2, "tmp_s_fu_101_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

k2c_relu_func_3::~k2c_relu_func_3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete vlsiModel_fcmp_32lbW_U41;
}

void k2c_relu_func_3::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void k2c_relu_func_3::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv5_5;
}

void k2c_relu_func_3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_42 = i_3_reg_118.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_42 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_3_reg_118 = i_3_fu_65_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        notlhs_reg_128 = notlhs_fu_89_p2.read();
        notrhs_reg_133 = notrhs_fu_95_p2.read();
        tmp_2_reg_138 = tmp_2_fu_54_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_60_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        x_addr_reg_123 =  (sc_lv<7>) (i_reg_42.read());
    }
}

void k2c_relu_func_3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void k2c_relu_func_3::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void k2c_relu_func_3::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void k2c_relu_func_3::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void k2c_relu_func_3::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(exitcond_fu_60_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void k2c_relu_func_3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void k2c_relu_func_3::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond_fu_60_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void k2c_relu_func_3::thread_exitcond_fu_60_p2() {
    exitcond_fu_60_p2 = (!i_reg_42.read().is_01() || !size.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_42.read() == size.read());
}

void k2c_relu_func_3::thread_i_3_fu_65_p2() {
    i_3_fu_65_p2 = (!i_reg_42.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(i_reg_42.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void k2c_relu_func_3::thread_notlhs_fu_89_p2() {
    notlhs_fu_89_p2 = (!tmp_fu_75_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_75_p4.read() != ap_const_lv8_FF);
}

void k2c_relu_func_3::thread_notrhs_fu_95_p2() {
    notrhs_fu_95_p2 = (!tmp_14_fu_85_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_14_fu_85_p1.read() == ap_const_lv23_0);
}

void k2c_relu_func_3::thread_tmp_14_fu_85_p1() {
    tmp_14_fu_85_p1 = x_load_to_int_fu_71_p1.read().range(23-1, 0);
}

void k2c_relu_func_3::thread_tmp_3_fu_105_p2() {
    tmp_3_fu_105_p2 = (tmp_s_fu_101_p2.read() & tmp_2_reg_138.read());
}

void k2c_relu_func_3::thread_tmp_fu_75_p4() {
    tmp_fu_75_p4 = x_load_to_int_fu_71_p1.read().range(30, 23);
}

void k2c_relu_func_3::thread_tmp_s_fu_101_p2() {
    tmp_s_fu_101_p2 = (notrhs_reg_133.read() | notlhs_reg_128.read());
}

void k2c_relu_func_3::thread_x_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x_address0 = x_addr_reg_123.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_address0 =  (sc_lv<7>) (i_reg_42.read());
    } else {
        x_address0 = "XXXXXXX";
    }
}

void k2c_relu_func_3::thread_x_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void k2c_relu_func_3::thread_x_d0() {
    x_d0 = ap_const_lv32_0;
}

void k2c_relu_func_3::thread_x_load_to_int_fu_71_p1() {
    x_load_to_int_fu_71_p1 = x_q0.read();
}

void k2c_relu_func_3::thread_x_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(tmp_3_fu_105_p2.read(), ap_const_lv1_1))) {
        x_we0 = ap_const_logic_1;
    } else {
        x_we0 = ap_const_logic_0;
    }
}

void k2c_relu_func_3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_60_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

