// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_matmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_offset,
        outrows,
        outcols,
        innerdim
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output  [16:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [16:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
input  [63:0] B_offset;
input  [63:0] outrows;
input  [63:0] outcols;
input  [63:0] innerdim;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg A_ce0;
reg A_ce1;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_145_p2;
reg   [63:0] tmp_reg_303;
wire   [6:0] a10_fu_161_p2;
wire    ap_CS_fsm_state3;
wire  signed [7:0] tmp_48_fu_167_p1;
reg  signed [7:0] tmp_48_reg_316;
wire   [0:0] exitcond3_fu_156_p2;
wire  signed [17:0] tmp_49_fu_170_p1;
reg  signed [17:0] tmp_49_reg_321;
wire  signed [17:0] tmp_50_fu_173_p1;
reg  signed [17:0] tmp_50_reg_326;
wire   [17:0] tmp_51_fu_176_p1;
reg   [17:0] tmp_51_reg_331;
wire   [63:0] i_4_fu_192_p2;
reg   [63:0] i_4_reg_339;
wire    ap_CS_fsm_state4;
wire   [7:0] outrowidx_fu_198_p2;
reg   [7:0] outrowidx_reg_344;
wire   [0:0] exitcond2_fu_187_p2;
wire  signed [17:0] inneridx_fu_267_p2;
reg  signed [17:0] inneridx_reg_349;
wire   [63:0] k_2_fu_212_p2;
reg   [63:0] k_2_reg_357;
wire    ap_CS_fsm_state5;
reg   [16:0] B_addr_reg_362;
wire   [0:0] exitcond1_fu_207_p2;
wire  signed [17:0] grp_fu_272_p3;
reg  signed [17:0] tmp1_reg_367;
wire   [63:0] j_2_fu_241_p2;
reg   [63:0] j_2_reg_375;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_236_p2;
reg   [6:0] C_addr_4_reg_385;
reg   [31:0] B_load_4_reg_390;
wire    ap_CS_fsm_state7;
reg   [31:0] B_load_reg_395;
wire   [31:0] grp_fu_141_p2;
reg   [31:0] tmp_3_reg_400;
wire    ap_CS_fsm_state10;
reg   [31:0] C_load_reg_405;
wire   [31:0] grp_fu_137_p2;
reg   [31:0] tmp_5_reg_410;
wire    ap_CS_fsm_state15;
reg   [6:0] a_reg_93;
reg   [63:0] i_reg_104;
reg   [63:0] k_reg_115;
reg   [63:0] j_reg_126;
wire    ap_CS_fsm_state16;
wire   [63:0] a_cast_fu_151_p1;
wire   [63:0] sum_cast_fu_223_p1;
wire   [63:0] sum3_cast_fu_252_p1;
wire   [63:0] sum2_cast_fu_262_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state8;
wire  signed [63:0] tmp_48_fu_167_p0;
wire  signed [63:0] tmp_50_fu_173_p0;
wire  signed [63:0] exitcond2_fu_187_p1;
wire  signed [7:0] tmp_53_fu_183_p1;
wire  signed [17:0] tmp_54_fu_203_p1;
(* use_dsp48 = "no" *) wire   [17:0] sum_fu_218_p2;
wire  signed [63:0] exitcond_fu_236_p1;
wire   [17:0] tmp_56_fu_232_p1;
(* use_dsp48 = "no" *) wire   [17:0] sum3_fu_247_p2;
wire   [7:0] tmp_55_fu_228_p1;
wire   [7:0] sum2_fu_257_p2;
wire  signed [17:0] inneridx_fu_267_p0;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

vlsiModel_fadd_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
vlsiModel_fadd_32cud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_load_reg_405),
    .din1(tmp_3_reg_400),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

vlsiModel_fmul_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
vlsiModel_fmul_32dEe_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_load_4_reg_390),
    .din1(B_load_reg_395),
    .ce(1'b1),
    .dout(grp_fu_141_p2)
);

vlsiModel_mul_64sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
vlsiModel_mul_64sbkb_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(outcols),
    .din1(outrows),
    .ce(1'b1),
    .dout(grp_fu_145_p2)
);

vlsiModel_mul_muleOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
vlsiModel_mul_muleOg_U9(
    .din0(inneridx_fu_267_p0),
    .din1(tmp_49_reg_321),
    .dout(inneridx_fu_267_p2)
);

vlsiModel_mac_mulfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
vlsiModel_mac_mulfYi_U10(
    .din0(tmp_54_fu_203_p1),
    .din1(tmp_50_reg_326),
    .din2(tmp_51_reg_331),
    .dout(grp_fu_272_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        a_reg_93 <= a10_fu_161_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_reg_93 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_104 <= i_4_reg_339;
    end else if (((exitcond3_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_104 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_207_p2 == 1'd0))) begin
        j_reg_126 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        j_reg_126 <= j_2_reg_375;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        k_reg_115 <= k_2_reg_357;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_187_p2 == 1'd0))) begin
        k_reg_115 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_207_p2 == 1'd0))) begin
        B_addr_reg_362 <= sum_cast_fu_223_p1;
        tmp1_reg_367 <= grp_fu_272_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        B_load_4_reg_390 <= A_q0;
        B_load_reg_395 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_236_p2 == 1'd0))) begin
        C_addr_4_reg_385 <= sum2_cast_fu_262_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_load_reg_405 <= C_q0;
        tmp_3_reg_400 <= grp_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_4_reg_339 <= i_4_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_187_p2 == 1'd0))) begin
        inneridx_reg_349 <= inneridx_fu_267_p2;
        outrowidx_reg_344 <= outrowidx_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_2_reg_375 <= j_2_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_2_reg_357 <= k_2_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_48_reg_316 <= tmp_48_fu_167_p1;
        tmp_49_reg_321 <= tmp_49_fu_170_p1;
        tmp_50_reg_326 <= tmp_50_fu_173_p1;
        tmp_51_reg_331 <= tmp_51_fu_176_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_5_reg_410 <= grp_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_reg_303 <= grp_fu_145_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16))) begin
        C_address0 = C_addr_4_reg_385;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_address0 = a_cast_fu_151_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        C_d0 = tmp_5_reg_410;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_d0 = 32'd0;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((exitcond3_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond2_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond1_fu_207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = B_addr_reg_362;

assign A_address1 = sum3_cast_fu_252_p1;

assign a10_fu_161_p2 = (a_reg_93 + 7'd1);

assign a_cast_fu_151_p1 = a_reg_93;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_207_p2 = ((k_reg_115 == innerdim) ? 1'b1 : 1'b0);

assign exitcond2_fu_187_p1 = outrows;

assign exitcond2_fu_187_p2 = ((i_reg_104 == exitcond2_fu_187_p1) ? 1'b1 : 1'b0);

assign exitcond3_fu_156_p2 = ((a_cast_fu_151_p1 == tmp_reg_303) ? 1'b1 : 1'b0);

assign exitcond_fu_236_p1 = outcols;

assign exitcond_fu_236_p2 = ((j_reg_126 == exitcond_fu_236_p1) ? 1'b1 : 1'b0);

assign i_4_fu_192_p2 = (64'd1 + i_reg_104);

assign inneridx_fu_267_p0 = i_reg_104[17:0];

assign j_2_fu_241_p2 = (64'd1 + j_reg_126);

assign k_2_fu_212_p2 = (64'd1 + k_reg_115);

assign outrowidx_fu_198_p2 = ($signed(tmp_53_fu_183_p1) * $signed(tmp_48_reg_316));

assign sum2_cast_fu_262_p1 = sum2_fu_257_p2;

assign sum2_fu_257_p2 = (tmp_55_fu_228_p1 + outrowidx_reg_344);

assign sum3_cast_fu_252_p1 = sum3_fu_247_p2;

assign sum3_fu_247_p2 = ($signed(tmp1_reg_367) + $signed(tmp_56_fu_232_p1));

assign sum_cast_fu_223_p1 = sum_fu_218_p2;

assign sum_fu_218_p2 = ($signed(tmp_54_fu_203_p1) + $signed(inneridx_reg_349));

assign tmp_48_fu_167_p0 = outcols;

assign tmp_48_fu_167_p1 = tmp_48_fu_167_p0[7:0];

assign tmp_49_fu_170_p1 = innerdim[17:0];

assign tmp_50_fu_173_p0 = outcols;

assign tmp_50_fu_173_p1 = tmp_50_fu_173_p0[17:0];

assign tmp_51_fu_176_p1 = B_offset[17:0];

assign tmp_53_fu_183_p1 = i_reg_104[7:0];

assign tmp_54_fu_203_p1 = k_reg_115[17:0];

assign tmp_55_fu_228_p1 = j_reg_126[7:0];

assign tmp_56_fu_232_p1 = j_reg_126[17:0];

endmodule //k2c_matmul
