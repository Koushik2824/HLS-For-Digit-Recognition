// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_matmul_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_offset,
        outrows,
        outcols,
        innerdim
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output  [10:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [10:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
input  [63:0] B_offset;
input  [63:0] outrows;
input  [63:0] outcols;
input  [63:0] innerdim;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg A_ce0;
reg A_ce1;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_147_p2;
reg   [63:0] tmp_reg_305;
wire   [4:0] a10_fu_163_p2;
wire    ap_CS_fsm_state3;
wire  signed [5:0] tmp_30_fu_169_p1;
reg  signed [5:0] tmp_30_reg_318;
wire   [0:0] exitcond3_fu_158_p2;
wire  signed [11:0] tmp_31_fu_172_p1;
reg  signed [11:0] tmp_31_reg_323;
wire  signed [11:0] tmp_32_fu_175_p1;
reg  signed [11:0] tmp_32_reg_328;
wire   [11:0] tmp_33_fu_178_p1;
reg   [11:0] tmp_33_reg_333;
wire   [63:0] i_4_fu_194_p2;
reg   [63:0] i_4_reg_341;
wire    ap_CS_fsm_state4;
wire   [5:0] outrowidx_fu_200_p2;
reg   [5:0] outrowidx_reg_346;
wire   [0:0] exitcond2_fu_189_p2;
wire  signed [11:0] inneridx_fu_269_p2;
reg  signed [11:0] inneridx_reg_351;
wire   [63:0] k_2_fu_214_p2;
reg   [63:0] k_2_reg_359;
wire    ap_CS_fsm_state5;
reg   [10:0] B_addr_reg_364;
wire   [0:0] exitcond1_fu_209_p2;
wire  signed [11:0] grp_fu_274_p3;
reg  signed [11:0] tmp1_reg_369;
wire   [63:0] j_2_fu_243_p2;
reg   [63:0] j_2_reg_377;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_238_p2;
reg   [4:0] C_addr_2_reg_387;
reg   [31:0] B_load_2_reg_392;
wire    ap_CS_fsm_state7;
reg   [31:0] B_load_reg_397;
wire   [31:0] grp_fu_143_p2;
reg   [31:0] tmp_3_reg_402;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg   [4:0] a_reg_93;
reg   [63:0] i_reg_104;
reg   [63:0] k_reg_115;
reg   [63:0] j_reg_126;
wire    ap_CS_fsm_state15;
wire   [63:0] a_cast_fu_153_p1;
wire   [63:0] sum_cast_fu_225_p1;
wire   [63:0] sum3_cast_fu_254_p1;
wire   [63:0] sum2_cast_fu_264_p1;
wire   [31:0] grp_fu_137_p2;
wire    ap_CS_fsm_state8;
wire  signed [63:0] tmp_30_fu_169_p0;
wire  signed [63:0] tmp_32_fu_175_p0;
wire  signed [63:0] exitcond2_fu_189_p1;
wire  signed [5:0] tmp_35_fu_185_p1;
wire  signed [11:0] tmp_36_fu_205_p1;
(* use_dsp48 = "no" *) wire   [11:0] sum_fu_220_p2;
wire  signed [63:0] exitcond_fu_238_p1;
wire   [11:0] tmp_38_fu_234_p1;
(* use_dsp48 = "no" *) wire   [11:0] sum3_fu_249_p2;
wire   [5:0] tmp_37_fu_230_p1;
wire   [5:0] sum2_fu_259_p2;
wire  signed [11:0] inneridx_fu_269_p0;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

vlsiModel_fadd_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
vlsiModel_fadd_32cud_U126(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_q0),
    .din1(tmp_3_reg_402),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

vlsiModel_fmul_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
vlsiModel_fmul_32dEe_U127(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_load_2_reg_392),
    .din1(B_load_reg_397),
    .ce(1'b1),
    .dout(grp_fu_143_p2)
);

vlsiModel_mul_64sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
vlsiModel_mul_64sbkb_U128(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(outcols),
    .din1(outrows),
    .ce(1'b1),
    .dout(grp_fu_147_p2)
);

vlsiModel_mul_mulvdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
vlsiModel_mul_mulvdy_U129(
    .din0(inneridx_fu_269_p0),
    .din1(tmp_31_reg_323),
    .dout(inneridx_fu_269_p2)
);

vlsiModel_mac_mulwdI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
vlsiModel_mac_mulwdI_U130(
    .din0(tmp_36_fu_205_p1),
    .din1(tmp_32_reg_328),
    .din2(tmp_33_reg_333),
    .dout(grp_fu_274_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        a_reg_93 <= a10_fu_163_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_reg_93 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_104 <= i_4_reg_341;
    end else if (((exitcond3_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_104 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_209_p2 == 1'd0))) begin
        j_reg_126 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        j_reg_126 <= j_2_reg_377;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        k_reg_115 <= k_2_reg_359;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_189_p2 == 1'd0))) begin
        k_reg_115 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_209_p2 == 1'd0))) begin
        B_addr_reg_364 <= sum_cast_fu_225_p1;
        tmp1_reg_369 <= grp_fu_274_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        B_load_2_reg_392 <= A_q0;
        B_load_reg_397 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_238_p2 == 1'd0))) begin
        C_addr_2_reg_387 <= sum2_cast_fu_264_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_4_reg_341 <= i_4_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_189_p2 == 1'd0))) begin
        inneridx_reg_351 <= inneridx_fu_269_p2;
        outrowidx_reg_346 <= outrowidx_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_2_reg_377 <= j_2_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_2_reg_359 <= k_2_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_30_reg_318 <= tmp_30_fu_169_p1;
        tmp_31_reg_323 <= tmp_31_fu_172_p1;
        tmp_32_reg_328 <= tmp_32_fu_175_p1;
        tmp_33_reg_333 <= tmp_33_fu_178_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_3_reg_402 <= grp_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_reg_305 <= grp_fu_147_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        C_address0 = C_addr_2_reg_387;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_address0 = a_cast_fu_153_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        C_d0 = grp_fu_137_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_d0 = 32'd0;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((exitcond3_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond2_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond1_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = B_addr_reg_364;

assign A_address1 = sum3_cast_fu_254_p1;

assign a10_fu_163_p2 = (a_reg_93 + 5'd1);

assign a_cast_fu_153_p1 = a_reg_93;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign exitcond1_fu_209_p2 = ((k_reg_115 == innerdim) ? 1'b1 : 1'b0);

assign exitcond2_fu_189_p1 = outrows;

assign exitcond2_fu_189_p2 = ((i_reg_104 == exitcond2_fu_189_p1) ? 1'b1 : 1'b0);

assign exitcond3_fu_158_p2 = ((a_cast_fu_153_p1 == tmp_reg_305) ? 1'b1 : 1'b0);

assign exitcond_fu_238_p1 = outcols;

assign exitcond_fu_238_p2 = ((j_reg_126 == exitcond_fu_238_p1) ? 1'b1 : 1'b0);

assign i_4_fu_194_p2 = (64'd1 + i_reg_104);

assign inneridx_fu_269_p0 = i_reg_104[11:0];

assign j_2_fu_243_p2 = (64'd1 + j_reg_126);

assign k_2_fu_214_p2 = (64'd1 + k_reg_115);

assign outrowidx_fu_200_p2 = ($signed(tmp_35_fu_185_p1) * $signed(tmp_30_reg_318));

assign sum2_cast_fu_264_p1 = sum2_fu_259_p2;

assign sum2_fu_259_p2 = (tmp_37_fu_230_p1 + outrowidx_reg_346);

assign sum3_cast_fu_254_p1 = sum3_fu_249_p2;

assign sum3_fu_249_p2 = ($signed(tmp1_reg_369) + $signed(tmp_38_fu_234_p1));

assign sum_cast_fu_225_p1 = sum_fu_220_p2;

assign sum_fu_220_p2 = ($signed(tmp_36_fu_205_p1) + $signed(inneridx_reg_351));

assign tmp_30_fu_169_p0 = outcols;

assign tmp_30_fu_169_p1 = tmp_30_fu_169_p0[5:0];

assign tmp_31_fu_172_p1 = innerdim[11:0];

assign tmp_32_fu_175_p0 = outcols;

assign tmp_32_fu_175_p1 = tmp_32_fu_175_p0[11:0];

assign tmp_33_fu_178_p1 = B_offset[11:0];

assign tmp_35_fu_185_p1 = i_reg_104[5:0];

assign tmp_36_fu_205_p1 = k_reg_115[11:0];

assign tmp_37_fu_230_p1 = j_reg_126[5:0];

assign tmp_38_fu_234_p1 = j_reg_126[11:0];

endmodule //k2c_matmul_2
