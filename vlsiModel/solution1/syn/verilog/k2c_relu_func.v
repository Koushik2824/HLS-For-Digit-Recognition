// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_relu_func (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        x_q0,
        size
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] x_address0;
output   x_ce0;
output   x_we0;
output  [31:0] x_d0;
input  [31:0] x_q0;
input  [63:0] size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] x_address0;
reg x_ce0;
reg x_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] i_3_fu_65_p2;
reg   [63:0] i_3_reg_118;
wire    ap_CS_fsm_state2;
reg   [5:0] x_addr_reg_123;
wire   [0:0] exitcond_fu_60_p2;
wire   [0:0] notlhs_fu_89_p2;
reg   [0:0] notlhs_reg_128;
wire    ap_CS_fsm_state3;
wire   [0:0] notrhs_fu_95_p2;
reg   [0:0] notrhs_reg_133;
wire   [0:0] tmp_6_fu_54_p2;
reg   [0:0] tmp_6_reg_138;
reg   [63:0] i_reg_42;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_7_fu_105_p2;
wire   [31:0] x_load_to_int_fu_71_p1;
wire   [7:0] tmp_fu_75_p4;
wire   [22:0] tmp_20_fu_85_p1;
wire   [0:0] tmp_s_fu_101_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

vlsiModel_fcmp_32lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
vlsiModel_fcmp_32lbW_U98(
    .din0(x_q0),
    .din1(32'd0),
    .opcode(5'd5),
    .dout(tmp_6_fu_54_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_42 <= i_3_reg_118;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_42 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_118 <= i_3_fu_65_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        notlhs_reg_128 <= notlhs_fu_89_p2;
        notrhs_reg_133 <= notrhs_fu_95_p2;
        tmp_6_reg_138 <= tmp_6_fu_54_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_60_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_addr_reg_123 <= i_reg_42;
    end
end

always @ (*) begin
    if ((((exitcond_fu_60_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_60_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_address0 = x_addr_reg_123;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_address0 = i_reg_42;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_7_fu_105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_60_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign exitcond_fu_60_p2 = ((i_reg_42 == size) ? 1'b1 : 1'b0);

assign i_3_fu_65_p2 = (i_reg_42 + 64'd1);

assign notlhs_fu_89_p2 = ((tmp_fu_75_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_95_p2 = ((tmp_20_fu_85_p1 == 23'd0) ? 1'b1 : 1'b0);

assign tmp_20_fu_85_p1 = x_load_to_int_fu_71_p1[22:0];

assign tmp_7_fu_105_p2 = (tmp_s_fu_101_p2 & tmp_6_reg_138);

assign tmp_fu_75_p4 = {{x_load_to_int_fu_71_p1[30:23]}};

assign tmp_s_fu_101_p2 = (notrhs_reg_133 | notlhs_reg_128);

assign x_d0 = 32'd0;

assign x_load_to_int_fu_71_p1 = x_q0;

endmodule //k2c_relu_func
