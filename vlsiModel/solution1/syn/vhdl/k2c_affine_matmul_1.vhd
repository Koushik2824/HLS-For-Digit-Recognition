-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_affine_matmul_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    d_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    d_ce0 : OUT STD_LOGIC;
    d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outrows : IN STD_LOGIC_VECTOR (63 downto 0);
    outcols : IN STD_LOGIC_VECTOR (63 downto 0);
    innerdim : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of k2c_affine_matmul_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_315 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_1_fu_182_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_112_fu_188_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_112_reg_328 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_191_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_113_reg_333 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_114_fu_194_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_114_reg_338 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_66_fu_210_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_66_reg_346 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal outrowidx_fu_216_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal outrowidx_reg_351 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inneridx_fu_221_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal inneridx_reg_356 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_117_fu_226_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_117_reg_361 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_14_fu_239_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_14_reg_369 : STD_LOGIC_VECTOR (63 downto 0);
    signal C_addr_7_reg_374 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_268_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_3_reg_382 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_load_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal B_load_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_reg_104 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_115 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_126 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal k_reg_139 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_cast_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_cast_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_112_fu_188_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_114_fu_194_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_116_fu_201_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_115_fu_197_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_118_fu_230_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum2_fu_245_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_120_fu_259_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum5_fu_274_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_288_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_288_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component vlsiModel_fadd_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vlsiModel_fmul_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vlsiModel_mul_64sbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component vlsiModel_mac_mulwdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    vlsiModel_fadd_32cud_U159 : component vlsiModel_fadd_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_q0,
        din1 => grp_fu_150_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_150_p2);

    vlsiModel_fmul_32dEe_U160 : component vlsiModel_fmul_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_402,
        din1 => B_load_reg_407,
        ce => ap_const_logic_1,
        dout => grp_fu_157_p2);

    vlsiModel_mul_64sbkb_U161 : component vlsiModel_mul_64sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => outcols,
        din1 => outrows,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);

    vlsiModel_mac_mulwdI_U162 : component vlsiModel_mac_mulwdI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_288_p0,
        din1 => tmp_114_reg_338,
        din2 => tmp_117_reg_361,
        dout => grp_fu_288_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_234_p2 = ap_const_lv1_1))) then 
                i_reg_115 <= i_66_reg_346;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_177_p2 = ap_const_lv1_1))) then 
                i_reg_115 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                j_reg_126 <= j_14_reg_369;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_205_p2 = ap_const_lv1_0))) then 
                j_reg_126 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    k_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_234_p2 = ap_const_lv1_0))) then 
                k_reg_139 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                k_reg_139 <= k_3_reg_382;
            end if; 
        end if;
    end process;

    p_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_177_p2 = ap_const_lv1_0))) then 
                p_reg_104 <= p_1_fu_182_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_reg_104 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                A_load_reg_402 <= A_q0;
                B_load_reg_407 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_234_p2 = ap_const_lv1_0))) then
                C_addr_7_reg_374 <= sum2_cast_fu_250_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_66_reg_346 <= i_66_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_205_p2 = ap_const_lv1_0))) then
                inneridx_reg_356 <= inneridx_fu_221_p2;
                outrowidx_reg_351 <= outrowidx_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_14_reg_369 <= j_14_fu_239_p2;
                tmp_117_reg_361 <= tmp_117_fu_226_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_3_reg_382 <= k_3_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_177_p2 = ap_const_lv1_1))) then
                tmp_112_reg_328 <= tmp_112_fu_188_p1;
                tmp_113_reg_333 <= tmp_113_fu_191_p1;
                tmp_114_reg_338 <= tmp_114_fu_194_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_7_reg_412 <= grp_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_reg_315 <= grp_fu_166_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond3_fu_177_p2, ap_CS_fsm_state4, exitcond2_fu_205_p2, ap_CS_fsm_state5, exitcond1_fu_234_p2, ap_CS_fsm_state6, exitcond_fu_263_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_177_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_205_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_234_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_263_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= sum5_cast_fu_279_p1(6 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= sum8_cast_fu_284_p1(11 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(ap_CS_fsm_state3, C_addr_7_reg_374, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state20, ap_CS_fsm_state15, p_cast_fu_172_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            C_address0 <= C_addr_7_reg_374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_address0 <= p_cast_fu_172_p1(5 - 1 downto 0);
        else 
            C_address0 <= "XXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state20, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state20, ap_CS_fsm_state15, grp_fu_150_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            C_d0 <= grp_fu_150_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_d0 <= ap_const_lv32_0;
        else 
            C_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_we0_assign_proc : process(ap_CS_fsm_state3, exitcond3_fu_177_p2, ap_CS_fsm_state20, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_177_p2 = ap_const_lv1_0)))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond2_fu_205_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_205_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond2_fu_205_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_205_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_address0 <= j_reg_126(5 - 1 downto 0);

    d_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_ce0 <= ap_const_logic_1;
        else 
            d_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_234_p1 <= outcols;
    exitcond1_fu_234_p2 <= "1" when (j_reg_126 = exitcond1_fu_234_p1) else "0";
    exitcond2_fu_205_p1 <= outrows;
    exitcond2_fu_205_p2 <= "1" when (i_reg_115 = exitcond2_fu_205_p1) else "0";
    exitcond3_fu_177_p2 <= "1" when (p_cast_fu_172_p1 = tmp_reg_315) else "0";
    exitcond_fu_263_p2 <= "1" when (k_reg_139 = innerdim) else "0";

    grp_fu_150_p1_assign_proc : process(d_q0, ap_CS_fsm_state11, ap_CS_fsm_state16, tmp_7_reg_412)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_150_p1 <= d_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_150_p1 <= tmp_7_reg_412;
        else 
            grp_fu_150_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_288_p0 <= k_reg_139(12 - 1 downto 0);
    i_66_fu_210_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(i_reg_115));
    inneridx_fu_221_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_115_fu_197_p1) * signed(tmp_113_reg_333))), 7));
    j_14_fu_239_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(j_reg_126));
    k_3_fu_268_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(k_reg_139));
    outrowidx_fu_216_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_116_fu_201_p1) * signed(tmp_112_reg_328))), 6));
    p_1_fu_182_p2 <= std_logic_vector(unsigned(p_reg_104) + unsigned(ap_const_lv5_1));
    p_cast_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_reg_104),64));
    sum2_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_245_p2),64));
    sum2_fu_245_p2 <= std_logic_vector(unsigned(tmp_118_fu_230_p1) + unsigned(outrowidx_reg_351));
    sum5_cast_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_fu_274_p2),64));
    sum5_fu_274_p2 <= std_logic_vector(unsigned(tmp_120_fu_259_p1) + unsigned(inneridx_reg_356));
    sum8_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_288_p3),64));
    tmp_112_fu_188_p0 <= outcols;
    tmp_112_fu_188_p1 <= tmp_112_fu_188_p0(6 - 1 downto 0);
    tmp_113_fu_191_p1 <= innerdim(7 - 1 downto 0);
    tmp_114_fu_194_p0 <= outcols;
    tmp_114_fu_194_p1 <= tmp_114_fu_194_p0(12 - 1 downto 0);
    tmp_115_fu_197_p1 <= i_reg_115(7 - 1 downto 0);
    tmp_116_fu_201_p1 <= i_reg_115(6 - 1 downto 0);
    tmp_117_fu_226_p1 <= j_reg_126(12 - 1 downto 0);
    tmp_118_fu_230_p1 <= j_reg_126(6 - 1 downto 0);
    tmp_120_fu_259_p1 <= k_reg_139(7 - 1 downto 0);
end behav;
