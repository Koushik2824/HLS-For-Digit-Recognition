-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity k2c_dense_3_denseudo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 50
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of k2c_dense_3_denseudo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110111100001010000101100", 
    1 => "00111101100001110101001011000101", 
    2 => "00111011111110111110101011001000", 
    3 => "00111101010010101001011001100101", 
    4 => "00111101110011010000010101101100", 
    5 => "00111011101011111100011101011101", 
    6 => "00111101011111001110011011100011", 
    7 => "10111100110011101100111111110111", 
    8 => "00111110001010111010001010010100", 
    9 => "10111110000010011100110011100110", 
    10 => "00111101001000110100000001001100", 
    11 => "00111110000000111101011101010100", 
    12 => "00111101110011100000010110010101", 
    13 => "00111101100100101110000011011000", 
    14 => "00111110000100011000100001101011", 
    15 => "00111110001011000001001100101000", 
    16 => "00111011100111100000001100011001", 
    17 => "10111101001011111111011001111101", 
    18 => "10111011010001001011110011110010", 
    19 => "10111101011000010011001111010110", 
    20 => "00111101100010000111101000110000", 
    21 => "10111100011101100101100111001001", 
    22 => "00111101100011000001111111001111", 
    23 => "00111011011010100011111011000010", 
    24 => "00111110001001110010100110101100", 
    25 => "00111100100010010000111000000001", 
    26 => "10111101001011101000100110001011", 
    27 => "00111100110101110111011110010010", 
    28 => "00111101000101010100000001111010", 
    29 => "10111101100000111110011001000001", 
    30 => "00111101001001011111100101100000", 
    31 => "10111100101101111110100000110101", 
    32 => "00111101101111011100011011110100", 
    33 => "00111100010110000001010000000111", 
    34 => "10111100110101010100000000011001", 
    35 => "00111101101011001001111110010110", 
    36 => "10111101010010101001100010111001", 
    37 => "00111100110000110001111010001001", 
    38 => "10111100101101000101001000100100", 
    39 => "00111101101010100111001111100111", 
    40 => "00111101100110100010001011100010", 
    41 => "00111101011111101001011000011001", 
    42 => "00111101010011110000111011111110", 
    43 => "00111101100110110010000011011000", 
    44 => "00111101000100110001110001010001", 
    45 => "10111101001110110100110010010010", 
    46 => "00111101101111100001010010110010", 
    47 => "10111101001100001010100000001011", 
    48 => "00111101110101100101100000010011", 
    49 => "00111101111101000110100011011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity k2c_dense_3_denseudo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 50;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of k2c_dense_3_denseudo is
    component k2c_dense_3_denseudo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    k2c_dense_3_denseudo_rom_U :  component k2c_dense_3_denseudo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


