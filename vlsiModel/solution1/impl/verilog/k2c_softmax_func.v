// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_softmax_func (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        x_q0,
        size
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_state41 = 45'd1099511627776;
parameter    ap_ST_fsm_state42 = 45'd2199023255552;
parameter    ap_ST_fsm_state43 = 45'd4398046511104;
parameter    ap_ST_fsm_state44 = 45'd8796093022208;
parameter    ap_ST_fsm_state45 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] x_address0;
output   x_ce0;
output   x_we0;
output  [31:0] x_d0;
input  [31:0] x_q0;
input  [63:0] size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[16:0] x_address0;
reg x_ce0;
reg x_we0;
reg[31:0] x_d0;

(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_175;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state41;
wire   [31:0] grp_fu_149_p2;
reg   [31:0] reg_183;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state28;
wire   [63:0] i_2_fu_194_p2;
reg   [63:0] i_2_reg_354;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_189_p2;
reg   [31:0] xmax_2_reg_364;
wire    ap_CS_fsm_state4;
wire   [31:0] xmax_1_fu_283_p3;
wire    ap_CS_fsm_state5;
wire   [16:0] j_1_fu_300_p2;
reg   [16:0] j_1_reg_379;
wire    ap_CS_fsm_state6;
reg   [16:0] x_addr_2_reg_384;
wire   [0:0] exitcond2_fu_295_p2;
wire   [31:0] grp_fu_170_p2;
reg   [31:0] tmp_1_reg_389;
wire    ap_CS_fsm_state20;
wire   [16:0] k_1_fu_316_p2;
reg   [16:0] k_1_reg_397;
wire    ap_CS_fsm_state22;
wire   [0:0] exitcond1_fu_311_p2;
wire   [31:0] grp_fu_159_p2;
reg   [31:0] sum_1_reg_407;
wire    ap_CS_fsm_state39;
wire   [16:0] l_1_fu_332_p2;
reg   [16:0] l_1_reg_415;
wire    ap_CS_fsm_state40;
reg   [16:0] x_addr_4_reg_420;
wire   [0:0] exitcond_fu_327_p2;
wire   [31:0] grp_fu_155_p2;
reg   [31:0] tmp_2_reg_425;
wire    ap_CS_fsm_state44;
reg   [63:0] i_reg_82;
reg   [31:0] xmax1_reg_94;
reg   [16:0] j_reg_104;
wire    ap_CS_fsm_state21;
reg   [31:0] sum_reg_115;
reg   [16:0] k_reg_127;
reg   [16:0] l_reg_138;
wire    ap_CS_fsm_state45;
wire   [63:0] j_cast_fu_290_p1;
wire   [63:0] k_cast_fu_306_p1;
wire   [63:0] l_cast_fu_322_p1;
reg   [31:0] grp_fu_149_p0;
reg   [31:0] grp_fu_149_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state13;
wire   [31:0] xmax_2_to_int_fu_200_p1;
wire   [31:0] xmax1_to_int_fu_217_p1;
wire   [7:0] tmp_fu_203_p4;
wire   [22:0] tmp_3_fu_213_p1;
wire   [0:0] notrhs_fu_241_p2;
wire   [0:0] notlhs_fu_235_p2;
wire   [7:0] tmp_4_fu_221_p4;
wire   [22:0] tmp_5_fu_231_p1;
wire   [0:0] notrhs2_fu_259_p2;
wire   [0:0] notlhs1_fu_253_p2;
wire   [0:0] tmp_6_fu_247_p2;
wire   [0:0] tmp_7_fu_265_p2;
wire   [0:0] tmp_8_fu_271_p2;
wire   [0:0] tmp_9_fu_165_p2;
wire   [0:0] tmp_10_fu_277_p2;
reg   [1:0] grp_fu_149_opcode;
reg   [44:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
end

vlsiModel_faddfsuudo #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
vlsiModel_faddfsuudo_U190(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_149_p0),
    .din1(grp_fu_149_p1),
    .opcode(grp_fu_149_opcode),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

vlsiModel_fmul_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
vlsiModel_fmul_32dEe_U191(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_175),
    .din1(sum_1_reg_407),
    .ce(1'b1),
    .dout(grp_fu_155_p2)
);

vlsiModel_fdiv_32vdy #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
vlsiModel_fdiv_32vdy_U192(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1065353216),
    .din1(sum_reg_115),
    .ce(1'b1),
    .dout(grp_fu_159_p2)
);

vlsiModel_fcmp_32kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
vlsiModel_fcmp_32kbM_U193(
    .din0(xmax_2_reg_364),
    .din1(xmax1_reg_94),
    .opcode(5'd2),
    .dout(tmp_9_fu_165_p2)
);

vlsiModel_fexp_32wdI #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
vlsiModel_fexp_32wdI_U194(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(reg_183),
    .ce(1'b1),
    .dout(grp_fu_170_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_82 <= i_2_reg_354;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_82 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_189_p2 == 1'd1))) begin
        j_reg_104 <= 17'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        j_reg_104 <= j_1_reg_379;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond2_fu_295_p2 == 1'd1))) begin
        k_reg_127 <= 17'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        k_reg_127 <= k_1_reg_397;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        l_reg_138 <= l_1_reg_415;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        l_reg_138 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond2_fu_295_p2 == 1'd1))) begin
        sum_reg_115 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        sum_reg_115 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xmax1_reg_94 <= xmax_1_fu_283_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xmax1_reg_94 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_2_reg_354 <= i_2_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_1_reg_379 <= j_1_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        k_1_reg_397 <= k_1_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        l_1_reg_415 <= l_1_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_175 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_183 <= grp_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        sum_1_reg_407 <= grp_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_1_reg_389 <= grp_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        tmp_2_reg_425 <= grp_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond2_fu_295_p2 == 1'd0))) begin
        x_addr_2_reg_384 <= j_cast_fu_290_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (exitcond_fu_327_p2 == 1'd0))) begin
        x_addr_4_reg_420 <= l_cast_fu_322_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xmax_2_reg_364 <= x_q0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state40) & (exitcond_fu_327_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) & (exitcond_fu_327_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_149_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_149_opcode = 2'd0;
    end else begin
        grp_fu_149_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_149_p0 = sum_reg_115;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_149_p0 = reg_175;
    end else begin
        grp_fu_149_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_149_p1 = reg_175;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_149_p1 = xmax1_reg_94;
    end else begin
        grp_fu_149_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        x_address0 = x_addr_4_reg_420;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        x_address0 = l_cast_fu_322_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        x_address0 = k_cast_fu_306_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        x_address0 = x_addr_2_reg_384;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_address0 = j_cast_fu_290_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address0 = i_reg_82;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_address0 = 64'd0;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        x_d0 = tmp_2_reg_425;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        x_d0 = tmp_1_reg_389;
    end else begin
        x_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state21))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_189_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond2_fu_295_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (exitcond1_fu_311_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (exitcond_fu_327_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign exitcond1_fu_311_p2 = ((k_cast_fu_306_p1 == size) ? 1'b1 : 1'b0);

assign exitcond2_fu_295_p2 = ((j_cast_fu_290_p1 == size) ? 1'b1 : 1'b0);

assign exitcond3_fu_189_p2 = ((i_reg_82 == size) ? 1'b1 : 1'b0);

assign exitcond_fu_327_p2 = ((l_cast_fu_322_p1 == size) ? 1'b1 : 1'b0);

assign i_2_fu_194_p2 = (i_reg_82 + 64'd1);

assign j_1_fu_300_p2 = (j_reg_104 + 17'd1);

assign j_cast_fu_290_p1 = j_reg_104;

assign k_1_fu_316_p2 = (k_reg_127 + 17'd1);

assign k_cast_fu_306_p1 = k_reg_127;

assign l_1_fu_332_p2 = (l_reg_138 + 17'd1);

assign l_cast_fu_322_p1 = l_reg_138;

assign notlhs1_fu_253_p2 = ((tmp_4_fu_221_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_235_p2 = ((tmp_fu_203_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs2_fu_259_p2 = ((tmp_5_fu_231_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_241_p2 = ((tmp_3_fu_213_p1 == 23'd0) ? 1'b1 : 1'b0);

assign tmp_10_fu_277_p2 = (tmp_9_fu_165_p2 & tmp_8_fu_271_p2);

assign tmp_3_fu_213_p1 = xmax_2_to_int_fu_200_p1[22:0];

assign tmp_4_fu_221_p4 = {{xmax1_to_int_fu_217_p1[30:23]}};

assign tmp_5_fu_231_p1 = xmax1_to_int_fu_217_p1[22:0];

assign tmp_6_fu_247_p2 = (notrhs_fu_241_p2 | notlhs_fu_235_p2);

assign tmp_7_fu_265_p2 = (notrhs2_fu_259_p2 | notlhs1_fu_253_p2);

assign tmp_8_fu_271_p2 = (tmp_7_fu_265_p2 & tmp_6_fu_247_p2);

assign tmp_fu_203_p4 = {{xmax_2_to_int_fu_200_p1[30:23]}};

assign xmax1_to_int_fu_217_p1 = xmax1_reg_94;

assign xmax_1_fu_283_p3 = ((tmp_10_fu_277_p2[0:0] === 1'b1) ? xmax_2_reg_364 : xmax1_reg_94);

assign xmax_2_to_int_fu_200_p1 = xmax_2_reg_364;

endmodule //k2c_softmax_func
