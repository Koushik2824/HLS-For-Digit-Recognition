// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_affine_matmul_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        d_address0,
        d_ce0,
        d_q0,
        outrows,
        outcols,
        innerdim
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output  [5:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [10:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [4:0] d_address0;
output   d_ce0;
input  [31:0] d_q0;
input  [63:0] outrows;
input  [63:0] outcols;
input  [63:0] innerdim;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg A_ce0;
reg B_ce0;
reg d_ce0;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_166_p2;
reg   [63:0] tmp_reg_315;
wire   [4:0] p_1_fu_182_p2;
wire    ap_CS_fsm_state3;
wire  signed [5:0] tmp_112_fu_188_p1;
reg  signed [5:0] tmp_112_reg_328;
wire   [0:0] exitcond3_fu_177_p2;
wire  signed [6:0] tmp_113_fu_191_p1;
reg  signed [6:0] tmp_113_reg_333;
wire  signed [11:0] tmp_114_fu_194_p1;
reg  signed [11:0] tmp_114_reg_338;
wire   [63:0] i_66_fu_210_p2;
reg   [63:0] i_66_reg_346;
wire    ap_CS_fsm_state4;
wire   [5:0] outrowidx_fu_216_p2;
reg   [5:0] outrowidx_reg_351;
wire   [0:0] exitcond2_fu_205_p2;
wire   [6:0] inneridx_fu_221_p2;
reg   [6:0] inneridx_reg_356;
wire   [11:0] tmp_117_fu_226_p1;
reg   [11:0] tmp_117_reg_361;
wire    ap_CS_fsm_state5;
wire   [63:0] j_14_fu_239_p2;
reg   [63:0] j_14_reg_369;
reg   [4:0] C_addr_7_reg_374;
wire   [0:0] exitcond1_fu_234_p2;
wire   [63:0] k_3_fu_268_p2;
reg   [63:0] k_3_reg_382;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_263_p2;
reg   [31:0] A_load_reg_402;
wire    ap_CS_fsm_state7;
reg   [31:0] B_load_reg_407;
wire   [31:0] grp_fu_157_p2;
reg   [31:0] tmp_7_reg_412;
wire    ap_CS_fsm_state10;
reg   [4:0] p_reg_104;
reg   [63:0] i_reg_115;
reg   [63:0] j_reg_126;
wire    ap_CS_fsm_state20;
reg   [63:0] k_reg_139;
wire    ap_CS_fsm_state15;
wire   [63:0] p_cast_fu_172_p1;
wire   [63:0] sum2_cast_fu_250_p1;
wire   [63:0] sum5_cast_fu_279_p1;
wire   [63:0] sum8_cast_fu_284_p1;
wire   [31:0] grp_fu_150_p2;
reg   [31:0] grp_fu_150_p1;
wire    ap_CS_fsm_state8;
wire  signed [63:0] tmp_112_fu_188_p0;
wire  signed [63:0] tmp_114_fu_194_p0;
wire  signed [63:0] exitcond2_fu_205_p1;
wire  signed [5:0] tmp_116_fu_201_p1;
wire  signed [6:0] tmp_115_fu_197_p1;
wire  signed [63:0] exitcond1_fu_234_p1;
wire   [5:0] tmp_118_fu_230_p1;
wire   [5:0] sum2_fu_245_p2;
wire   [6:0] tmp_120_fu_259_p1;
wire   [6:0] sum5_fu_274_p2;
wire  signed [11:0] grp_fu_288_p3;
wire  signed [11:0] grp_fu_288_p0;
reg   [19:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
end

vlsiModel_fadd_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
vlsiModel_fadd_32cud_U159(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_q0),
    .din1(grp_fu_150_p1),
    .ce(1'b1),
    .dout(grp_fu_150_p2)
);

vlsiModel_fmul_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
vlsiModel_fmul_32dEe_U160(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_402),
    .din1(B_load_reg_407),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

vlsiModel_mul_64sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
vlsiModel_mul_64sbkb_U161(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(outcols),
    .din1(outrows),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

vlsiModel_mac_mulwdI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
vlsiModel_mac_mulwdI_U162(
    .din0(grp_fu_288_p0),
    .din1(tmp_114_reg_338),
    .din2(tmp_117_reg_361),
    .dout(grp_fu_288_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_234_p2 == 1'd1))) begin
        i_reg_115 <= i_66_reg_346;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_177_p2 == 1'd1))) begin
        i_reg_115 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j_reg_126 <= j_14_reg_369;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_205_p2 == 1'd0))) begin
        j_reg_126 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_234_p2 == 1'd0))) begin
        k_reg_139 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        k_reg_139 <= k_3_reg_382;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_177_p2 == 1'd0))) begin
        p_reg_104 <= p_1_fu_182_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_reg_104 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        A_load_reg_402 <= A_q0;
        B_load_reg_407 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_234_p2 == 1'd0))) begin
        C_addr_7_reg_374 <= sum2_cast_fu_250_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_66_reg_346 <= i_66_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_205_p2 == 1'd0))) begin
        inneridx_reg_356 <= inneridx_fu_221_p2;
        outrowidx_reg_351 <= outrowidx_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_14_reg_369 <= j_14_fu_239_p2;
        tmp_117_reg_361 <= tmp_117_fu_226_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_3_reg_382 <= k_3_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_177_p2 == 1'd1))) begin
        tmp_112_reg_328 <= tmp_112_fu_188_p1;
        tmp_113_reg_333 <= tmp_113_fu_191_p1;
        tmp_114_reg_338 <= tmp_114_fu_194_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_7_reg_412 <= grp_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_reg_315 <= grp_fu_166_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        C_address0 = C_addr_7_reg_374;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_address0 = p_cast_fu_172_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state20))) begin
        C_d0 = grp_fu_150_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_d0 = 32'd0;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state20) | ((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_177_p2 == 1'd0)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_205_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_205_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        d_ce0 = 1'b1;
    end else begin
        d_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_150_p1 = d_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_150_p1 = tmp_7_reg_412;
    end else begin
        grp_fu_150_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_177_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_205_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_234_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_263_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = sum5_cast_fu_279_p1;

assign B_address0 = sum8_cast_fu_284_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign d_address0 = j_reg_126;

assign exitcond1_fu_234_p1 = outcols;

assign exitcond1_fu_234_p2 = ((j_reg_126 == exitcond1_fu_234_p1) ? 1'b1 : 1'b0);

assign exitcond2_fu_205_p1 = outrows;

assign exitcond2_fu_205_p2 = ((i_reg_115 == exitcond2_fu_205_p1) ? 1'b1 : 1'b0);

assign exitcond3_fu_177_p2 = ((p_cast_fu_172_p1 == tmp_reg_315) ? 1'b1 : 1'b0);

assign exitcond_fu_263_p2 = ((k_reg_139 == innerdim) ? 1'b1 : 1'b0);

assign grp_fu_288_p0 = k_reg_139[11:0];

assign i_66_fu_210_p2 = (64'd1 + i_reg_115);

assign inneridx_fu_221_p2 = ($signed(tmp_115_fu_197_p1) * $signed(tmp_113_reg_333));

assign j_14_fu_239_p2 = (64'd1 + j_reg_126);

assign k_3_fu_268_p2 = (64'd1 + k_reg_139);

assign outrowidx_fu_216_p2 = ($signed(tmp_116_fu_201_p1) * $signed(tmp_112_reg_328));

assign p_1_fu_182_p2 = (p_reg_104 + 5'd1);

assign p_cast_fu_172_p1 = p_reg_104;

assign sum2_cast_fu_250_p1 = sum2_fu_245_p2;

assign sum2_fu_245_p2 = (tmp_118_fu_230_p1 + outrowidx_reg_351);

assign sum5_cast_fu_279_p1 = sum5_fu_274_p2;

assign sum5_fu_274_p2 = (tmp_120_fu_259_p1 + inneridx_reg_356);

assign sum8_cast_fu_284_p1 = $unsigned(grp_fu_288_p3);

assign tmp_112_fu_188_p0 = outcols;

assign tmp_112_fu_188_p1 = tmp_112_fu_188_p0[5:0];

assign tmp_113_fu_191_p1 = innerdim[6:0];

assign tmp_114_fu_194_p0 = outcols;

assign tmp_114_fu_194_p1 = tmp_114_fu_194_p0[11:0];

assign tmp_115_fu_197_p1 = i_reg_115[6:0];

assign tmp_116_fu_201_p1 = i_reg_115[5:0];

assign tmp_117_fu_226_p1 = j_reg_126[11:0];

assign tmp_118_fu_230_p1 = j_reg_126[5:0];

assign tmp_120_fu_259_p1 = k_reg_139[6:0];

endmodule //k2c_affine_matmul_1
